(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
typeof define === 'function' && define.amd ? define(factory) :
(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Tangram = factory());
})(this, (function () { 'use strict';

// define() gets called for each chunk generated by the first Rollup pass.
            // The order the chunks are called in is controlled by the imports in bundle.js:
            //
            // shared.js: shared dependencies between main and worker threads
            // scene_worker.js: worker thread code
            // index.js: main thread code

            // Once all chunks have been provided, the worker thread code is assembled,
            // incorporating the shared chunk code, then turned into a blob URL which
            // can be used to instantiate the worker.

            var shared, worker, Tangram = {};

            function define(_, chunk) {
                    if (!shared) {
                        shared = chunk;
                    } else if (!worker) {
                        worker = chunk;
                    } else {
                        var worker_bundle = 'var shared_chunk = {}; (' + shared + ')(shared_chunk); (' + worker + ')(shared_chunk);'
                        var shared_chunk = {};
                        shared(shared_chunk);
                        Tangram = chunk(shared_chunk);
                        Tangram.workerURL = window.URL.createObjectURL(new Blob([worker_bundle], { type: 'text/javascript' }));
                    }
            }
        

define(['exports'], (function (exports) { 'use strict';

function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _arrayLikeToArray$1(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}

function _unsupportedIterableToArray$1(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray$1(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0;
  }
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray$1(r, e) || _nonIterableRest();
}

/*jshint worker: true*/

// Mark thread as main or worker
var Thread = {};
try {
  if (window instanceof Window && window.document instanceof HTMLDocument) {
    // jshint ignore:line
    Thread.is_worker = false;
    Thread.is_main = true;
  }
} catch (e) {
  Thread.is_worker = true;
  Thread.is_main = false;

  // Patch for 3rd party libs that require these globals to be present. Specifically, FontFaceObserver.
  // Brittle solution but allows that library to load on worker threads.
  self.window = {
    document: {}
  };
  self.document = self.window.document;
}

function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}

function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray$1(r);
}

function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray$1(r) || _nonIterableSpread();
}

function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}

function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}

var version$1 = "0.22.0";

var version = 'v' + version$1;

function _isNativeReflectConstruct$b() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct$b = function _isNativeReflectConstruct() {
    return !!t;
  })();
}

function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}

function _construct(t, e, r) {
  if (_isNativeReflectConstruct$b()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf(p, r.prototype), p;
}

var WorkerBroker;
var WorkerBroker$1 = WorkerBroker = {};

// Global list of all worker messages
// Uniquely tracks every call made between main thread and a worker
var message_id = 0;
var messages = {};

// Register an object to receive calls from other thread
WorkerBroker.targets = {};
WorkerBroker.addTarget = function (name, target) {
  WorkerBroker.targets[name] = target;
};
WorkerBroker.removeTarget = function (name) {
  if (name) {
    delete WorkerBroker.targets[name];
  }
};

// Given a dot-notation-style method name, e.g. 'Object.object.method',
// find the object to call the method on from the list of registered targets
function findTarget(method) {
  var chain = [];
  if (typeof method === 'string') {
    chain = method.split('.');
    method = chain.pop();
  }
  var target = WorkerBroker.targets;
  for (var m = 0; m < chain.length; m++) {
    if (target[chain[m]]) {
      target = target[chain[m]];
    } else {
      return [];
    }
  }
  return [method, target];
}

// Main thread:
// - Send messages to workers, and optionally receive an async response as a promise
// - Receive messages from workers, and optionally send an async response back as a promise
function setupMainThread() {
  // Send a message to a worker, and optionally get an async response
  // Arguments:
  //   - worker: one or more web worker instances to send the message to (single value or array)
  //   - method: the method with this name, specified with dot-notation, will be invoked in the worker
  //   - message: spread of arguments to call the method with
  // Returns:
  //   - a promise that will be fulfilled if the worker method returns a value (could be immediately, or async)
  //
  WorkerBroker.postMessage = function (worker, method) {
    for (var _len = arguments.length, message = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      message[_key - 2] = arguments[_key];
    }
    // If more than one worker specified, post to multiple
    if (Array.isArray(worker)) {
      return Promise.all(worker.map(function (w) {
        var _WorkerBroker;
        return (_WorkerBroker = WorkerBroker).postMessage.apply(_WorkerBroker, [w, method].concat(_toConsumableArray(message)));
      }));
    }

    // Parse options
    var options = {};
    if (_typeof(method) === 'object') {
      options = method;
      method = method.method;
    }

    // Track state of this message
    var promise = new Promise(function (resolve, reject) {
      messages[message_id] = {
        method: method,
        message: message,
        resolve: resolve,
        reject: reject
      };
    });
    var payload,
      transferables = [];
    if (message && message.length === 1 && message[0] instanceof WorkerBroker.withTransferables) {
      transferables = message[0].transferables;
      message = message[0].value;
    }
    payload = {
      type: 'main_send',
      // mark message as method invocation from main thread
      message_id: message_id,
      // unique id for this message, for life of program
      method: method,
      // will dispatch to a function of this name within the worker
      message: message // message payload
    };
    if (options.stringify) {
      payload = JSON.stringify(payload);
    }
    worker.postMessage(payload, transferables.map(function (t) {
      return t.object;
    }));
    freeTransferables(transferables);
    if (transferables.length > 0) {
      log('trace', "'".concat(method, "' transferred ").concat(transferables.length, " objects to worker thread"));
    }
    message_id++;
    return promise;
  };

  // Add a worker to communicate with - each worker must be registered from the main thread
  WorkerBroker.addWorker = function (worker) {
    if (!(worker instanceof Worker)) {
      throw Error('Worker broker could not add non-Worker object', worker);
    }
    worker.addEventListener('message', function WorkerBrokerMainThreadHandler(event) {
      var data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;
      var id = data.message_id;

      // Listen for messages coming back from the worker, and fulfill that message's promise
      if (data.type === 'worker_reply') {
        // Pass the result to the promise
        if (messages[id]) {
          if (data.error) {
            messages[id].reject(data.error);
          } else {
            messages[id].resolve(data.message);
          }
          delete messages[id];
        }
      }
      // Listen for messages initiating a call from the worker, dispatch them,
      // and send any return value back to the worker
      // Unique id for this message & return call to main thread
      else if (data.type === 'worker_send' && id != null) {
        // Call the requested method and save the return value
        var result, error, target, method_name, method;
        try {
          var _findTarget = findTarget(data.method);
          var _findTarget2 = _slicedToArray(_findTarget, 2);
          method_name = _findTarget2[0];
          target = _findTarget2[1];
          if (!target) {
            throw Error("Worker broker could not dispatch message type ".concat(data.method, " on target ").concat(data.target, " because no object with that name is registered on main thread"));
          }
          method = typeof target[method_name] === 'function' && target[method_name];
          if (!method) {
            throw Error("Worker broker could not dispatch message type ".concat(data.method, " on target ").concat(data.target, " because object has no method with that name"));
          }
          result = method.apply(target, data.message);
        } catch (e) {
          // Thrown errors will be passed back (in string form) to worker
          error = e;
        }
        // Send return value to worker
        var payload,
          transferables = [];

        // Async result
        if (result instanceof Promise) {
          result.then(function (value) {
            if (value instanceof WorkerBroker.withTransferables) {
              transferables = value.transferables;
              value = value.value[0];
            }
            payload = {
              type: 'main_reply',
              message_id: id,
              message: value
            };
            worker.postMessage(payload, transferables.map(function (t) {
              return t.object;
            }));
            freeTransferables(transferables);
            if (transferables.length > 0) {
              log('trace', "'".concat(method_name, "' transferred ").concat(transferables.length, " objects to worker thread"));
            }
          }, function (error) {
            worker.postMessage({
              type: 'main_reply',
              message_id: id,
              error: error instanceof Error ? "".concat(error.message, ": ").concat(error.stack) : error
            });
          });
        }
        // Immediate result
        else {
          if (result instanceof WorkerBroker.withTransferables) {
            transferables = result.transferables;
            result = result.value[0];
          }
          payload = {
            type: 'main_reply',
            message_id: id,
            message: result,
            error: error instanceof Error ? "".concat(error.message, ": ").concat(error.stack) : error
          };
          worker.postMessage(payload, transferables.map(function (t) {
            return t.object;
          }));
          freeTransferables(transferables);
          if (transferables.length > 0) {
            log('trace', "'".concat(method_name, "' transferred ").concat(transferables.length, " objects to worker thread"));
          }
        }
      }
    });
  };

  // Expose for debugging
  WorkerBroker.getMessages = function () {
    return messages;
  };
  WorkerBroker.getMessageId = function () {
    return message_id;
  };
}

// Worker threads:
// - Receive messages from main thread, and optionally send an async response back as a promise
// - Send messages to main thread, and optionally receive an async response as a promise
function setupWorkerThread() {
  // Send a message to the main thread, and optionally get an async response as a promise
  // Arguments:
  //   - method: the method with this name, specified with dot-notation, will be invoked on the main thread
  //   - message: array of arguments to call the method with
  // Returns:
  //   - a promise that will be fulfilled if the main thread method returns a value (could be immediately, or async)
  //
  WorkerBroker.postMessage = function (method) {
    for (var _len2 = arguments.length, message = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      message[_key2 - 1] = arguments[_key2];
    }
    // Parse options
    var options = {};
    if (_typeof(method) === 'object') {
      options = method;
      method = method.method;
    }

    // Track state of this message
    var promise = new Promise(function (resolve, reject) {
      messages[message_id] = {
        method: method,
        message: message,
        resolve: resolve,
        reject: reject
      };
    });
    var payload,
      transferables = [];
    if (message && message.length === 1 && message[0] instanceof WorkerBroker.withTransferables) {
      transferables = message[0].transferables;
      message = message[0].value;
    }
    payload = {
      type: 'worker_send',
      // mark message as method invocation from worker
      message_id: message_id,
      // unique id for this message, for life of program
      method: method,
      // will dispatch to a method of this name on the main thread
      message: message // message payload
    };
    if (options.stringify) {
      payload = JSON.stringify(payload);
    }
    self.postMessage(payload, transferables.map(function (t) {
      return t.object;
    }));
    freeTransferables(transferables);
    if (transferables.length > 0) {
      log('trace', "'".concat(method, "' transferred ").concat(transferables.length, " objects to main thread"));
    }
    message_id++;
    return promise;
  };
  self.addEventListener('message', function WorkerBrokerWorkerThreadHandler(event) {
    var data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;
    var id = data.message_id;

    // Listen for messages coming back from the main thread, and fulfill that message's promise
    if (data.type === 'main_reply') {
      // Pass the result to the promise
      if (messages[id]) {
        if (data.error) {
          messages[id].reject(data.error);
        } else {
          messages[id].resolve(data.message);
        }
        delete messages[id];
      }
    }
    // Receive messages from main thread, dispatch them, and send back a reply
    // Unique id for this message & return call to main thread
    else if (data.type === 'main_send' && id != null) {
      // Call the requested worker method and save the return value
      var result, error, target, method_name, method;
      try {
        var _findTarget3 = findTarget(data.method);
        var _findTarget4 = _slicedToArray(_findTarget3, 2);
        method_name = _findTarget4[0];
        target = _findTarget4[1];
        if (!target) {
          throw Error("Worker broker could not dispatch message type ".concat(data.method, " on target ").concat(data.target, " because no object with that name is registered on main thread"));
        }
        method = typeof target[method_name] === 'function' && target[method_name];
        if (!method) {
          throw Error("Worker broker could not dispatch message type ".concat(data.method, " because worker has no method with that name"));
        }
        result = method.apply(target, data.message);
      } catch (e) {
        // Thrown errors will be passed back (in string form) to main thread
        error = e;
      }

      // Send return value to main thread
      var payload,
        transferables = [];

      // Async result
      if (result instanceof Promise) {
        result.then(function (value) {
          if (value instanceof WorkerBroker.withTransferables) {
            transferables = value.transferables;
            value = value.value[0];
          }
          payload = {
            type: 'worker_reply',
            message_id: id,
            message: value
          };
          self.postMessage(payload, transferables.map(function (t) {
            return t.object;
          }));
          freeTransferables(transferables);
          if (transferables.length > 0) {
            log('trace', "'".concat(method_name, "' transferred ").concat(transferables.length, " objects to main thread"));
          }
        }, function (error) {
          self.postMessage({
            type: 'worker_reply',
            message_id: id,
            error: error instanceof Error ? "".concat(error.message, ": ").concat(error.stack) : error
          });
        });
      }
      // Immediate result
      else {
        if (result instanceof WorkerBroker.withTransferables) {
          transferables = result.transferables;
          result = result.value[0];
        }
        payload = {
          type: 'worker_reply',
          message_id: id,
          message: result,
          error: error instanceof Error ? "".concat(error.message, ": ").concat(error.stack) : error
        };
        self.postMessage(payload, transferables.map(function (t) {
          return t.object;
        }));
        freeTransferables(transferables);
        if (transferables.length > 0) {
          log('trace', "'".concat(method_name, "' transferred ").concat(transferables.length, " objects to main thread"));
        }
      }
    }
  });
}

// Special value wrapper, to indicate that we want to find and include transferable objects in the message
WorkerBroker.withTransferables = function () {
  for (var _len3 = arguments.length, value = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    value[_key3] = arguments[_key3];
  }
  if (!(this instanceof WorkerBroker.withTransferables)) {
    return _construct(WorkerBroker.withTransferables, value);
  }
  this.value = value;
  this.transferables = findTransferables(this.value);
};

// Build a list of transferable objects from a source object
// Returns a list of info about each transferable:
//   - object: the actual transferable object
//   - parent: the parent object that the transferable is a property of (if any)
//   - property: the property name of the transferable on the parent object (if any)
// TODO: add option in case you DON'T want to transfer objects
function findTransferables(source) {
  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var property = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var list = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  if (!source) {
    return list;
  }
  if (Array.isArray(source)) {
    // Check each array element
    source.forEach(function (x, i) {
      return findTransferables(x, source, i, list);
    });
  } else if (_typeof(source) === 'object') {
    // Is the object a transferable array buffer?
    if (source instanceof ArrayBuffer) {
      list.push({
        object: source,
        parent: parent,
        property: property
      });
    }
    // Or looks like a typed array (has an array buffer property)?
    else if (source.buffer instanceof ArrayBuffer) {
      list.push({
        object: source.buffer,
        parent: parent,
        property: property
      });
    }
    // Otherwise check each property
    else {
      for (var prop in source) {
        findTransferables(source[prop], source, prop, list);
      }
    }
  }
  return list;
}

// Remove neutered transferables from parent objects, as they should no longer be accessed after transfer
function freeTransferables(transferables) {
  if (!Array.isArray(transferables)) {
    return;
  }
  transferables.filter(function (t) {
    return t.parent && t.property;
  }).forEach(function (t) {
    return delete t.parent[t.property];
  });
}

// Setup this thread as appropriate
if (Thread.is_main) {
  setupMainThread();
}
if (Thread.is_worker) {
  setupWorkerThread();
}

var LEVELS = {
  silent: -1,
  error: 0,
  warn: 1,
  info: 2,
  debug: 3,
  trace: 4
};
var methods = {};
var logged_once = {};
function methodForLevel(level) {
  if (Thread.is_main) {
    methods[level] = methods[level] || (console[level] ? console[level] : console.log).bind(console); // eslint-disable-line no-console
    return methods[level];
  }
}

// Logs message, proxying any log requests from worker threads back to the main thread.
// Returns (asynchronously, due to proxying) a boolean indicating if the message was logged.
// Option `once: true` can be used to only log each unique log message once (e.g. for warnings
// that would otherwise be repetitive or possibly logged thousands of times, such as per feature).
function log(opts) {
  var level = _typeof(opts) === 'object' ? opts.level : opts;
  if (LEVELS[level] <= LEVELS[log.level]) {
    for (var _len = arguments.length, msg = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      msg[_key - 1] = arguments[_key];
    }
    if (Thread.is_worker) {
      // Proxy to main thread
      return WorkerBroker$1.postMessage.apply(WorkerBroker$1, [{
        method: '_logProxy',
        stringify: true
      }, opts].concat(msg));
    } else {
      // Only log message once?
      if (_typeof(opts) === 'object' && opts.once === true) {
        if (logged_once[JSON.stringify(msg)]) {
          return Promise.resolve(false);
        }
        logged_once[JSON.stringify(msg)] = true;
      }

      // Write to console (on main thread)
      var logger = methodForLevel(level);
      if (msg.length > 1) {
        logger.apply(void 0, ["Tangram ".concat(version, " [").concat(level, "]: ").concat(msg[0])].concat(_toConsumableArray(msg.slice(1))));
      } else {
        logger("Tangram ".concat(version, " [").concat(level, "]: ").concat(msg[0]));
      }
    }
    return Promise.resolve(true);
  }
  return Promise.resolve(false);
}
log.level = 'info';
log.workers = null;
log.setLevel = function (level) {
  log.level = level;
  if (Thread.is_main && Array.isArray(log.workers)) {
    WorkerBroker$1.postMessage(log.workers, '_logSetLevelProxy', level);
  }
};
if (Thread.is_main) {
  log.setWorkers = function (workers) {
    log.workers = workers;
  };
  log.reset = function () {
    logged_once = {};
  };
}
WorkerBroker$1.addTarget('_logProxy', log); // proxy log messages from worker to main thread
WorkerBroker$1.addTarget('_logSetLevelProxy', log.setLevel); // proxy log level setting from main to worker thread

var Utils = {};
WorkerBroker$1.addTarget('Utils', Utils);

// Basic Safari detection
// http://stackoverflow.com/questions/7944460/detect-safari-browser
Utils.isSafari = function () {
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
};

// Basic IE11 or Edge detection
Utils.isMicrosoft = function () {
  return /(Trident\/7.0|Edge[ /](\d+[.\d]+))/i.test(navigator.userAgent);
};
Utils._requests = {}; // XHR requests on current thread
Utils._proxy_requests = {}; // XHR requests proxied to main thread

// `request_key` is a user-provided key that can be later used to cancel the request
Utils.io = function (url) {
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60000;
  var responseType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'text';
  var method = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'GET';
  var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  var request_key = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var proxy = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
  if (Thread.is_worker && Utils.isMicrosoft()) {
    // Some versions of IE11 and Edge will hang web workers when performing XHR requests
    // These requests can be proxied through the main thread
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9545866/
    log('debug', 'Proxying request for URL to worker', url);
    if (request_key) {
      Utils._proxy_requests[request_key] = true; // mark as proxied
    }
    return WorkerBroker$1.postMessage('Utils.io', url, timeout, responseType, method, headers, request_key, true);
  } else {
    var request = new XMLHttpRequest();
    var promise = new Promise(function (resolve, reject) {
      request.open(method, url, true);
      request.timeout = timeout;
      request.responseType = responseType;

      // Attach optional request headers
      if (headers && _typeof(headers) === 'object') {
        for (var key in headers) {
          request.setRequestHeader(key, headers[key]);
        }
      }
      request.onload = function () {
        if (request.status === 200) {
          if (['text', 'json'].indexOf(request.responseType) > -1) {
            resolve({
              body: request.responseText,
              status: request.status
            });
          } else {
            resolve({
              body: request.response,
              status: request.status
            });
          }
        } else if (request.status === 204) {
          // No Content
          resolve({
            body: null,
            status: request.status
          });
        } else {
          reject(Error('Request error with a status of ' + request.statusText));
        }
      };
      request.onerror = function (evt) {
        reject(Error('There was a network error' + evt.toString()));
      };
      request.ontimeout = function (evt) {
        reject(Error('timeout ' + evt.toString()));
      };
      request.send();
    });
    promise = promise.then(function (response) {
      if (request_key) {
        delete Utils._requests[request_key];
      }
      if (proxy) {
        return WorkerBroker$1.withTransferables(response);
      }
      return response;
    });
    if (request_key) {
      Utils._requests[request_key] = request;
    }
    return promise;
  }
};

// Çancel a pending network request by user-provided request key
Utils.cancelRequest = function (key) {
  // Check for a request that was proxied to the main thread
  if (Thread.is_worker && Utils._proxy_requests[key]) {
    return WorkerBroker$1.postMessage('Utils.cancelRequest', key); // forward to main thread
  }
  var req = Utils._requests[key];
  if (req) {
    log('trace', "Cancelling network request key '".concat(key, "'"));
    Utils._requests[key].abort();
    delete Utils._requests[key];
  } else {
    log('trace', "Could not find network request key '".concat(key, "'"));
  }
};

// Stringify an object into JSON, but convert functions to strings
Utils.serializeWithFunctions = function (obj) {
  if (typeof obj === 'function') {
    return obj.toString();
  }
  var serialized = JSON.stringify(obj, function (k, v) {
    // Convert functions to strings
    if (typeof v === 'function') {
      return v.toString();
    }
    return v;
  });
  return serialized;
};

// Default to allowing high pixel density
// Returns true if display density changed
Utils.use_high_density_display = true;
Utils.updateDevicePixelRatio = function () {
  var prev = Utils.device_pixel_ratio;
  Utils.device_pixel_ratio = Utils.use_high_density_display && window.devicePixelRatio || 1;
  return Utils.device_pixel_ratio !== prev;
};
if (Thread.is_main) {
  Utils.updateDevicePixelRatio();
}

// Used for differentiating between power-of-2 and non-power-of-2 textures
// Via: http://stackoverflow.com/questions/19722247/webgl-wait-for-texture-to-load
Utils.isPowerOf2 = function (value) {
  return (value & value - 1) === 0;
};

// Interpolate 'x' along a series of control points
// 'points' is an array of control points in the form [x, y]
//
// Example:
//     Control points:
//         [0, 5]:  when x=0, y=5
//         [4, 10]: when x=4, y=10
//
//     Utils.interpolate(2, [[0, 5], [4, 10]]);
//     -> computes x=2, halfway between x=0 and x=4: (10 - 5) / 2 +5
//     -> returns 7.5
//
// TODO: add other interpolation methods besides linear
//
Utils.interpolate = function (x, points, transform) {
  // If this doesn't resemble a list of control points, just return the original value
  if (!Array.isArray(points) || !Array.isArray(points[0])) {
    return points;
  } else if (points.length < 1) {
    return points;
  }
  var x1, x2, d, y, y1, y2;

  // Min bounds
  if (x <= points[0][0]) {
    y = points[0][1];
    if (typeof transform === 'function') {
      y = transform(y);
    }
  }
  // Max bounds
  else if (x >= points[points.length - 1][0]) {
    y = points[points.length - 1][1];
    if (typeof transform === 'function') {
      y = transform(y);
    }
  }
  // Find which control points x is between
  else {
    for (var i = 0; i < points.length - 1; i++) {
      if (x >= points[i][0] && x < points[i + 1][0]) {
        // Linear interpolation
        x1 = points[i][0];
        x2 = points[i + 1][0];

        // Multiple values
        if (Array.isArray(points[i][1])) {
          y = [];
          for (var c = 0; c < points[i][1].length; c++) {
            if (typeof transform === 'function') {
              y1 = transform(points[i][1][c]);
              y2 = transform(points[i + 1][1][c]);
              d = y2 - y1;
              y[c] = d * (x - x1) / (x2 - x1) + y1;
            } else {
              d = points[i + 1][1][c] - points[i][1][c];
              y[c] = d * (x - x1) / (x2 - x1) + points[i][1][c];
            }
          }
        }
        // Single value
        else {
          if (typeof transform === 'function') {
            y1 = transform(points[i][1]);
            y2 = transform(points[i + 1][1]);
            d = y2 - y1;
            y = d * (x - x1) / (x2 - x1) + y1;
          } else {
            d = points[i + 1][1] - points[i][1];
            y = d * (x - x1) / (x2 - x1) + points[i][1];
          }
        }
        break;
      }
    }
  }
  return y;
};
Utils.toCSSColor = function (color) {
  if (color != null) {
    if (color[3] === 1) {
      // full opacity
      return "rgb(".concat(color.slice(0, 3).map(function (c) {
        return Math.round(c * 255);
      }).join(', '), ")");
    }
    // RGB is between [0, 255] opacity is between [0, 1]
    return "rgba(".concat(color.map(function (c, i) {
      return i < 3 && Math.round(c * 255) || c;
    }).join(', '), ")");
  }
};

var debugSettings;
var debugSettings$1 = debugSettings = {
  // draws a blue rectangle border around the collision box of a label
  draw_label_collision_boxes: false,
  // draws a green rectangle border within the texture box of a label
  draw_label_texture_boxes: false,
  // suppreses fade-in of labels
  suppress_label_fade_in: false,
  // suppress animaton of label snap to pixel grid
  suppress_label_snap_animation: false,
  // show hidden labels for debugging
  show_hidden_labels: false,
  // collect feature/geometry stats on styling layers
  layer_stats: false,
  // draw scene in wireframe mode
  wireframe: false
};
function mergeDebugSettings(settings) {
  Object.assign(debugSettings, settings);
}

// Adds a base origin to relative URLs
function addBaseURL(url, base) {
  if (!url || !isRelativeURL(url)) {
    return url;
  }
  var relative_path = url[0] !== '/';
  var base_info;
  if (base) {
    base_info = document.createElement('a'); // use a temporary element to parse URL
    base_info.href = base;
  } else {
    base_info = window.location;
  }
  if (relative_path) {
    var path = pathForURL(base_info.href);
    url = path + url;
  } else {
    var origin = base_info.origin;
    if (!origin) {
      origin = base_info.protocol + '//' + base_info.host; // IE11 doesn't have origin property
    }
    url = origin + url;
  }
  return url;
}
function pathForURL(url) {
  if (typeof url === 'string' && url.search(/^(data|blob):/) === -1) {
    var qs = url.indexOf('?');
    if (qs > -1) {
      url = url.substr(0, qs);
    }
    var hash = url.indexOf('#');
    if (hash > -1) {
      url = url.substr(0, hash);
    }
    return url.substr(0, url.lastIndexOf('/') + 1) || '';
  }
  return '';
}
function extensionForURL(url) {
  url = url.split('/').pop();
  var last_dot = url.lastIndexOf('.');
  if (last_dot > -1) {
    return url.substring(last_dot + 1);
  }
}
function isLocalURL(url) {
  if (typeof url !== 'string') {
    return;
  }
  return url.search(/^(data|blob):/) > -1;
}
function isRelativeURL(url) {
  if (typeof url !== 'string') {
    return;
  }
  return !(url.search(/^(http|https|data|blob):/) > -1 || url.substr(0, 2) === '//');
}

// Resolves './' and '../' components from relative path, to get a "flattened" path
function flattenRelativeURL(url) {
  var dirs = (url || '').split('/');
  for (var d = 1; d < dirs.length; d++) {
    if (dirs[d] === '.') {
      dirs.splice(d, 1);
      d--;
    } else if (dirs[d] === '..') {
      d = d + 0;
      dirs.splice(d - 1, 2);
      d--;
    }
  }
  return dirs.join('/');
}

// Add a set of query string params to a URL
// params: hash of key/value pairs of query string parameters
// returns array of: [modified URL, array of duplicate param name and values]
function addParamsToURL(url, params) {
  if (!params || Object.keys(params).length === 0) {
    return [url, []];
  }
  var qs_index = url.indexOf('?');
  var hash_index = url.indexOf('#');

  // Save and trim hash
  var hash = '';
  if (hash_index > -1) {
    hash = url.slice(hash_index);
    url = url.slice(0, hash_index);
  }

  // Start query string
  if (qs_index === -1) {
    qs_index = url.length;
    url += '?';
  }
  qs_index++; // advanced past '?'

  // Build query string params
  var url_params = '';
  var dupes = [];
  for (var p in params) {
    if (getURLParameter(p, url) !== '') {
      dupes.push([p, params[p]]);
      continue;
    }
    url_params += "".concat(p, "=").concat(params[p], "&");
  }

  // Insert new query string params and restore hash
  url = url.slice(0, qs_index) + url_params + url.slice(qs_index) + hash;
  return [url, dupes];
}

// Polyfill (for Safari compatibility)
var _createObjectURL;
function createObjectURL(url) {
  if (_createObjectURL === undefined) {
    _createObjectURL = window.URL && window.URL.createObjectURL || window.webkitURL && window.webkitURL.createObjectURL;
    if (typeof _createObjectURL !== 'function') {
      _createObjectURL = null;
      log('warn', 'window.URL.createObjectURL (or vendor prefix) not found, unable to create local blob URLs');
    }
  }
  if (_createObjectURL) {
    return _createObjectURL(url);
  } else {
    return url;
  }
}

// Via https://davidwalsh.name/query-string-javascript
function getURLParameter(name, url) {
  name = name.replace(/[[]/, '\\[').replace(/[\]]/, '\\]');
  var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
  var results = regex.exec(url);
  return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
}

// import log from './log';

var Task = {
  id: 0,
  // unique id per task
  queue: [],
  // current queue of outstanding tasks
  max_time: 20,
  // default time in which all tasks should complete per frame
  start_time: null,
  // start time for tasks in current frame
  state: {},
  // track flags about environment state (ex: whether user is currently moving the view)
  add: function add(task) {
    task.id = Task.id++;
    task.max_time = task.max_time || Task.max_time; // allow task to run for this much time (tasks have a global collective limit per frame, too)
    task.pause_factor = task.pause_factor || 1; // pause tasks by this many frames when they run too long
    var promise = new Promise(function (resolve, reject) {
      task.resolve = resolve;
      task.reject = reject;
    });
    task.promise = promise;
    task.elapsed = 0;
    task.total_elapsed = 0;
    task.stats = {
      calls: 0
    };
    this.queue.push(task);

    // Run task immediately if under total frame time
    this.start_time = this.start_time || performance.now(); // start frame timer if necessary
    this.elapsed = performance.now() - this.start_time;
    if (this.elapsed < Task.max_time || task.immediate) {
      this.process(task);
    }
    return task.promise;
  },
  remove: function remove(task) {
    var idx = this.queue.indexOf(task);
    if (idx > -1) {
      this.queue.splice(idx, 1);
    }
  },
  process: function process(task) {
    // Skip task while user is moving the view, if the task requests it
    // (for intensive tasks that lock the UI, like canvas rasterization)
    if (this.state.user_moving_view && task.user_moving_view === false) {
      // log('debug', `*** SKIPPING task id ${task.id}, ${task.type} while user is moving view`);
      return;
    }

    // Skip task if it's currently paused
    if (task.pause) {
      // log('debug', `*** PAUSING task id ${task.id}, ${task.type} (${task.pause})`);
      task.pause--;
      return true;
    }
    task.stats.calls++;
    task.start_time = performance.now(); // start task timer
    return task.run(task);
  },
  processAll: function processAll() {
    this.start_time = this.start_time || performance.now(); // start frame timer if necessary
    for (var i = 0; i < this.queue.length; i++) {
      // Exceeded either total task time, or total frame time
      var task = this.queue[i];
      if (this.process(task) !== true) {
        // If the task didn't complete, pause it for a task-specific number of frames
        // (can be disabled by setting pause_factor to 0)
        if (!task.pause) {
          task.pause = task.elapsed > task.max_time ? task.pause_factor : 0;
        }
        task.total_elapsed += task.elapsed;
      }

      // Check total frame time
      this.elapsed = performance.now() - this.start_time;
      if (this.elapsed >= Task.max_time) {
        this.start_time = null; // reset frame timer
        break;
      }
    }
  },
  finish: function finish(task, value) {
    task.elapsed = performance.now() - task.start_time;
    task.total_elapsed += task.elapsed;
    // log('debug', `task type ${task.type}, tile ${task.id}, finish after ${task.stats.calls} calls, ${task.total_elapsed.toFixed(2)} elapsed`);
    this.remove(task);
    task.resolve(value);
    return task.promise;
  },
  cancel: function cancel(task) {
    var val;
    if (task.cancel instanceof Function) {
      val = task.cancel(task); // optional cancel function
    }
    task.resolve(val);
  },
  shouldContinue: function shouldContinue(task) {
    // Suspend task if it runs over its specific per-frame limit, or the global limit
    task.elapsed = performance.now() - task.start_time;
    this.elapsed = performance.now() - this.start_time;
    return task.elapsed < task.max_time && this.elapsed < Task.max_time;
  },
  removeForTile: function removeForTile(tile_id) {
    for (var idx = this.queue.length - 1; idx >= 0; idx--) {
      if (this.queue[idx].tile_id === tile_id) {
        // log('trace', `Task: remove tasks for tile ${tile_id}`);
        this.cancel(this.queue[idx]);
        this.queue.splice(idx, 1);
      }
    }
  },
  setState: function setState(state) {
    this.state = state;
  }
};

function subscribeMixin(target) {
  var listeners = [];
  return Object.assign(target, {
    subscribe: function subscribe(listener) {
      if (listeners.indexOf(listener) === -1) {
        listeners.push(listener);
      }
    },
    unsubscribe: function unsubscribe(listener) {
      var index = listeners.indexOf(listener);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    },
    unsubscribeAll: function unsubscribeAll() {
      listeners = [];
    },
    trigger: function trigger(event) {
      for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        data[_key - 1] = arguments[_key];
      }
      listeners.forEach(function (listener) {
        if (typeof listener[event] === 'function') {
          try {
            listener[event].apply(listener, data);
          } catch (e) {
            log('warn', "Caught exception in listener for event '".concat(event, "':"), e);
          }
        }
      });
    },
    hasSubscribersFor: function hasSubscribersFor(event) {
      var has = false;
      listeners.forEach(function (listener) {
        if (typeof listener[event] === 'function') {
          has = true;
        }
      });
      return has;
    }
  });
}

function sliceObject(obj, keys) {
  var sliced = {};
  keys.forEach(function (k) {
    return sliced[k] = obj[k];
  });
  return sliced;
}

// GL texture wrapper object for keeping track of a global set of textures, keyed by a unique user-defined name
var Texture = /*#__PURE__*/function () {
  function Texture(gl, name) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck(this, Texture);
    options = Texture.sliceOptions(options); // exclude any non-texture-specific props
    this.gl = gl;
    this.texture = gl.createTexture();
    if (this.texture) {
      this.valid = true;
    }
    this.bind();
    this.name = name;
    this.retain_count = 0;
    this.config_type = null;
    this.loading = null; // a Promise object to track the loading state of this texture
    this.loaded = false; // successfully loaded as expected
    this.filtering = options.filtering;
    this.density = options.density || 1; // native pixel density of texture
    this.sprites = options.sprites;
    this.texcoords = {}; // sprite UVs ([0, 1] range)
    this.sizes = {}; // sprite sizes (pixel size)
    this.css_sizes = {}; // sprite sizes, adjusted for native texture pixel density
    this.aspects = {}; // sprite aspect ratios

    // Default to a 1-pixel transparent black texture so we can safely render while we wait for an image to load
    // See: http://stackoverflow.com/questions/19722247/webgl-wait-for-texture-to-load
    this.setData(1, 1, new Uint8Array([0, 0, 0, 0]), {
      filtering: 'nearest'
    });
    this.loaded = false; // don't consider loaded when only placeholder data is present

    // Destroy previous texture if present
    if (Texture.textures[this.name]) {
      // Preserve previous retain count
      this.retain_count = Texture.textures[this.name].retain_count;
      Texture.textures[this.name].retain_count = 0; // allow to be freed
      Texture.textures[this.name].destroy();
    }

    // Cache texture instance and definition
    Texture.textures[this.name] = this;
    Texture.texture_configs[this.name] = JSON.stringify(Object.assign({
      name: name
    }, options));
    this.load(options);
    log('trace', "creating Texture ".concat(this.name));
  }

  // Destroy a single texture instance
  return _createClass(Texture, [{
    key: "destroy",
    value: function destroy() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        force = _ref.force;
      if (this.retain_count > 0 && !force) {
        log('error', "Texture '".concat(this.name, "': destroying texture with retain count of '").concat(this.retain_count, "'"));
        return;
      }
      if (!this.valid) {
        return;
      }
      this.gl.deleteTexture(this.texture);
      this.texture = null;
      if (Texture.textures[this.name] === this) {
        delete Texture.textures[this.name];
        delete Texture.texture_configs[this.name];
      }
      this.valid = false;
      log('trace', "destroying Texture ".concat(this.name));
    }
  }, {
    key: "retain",
    value: function retain() {
      this.retain_count++;
    }
  }, {
    key: "release",
    value: function release() {
      if (this.retain_count <= 0) {
        log('error', "Texture '".concat(this.name, "': releasing texture with retain count of '").concat(this.retain_count, "'"));
      }
      this.retain_count--;
      if (this.retain_count <= 0) {
        this.destroy();
      }
    }
  }, {
    key: "bind",
    value: function bind() {
      var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (!this.valid) {
        return;
      }
      if (Texture.activeUnit !== unit) {
        this.gl.activeTexture(this.gl.TEXTURE0 + unit);
        Texture.activeUnit = unit;
        Texture.boundTexture = null; // texture must be re-bound when unit changes
      }
      if (Texture.boundTexture !== this.texture) {
        this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
        Texture.boundTexture = this.texture;
      }
    }
  }, {
    key: "load",
    value: function load(options) {
      var _this = this;
      if (!options) {
        return this.loading || Promise.resolve(this);
      }
      this.loading = null;
      if (typeof options.url === 'string') {
        this.config_type = 'url';
        this.setUrl(options.url, options);
      } else if (options.element) {
        this.config_type = 'element';
        this.setElement(options.element, options);
      } else if (options.data && options.width && options.height) {
        this.config_type = 'data';
        this.setData(options.width, options.height, options.data, options);
      }
      this.loading = this.loading && this.loading.then(function () {
        _this.calculateSprites();
        return _this;
      }) || Promise.resolve(this);
      return this.loading;
    }

    // Sets texture from an url
  }, {
    key: "setUrl",
    value: function setUrl(url) {
      var _this2 = this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!this.valid) {
        return;
      }
      this.url = url; // save URL reference (will be overwritten when element is loaded below)

      this.loading = new Promise(function (resolve) {
        var image = new Image();
        image.onload = function () {
          try {
            // For data URL images, first draw the image to a separate canvas element. Workaround for
            // obscure bug seen with small (<28px) SVG images encoded as data URLs in Chrome and Safari.
            if (_this2.url.slice(0, 5) === 'data:') {
              var canvas = document.createElement('canvas');
              var ctx = canvas.getContext('2d');
              canvas.width = image.width;
              canvas.height = image.height;
              ctx.drawImage(image, 0, 0);
              _this2.setElement(canvas, options);
            } else {
              _this2.setElement(image, options);
            }
          } catch (e) {
            _this2.loaded = false;
            log('warn', "Texture '".concat(_this2.name, "': failed to load url: '").concat(_this2.url, "'"), e, options);
            Texture.trigger('warning', {
              message: "Failed to load texture from ".concat(_this2.url),
              error: e,
              texture: options
            });
          }
          _this2.loaded = true;
          resolve(_this2);
        };
        image.onerror = function (e) {
          // Warn and resolve on error
          _this2.loaded = false;
          log('warn', "Texture '".concat(_this2.name, "': failed to load url: '").concat(_this2.url, "'"), e, options);
          Texture.trigger('warning', {
            message: "Failed to load texture from ".concat(_this2.url),
            error: e,
            texture: options
          });
          resolve(_this2);
        };

        // Safari has a bug loading data-URL images with CORS enabled, so it must be disabled in that case
        // https://bugs.webkit.org/show_bug.cgi?id=123978
        if (!(Utils.isSafari() && _this2.url.slice(0, 5) === 'data:')) {
          image.crossOrigin = 'anonymous';
        }
        image.src = _this2.url;
      });
      return this.loading;
    }

    // Sets texture to a raw image buffer
  }, {
    key: "setData",
    value: function setData(width, height, data) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      this.width = width;
      this.height = height;

      // Convert regular array to typed array
      if (Array.isArray(data)) {
        data = new Uint8Array(data);
      }
      this.update(data, options);
      this.setFiltering(options);
      this.loaded = true;
      this.loading = Promise.resolve(this);
      return this.loading;
    }

    // Sets the texture to track a element (canvas/image)
  }, {
    key: "setElement",
    value: function setElement(element, options) {
      var el = element;

      // a string element is interpeted as a CSS selector
      if (typeof element === 'string') {
        element = document.querySelector(element);
      }
      if (element instanceof HTMLCanvasElement || element instanceof HTMLImageElement || element instanceof HTMLVideoElement) {
        this.update(element, options);
        this.setFiltering(options);
      } else {
        this.loaded = false;
        var msg = "the 'element' parameter (`element: ".concat(JSON.stringify(el), "`) must be a CSS ");
        msg += 'selector string, or a <canvas>, <image> or <video> object';
        log('warn', "Texture '".concat(this.name, "': ").concat(msg), options);
        Texture.trigger('warning', {
          message: "Failed to load texture because ".concat(msg),
          texture: options
        });
      }
      this.loaded = true;
      this.loading = Promise.resolve(this);
      return this.loading;
    }

    // Uploads current image or buffer to the GPU (can be used to update animated textures on the fly)
  }, {
    key: "update",
    value: function update(source) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!this.valid) {
        return;
      }
      this.bind();

      // Image or Canvas element
      if (source instanceof HTMLCanvasElement || source instanceof HTMLVideoElement || source instanceof HTMLImageElement && source.complete) {
        this.width = source.width;
        this.height = source.height;
        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, options.UNPACK_FLIP_Y_WEBGL === false ? false : true);
        this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.UNPACK_PREMULTIPLY_ALPHA_WEBGL || false);
        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, source);
      }
      // Raw image buffer
      else {
        // these pixel store params are deprecated for non-DOM element uploads
        // (e.g. when creating texture from raw data)
        // setting them to null avoids a Firefox warning
        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, null);
        this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, null);
        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.width, this.height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, source);
      }
      Texture.trigger('update', this);
    }

    // Determines appropriate filtering mode
  }, {
    key: "setFiltering",
    value: function setFiltering() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (!this.valid) {
        return;
      }
      options.filtering = options.filtering || 'linear';
      var gl = this.gl;
      this.bind();

      // For power-of-2 textures, the following presets are available:
      // mipmap: linear blend from nearest mip
      // linear: linear blend from original image (no mips)
      // nearest: nearest pixel from original image (no mips, 'blocky' look)
      if (Utils.isPowerOf2(this.width) && Utils.isPowerOf2(this.height)) {
        this.power_of_2 = true;
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, options.TEXTURE_WRAP_S || options.repeat && gl.REPEAT || gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, options.TEXTURE_WRAP_T || options.repeat && gl.REPEAT || gl.CLAMP_TO_EDGE);
        if (options.filtering === 'mipmap') {
          this.filtering = 'mipmap';
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR); // TODO: use trilinear filtering by defualt instead?
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
          gl.generateMipmap(gl.TEXTURE_2D);
        } else if (options.filtering === 'linear') {
          this.filtering = 'linear';
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        } else if (options.filtering === 'nearest') {
          this.filtering = 'nearest';
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        }
      } else {
        // WebGL has strict requirements on non-power-of-2 textures:
        // No mipmaps and must clamp to edge
        this.power_of_2 = false;
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        if (options.filtering === 'nearest') {
          this.filtering = 'nearest';
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        } else {
          // default to linear for non-power-of-2 textures
          this.filtering = 'linear';
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        }
      }
      Texture.trigger('update', this);
    }

    // Pre-calc sprite regions for a texture sprite in UV [0, 1] space
  }, {
    key: "calculateSprites",
    value: function calculateSprites() {
      if (this.sprites) {
        for (var s in this.sprites) {
          var sprite = this.sprites[s];

          // Map [0, 0] to [1, 1] coords to the appropriate sprite sub-area of the texture
          this.texcoords[s] = Texture.getTexcoordsForSprite([sprite[0], sprite[1]], [sprite[2], sprite[3]], [this.width, this.height]);

          // Pixel size of sprite
          // Divide by native texture density to get correct CSS pixels
          this.sizes[s] = [sprite[2], sprite[3]];
          this.css_sizes[s] = [sprite[2] / this.density, sprite[3] / this.density];
          this.aspects[s] = sprite[2] / sprite[3];
        }
      }
    }

    // Get the tetxure size in bytes
  }, {
    key: "byteSize",
    value: function byteSize() {
      // mipmaps use 33% additional memory
      return Math.round(this.width * this.height * 4 * (this.filtering == 'mipmap' ? 1.33 : 1));
    }
  }]);
}(); // Static/class methods and state
Texture.create = function (gl, name, options) {
  return new Texture(gl, name, options);
};
Texture.retain = function (name) {
  if (Texture.textures[name]) {
    Texture.textures[name].retain();
  }
};
Texture.release = function (name) {
  if (Texture.textures[name]) {
    Texture.textures[name].release();
  }
};

// Destroy all texture instances for a given GL context
Texture.destroy = function (gl) {
  var textures = Object.keys(Texture.textures);
  textures.forEach(function (t) {
    var texture = Texture.textures[t];
    if (texture.gl === gl) {
      texture.destroy({
        force: true
      });
    }
  });
};

// Get sprite pixel size and UVs
Texture.getSpriteInfo = function (texname, sprite) {
  var texture = Texture.textures[texname];
  return texture && {
    size: texture.sizes[sprite],
    css_size: texture.css_sizes[sprite],
    aspect: texture.aspects[sprite],
    texcoords: texture.texcoords[sprite]
  };
};

// Re-scale UVs from [0, 1] range to a smaller area within the image
Texture.getTexcoordsForSprite = function (area_origin, area_size, tex_size) {
  var area_origin_y = tex_size[1] - area_origin[1] - area_size[1];
  return [area_origin[0] / tex_size[0], area_origin_y / tex_size[1], (area_size[0] + area_origin[0]) / tex_size[0], (area_size[1] + area_origin_y) / tex_size[1]];
};

// Create a set of textures keyed in an object
// Optionally load each if it has a URL specified
Texture.createFromObject = function (gl, textures) {
  var loading = [];
  if (textures) {
    for (var texname in textures) {
      var config = textures[texname];
      if (config.skip_create) {
        // explicitly skip (re-)creating this texture
        // used for dynamic canvas textures that we *know* haven't changed
        // (internal raster tiles, vs. user-supplied canvas where pixels may have changed)
        continue;
      }

      // If texture already exists and definition hasn't changed, no need to re-create
      // Note: to avoid flicker when other textures/scene items change
      if (!Texture.changed(texname, config)) {
        continue;
      }
      var texture = Texture.create(gl, texname, config);
      loading.push(texture.loading);
    }
  }
  return Promise.all(loading);
};

// Create a 'default' texture (1x1 pixel) that can be used as a placeholder
// (for example to prevent GL from complaining about unbound textures)
Texture.default = '__default';
Texture.createDefault = function (gl) {
  return Texture.create(gl, Texture.default);
};

// Only include texture-specific properties (avoid faulty equality comparisons between
// textures when caller may include other ancillary props)
Texture.sliceOptions = function (options) {
  return {
    filtering: options.filtering,
    sprites: options.sprites,
    url: options.url,
    element: options.element,
    data: options.data,
    width: options.width,
    height: options.height,
    density: options.density,
    repeat: options.repeat,
    TEXTURE_WRAP_S: options.TEXTURE_WRAP_S,
    TEXTURE_WRAP_T: options.TEXTURE_WRAP_T,
    UNPACK_FLIP_Y_WEBGL: options.UNPACK_FLIP_Y_WEBGL,
    UNPACK_PREMULTIPLY_ALPHA_WEBGL: options.UNPACK_PREMULTIPLY_ALPHA_WEBGL
  };
};

// Indicate if a texture definition would be a change from the current cache
Texture.changed = function (name, config) {
  var texture = Texture.textures[name];
  if (texture) {
    // cached texture
    // canvas/image-based textures are considered dynamic and always refresh
    if (texture.config_type === 'element' || config.element != null) {
      return true;
    }

    // compare definitions
    config = Texture.sliceOptions(config); // exclude any non-texture-specific props
    if (Texture.texture_configs[name] === JSON.stringify(Object.assign({
      name: name
    }, config))) {
      return false;
    }
  }
  return true;
};

// Get metadata for a texture by name
// Returns via promise, in case texture is still loading
// Can be called on main thread from worker, to sync texture info to worker
Texture.getInfo = function (name) {
  // Get info for all textures by default
  if (!name) {
    name = Object.keys(Texture.textures);
  }

  // Get multiple textures
  if (Array.isArray(name)) {
    return Promise.all(name.map(function (n) {
      return Texture.getInfo(n);
    }));
  }

  // Get single texture
  var tex = Texture.textures[name];
  if (tex) {
    // Wait for this texture to finish loading, or return immediately
    var loading = tex.loading || Promise.resolve(tex);
    return loading.then(function () {
      // Return a subset of texture info
      // (compatible w/structured cloning, suitable for passing to a worker)
      return {
        name: tex.name,
        width: tex.width,
        height: tex.height,
        density: tex.density,
        css_size: [tex.width / tex.density, tex.height / tex.density],
        aspect: tex.width / tex.height,
        sprites: tex.sprites,
        texcoords: tex.texcoords,
        sizes: tex.sizes,
        css_sizes: tex.css_sizes,
        aspects: tex.aspects,
        filtering: tex.filtering,
        power_of_2: tex.power_of_2,
        valid: tex.valid
      };
    });
  } else {
    // No texture found
    return Promise.resolve(null);
  }
};

// Sync texture info to worker
// Called from worker, gets info on one or more textures info from main thread via remote call, then stores it
// locally in worker. 'textures' can be an array of texture names to sync, or if null, all textures are synced.
Texture.syncTexturesToWorker = function (names) {
  return WorkerBroker$1.postMessage('Texture.getInfo', names).then(function (textures) {
    if (textures) {
      textures.filter(function (x) {
        return x;
      }) // remove nulls
      .forEach(function (t) {
        return Texture.textures[t.name] = t;
      });
    }
    return Texture.textures;
  });
};

// Report max texture size for a GL context
Texture.getMaxTextureSize = function (gl) {
  return gl.getParameter(gl.MAX_TEXTURE_SIZE);
};

// Global set of textures, by name
Texture.textures = {};
Texture.texture_configs = {};
Texture.boundTexture = null;
Texture.activeUnit = null;
WorkerBroker$1.addTarget('Texture', Texture);
subscribeMixin(Texture);

var GLSL = {};

/**
    Parse uniforms from a JS object, infers types and returns an array of objects with the
    necessary information to set uniform values on a GL program. Each object in the returned
    array has the form:
    { type, method, name, value }

    type: the GL uniform type, such as 'vec3', 'float', etc.
    method: the GL uniform setter method to use, such as '1f', '3fv', etc.
    name: the fully qualified name of the GL uniform location, e.g. 'array[0].field', etc.
    value: the value to be passed to the GL uniform setter for that type, e.g. [1, 2, 3] for a vec3

    Textures have special behavior: uniforms with string values are treated as textures, and
    the string is used as a unique texture 'key' to be interpreted by the caller (which is responsible
    for actually setting the uniforms). For example, this could be used as a key into a dictionary of
    known texture names, or it could simply be used as a URL to dynamically load the texture from.
*/
GLSL.parseUniforms = function () {
  var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var parsed = [];
  for (var _i = 0, _Object$entries = Object.entries(uniforms); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      name = _Object$entries$_i[0],
      uniform = _Object$entries$_i[1];
    // Single float
    if (typeof uniform === 'number') {
      parsed.push({
        type: 'float',
        method: '1f',
        name: name,
        value: uniform,
        path: [name]
      });
    }
    // Array: vector, array of floats, array of textures
    else if (Array.isArray(uniform)) {
      // Numeric values
      if (typeof uniform[0] === 'number') {
        // float vectors (vec2, vec3, vec4)
        if (uniform.length >= 2 && uniform.length <= 4) {
          parsed.push({
            type: 'vec' + uniform.length,
            method: uniform.length + 'fv',
            name: name,
            value: uniform,
            path: [name]
          });
        }
        // float array
        else if (uniform.length > 4) {
          parsed.push({
            type: 'float[]',
            method: '1fv',
            name: name + '[0]',
            value: uniform,
            path: [name]
          });
        }
        // TODO: assume matrix for (typeof == Float32Array && length == 16)?
      }
      // Array of textures
      else if (typeof uniform[0] === 'string') {
        for (var u = 0; u < uniform.length; u++) {
          parsed.push({
            type: 'sampler2D',
            method: '1i',
            name: name + '[' + u + ']',
            value: uniform[u],
            path: [name, u]
          });
        }
      }
      // Array of arrays - but only arrays of vectors are allowed in this case
      else if (Array.isArray(uniform[0]) && typeof uniform[0][0] === 'number') {
        // float vectors (vec2, vec3, vec4)
        if (uniform[0].length >= 2 && uniform[0].length <= 4) {
          // Set each vector in the array
          for (var _u = 0; _u < uniform.length; _u++) {
            parsed.push({
              type: 'vec' + uniform[0].length,
              method: uniform[0].length + 'fv',
              name: name + '[' + _u + ']',
              value: uniform[_u],
              path: [name, _u]
            });
          }
        }
      }
      // TODO: else warning
    }
    // Boolean
    else if (typeof uniform === 'boolean') {
      parsed.push({
        type: 'bool',
        method: '1i',
        name: name,
        value: uniform,
        path: [name]
      });
    }
    // Texture
    else if (typeof uniform === 'string') {
      parsed.push({
        type: 'sampler2D',
        method: '1i',
        name: name,
        value: uniform,
        path: [name]
      });
    }
  }
  return parsed;
};

/**
    Generate a GLSL variable definition from a JS object
*/
GLSL.defineVariable = function (name, value) {
  var type, array;

  // Single float
  if (typeof value === 'number') {
    type = 'float';
  }
  // Multiple floats - vector or array
  else if (Array.isArray(value)) {
    // Numeric values
    if (typeof value[0] === 'number') {
      // float vectors (vec2, vec3, vec4)
      if (value.length >= 2 && value.length <= 4) {
        type = 'vec' + value.length;
      }
      // float array
      else {
        //if (value.length > 4) {
        type = 'float';
        array = value.length;
      }
      // TODO: assume matrix for (typeof == Float32Array && length == 16)?
    }
    // Array of textures
    else if (typeof value[0] === 'string') {
      type = 'sampler2D';
      array = value.length;
    }
    // Array of arrays - but only arrays of vectors are allowed in this case
    else if (Array.isArray(value[0]) && typeof value[0][0] === 'number') {
      // float vectors (vec2, vec3, vec4)
      if (value[0].length >= 2 && value[0].length <= 4) {
        type = 'vec' + value[0].length;
        array = value.length;
      }
    }
  }
  // Boolean
  else if (typeof value === 'boolean') {
    type = 'bool';
  }
  // Texture
  else if (typeof value === 'string') {
    type = 'sampler2D';
  } else {
    return; // no valid type found
  }

  // Construct variable definition
  var variable = '';
  variable += "".concat(type, " ").concat(name);
  if (array) {
    variable += "[".concat(array, "]");
  }
  variable += ';\n';
  return variable;
};

/**
    Generate a GLSL uniform definition from a JS object
*/
GLSL.defineUniform = function (name, value) {
  var def = GLSL.defineVariable(name, value);
  if (!def) {
    return;
  }
  return 'uniform ' + def;
};

/**
    Expand a single value or 2-element array into a 3-element array, with the last ( z )
    coordinate defaulting to 1 (with option to specify). Also runs parseFloat to try to maintain
    data integrity. Returns null if input couldn't be parsed.
*/
GLSL.expandVec3 = function (v) {
  var z = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var x;
  if (Array.isArray(v)) {
    if (v.length === 2) {
      x = [].concat(_toConsumableArray(v), [z]).map(parseFloat);
    } else {
      return v;
    }
  } else {
    x = [v, v, v].map(parseFloat);
  }
  if (x && x.every(function (n) {
    return typeof n === 'number' && !isNaN(n);
  })) {
    return x;
  }
};

/**
    Expand a single value or 3-element array into a 4-element array, with the last (e.g. w or a)
    coordinate defaulting to 1 (with option to specify). Also runs parseFloat to try to maintain
    data integrity. Returns null if input couldn't be parsed.
*/
GLSL.expandVec4 = function (v) {
  var w = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var x;
  if (Array.isArray(v)) {
    if (v.length === 3) {
      x = [].concat(_toConsumableArray(v), [w]).map(parseFloat);
    } else {
      return v;
    }
  } else {
    x = [v, v, v, w].map(parseFloat);
  }
  if (x && x.every(function (n) {
    return typeof n === 'number' && !isNaN(n);
  })) {
    return x;
  }
};

// WebGL extension wrapper
// Stores extensions by name and GL context

// list of extension arrays, for each entry, 1st element GL context, 2nd map of extensions by name
var extensions = [];
function getExtension(gl, name) {
  var exts = extensions.filter(function (e) {
    return e[0] === gl;
  })[0];
  exts = exts && exts[1];
  if (!exts) {
    extensions.push([gl, {}]);
    exts = extensions[extensions.length - 1][1];
  }
  if (!exts[name]) {
    exts[name] = gl.getExtension(name);
  }
  return exts[name];
}

// http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
function hashString(string) {
  var hash = 0,
    i,
    chr,
    len;
  if (string.length === 0) {
    return hash;
  }
  for (i = 0, len = string.length; i < len; i++) {
    chr = string.charCodeAt(i);
    hash = (hash << 5) - hash + chr;
    hash |= 0; // Convert to 32bit integer
  }
  return hash;
}

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var glShaderErrors;
var hasRequiredGlShaderErrors;

function requireGlShaderErrors () {
	if (hasRequiredGlShaderErrors) return glShaderErrors;
	hasRequiredGlShaderErrors = 1;
	glShaderErrors = parseErrors;

	function parseErrors(log) {
	  log = String(log);

	  var logs = [];
	  var result;

	  while (result = log.match(/ERROR\:([^\n]+)/)) {
	    log = log.slice(result.index + 1);

	    var line = result[1].trim();
	    var seps = line.split(':');
	    var emsg = seps.slice(2).join(':').trim();
	    var file = parseInt(seps[0], 10);
	    var line = parseInt(seps[1], 10);

	    logs.push({
	        message: emsg
	      , file: file
	      , line: line
	    });
	  }

	  return logs
	}
	return glShaderErrors;
}

var glShaderErrorsExports = requireGlShaderErrors();
var parseShaderErrors = /*@__PURE__*/getDefaultExportFromCjs(glShaderErrorsExports);

// Regex patterns
var re_pragma = /^\s*#pragma.*$/gm; // for removing unused pragmas after shader block injection
var re_continue_line = /\\\s*\n/mg; // for removing backslash line continuations
var ShaderProgram = /*#__PURE__*/function () {
  function ShaderProgram(gl, vertex_source, fragment_source, options) {
    _classCallCheck(this, ShaderProgram);
    options = options || {};
    this.gl = gl;
    this.program = null;
    this.compiled = false;
    this.compiling = false;
    this.error = null;

    // key/values inserted as #defines into shaders at compile-time
    this.defines = Object.assign({}, options.defines || {});

    // key/values for blocks that can be injected into shaders at compile-time
    this.blocks = Object.assign({}, options.blocks || {});
    this.block_scopes = Object.assign({}, options.block_scopes || {});

    // list of extensions to activate
    this.extensions = options.extensions || [];

    // JS-object uniforms that are expected by this program, their types are inferred and definitions
    // for each will be injected.
    this.dependent_uniforms = options.uniforms;
    this.uniforms = {}; // program locations of uniforms, lazily added as each uniform is set
    this.attribs = {}; // program locations of vertex attributes, lazily added as each attribute is accessed

    this.vertex_source = vertex_source;
    this.fragment_source = fragment_source;
    this.id = ShaderProgram.id++;
    this.name = options.name; // can provide a program name (useful for debugging)
  }
  return _createClass(ShaderProgram, [{
    key: "destroy",
    value: function destroy() {
      this.gl.useProgram(null);
      this.gl.deleteProgram(this.program);
      this.program = null;
      this.uniforms = {};
      this.attribs = {};
      this.compiled = false;
    }

    // Use program wrapper with simple state cache
  }, {
    key: "use",
    value: function use() {
      if (!this.compiled) {
        return;
      }
      if (ShaderProgram.current !== this) {
        this.gl.useProgram(this.program);
      }
      ShaderProgram.current = this;
    }
  }, {
    key: "compile",
    value: function compile() {
      var _this = this;
      if (this.compiling) {
        throw new Error("ShaderProgram.compile(): skipping for ".concat(this.id, " (").concat(this.name, ") because already compiling"));
      }
      this.compiling = true;
      this.compiled = false;
      this.error = null;

      // Copy sources from pre-modified template
      this.computed_vertex_source = this.vertex_source;
      this.computed_fragment_source = this.fragment_source;

      // Check for extension availability
      var extensions = this.checkExtensions();

      // Make list of defines to be injected later
      var defines = this.buildDefineList();

      // Inject user-defined blocks (arbitrary code points matching named #pragmas)
      // Replace according to this pattern:
      // #pragma tangram: [key]
      // e.g. #pragma tangram: global

      // Gather all block code snippets
      var blocks = this.buildShaderBlockList();
      var regexp;
      for (var key in blocks) {
        var block = blocks[key];
        if (!block || Array.isArray(block) && block.length === 0) {
          continue;
        }

        // First find code replace points in shaders
        regexp = new RegExp('^\\s*#pragma\\s+tangram:\\s+' + key + '\\s*$', 'm');
        var inject_vertex = this.computed_vertex_source.match(regexp);
        var inject_fragment = this.computed_fragment_source.match(regexp);

        // Avoid network request if nothing to replace
        if (inject_vertex == null && inject_fragment == null) {
          continue;
        }

        // Combine all blocks into one string
        var source = '';
        block.forEach(function (val) {
          // Mark start and end of each block with metadata (which can be extracted from
          // final source for error handling, debugging, etc.)
          var mark = "".concat(val.scope, ", ").concat(val.key, ", ").concat(val.num);
          source += "\n// tangram-block-start: ".concat(mark, "\n");
          source += val.source;
          source += "\n// tangram-block-end: ".concat(mark, "\n");
        });

        // Inject
        if (inject_vertex != null) {
          this.computed_vertex_source = this.computed_vertex_source.replace(regexp, source);
        }
        if (inject_fragment != null) {
          this.computed_fragment_source = this.computed_fragment_source.replace(regexp, source);
        }

        // Add a #define for this injection point
        defines['TANGRAM_BLOCK_' + key.replace(/[\s-]+/g, '_').toUpperCase()] = true;
      }

      // Clean-up any #pragmas that weren't replaced (to prevent compiler warnings)
      this.computed_vertex_source = this.computed_vertex_source.replace(re_pragma, '');
      this.computed_fragment_source = this.computed_fragment_source.replace(re_pragma, '');

      // Inject uniform definitions
      this.ensureUniforms(this.dependent_uniforms);

      // Build & inject extensions & defines
      // This is done *after* code injection so that we can add defines for which code points were injected
      var precision = '';
      var high = this.gl.getShaderPrecisionFormat(this.gl.FRAGMENT_SHADER, this.gl.HIGH_FLOAT);
      if (high && high.precision > 0) {
        precision = 'precision highp float;\n';
      } else {
        precision = 'precision mediump float;\n';
      }
      defines['TANGRAM_VERTEX_SHADER'] = true;
      defines['TANGRAM_FRAGMENT_SHADER'] = false;
      this.computed_vertex_source = precision + ShaderProgram.buildDefineString(defines) + this.computed_vertex_source;

      // Precision qualifier only valid in fragment shader
      // NB: '#extension' statements added to fragment shader only, as IE11 throws error when they appear in
      // vertex shader (even when guarded by #ifdef), and no WebGL extensions require '#extension' in vertex shaders
      defines['TANGRAM_VERTEX_SHADER'] = false;
      defines['TANGRAM_FRAGMENT_SHADER'] = true;
      this.computed_fragment_source = ShaderProgram.buildExtensionString(extensions) + precision + ShaderProgram.buildDefineString(defines) + this.computed_fragment_source;

      // Replace multi-line backslashes
      this.computed_vertex_source = this.computed_vertex_source.replace(re_continue_line, '');
      this.computed_fragment_source = this.computed_fragment_source.replace(re_continue_line, '');

      // Compile & set uniforms to cached values
      try {
        this.program = ShaderProgram.updateProgram(this.gl, this.program, this.computed_vertex_source, this.computed_fragment_source);
        this.compiled = true;
        this.compiling = false;
      } catch (error) {
        this.program = null;
        this.compiled = false;
        this.compiling = false;
        this.error = error;

        // shader error info
        this.error.vertex_shader_source = this.computed_vertex_source;
        this.error.fragment_shader_source = this.computed_fragment_source;
        if (error.type === 'vertex' || error.type === 'fragment') {
          this.shader_errors = error.errors;
          this.shader_errors.forEach(function (e) {
            e.type = error.type;
            e.block = _this.block(error.type, e.line);
            e.line = _this.block(error.type, e.line);
          });
          this.error.shader_errors = this.shader_errors;
        }
        throw error;
      }

      // Discard shader sources after successful compilation
      this.computed_vertex_source = null;
      this.computed_fragment_source = null;
      this.use();
      this.refreshUniforms();
      this.refreshAttributes();
    }

    // Make list of defines (global, then program-specific)
  }, {
    key: "buildDefineList",
    value: function buildDefineList() {
      var d,
        defines = {};
      for (d in ShaderProgram.defines) {
        defines[d] = ShaderProgram.defines[d];
      }
      for (d in this.defines) {
        defines[d] = this.defines[d];
      }
      return defines;
    }

    // Make list of shader blocks (global, then program-specific)
  }, {
    key: "buildShaderBlockList",
    value: function buildShaderBlockList() {
      var key,
        blocks = {};

      // Global blocks
      for (key in ShaderProgram.blocks) {
        blocks[key] = [];
        if (Array.isArray(ShaderProgram.blocks[key])) {
          var _blocks$key;
          (_blocks$key = blocks[key]).push.apply(_blocks$key, _toConsumableArray(ShaderProgram.blocks[key].map(function (source, num) {
            return {
              key: key,
              source: source,
              num: num,
              scope: 'ShaderProgram'
            };
          })));
        } else {
          blocks[key] = [{
            key: key,
            source: ShaderProgram.blocks[key],
            num: 0,
            scope: 'ShaderProgram'
          }];
        }
      }

      // Program-specific blocks
      for (key in this.blocks) {
        blocks[key] = blocks[key] || [];
        if (Array.isArray(this.blocks[key])) {
          var scopes = this.block_scopes && this.block_scopes[key] || [];
          var cur_scope = null,
            num = 0;
          for (var b = 0; b < this.blocks[key].length; b++) {
            // Count blocks relative to current scope
            if (scopes[b] !== cur_scope) {
              cur_scope = scopes[b];
              num = 0;
            }
            blocks[key].push({
              key: key,
              source: this.blocks[key][b],
              num: num,
              scope: cur_scope || this.name
            });
            num++;
          }
        } else {
          // TODO: address discrepancy in array vs. single-value blocks
          // styles assume array when tracking block scopes
          blocks[key].push({
            key: key,
            source: this.blocks[key],
            num: 0,
            scope: this.name
          });
        }
      }
      return blocks;
    }

    // Inject uniform definitions
  }, {
    key: "ensureUniforms",
    value: function ensureUniforms(uniforms) {
      if (!uniforms) {
        return;
      }

      // Get GLSL definitions
      var inject = Object.entries(uniforms).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          name = _ref2[0],
          uniform = _ref2[1];
        return GLSL.defineUniform(name, uniform);
      }).filter(function (x) {
        return x;
      });

      // Inject uniforms
      // NOTE: these are injected at the very top of the shaders, even before any #defines or #pragmas are added
      // this could cause some issues with certain #pragmas, or other functions that might expect #defines
      this.computed_vertex_source = inject.join('\n') + this.computed_vertex_source;
      this.computed_fragment_source = inject.join('\n') + this.computed_fragment_source;
    }

    // Set uniforms from a JS object, with inferred types
  }, {
    key: "setUniforms",
    value: function setUniforms(uniforms) {
      var _this2 = this;
      var reset_texture_unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (!this.compiled) {
        return;
      }

      // TODO: only update uniforms when changed

      // Texture units must be tracked and incremented each time a texture sampler uniform is set.
      // By default, the texture unit is reset to 0 each time setUniforms is called, but they can
      // also be preserved, for example in cases where multiple calls to setUniforms are expected
      // (e.g. program-specific uniforms followed by mesh-specific ones).
      if (reset_texture_unit) {
        this.texture_unit = 0;
      }

      // Parse uniform types and values from the JS object
      GLSL.parseUniforms(uniforms).forEach(function (_ref3) {
        var name = _ref3.name,
          type = _ref3.type,
          value = _ref3.value,
          method = _ref3.method;
        if (type === 'sampler2D') {
          // For textures, we need to track texture units, so we have a special setter
          _this2.setTextureUniform(name, value);
        } else {
          _this2.uniform(method, name, value);
        }
      });
    }

    // Cache some or all uniform values so they can be restored
  }, {
    key: "saveUniforms",
    value: function saveUniforms(subset) {
      var uniforms = subset || this.uniforms;
      for (var u in uniforms) {
        var uniform = this.uniforms[u];
        if (uniform) {
          uniform.saved_value = uniform.value;
        }
      }
      this.saved_texture_unit = this.texture_unit || 0;
    }

    // Restore some or all uniforms to saved values
  }, {
    key: "restoreUniforms",
    value: function restoreUniforms(subset) {
      var uniforms = subset || this.uniforms;
      for (var u in uniforms) {
        var uniform = this.uniforms[u];
        if (uniform && uniform.saved_value) {
          uniform.value = uniform.saved_value;
          this.updateUniform(uniform);
        }
      }
      this.texture_unit = this.saved_texture_unit || 0;
    }

    // Set a texture uniform, finds texture by name or creates a new one
  }, {
    key: "setTextureUniform",
    value: function setTextureUniform(uniform_name, texture_name) {
      var texture = Texture.textures[texture_name];
      if (texture == null) {
        log('warn', "Cannot find texture '".concat(texture_name, "'"));
        return;
      }
      texture.bind(this.texture_unit);
      this.uniform('1i', uniform_name, this.texture_unit);
      this.texture_unit++; // TODO: track max texture units and log/throw errors
    }

    // ex: program.uniform('3fv', 'position', [x, y, z]);
    // TODO: only update uniforms when changed
  }, {
    key: "uniform",
    value: function uniform(method, name, value) {
      // 'value' is a method-appropriate arguments list
      if (!this.compiled) {
        return;
      }
      this.uniforms[name] = this.uniforms[name] || {};
      var uniform = this.uniforms[name];
      uniform.name = name;
      if (uniform.location === undefined) {
        uniform.location = this.gl.getUniformLocation(this.program, name);
      }
      uniform.method = method;
      uniform.value = value;
      this.updateUniform(uniform);
    }

    // Set a single uniform
  }, {
    key: "updateUniform",
    value: function updateUniform(uniform) {
      if (!this.compiled) {
        return;
      }
      if (!uniform || uniform.location == null) {
        return;
      }
      this.use();
      this.commitUniform(uniform);
    }

    // Commits the uniform to the GPU
  }, {
    key: "commitUniform",
    value: function commitUniform(uniform) {
      var location = uniform.location;
      var value = uniform.value;
      switch (uniform.method) {
        case '1i':
          this.gl.uniform1i(location, value);
          break;
        case '1f':
          this.gl.uniform1f(location, value);
          break;
        case '2f':
          this.gl.uniform2f(location, value[0], value[1]);
          break;
        case '3f':
          this.gl.uniform3f(location, value[0], value[1], value[2]);
          break;
        case '4f':
          this.gl.uniform4f(location, value[0], value[1], value[2], value[3]);
          break;
        case '1iv':
          this.gl.uniform1iv(location, value);
          break;
        case '3iv':
          this.gl.uniform3iv(location, value);
          break;
        case '1fv':
          this.gl.uniform1fv(location, value);
          break;
        case '2fv':
          this.gl.uniform2fv(location, value);
          break;
        case '3fv':
          this.gl.uniform3fv(location, value);
          break;
        case '4fv':
          this.gl.uniform4fv(location, value);
          break;
        case 'Matrix3fv':
          this.gl.uniformMatrix3fv(location, false, value);
          break;
        case 'Matrix4fv':
          this.gl.uniformMatrix4fv(location, false, value);
          break;
      }
    }

    // Refresh uniform locations and set to last cached values
  }, {
    key: "refreshUniforms",
    value: function refreshUniforms() {
      if (!this.compiled) {
        return;
      }
      for (var u in this.uniforms) {
        var uniform = this.uniforms[u];
        uniform.location = this.gl.getUniformLocation(this.program, u);
        this.updateUniform(uniform);
      }
    }
  }, {
    key: "refreshAttributes",
    value: function refreshAttributes() {
      // var len = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);
      // for (var i=0; i < len; i++) {
      //     var a = this.gl.getActiveAttrib(this.program, i);
      // }
      this.attribs = {};
    }

    // Get the location of a vertex attribute
  }, {
    key: "attribute",
    value: function attribute(name) {
      if (!this.compiled) {
        return;
      }
      var attrib = this.attribs[name] = this.attribs[name] || {};
      if (attrib.location != null) {
        return attrib;
      }
      attrib.name = name;
      attrib.location = this.gl.getAttribLocation(this.program, name);

      // var info = this.gl.getActiveAttrib(this.program, attrib.location);
      // attrib.type = info.type;
      // attrib.size = info.size;

      return attrib;
    }

    // Get shader source as string
  }, {
    key: "source",
    value: function source(type) {
      if (type === 'vertex') {
        return this.computed_vertex_source;
      } else if (type === 'fragment') {
        return this.computed_fragment_source;
      }
    }

    // Get shader source as array of line strings
  }, {
    key: "lines",
    value: function lines(type) {
      var source = this.source(type);
      if (source) {
        return source.split('\n');
      }
      return [];
    }

    // Get a specific line from shader source
  }, {
    key: "line",
    value: function line(type, num) {
      var source = this.lines(type);
      if (source) {
        return source[num];
      }
    }

    // Get info on which shader block (if any) a particular line number in a shader is in
    // Returns an object with the following info if a block is found: { name, line, source }
    //  scope: where the shader block originated, either a style name, or global such as ShaderProgram
    //  name: shader block name (e.g. 'color', 'position', 'global')
    //  num: the block number *within* local scope (e.g. if a style has multiple 'color' blocks)
    //  line: line number *within* the shader block (not the whole shader program), useful for error highlighting
    //  source: the code for the line
    // NOTE: this does a bruteforce loop over the shader source and looks for shader block start/end markers
    // We could track line ranges for shader blocks as they are inserted, but as this code is only used for
    // error handling on compilation failure, it was simpler to keep it separate than to burden the core
    // compilation path.
  }, {
    key: "block",
    value: function block(type, num) {
      var lines = this.lines(type);
      var block;
      for (var i = 0; i < num && i < lines.length; i++) {
        var line = lines[i];
        var match = line.match(/\/\/ tangram-block-start: ([A-Za-z0-9_-]+), ([A-Za-z0-9_-]+), (\d+)/);
        if (match && match.length > 1) {
          // mark current block
          block = {
            scope: match[1],
            name: match[2],
            num: match[3]
          };
        } else {
          match = line.match(/\/\/ tangram-block-end: ([A-Za-z0-9_-]+), ([A-Za-z0-9_-]+), (\d+)/);
          if (match && match.length > 1) {
            block = null; // clear current block
          }
        }

        // update line # and content
        if (block) {
          // init to -1 so that line 0 is first actual line of block code, after comment marker
          block.line = block.line == null ? -1 : block.line + 1;
          block.source = line;
        }
      }
      return block;
    }

    // Returns list of available extensions from those requested
    // Sets internal #defines indicating availability of each requested extension
  }, {
    key: "checkExtensions",
    value: function checkExtensions() {
      var _this3 = this;
      var exts = [];
      this.extensions.forEach(function (name) {
        var ext = getExtension(_this3.gl, name);
        var def = "TANGRAM_EXTENSION_".concat(name);
        _this3.defines[def] = ext != null;
        if (ext) {
          exts.push(name);
        } else {
          log('debug', "Could not enable extension '".concat(name, "'"));
        }
      });
      return exts;
    }
  }]);
}(); // Static methods and state
ShaderProgram.id = 0; // assign each program a unique id
ShaderProgram.current = null; // currently bound program

// Global config applied to all programs (duplicate properties for a specific program will take precedence)
ShaderProgram.defines = {};
ShaderProgram.blocks = {};

// Reset program and shader caches
ShaderProgram.reset = function () {
  ShaderProgram.programs_by_source = {}; // GL program objects by exact vertex + fragment shader source
  ShaderProgram.shaders_by_source = {}; // GL shader objects by exact source
};
ShaderProgram.reset();

// Turn an object of key/value pairs into single string of #define statements
ShaderProgram.buildDefineString = function (defines) {
  var define_str = '';
  for (var d in defines) {
    if (defines[d] == null || defines[d] === false) {
      continue;
    } else if (typeof defines[d] === 'boolean' && defines[d] === true) {
      // booleans are simple defines with no value
      define_str += '#define ' + d + '\n';
    } else if (typeof defines[d] === 'number' && Math.floor(defines[d]) === defines[d]) {
      // int to float conversion to satisfy GLSL floats
      define_str += '#define ' + d + ' ' + defines[d].toFixed(1) + '\n';
    } else {
      // any other float or string value
      define_str += '#define ' + d + ' ' + defines[d] + '\n';
    }
  }
  return define_str;
};

// Turn a list of extension names into single string of #extension statements
ShaderProgram.buildExtensionString = function (extensions) {
  extensions = extensions || [];
  var str = '';
  extensions.forEach(function (ext) {
    str += "#ifdef GL_".concat(ext, "\n#extension GL_").concat(ext, " : enable\n#endif\n");
  });
  return str;
};
ShaderProgram.addBlock = function (key) {
  var _ShaderProgram$blocks;
  ShaderProgram.blocks[key] = ShaderProgram.blocks[key] || [];
  for (var _len = arguments.length, blocks = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    blocks[_key - 1] = arguments[_key];
  }
  (_ShaderProgram$blocks = ShaderProgram.blocks[key]).push.apply(_ShaderProgram$blocks, blocks);
};

// Remove all global shader blocks for a given key
ShaderProgram.removeBlock = function (key) {
  ShaderProgram.blocks[key] = [];
};
ShaderProgram.replaceBlock = function (key) {
  ShaderProgram.removeBlock(key);
  for (var _len2 = arguments.length, blocks = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    blocks[_key2 - 1] = arguments[_key2];
  }
  ShaderProgram.addBlock.apply(ShaderProgram, [key].concat(blocks));
};

// Compile & link a WebGL program from provided vertex and fragment shader sources
// update a program if one is passed in. Create one if not. Alert and don't update anything if the shaders don't compile.
ShaderProgram.updateProgram = function (gl, program, vertex_shader_source, fragment_shader_source) {
  // Program with this exact vertex and fragment shader sources already cached?
  var key = hashString(gl._tangram_id + '::' + vertex_shader_source + '::' + fragment_shader_source);
  if (ShaderProgram.programs_by_source[key]) {
    log('trace', 'Reusing identical source GL program object');
    return ShaderProgram.programs_by_source[key];
  }
  var vertex_shader = ShaderProgram.createShader(gl, vertex_shader_source, gl.VERTEX_SHADER);
  var fragment_shader = ShaderProgram.createShader(gl, fragment_shader_source, gl.FRAGMENT_SHADER);
  gl.useProgram(null);
  if (program != null) {
    var old_shaders = gl.getAttachedShaders(program);
    for (var i = 0; i < old_shaders.length; i++) {
      gl.detachShader(program, old_shaders[i]);
    }
  } else {
    program = gl.createProgram();
  }
  if (vertex_shader == null || fragment_shader == null) {
    return program;
  }
  gl.attachShader(program, vertex_shader);
  gl.attachShader(program, fragment_shader);

  // Require position to be at attribute location 0
  // Attribute 0 should never be disabled (per GL best practices). All of our shader programs have an `a_position`
  // attribute, and it's customary for the vertex position to be the first attribute, so we enforce that here.
  // This can avoid unexpected/undefined interaction between static and dynamic attributes in Safari, and
  // possible warnings/errors in other browsers.
  // See https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-this-has-significant-performance-penalt/20923946
  gl.bindAttribLocation(program, 0, 'a_position');
  gl.linkProgram(program);

  // TODO: reference count and delete shader objects when no programs reference them

  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    var message = new Error("WebGL program error:\n            VALIDATE_STATUS: ".concat(gl.getProgramParameter(program, gl.VALIDATE_STATUS), "\n            ERROR: ").concat(gl.getError(), "\n            --- Vertex Shader ---\n            ").concat(vertex_shader_source, "\n            --- Fragment Shader ---\n            ").concat(fragment_shader_source));
    throw Object.assign(new Error(message), {
      type: 'program'
    });
  }
  ShaderProgram.programs_by_source[key] = program; // cache by exact source
  return program;
};

// Compile a vertex or fragment shader from provided source
ShaderProgram.createShader = function (gl, source, stype) {
  // Program with identical vertex and fragment shader sources already cached?
  var key = hashString(gl._tangram_id + '::' + source);
  if (ShaderProgram.shaders_by_source[key]) {
    log('trace', 'Reusing identical source GL shader object');
    return ShaderProgram.shaders_by_source[key];
  }
  var shader = gl.createShader(stype);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    var type = stype === gl.VERTEX_SHADER ? 'vertex' : 'fragment';
    var message = gl.getShaderInfoLog(shader);
    var errors = parseShaderErrors(message);
    throw Object.assign(new Error(message), {
      type: type,
      errors: errors
    });
  }
  ShaderProgram.shaders_by_source[key] = shader; // cache by exact source
  return shader;
};

// Creates a Vertex Array Object if the extension is available, or falls back on standard attribute calls

var VertexArrayObject = {
  disabled: false,
  // set to true to disable VAOs even if extension is available
  bound_vao: [],
  // currently bound VAO, by GL context
  init: function init(gl) {
    var ext;
    if (this.disabled !== true) {
      ext = getExtension(gl, 'OES_vertex_array_object');
    }
    if (ext != null) {
      log('info', 'Vertex Array Object extension available');
    } else if (this.disabled !== true) {
      log('warn', 'Vertex Array Object extension NOT available');
    } else {
      log('warn', 'Vertex Array Object extension force disabled');
    }
  },
  getExtension: function getExtension$1(gl, ext_name) {
    if (this.disabled !== true) {
      return getExtension(gl, ext_name);
    }
  },
  create: function create(gl, setup, teardown) {
    var vao = {};
    vao.setup = setup;
    vao.teardown = teardown;
    var ext = this.getExtension(gl, 'OES_vertex_array_object');
    if (ext != null) {
      vao._vao = ext.createVertexArrayOES();
      ext.bindVertexArrayOES(vao._vao);
    }
    vao.setup();
    return vao;
  },
  getCurrentBinding: function getCurrentBinding(gl) {
    var bound = this.bound_vao.filter(function (e) {
      return e[0] === gl;
    })[0];
    return bound && bound[1];
  },
  setCurrentBinding: function setCurrentBinding(gl, vao) {
    var bound_vao = this.bound_vao;
    var binding = bound_vao.filter(function (e) {
      return e[0] === gl;
    })[0];
    if (binding == null) {
      bound_vao.push([gl, vao]);
    } else {
      binding[1] = vao;
    }
  },
  bind: function bind(gl, vao) {
    var ext = this.getExtension(gl, 'OES_vertex_array_object');
    if (vao != null) {
      if (ext != null && vao._vao != null) {
        ext.bindVertexArrayOES(vao._vao);
        this.setCurrentBinding(gl, vao);
      } else {
        vao.setup();
      }
    } else {
      var bound_vao = this.getCurrentBinding(gl);
      if (ext != null) {
        ext.bindVertexArrayOES(null);
      } else if (bound_vao != null && typeof bound_vao.teardown === 'function') {
        bound_vao.teardown();
      }
      this.setCurrentBinding(gl, null);
    }
  },
  destroy: function destroy(gl, vao) {
    var ext = this.getExtension(gl, 'OES_vertex_array_object');
    if (ext != null && vao != null && vao._vao != null) {
      ext.deleteVertexArrayOES(vao._vao);
      vao._vao = null;
    }
    // destroy is a no-op if VAO extension isn't available
  }
};

// Deep/recursive merge of one or more source objects into a destination object
function mergeObjects(dest) {
  for (var s = 0; s < (arguments.length <= 1 ? 0 : arguments.length - 1); s++) {
    var source = s + 1 < 1 || arguments.length <= s + 1 ? undefined : arguments[s + 1];
    if (!source) {
      continue;
    }
    for (var key in source) {
      var value = source[key];
      // Recursively merge the source into the destination if it is a a non-null key/value object
      // (e.g. don't merge arrays, those are treated as scalar values; null values will overwrite/erase
      // the previous destination value)
      if (value !== null && _typeof(value) === 'object' && !Array.isArray(value)) {
        if (dest[key] !== null && _typeof(dest[key]) === 'object' && !Array.isArray(dest[key])) {
          dest[key] = mergeObjects(dest[key], value);
        } else {
          dest[key] = mergeObjects({}, value); // destination not an object, overwrite
        }
      }
      // Overwrite the previous destination value if the source property is: a scalar (number/string),
      // an array, or a null value
      else if (value !== undefined) {
        dest[key] = value;
      }
      // Undefined source properties are ignored
    }
  }
  return dest;
}

// Miscellaneous geo functions

var Geo;
var Geo$1 = Geo = {};

// Projection constants
Geo.default_source_max_zoom = 18;
Geo.default_view_max_zoom = 20;
Geo.max_style_zoom = 25; // max zoom at which styles will be evaluated
Geo.tile_size = 256;
Geo.half_circumference_meters = 20037508.342789244;
Geo.circumference_meters = Geo.half_circumference_meters * 2;
Geo.min_zoom_meters_per_pixel = Geo.circumference_meters / Geo.tile_size; // min zoom draws world as 2 tiles wide

var meters_per_pixel = [];
Geo.metersPerPixel = function (z) {
  meters_per_pixel[z] = meters_per_pixel[z] || Geo.min_zoom_meters_per_pixel / Math.pow(2, z);
  return meters_per_pixel[z];
};
var meters_per_tile = [];
Geo.metersPerTile = function (z) {
  meters_per_tile[z] = meters_per_tile[z] || Geo.circumference_meters / Math.pow(2, z);
  return meters_per_tile[z];
};

// Conversion functions based on an defined tile scale
Geo.tile_scale = 4096; // coordinates are locally scaled to the range [0, tile_scale]
Geo.units_per_pixel = Geo.tile_scale / Geo.tile_size;
Geo.height_scale = 16; // provides sub-meter precision for height values (16ths of a meters)

var units_per_meter = [];
Geo.unitsPerMeter = function (z) {
  units_per_meter[z] = units_per_meter[z] || Geo.tile_scale / (Geo.tile_size * Geo.metersPerPixel(z));
  return units_per_meter[z];
};

// Convert tile location to mercator meters - multiply by pixels per tile, then by meters per pixel, adjust for map origin
Geo.metersForTile = function (tile) {
  return {
    x: tile.x * Geo.circumference_meters / Math.pow(2, tile.z) - Geo.half_circumference_meters,
    y: -(tile.y * Geo.circumference_meters / Math.pow(2, tile.z) - Geo.half_circumference_meters)
  };
};

/**
   Given a point in mercator meters and a zoom level, return the tile X/Y/Z that the point lies in
*/
Geo.tileForMeters = function (_ref, zoom) {
  var _ref2 = _slicedToArray(_ref, 2),
    x = _ref2[0],
    y = _ref2[1];
  return {
    x: Math.floor((x + Geo.half_circumference_meters) / (Geo.circumference_meters / Math.pow(2, zoom))),
    y: Math.floor((-y + Geo.half_circumference_meters) / (Geo.circumference_meters / Math.pow(2, zoom))),
    z: zoom
  };
};

// Wrap a tile to positive #s for zoom
// Optionally specify the axes to wrap
Geo.wrapTile = function (_ref3) {
  var x = _ref3.x,
    y = _ref3.y,
    z = _ref3.z;
  var mask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    x: true,
    y: false
  };
  var m = (1 << z) - 1;
  if (mask.x) {
    x = x & m;
  }
  if (mask.y) {
    y = y & m;
  }
  return {
    x: x,
    y: y,
    z: z
  };
};

/**
   Convert mercator meters to lat-lng, in-place
*/
Geo.metersToLatLng = function (c) {
  c[0] /= Geo.half_circumference_meters;
  c[1] /= Geo.half_circumference_meters;
  c[1] = (2 * Math.atan(Math.exp(c[1] * Math.PI)) - Math.PI / 2) / Math.PI;
  c[0] *= 180;
  c[1] *= 180;
  return c;
};

/**
  Convert lat-lng to mercator meters, in-place
*/
Geo.latLngToMeters = function (c) {
  // Latitude
  c[1] = Math.log(Math.tan(c[1] * Math.PI / 360 + Math.PI / 4)) / Math.PI;
  c[1] *= Geo.half_circumference_meters;

  // Longitude
  c[0] *= Geo.half_circumference_meters / 180;
  return c;
};

// Transform from local tile coordinats to lat lng
Geo.tileSpaceToLatlng = function (geometry, z, min) {
  var units_per_meter = Geo.unitsPerMeter(z);
  Geo.transformGeometry(geometry, function (coord) {
    coord[0] = coord[0] / units_per_meter + min.x;
    coord[1] = coord[1] / units_per_meter + min.y;
    Geo.metersToLatLng(coord);
  });
  return geometry;
};

// Copy GeoJSON geometry
Geo.copyGeometry = function (geometry) {
  if (geometry == null) {
    return; // skip if missing geometry (valid GeoJSON)
  }
  var copy = {
    type: geometry.type
  };
  if (geometry.type === 'Point') {
    copy.coordinates = [geometry.coordinates[0], geometry.coordinates[1]];
  } else if (geometry.type === 'LineString' || geometry.type === 'MultiPoint') {
    copy.coordinates = geometry.coordinates.map(function (c) {
      return [c[0], c[1]];
    });
  } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {
    copy.coordinates = geometry.coordinates.map(function (ring) {
      return ring.map(function (c) {
        return [c[0], c[1]];
      });
    });
  } else if (geometry.type === 'MultiPolygon') {
    copy.coordinates = geometry.coordinates.map(function (polygon) {
      return polygon.map(function (ring) {
        return ring.map(function (c) {
          return [c[0], c[1]];
        });
      });
    });
  }
  // TODO: support GeometryCollection
  return copy;
};

// Run an in-place transform function on each cooordinate in a GeoJSON geometry
Geo.transformGeometry = function (geometry, transform) {
  if (geometry == null) {
    return; // skip if missing geometry (valid GeoJSON)
  }
  if (geometry.type === 'Point') {
    transform(geometry.coordinates);
  } else if (geometry.type === 'LineString' || geometry.type === 'MultiPoint') {
    geometry.coordinates.forEach(transform);
  } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {
    geometry.coordinates.forEach(function (ring) {
      return ring.forEach(transform);
    });
  } else if (geometry.type === 'MultiPolygon') {
    geometry.coordinates.forEach(function (polygon) {
      polygon.forEach(function (ring) {
        return ring.forEach(transform);
      });
    });
  }
  // TODO: support GeometryCollection
};
Geo.boxIntersect = function (b1, b2) {
  return !(b2.sw.x > b1.ne.x || b2.ne.x < b1.sw.x || b2.sw.y > b1.ne.y || b2.ne.y < b1.sw.y);
};

// Finds the axis-aligned bounding box for a polygon
Geo.findBoundingBox = function (polygon) {
  var min_x = Infinity,
    max_x = -Infinity,
    min_y = Infinity,
    max_y = -Infinity;

  // Only need to examine outer ring (polygon[0])
  var num_coords = polygon[0].length;
  for (var c = 0; c < num_coords; c++) {
    var coord = polygon[0][c];
    if (coord[0] < min_x) {
      min_x = coord[0];
    }
    if (coord[1] < min_y) {
      min_y = coord[1];
    }
    if (coord[0] > max_x) {
      max_x = coord[0];
    }
    if (coord[1] > max_y) {
      max_y = coord[1];
    }
  }
  return [min_x, min_y, max_x, max_y];
};

// Convert geometry type to one of: 'point', 'line', 'polygon'
Geo.geometryType = function (type) {
  if (type === 'Polygon' || type === 'MultiPolygon') {
    return 'polygon';
  } else if (type === 'LineString' || type === 'MultiLineString') {
    return 'line';
  }
  if (type === 'Point' || type === 'MultiPoint') {
    return 'point';
  }
};

// Geometric / weighted centroid of polygon
// Adapted from https://github.com/Leaflet/Leaflet/blob/c10f405a112142b19785967ce0e142132a6095ad/src/layer/vector/Polygon.js#L57
Geo.centroid = function (polygon) {
  var relative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (!polygon || polygon.length === 0) {
    return;
  }
  var x = 0,
    y = 0,
    area = 0;
  var ring = polygon[0]; // only use first ring for now
  var len = ring.length;

  // optionally calculate relative to first coordinate to avoid precision issues w/small polygons
  var origin;
  if (relative) {
    origin = ring[0];
    ring = ring.map(function (v) {
      return [v[0] - origin[0], v[1] - origin[1]];
    });
  }
  for (var i = 0, j = len - 1; i < len; j = i, i++) {
    var p0 = ring[i];
    var p1 = ring[j];
    var f = p0[1] * p1[0] - p1[1] * p0[0];
    x += (p0[0] + p1[0]) * f;
    y += (p0[1] + p1[1]) * f;
    area += f * 3;
  }
  if (!area) {
    return; // skip degenerate polygons
  }
  var c = [x / area, y / area];
  if (relative) {
    c[0] += origin[0];
    c[1] += origin[1];
  }
  return c;
};
Geo.multiCentroid = function (polygons) {
  var n = 0;
  var centroid = null;
  for (var p = 0; p < polygons.length; p++) {
    var c = Geo.centroid(polygons[p]);
    if (c) {
      // skip degenerate polygons
      centroid = centroid || [0, 0];
      centroid[0] += c[0];
      centroid[1] += c[1];
      n++;
    }
  }
  if (n > 0) {
    centroid[0] /= n;
    centroid[1] /= n;
  }
  return centroid; // will return null if all polygons were degenerate
};
Geo.signedPolygonRingAreaSum = function (ring) {
  var area = 0;
  var n = ring.length;
  for (var i = 0; i < n - 1; i++) {
    var p0 = ring[i];
    var p1 = ring[i + 1];
    area += p0[0] * p1[1] - p1[0] * p0[1];
  }
  area += ring[n - 1][0] * ring[0][1] - ring[0][0] * ring[n - 1][1];
  return area;
};
Geo.polygonRingArea = function (ring) {
  return Math.abs(Geo.signedPolygonRingAreaSum(ring)) / 2;
};

// TODO: subtract inner rings
Geo.polygonArea = function (polygon) {
  if (!polygon) {
    return;
  }
  return Geo.polygonRingArea(polygon[0]);
};
Geo.multiPolygonArea = function (polygons) {
  var area = 0;
  for (var p = 0; p < polygons.length; p++) {
    area += Geo.polygonArea(polygons[p]);
  }
  return area;
};
Geo.ringWinding = function (ring) {
  var area = Geo.signedPolygonRingAreaSum(ring);
  if (area > 0) {
    return 'CW';
  } else if (area < 0) {
    return 'CCW';
  }
  // return undefined on zero area polygon
};

// cache of functions, keyed by unique source
var cache = {
  functions: {},
  num_functions: 0,
  num_cached: 0
};
function clearFunctionStringCache() {
  cache.functions = {};
  cache.num_functions = 0;
  cache.num_cached = 0;
}

// Recursively parse an object, compiling string properties that look like functions
function compileFunctionStrings(obj, wrap) {
  // Convert string
  if (typeof obj === 'string') {
    obj = compileFunctionString(obj, wrap);
  }
  // Loop through object properties
  else if (obj != null && _typeof(obj) === 'object') {
    for (var p in obj) {
      obj[p] = compileFunctionStrings(obj[p], wrap);
    }
  }
  return obj;
}

// Compile a string that looks like a function
function compileFunctionString(val, wrap) {
  // Parse function signature and body
  var fmatch = typeof val === 'string' && val.match(/^\s*function[^(]*\(([^)]*)\)\s*?\{([\s\S]*)\}$/m);
  if (fmatch && fmatch.length > 2) {
    try {
      // function body
      var body = fmatch[2];
      var source = typeof wrap === 'function' ? wrap(body) : body; // optionally wrap source

      // compile and cache by unique function source
      var key = hashString(source);
      if (cache.functions[key] === undefined) {
        // function arguments extracted from signature
        var args = fmatch[1].length > 0 && fmatch[1].split(',').map(function (x) {
          return x.trim();
        }).filter(function (x) {
          return x;
        });
        args = args.length > 0 ? args : ['context']; // default to single 'context' argument

        cache.functions[key] = new Function(args.toString(), source); // jshint ignore:line
        cache.functions[key].source = body; // save original, un-wrapped function body source
        cache.num_functions++;
      } else {
        cache.num_cached++;
      }
      return cache.functions[key];
    } catch (e) {
      // fall-back to original value if parsing failed
      return val;
    }
  }
  return val;
}

var csscolorparser = {};

var hasRequiredCsscolorparser;

function requireCsscolorparser () {
	if (hasRequiredCsscolorparser) return csscolorparser;
	hasRequiredCsscolorparser = 1;
	// (c) Dean McNamee <dean@gmail.com>, 2012.
	//
	// https://github.com/deanm/css-color-parser-js
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the "Software"), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	// IN THE SOFTWARE.

	// http://www.w3.org/TR/css3-color/
	var kCSSColorTable = {
	  "transparent": [0,0,0,0], "aliceblue": [240,248,255,1],
	  "antiquewhite": [250,235,215,1], "aqua": [0,255,255,1],
	  "aquamarine": [127,255,212,1], "azure": [240,255,255,1],
	  "beige": [245,245,220,1], "bisque": [255,228,196,1],
	  "black": [0,0,0,1], "blanchedalmond": [255,235,205,1],
	  "blue": [0,0,255,1], "blueviolet": [138,43,226,1],
	  "brown": [165,42,42,1], "burlywood": [222,184,135,1],
	  "cadetblue": [95,158,160,1], "chartreuse": [127,255,0,1],
	  "chocolate": [210,105,30,1], "coral": [255,127,80,1],
	  "cornflowerblue": [100,149,237,1], "cornsilk": [255,248,220,1],
	  "crimson": [220,20,60,1], "cyan": [0,255,255,1],
	  "darkblue": [0,0,139,1], "darkcyan": [0,139,139,1],
	  "darkgoldenrod": [184,134,11,1], "darkgray": [169,169,169,1],
	  "darkgreen": [0,100,0,1], "darkgrey": [169,169,169,1],
	  "darkkhaki": [189,183,107,1], "darkmagenta": [139,0,139,1],
	  "darkolivegreen": [85,107,47,1], "darkorange": [255,140,0,1],
	  "darkorchid": [153,50,204,1], "darkred": [139,0,0,1],
	  "darksalmon": [233,150,122,1], "darkseagreen": [143,188,143,1],
	  "darkslateblue": [72,61,139,1], "darkslategray": [47,79,79,1],
	  "darkslategrey": [47,79,79,1], "darkturquoise": [0,206,209,1],
	  "darkviolet": [148,0,211,1], "deeppink": [255,20,147,1],
	  "deepskyblue": [0,191,255,1], "dimgray": [105,105,105,1],
	  "dimgrey": [105,105,105,1], "dodgerblue": [30,144,255,1],
	  "firebrick": [178,34,34,1], "floralwhite": [255,250,240,1],
	  "forestgreen": [34,139,34,1], "fuchsia": [255,0,255,1],
	  "gainsboro": [220,220,220,1], "ghostwhite": [248,248,255,1],
	  "gold": [255,215,0,1], "goldenrod": [218,165,32,1],
	  "gray": [128,128,128,1], "green": [0,128,0,1],
	  "greenyellow": [173,255,47,1], "grey": [128,128,128,1],
	  "honeydew": [240,255,240,1], "hotpink": [255,105,180,1],
	  "indianred": [205,92,92,1], "indigo": [75,0,130,1],
	  "ivory": [255,255,240,1], "khaki": [240,230,140,1],
	  "lavender": [230,230,250,1], "lavenderblush": [255,240,245,1],
	  "lawngreen": [124,252,0,1], "lemonchiffon": [255,250,205,1],
	  "lightblue": [173,216,230,1], "lightcoral": [240,128,128,1],
	  "lightcyan": [224,255,255,1], "lightgoldenrodyellow": [250,250,210,1],
	  "lightgray": [211,211,211,1], "lightgreen": [144,238,144,1],
	  "lightgrey": [211,211,211,1], "lightpink": [255,182,193,1],
	  "lightsalmon": [255,160,122,1], "lightseagreen": [32,178,170,1],
	  "lightskyblue": [135,206,250,1], "lightslategray": [119,136,153,1],
	  "lightslategrey": [119,136,153,1], "lightsteelblue": [176,196,222,1],
	  "lightyellow": [255,255,224,1], "lime": [0,255,0,1],
	  "limegreen": [50,205,50,1], "linen": [250,240,230,1],
	  "magenta": [255,0,255,1], "maroon": [128,0,0,1],
	  "mediumaquamarine": [102,205,170,1], "mediumblue": [0,0,205,1],
	  "mediumorchid": [186,85,211,1], "mediumpurple": [147,112,219,1],
	  "mediumseagreen": [60,179,113,1], "mediumslateblue": [123,104,238,1],
	  "mediumspringgreen": [0,250,154,1], "mediumturquoise": [72,209,204,1],
	  "mediumvioletred": [199,21,133,1], "midnightblue": [25,25,112,1],
	  "mintcream": [245,255,250,1], "mistyrose": [255,228,225,1],
	  "moccasin": [255,228,181,1], "navajowhite": [255,222,173,1],
	  "navy": [0,0,128,1], "oldlace": [253,245,230,1],
	  "olive": [128,128,0,1], "olivedrab": [107,142,35,1],
	  "orange": [255,165,0,1], "orangered": [255,69,0,1],
	  "orchid": [218,112,214,1], "palegoldenrod": [238,232,170,1],
	  "palegreen": [152,251,152,1], "paleturquoise": [175,238,238,1],
	  "palevioletred": [219,112,147,1], "papayawhip": [255,239,213,1],
	  "peachpuff": [255,218,185,1], "peru": [205,133,63,1],
	  "pink": [255,192,203,1], "plum": [221,160,221,1],
	  "powderblue": [176,224,230,1], "purple": [128,0,128,1],
	  "rebeccapurple": [102,51,153,1],
	  "red": [255,0,0,1], "rosybrown": [188,143,143,1],
	  "royalblue": [65,105,225,1], "saddlebrown": [139,69,19,1],
	  "salmon": [250,128,114,1], "sandybrown": [244,164,96,1],
	  "seagreen": [46,139,87,1], "seashell": [255,245,238,1],
	  "sienna": [160,82,45,1], "silver": [192,192,192,1],
	  "skyblue": [135,206,235,1], "slateblue": [106,90,205,1],
	  "slategray": [112,128,144,1], "slategrey": [112,128,144,1],
	  "snow": [255,250,250,1], "springgreen": [0,255,127,1],
	  "steelblue": [70,130,180,1], "tan": [210,180,140,1],
	  "teal": [0,128,128,1], "thistle": [216,191,216,1],
	  "tomato": [255,99,71,1], "turquoise": [64,224,208,1],
	  "violet": [238,130,238,1], "wheat": [245,222,179,1],
	  "white": [255,255,255,1], "whitesmoke": [245,245,245,1],
	  "yellow": [255,255,0,1], "yellowgreen": [154,205,50,1]};

	function clamp_css_byte(i) {  // Clamp to integer 0 .. 255.
	  i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
	  return i < 0 ? 0 : i > 255 ? 255 : i;
	}

	function clamp_css_float(f) {  // Clamp to float 0.0 .. 1.0.
	  return f < 0 ? 0 : f > 1 ? 1 : f;
	}

	function parse_css_int(str) {  // int or percentage.
	  if (str[str.length - 1] === '%')
	    return clamp_css_byte(parseFloat(str) / 100 * 255);
	  return clamp_css_byte(parseInt(str));
	}

	function parse_css_float(str) {  // float or percentage.
	  if (str[str.length - 1] === '%')
	    return clamp_css_float(parseFloat(str) / 100);
	  return clamp_css_float(parseFloat(str));
	}

	function css_hue_to_rgb(m1, m2, h) {
	  if (h < 0) h += 1;
	  else if (h > 1) h -= 1;

	  if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;
	  if (h * 2 < 1) return m2;
	  if (h * 3 < 2) return m1 + (m2 - m1) * (2/3 - h) * 6;
	  return m1;
	}

	function parseCSSColor(css_str) {
	  // Remove all whitespace, not compliant, but should just be more accepting.
	  var str = css_str.replace(/ /g, '').toLowerCase();

	  // Color keywords (and transparent) lookup.
	  if (str in kCSSColorTable) return kCSSColorTable[str].slice();  // dup.

	  // #abc and #abc123 syntax.
	  if (str[0] === '#') {
	    if (str.length === 4) {
	      var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
	      if (!(iv >= 0 && iv <= 0xfff)) return null;  // Covers NaN.
	      return [((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
	              (iv & 0xf0) | ((iv & 0xf0) >> 4),
	              (iv & 0xf) | ((iv & 0xf) << 4),
	              1];
	    } else if (str.length === 7) {
	      var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
	      if (!(iv >= 0 && iv <= 0xffffff)) return null;  // Covers NaN.
	      return [(iv & 0xff0000) >> 16,
	              (iv & 0xff00) >> 8,
	              iv & 0xff,
	              1];
	    }

	    return null;
	  }

	  var op = str.indexOf('('), ep = str.indexOf(')');
	  if (op !== -1 && ep + 1 === str.length) {
	    var fname = str.substr(0, op);
	    var params = str.substr(op+1, ep-(op+1)).split(',');
	    var alpha = 1;  // To allow case fallthrough.
	    switch (fname) {
	      case 'rgba':
	        if (params.length !== 4) return null;
	        alpha = parse_css_float(params.pop());
	        // Fall through.
	      case 'rgb':
	        if (params.length !== 3) return null;
	        return [parse_css_int(params[0]),
	                parse_css_int(params[1]),
	                parse_css_int(params[2]),
	                alpha];
	      case 'hsla':
	        if (params.length !== 4) return null;
	        alpha = parse_css_float(params.pop());
	        // Fall through.
	      case 'hsl':
	        if (params.length !== 3) return null;
	        var h = (((parseFloat(params[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
	        // NOTE(deanm): According to the CSS spec s/l should only be
	        // percentages, but we don't bother and let float or percentage.
	        var s = parse_css_float(params[1]);
	        var l = parse_css_float(params[2]);
	        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	        var m1 = l * 2 - m2;
	        return [clamp_css_byte(css_hue_to_rgb(m1, m2, h+1/3) * 255),
	                clamp_css_byte(css_hue_to_rgb(m1, m2, h) * 255),
	                clamp_css_byte(css_hue_to_rgb(m1, m2, h-1/3) * 255),
	                alpha];
	      default:
	        return null;
	    }
	  }

	  return null;
	}

	try { csscolorparser.parseCSSColor = parseCSSColor; } catch(e) { }
	return csscolorparser;
}

var csscolorparserExports = requireCsscolorparser();
var parseCSSColor = /*@__PURE__*/getDefaultExportFromCjs(csscolorparserExports);

var StyleParser = {};

// Helpers for string converstion / NaN handling
var clampPositive = function clampPositive(v) {
  return Math.max(v, 0);
};
var noNaN = function noNaN(v) {
  return isNaN(v) ? 0 : v;
};
var parseNumber = function parseNumber(v) {
  return Array.isArray(v) ? v.map(parseFloat).map(noNaN) : noNaN(parseFloat(v));
};
var parsePositiveNumber = function parsePositiveNumber(v) {
  return Array.isArray(v) ? v.map(parseNumber).map(clampPositive) : clampPositive(parseNumber(v));
};
Object.assign(StyleParser, {
  clampPositive: clampPositive,
  noNaN: noNaN,
  parseNumber: parseNumber,
  parsePositiveNumber: parsePositiveNumber
});

// Wraps style functions and provides a scope of commonly accessible data:
// - feature: the 'properties' of the feature, e.g. accessed as 'feature.name'
// - global: user-defined properties on the `global` object in the scene file
// - $zoom: the current map zoom level
// - $geometry: the type of geometry, 'point', 'line', or 'polygon'
// - $meters_per_pixel: conversion for meters/pixels at current map zoom
StyleParser.wrapFunction = function (func) {
  var f = "\n        var feature = context.feature.properties;\n        var global = context.global;\n        var $zoom = context.zoom;\n        var $layer = context.layer;\n        var $source = context.source;\n        var $geometry = context.geometry;\n        var $meters_per_pixel = context.meters_per_pixel;\n        var $id = context.id;\n\n        var val = (function(){ ".concat(func, " }());\n\n        if (typeof val === 'number' && isNaN(val)) {\n            val = null; // convert NaNs to nulls\n        }\n\n        return val;\n    ");
  return f;
};

// Style parsing

StyleParser.zeroPair = Object.freeze([0, 0]); // single allocation for zero values that won't be modified

// Style defaults
StyleParser.defaults = {
  color: [1, 1, 1, 1],
  width: 1,
  size: 1,
  extrude: false,
  height: 20,
  min_height: 0,
  order: 0,
  z: 0,
  outline: {
    color: [0, 0, 0, 0],
    width: 0
  },
  material: {
    ambient: 1,
    diffuse: 1
  }
};

// Style macros
StyleParser.macros = {
  // pseudo-random color by geometry id
  'Style.color.pseudoRandomColor': function StyleColorPseudoRandomColor() {
    return [0.7 * (parseInt(feature.id, 16) / 100 % 1),
    // eslint-disable-line no-undef
    0.7 * (parseInt(feature.id, 16) / 10000 % 1),
    // eslint-disable-line no-undef
    0.7 * (parseInt(feature.id, 16) / 1000000 % 1),
    // eslint-disable-line no-undef
    1];
  },
  // random color
  'Style.color.randomColor': function StyleColorRandomColor() {
    return [0.7 * Math.random(), 0.7 * Math.random(), 0.7 * Math.random(), 1];
  }
};

// A context object that is passed to style parsing functions to provide a scope of commonly used values
StyleParser.getFeatureParseContext = function (feature, tile, global) {
  return {
    feature: feature,
    id: feature.id,
    tile: tile,
    global: global,
    zoom: tile.style_z,
    geometry: Geo$1.geometryType(feature.geometry.type),
    meters_per_pixel: tile.meters_per_pixel,
    meters_per_pixel_sq: tile.meters_per_pixel_sq,
    units_per_meter_overzoom: tile.units_per_meter_overzoom
  };
};

// Build a style param cache object
// `value` is a raw value, cache methods will add other properties as needed
// `transform` is an optional, one-time transform function to run on values during setup
// `dynamic_transform` is an optional post-processing function applied to the result of function-based properties
var CACHE_TYPE = {
  STATIC: 0,
  DYNAMIC: 1,
  ZOOM: 2
};
StyleParser.CACHE_TYPE = CACHE_TYPE;
StyleParser.createPropertyCache = function (obj) {
  var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var dynamic_transform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (obj == null) {
    return;
  }
  if (obj.value) {
    return {
      value: obj.value,
      zoom: obj.zoom ? {} : null,
      type: obj.type
    }; // clone existing cache object
  }
  var c = {
    value: obj,
    type: CACHE_TYPE.STATIC
  };

  // does value contain zoom stops to be interpolated?
  if (Array.isArray(c.value) && Array.isArray(c.value[0])) {
    c.zoom = {}; // will hold values interpolated by zoom
    c.type = CACHE_TYPE.ZOOM;
  } else if (typeof c.value === 'function') {
    c.type = CACHE_TYPE.DYNAMIC;
    c.dynamic_transform = typeof dynamic_transform === 'function' ? dynamic_transform : null;
  }

  // apply optional transform function - usually a parsing function
  if (typeof transform === 'function') {
    if (c.zoom) {
      // apply to each zoom stop value
      c.value = c.value.map(function (v, i) {
        return [v[0], transform(v[1], i)];
      });
    } else if (typeof c.value !== 'function') {
      // don't transform functions
      c.value = transform(c.value, 0); // single value, 0 = the first and only item in the array
    }
  }
  return c;
};

// Convert old-style color macro into a function
// TODO: deprecate this macro syntax
StyleParser.createColorPropertyCache = function (obj) {
  return StyleParser.createPropertyCache(obj, function (v) {
    if (v === 'Style.color.pseudoRandomColor') {
      return compileFunctionString(StyleParser.wrapFunction(StyleParser.macros['Style.color.pseudoRandomColor']));
    } else if (v === 'Style.color.randomColor') {
      return StyleParser.macros['Style.color.randomColor'];
    }
    return v;
  });
};

// Parse point sizes, which include optional %-based or aspect-ratio-constrained scaling from sprite size
// Returns a cache object if successful, otherwise throws error message
var isPercent = function isPercent(v) {
  return typeof v === 'string' && v[v.length - 1] === '%';
}; // size computed by %
var isRatio = function isRatio(v) {
  return v === 'auto';
}; // size derived from aspect ratio of one dimension
var isComputed = function isComputed(v) {
  return isPercent(v) || isRatio(v);
};
var dualRatioError = '\'size\' can specify either width or height as derived from aspect ratio, but not both';
StyleParser.createPointSizePropertyCache = function (obj, texture) {
  // obj is the value to be parsed eg "64px" "100%" "auto"
  // mimics the structure of the size value (at each zoom stop if applicable),
  // stores flags indicating if each element is a %-based size or not, or derived from aspect
  var has_pct = null;
  var has_ratio = null;
  if (isPercent(obj)) {
    // 1D size
    has_pct = [true];
  } else if (Array.isArray(obj)) {
    // track which fields are % vals
    if (Array.isArray(obj[0])) {
      // zoom stops
      // could be a 1D value (that could be a %), or a 2D value (either width or height or both could be a %)
      if (obj.some(function (v) {
        return Array.isArray(v[1]) ? v[1].some(function (w) {
          return isComputed(w);
        }) : isPercent(v[1]);
      })) {
        has_pct = obj.map(function (v) {
          return Array.isArray(v[1]) ? v[1].map(function (w) {
            return isPercent(w);
          }) : isPercent(v[1]);
        });
        has_ratio = obj.map(function (v) {
          return Array.isArray(v[1]) && v[1].map(function (w) {
            return isRatio(w);
          });
        });
        if (has_ratio.some(function (v) {
          return Array.isArray(v) && v.every(function (c) {
            return c;
          });
        })) {
          throw dualRatioError; // invalid case where both dims are ratios
        }
      }
    } else if (obj.some(isComputed)) {
      // 2D size
      has_pct = [obj.map(isPercent)];
      has_ratio = [obj.map(isRatio)];
      if (has_ratio[0].every(function (c) {
        return c;
      })) {
        throw dualRatioError; // invalid case where both dims are ratios
      }
    }
  } else if (isRatio(obj)) {
    throw 'this value only allowed as half of an array, eg [16px, auto]:';
    // TODO: add this error check for zoom stop parsing above
  }
  if (has_pct || has_ratio) {
    // texture is required when % or ratio sizes are used
    if (!texture) {
      throw '% or \'auto\' keywords can only be used to specify point size when a texture is defined';
    }

    // per-sprite based evaluation
    obj = {
      value: obj
    };
    obj.has_pct = has_pct;
    obj.has_ratio = has_ratio;
    obj.sprites = {}; // cache by sprite
  } else {
    // no % or aspect ratio sizing, one cache for texture or all sprites
    obj = StyleParser.createPropertyCache(obj, parsePositiveNumber);
  }
  return obj;
};
StyleParser.evalCachedPointSizeProperty = function (val, sprite_info, texture_info, context) {
  if (val == null) {
    return;
  }

  // no percentage-based calculation, one cache for all sprites
  if (!val.has_pct && !val.has_ratio) {
    return StyleParser.evalCachedProperty(val, context);
  }
  if (sprite_info) {
    // per-sprite based evaluation, cache sizes per sprite
    if (!val.sprites[sprite_info.sprite]) {
      val.sprites[sprite_info.sprite] = createPointSizeCacheEntry(val, sprite_info);
    }
    return StyleParser.evalCachedProperty(val.sprites[sprite_info.sprite], context);
  } else {
    // texture-based evaluation
    // apply percentage or ratio sizing to a texture
    val.texture = val.texture || createPointSizeCacheEntry(val, texture_info);
    return StyleParser.evalCachedProperty(val.texture, context);
  }
};
function createPointSizeCacheEntry(val, image_info) {
  // the cache property transform function needs access to the image in `val`
  // so it's accessed via a closure here
  return StyleParser.createPropertyCache(val.value, function (v, i) {
    if (Array.isArray(v)) {
      // 2D size
      // either width or height or both could be a %
      v = v.map(function (c, j) {
        return val.has_ratio[i][j] ? c : parsePositiveNumber(c);
      }).
      // convert non-ratio values to px
      map(function (c, j) {
        return val.has_pct[i][j] ? image_info.css_size[j] * c / 100 : c;
      }); // apply % scaling as needed

      // either width or height could be a ratio
      if (val.has_ratio[i][0]) {
        v[0] = v[1] * image_info.aspect;
      } else if (val.has_ratio[i][1]) {
        v[1] = v[0] / image_info.aspect;
      }
    } else {
      // 1D size
      v = parsePositiveNumber(v);
      if (val.has_pct[i]) {
        v = image_info.css_size.map(function (c) {
          return c * v / 100;
        }); // set size as % of image
      } else {
        v = [v, v]; // expand 1D size to 2D
      }
    }
    return v;
  });
}

// Interpolation and caching for a generic property (not a color or distance)
// { value: original, static: val, zoom: { 1: val1, 2: val2, ... }, dynamic: function(){...} }
StyleParser.evalCachedProperty = function (val, context) {
  if (val == null) {
    return;
  } else if (val.dynamic) {
    // function, compute each time (no caching)
    return tryEval(val.dynamic, context);
  } else if (val.static) {
    // single static value
    return val.static;
  } else if (val.zoom && val.zoom[context.zoom]) {
    // interpolated, cached
    return val.zoom[context.zoom];
  } else {
    // not yet evaulated for cache
    // Dynamic function-based
    if (typeof val.value === 'function') {
      if (val.dynamic_transform) {
        // apply an optional post-eval transform function
        // e.g. apply device pixel ratio to font sizes, unit conversions, etc.
        val.dynamic = function (context) {
          return val.dynamic_transform(val.value(context));
        };
      } else {
        val.dynamic = val.value;
      }
      return tryEval(val.dynamic, context);
    }
    // Array of zoom-interpolated stops, e.g. [zoom, value] pairs
    else if (Array.isArray(val.value) && Array.isArray(val.value[0])) {
      // Calculate value for current zoom
      val.zoom = val.zoom || {};
      val.zoom[context.zoom] = Utils.interpolate(context.zoom, val.value);
      return val.zoom[context.zoom];
    }
    // Single static value
    else {
      val.static = val.value;
      return val.static;
    }
  }
};
StyleParser.convertUnits = function (val, context) {
  // pre-parsed units
  if (val.value != null) {
    if (val.units === 'px') {
      // convert from pixels
      return val.value * Geo$1.metersPerPixel(context.zoom);
    }
    return val.value;
  }
  // un-parsed unit string
  else if (typeof val === 'string') {
    if (val.trim().slice(-2) === 'px') {
      val = parseNumber(val);
      val *= Geo$1.metersPerPixel(context.zoom); // convert from pixels
    } else {
      val = parseNumber(val);
    }
  }
  // multiple values or stops
  else if (Array.isArray(val)) {
    // Array of arrays, e.g. zoom-interpolated stops
    if (Array.isArray(val[0])) {
      return val.map(function (v) {
        return [v[0], StyleParser.convertUnits(v[1], context)];
      });
    }
    // Array of values
    else {
      return val.map(function (v) {
        return StyleParser.convertUnits(v, context);
      });
    }
  }
  return val;
};

// Pre-parse units from string values
StyleParser.parseUnits = function (value) {
  var obj = {
    value: parseNumber(value)
  };
  if (obj.value !== 0 && typeof value === 'string' && value.trim().slice(-2) === 'px') {
    obj.units = 'px';
  }
  return obj;
};

// Takes a distance cache object and returns a distance value for this zoom
// (caching the result for future use)
// { value: original, zoom: { z: meters }, dynamic: function(){...} }
StyleParser.evalCachedDistanceProperty = function (val, context) {
  if (val == null) {
    return;
  } else if (val.dynamic) {
    return tryEval(val.dynamic, context);
  } else if (val.zoom && val.zoom[context.zoom]) {
    return val.zoom[context.zoom];
  } else {
    // Dynamic function-based
    if (typeof val.value === 'function') {
      val.dynamic = val.value;
      return tryEval(val.dynamic, context);
    }
    // Array of zoom-interpolated stops, e.g. [zoom, value] pairs
    else if (val.zoom) {
      // Calculate value for current zoom
      // Do final unit conversion as late as possible, when interpolation values have been determined
      val.zoom[context.zoom] = Utils.interpolate(context.zoom, val.value, function (v) {
        return StyleParser.convertUnits(v, context);
      });
      return val.zoom[context.zoom];
    } else {
      return StyleParser.convertUnits(val.value, context);
    }
  }
};

// Cache previously parsed color strings
StyleParser.string_colors = {};
StyleParser.colorForString = function (string) {
  // Cached
  if (StyleParser.string_colors[string]) {
    return StyleParser.string_colors[string];
  }

  // Calculate and cache
  var color = parseCSSColor.parseCSSColor(string);
  if (color && color.length === 4) {
    color[0] /= 255;
    color[1] /= 255;
    color[2] /= 255;
  } else {
    color = StyleParser.defaults.color;
  }
  StyleParser.string_colors[string] = color;
  return color;
};

// Takes a color cache object and returns a color value for this zoom
// (caching the result for future use)
// { value: original, static: [r,g,b,a], zoom: { z: [r,g,b,a] }, dynamic: function(){...} }
StyleParser.evalCachedColorProperty = function (val) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (val == null) {
    return;
  } else if (val.dynamic) {
    var v = tryEval(val.dynamic, context);
    if (typeof v === 'string') {
      v = StyleParser.colorForString(v);
    }
    if (v && v[3] == null) {
      v[3] = 1; // default alpha
    }
    return v;
  } else if (val.static) {
    return val.static;
  } else if (val.zoom && val.zoom[context.zoom]) {
    return val.zoom[context.zoom];
  } else {
    // Dynamic function-based color
    if (typeof val.value === 'function') {
      val.dynamic = val.value;
      var _v = tryEval(val.dynamic, context);
      if (typeof _v === 'string') {
        _v = StyleParser.colorForString(_v);
      }
      if (_v && _v[3] == null) {
        _v[3] = 1; // default alpha
      }
      return _v;
    }
    // Single string color
    else if (typeof val.value === 'string') {
      val.static = StyleParser.colorForString(val.value);
      return val.static;
    }
    // Array of zoom-interpolated stops, e.g. [zoom, color] pairs
    else if (val.zoom) {
      // Parse any string colors inside stops, the first time we encounter this property
      if (!val.zoom_preprocessed) {
        for (var i = 0; i < val.value.length; i++) {
          var _v2 = val.value[i];
          if (_v2 && typeof _v2[1] === 'string') {
            _v2[1] = StyleParser.colorForString(_v2[1]);
          }
        }
        val.zoom_preprocessed = true;
      }

      // Calculate color for current zoom
      val.zoom[context.zoom] = Utils.interpolate(context.zoom, val.value);
      val.zoom[context.zoom][3] = val.zoom[context.zoom][3] || 1; // default alpha
      return val.zoom[context.zoom];
    }
    // Single array color
    else {
      val.static = val.value.map(function (x) {
        return x;
      }); // copy to avoid modifying
      if (val.static && val.static[3] == null) {
        val.static[3] = 1; // default alpha
      }
      return val.static;
    }
  }
};

// Evaluate color cache object and apply optional alpha override (alpha arg is a single value cache object)
StyleParser.evalCachedColorPropertyWithAlpha = function (val, alpha_prop, context) {
  var color = StyleParser.evalCachedColorProperty(val, context);
  if (color != null && alpha_prop != null) {
    var alpha = StyleParser.evalCachedProperty(alpha_prop, context);
    if (alpha != null) {
      return [color[0], color[1], color[2], alpha];
    }
  }
  return color;
};
StyleParser.parseColor = function (val) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (typeof val === 'function') {
    val = tryEval(val, context);
  }

  // Parse CSS-style colors
  // TODO: change all colors to use 0-255 range internally to avoid dividing and then re-multiplying in geom builder
  if (typeof val === 'string') {
    val = StyleParser.colorForString(val);
  } else if (Array.isArray(val) && Array.isArray(val[0])) {
    // Array of zoom-interpolated stops, e.g. [zoom, color] pairs
    for (var i = 0; i < val.length; i++) {
      var v = val[i];
      if (typeof v[1] === 'string') {
        v[1] = StyleParser.colorForString(v[1]);
      }
    }
    if (context.zoom) {
      val = Utils.interpolate(context.zoom, val);
    }
  }

  // Defaults
  if (Array.isArray(val)) {
    val = val.map(function (x) {
      return x;
    }); // copy to avoid modifying
    // alpha
    if (val[3] == null) {
      val[3] = 1;
    }
  } else {
    val = [0, 0, 0, 1];
  }
  return val;
};
StyleParser.calculateOrder = function (order, context) {
  // Computed order
  if (typeof order === 'function') {
    order = tryEval(order, context);
  } else if (typeof order === 'string') {
    // Order tied to feature property
    if (context.feature.properties[order]) {
      order = context.feature.properties[order];
    }
    // Explicit order value
    else {
      order = parsePositiveNumber(order);
    }
  }
  return order;
};

// Evaluate a function-based property, or pass-through static value
StyleParser.evalProperty = function (prop, context) {
  if (typeof prop === 'function') {
    return tryEval(prop, context);
  }
  return prop;
};

// eval property function with try/catch
function tryEval(func, context) {
  try {
    return func(context);
  } catch (e) {
    log('warn', "Property function in layer '".concat(context.layers[context.layers.length - 1], "' failed with\n"), "error ".concat(e.stack, "\n"), "function '".concat(func.source, "'\n"), context.feature, context);
  }
}

var FeatureSelection = /*#__PURE__*/function () {
  function FeatureSelection(gl, workers, lock_fn) {
    _classCallCheck(this, FeatureSelection);
    this.gl = gl;
    this.workers = workers; // pool of workers to request feature look-ups from, keyed by id
    this._lock_fn = typeof lock_fn === 'function' && lock_fn; // indicates if safe to read/write selection buffer this frame
    this.init();
  }
  return _createClass(FeatureSelection, [{
    key: "init",
    value: function init() {
      // Selection state tracking
      this.requests = {}; // pending selection requests
      this.feature = null; // currently selected feature
      this.read_delay = 0; // delay time from selection render to framebuffer sample, to avoid CPU/GPU sync lock
      this.read_delay_timer = null; // current timer (setTimeout) for delayed selection reads
      this.pixels = null; // allocated lazily on request

      // Frame buffer for selection
      // TODO: initiate lazily in case we don't need to do any selection
      this.fbo = this.gl.createFramebuffer();
      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fbo);
      this.fbo_size = {
        width: 256,
        height: 256
      }; // TODO: make configurable / adaptive based on canvas size

      // Texture for the FBO color attachment
      var fbo_texture = Texture.create(this.gl, '__selection_fbo', {
        filtering: 'nearest'
      });
      fbo_texture.setData(this.fbo_size.width, this.fbo_size.height, null, {
        filtering: 'nearest'
      });
      this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, fbo_texture.texture, 0);

      // Renderbuffer for the FBO depth attachment
      var fbo_depth_rb = this.gl.createRenderbuffer();
      this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, fbo_depth_rb);
      this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, this.fbo_size.width, this.fbo_size.height);
      this.gl.framebufferRenderbuffer(this.gl.FRAMEBUFFER, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, fbo_depth_rb);
      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.gl && this.fbo) {
        this.gl.deleteFramebuffer(this.fbo);
        this.fbo = null;
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
      }

      // TODO: free texture?
    }

    // external lock function determines when it's safe to read/write from selection buffer
  }, {
    key: "locked",
    get: function get() {
      return this._lock_fn && this._lock_fn() || false;
    }
  }, {
    key: "bind",
    value: function bind() {
      var _this$gl;
      // Switch to FBO
      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fbo);
      this.gl.viewport(0, 0, this.fbo_size.width, this.fbo_size.height);
      (_this$gl = this.gl).clearColor.apply(_this$gl, _toConsumableArray(FeatureSelection.defaultColor));
    }

    // Request feature selection
    // Runs asynchronously, schedules selection buffer to be updated
  }, {
    key: "getFeatureAt",
    value: function getFeatureAt(point, _ref) {
      var _this = this;
      var radius = _ref.radius;
      // ensure requested point is in canvas bounds
      if (!point || point.x < 0 || point.y < 0 || point.x > 1 || point.y > 1) {
        return Promise.resolve({
          feature: null,
          changed: false
        });
      }
      return new Promise(function (resolve, reject) {
        // Queue requests for feature selection, and they will be picked up by the render loop
        _this.selection_request_id = _this.selection_request_id + 1 || 0;
        _this.requests[_this.selection_request_id] = {
          id: _this.selection_request_id,
          point: point,
          radius: radius,
          resolve: resolve,
          reject: reject
        };
      });
    }

    // Any pending selection requests
  }, {
    key: "pendingRequests",
    value: function pendingRequests() {
      return Object.keys(this.requests).length ? this.requests : null;
    }
  }, {
    key: "hasPendingRequests",
    value: function hasPendingRequests() {
      return this.pendingRequests() != null;
    }
  }, {
    key: "clearPendingRequests",
    value: function clearPendingRequests() {
      for (var r in this.requests) {
        var request = this.requests[r];

        // This request was already sent to the worker, we're just awaiting its reply
        if (request.sent) {
          continue;
        }

        // Reject request since it will never be fulfilled
        // TODO: pass a reason for rejection?
        request.reject({
          request: request
        });
        delete this.requests[r];
      }
    }

    // Read pending results from the selection buffer. Called after rendering to selection buffer.
  }, {
    key: "read",
    value: function read() {
      var _this2 = this;
      // Delay reading the pixel result from the selection buffer to avoid CPU/GPU sync lock.
      // Calling readPixels synchronously caused a massive performance hit, presumably since it
      // forced this function to wait for the GPU to finish rendering and retrieve the texture contents.
      if (this.read_delay_timer != null) {
        clearTimeout(this.read_delay_timer);
      }
      this.read_delay_timer = setTimeout(function () {
        if (_this2.locked) {
          return;
        }
        var gl = _this2.gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, _this2.fbo);
        for (var r in _this2.requests) {
          var request = _this2.requests[r];

          // This request was already sent to the worker, we're just awaiting its reply
          if (request.sent) {
            continue;
          }

          // Check selection map against FBO
          var feature_key = void 0,
            worker_id = 255;
          var _request = request,
            point = _request.point,
            radius = _request.radius;
          var diam_px = void 0;
          if (!radius) {
            radius = {
              x: 0,
              y: 0
            };
            diam_px = {
              x: 1,
              y: 1
            };
          } else {
            // diameter in selection buffer pixels
            var max_radius = Math.min(_this2.fbo_size.width, _this2.fbo_size.height);
            diam_px = {
              x: Math.min(Math.ceil(radius.x * 2 * _this2.fbo_size.width), max_radius),
              y: Math.min(Math.ceil(radius.y * 2 * _this2.fbo_size.height), max_radius)
            };
          }

          // allocate or resize
          if (_this2.pixels == null || _this2.pixels.byteLength < diam_px.x * diam_px.y * 4) {
            _this2.pixels = new Uint8Array(diam_px.x * diam_px.y * 4);
          }

          // clear pixels
          if (_this2.pixels.fill instanceof Function) {
            _this2.pixels.fill(0); // native typed array fill
          } else {
            for (var _p = 0; _p < _this2.pixels.length; _p++) {
              _this2.pixels[_p] = 0;
            }
          }

          // capture pixels
          gl.readPixels(Math.round((point.x - radius.x) * _this2.fbo_size.width), Math.round((1 - point.y - radius.y) * _this2.fbo_size.height), diam_px.x, diam_px.y, gl.RGBA, gl.UNSIGNED_BYTE, _this2.pixels);

          // first check center pixel (avoid scanning all pixels if cursor is directly on a feature)
          var p = (Math.round(diam_px.y / 2) * diam_px.x + Math.round(diam_px.x / 2)) * 4;
          var v = _this2.pixels[p] + (_this2.pixels[p + 1] << 8) + (_this2.pixels[p + 2] << 16); // feature id in RGB channels
          if (v > 0) {
            feature_key = v + (_this2.pixels[p + 3] << 24) >>> 0; // worker id in alpha channel
            worker_id = _this2.pixels[p + 3];
          } else {
            // scan all pixels for feature closest to cursor
            var min_dist = -1 >>> 0;
            p = 0;
            for (var y = 0; y < diam_px.y; y++) {
              for (var x = 0; x < diam_px.x; x++, p += 4) {
                v = _this2.pixels[p] + (_this2.pixels[p + 1] << 8) + (_this2.pixels[p + 2] << 16); // feature id in RGB channels
                if (v > 0) {
                  // non-zero value indicates a feature
                  // check to see if closer than last found feature
                  var dist = (x - diam_px.x / 2) * (x - diam_px.x / 2) + (y - diam_px.y / 2) * (y - diam_px.y / 2);
                  if (dist <= min_dist) {
                    // get worker id from alpha channel
                    feature_key = v + (_this2.pixels[p + 3] << 24) >>> 0;
                    worker_id = _this2.pixels[p + 3];
                    min_dist = dist;
                  }
                }
              }
            }
          }

          // If feature found, ask appropriate web worker to lookup feature
          if (worker_id !== 255) {
            // 255 indicates an empty selection buffer pixel
            if (_this2.workers[worker_id] != null) {
              WorkerBroker$1.postMessage(_this2.workers[worker_id], 'self.getFeatureSelection', {
                id: request.id,
                key: feature_key
              }).then(function (message) {
                _this2.finishRead(message);
              });
            }
          }
          // No feature found, but still need to resolve promise
          else {
            _this2.finishRead({
              id: request.id
            });
          }
          request.sent = true;
        }
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      }, this.read_delay);
    }

    // Called on main thread when a web worker finds a feature in the selection buffer
  }, {
    key: "finishRead",
    value: function finishRead(message) {
      var request = this.requests[message.id];
      if (!request) {
        log('error', 'FeatureSelection.finishRead(): could not find message', message);
        return; // request was cleared before it returned
      }
      var feature = message.feature;
      var changed = false;
      if (feature != null && this.feature == null || feature == null && this.feature != null || feature != null && this.feature != null && JSON.stringify(feature) !== JSON.stringify(this.feature)) {
        changed = true;
      }
      this.feature = feature; // store the most recently selected feature

      // Resolve the request
      request.resolve({
        feature: feature,
        changed: changed,
        request: request
      });
      delete this.requests[message.id]; // done processing this request
    }

    // Selection map generation
    // Each worker will create its own independent, 'local' selection map

    // Create a unique 32-bit color to identify a feature
    // Workers independently create/modify selection colors in their own threads, but we also
    // need the main thread to know where each feature color originated. To accomplish this,
    // we partition the map by setting the 4th component (alpha channel) to the worker's id.
  }], [{
    key: "makeEntry",
    value: function makeEntry(tile) {
      // 32-bit color key
      this.map_entry++;
      var ir = this.map_entry & 255;
      var ig = this.map_entry >> 8 & 255;
      var ib = this.map_entry >> 16 & 255;
      var ia = this.map_prefix;
      var r = ir / 255;
      var g = ig / 255;
      var b = ib / 255;
      var a = ia / 255;
      var key = ir + (ig << 8) + (ib << 16) + (ia << 24) >>> 0; // need unsigned right shift to convert to positive #

      this.map[key] = {
        color: [r, g, b, a]
      };
      this.map_size++;

      // Initialize tile-specific tracking info
      if (!this.tiles[tile.key]) {
        this.tiles[tile.key] = {
          entries: [],
          // set of feature entries in this thread
          tile: {
            // subset of tile properties to pass back with feature
            key: tile.key,
            coords: tile.coords,
            style_z: tile.style_z,
            source: tile.source,
            generation: tile.generation
          }
        };
      }
      this.tiles[tile.key].entries.push(key);
      return this.map[key];
    }
  }, {
    key: "makeColor",
    value: function makeColor(feature, tile, context) {
      var selector = this.makeEntry(tile);
      selector.feature = {
        id: feature.id,
        properties: feature.properties,
        source_name: context.source,
        source_layer: context.layer,
        layers: context.layers,
        tile: this.tiles[tile.key].tile
      };
      return selector.color;
    }
  }, {
    key: "reset",
    value: function reset(sources) {
      var _this3 = this;
      // Clear specific sources
      if (Array.isArray(sources)) {
        sources.forEach(function (source) {
          return _this3.clearSource(source);
        });
      }
      // Clear all sources
      else {
        this.tiles = {};
        this.map = {};
        this.map_size = 0;
        this.map_entry = 0;
      }
    }
  }, {
    key: "clearSource",
    value: function clearSource(source) {
      for (var key in this.tiles) {
        if (this.tiles[key].tile.source === source) {
          this.clearTile(key);
        }
      }
    }
  }, {
    key: "clearTile",
    value: function clearTile(key) {
      var _this4 = this;
      if (this.tiles[key]) {
        this.tiles[key].entries.forEach(function (k) {
          return delete _this4.map[k];
        });
        this.map_size -= this.tiles[key].entries.length;
        delete this.tiles[key];
      }
    }
  }, {
    key: "getMapSize",
    value: function getMapSize() {
      return this.map_size;
    }
  }, {
    key: "setPrefix",
    value: function setPrefix(prefix) {
      this.map_prefix = prefix;
    }
  }]);
}(); // Static properties
FeatureSelection.map = {}; // this will be unique per module instance (so unique per worker)
FeatureSelection.tiles = {}; // selection keys, by tile
FeatureSelection.map_size = 0;
FeatureSelection.map_entry = 0;
FeatureSelection.map_prefix = 0; // set by worker to worker id #
FeatureSelection.defaultColor = [0, 0, 0, 1];

// WebGL constants - need to import these separately to make them available in the web worker

var gl;
var gl$1 = gl = {};

/* DataType */
gl.BYTE = 0x1400;
gl.UNSIGNED_BYTE = 0x1401;
gl.SHORT = 0x1402;
gl.UNSIGNED_SHORT = 0x1403;
gl.INT = 0x1404;
gl.UNSIGNED_INT = 0x1405;
gl.FLOAT = 0x1406;

// A single mesh/VBO, described by a vertex layout, that can be drawn with one or more programs
var VBOMesh = /*#__PURE__*/function () {
  function VBOMesh(gl, vertex_data, element_data, vertex_layout, options) {
    _classCallCheck(this, VBOMesh);
    options = options || {};
    this.gl = gl;
    this.vertex_data = vertex_data; // typed array
    this.element_data = element_data; // typed array
    this.vertex_layout = vertex_layout;
    this.vertex_buffer = this.gl.createBuffer();
    this.buffer_size = this.vertex_data.byteLength;
    this.draw_mode = options.draw_mode || this.gl.TRIANGLES;
    this.data_usage = options.data_usage || this.gl.STATIC_DRAW;
    this.vertices_per_geometry = 3; // TODO: support lines, strip, fan, etc.
    this.uniforms = options.uniforms;
    this.textures = options.textures; // any textures owned by this mesh
    this.retain = options.retain || false; // whether to retain mesh data in CPU after uploading to GPU
    this.created_at = +new Date();
    this.fade_in_time = options.fade_in_time || 0; // optional time to fade in mesh

    this.vertex_count = this.vertex_data.byteLength / this.vertex_layout.stride;
    this.element_count = 0;
    this.vaos = {}; // map of VertexArrayObjects, keyed by program

    this.toggle_element_array = false;
    if (this.element_data) {
      this.toggle_element_array = true;
      this.element_count = this.element_data.length;
      this.geometry_count = this.element_count / this.vertices_per_geometry;
      this.element_type = this.element_data.constructor === Uint16Array ? this.gl.UNSIGNED_SHORT : this.gl.UNSIGNED_INT;
      this.element_buffer = this.gl.createBuffer();
      this.buffer_size += this.element_data.byteLength;
      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.element_buffer);
      this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.element_data, this.data_usage);
    } else {
      this.geometry_count = this.vertex_count / this.vertices_per_geometry;
    }
    this.upload();
    if (!this.retain) {
      delete this.vertex_data;
      delete this.element_data;
    }
    this.valid = true;
  }

  // Render, by default with currently bound program, or otherwise with optionally provided one
  // Returns true if mesh requests a render on next frame (e.g. for fade animations)
  return _createClass(VBOMesh, [{
    key: "render",
    value: function render() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (!this.valid) {
        return false;
      }
      var program = options.program || ShaderProgram.current;
      program.use();
      if (this.uniforms) {
        program.saveUniforms(this.uniforms);
        program.setUniforms(this.uniforms, false); // don't reset texture unit
      }
      var visible_time = (+new Date() - this.created_at) / 1000;
      program.uniform('1f', 'u_visible_time', visible_time);
      this.bind(program);
      if (this.toggle_element_array) {
        this.gl.drawElements(this.draw_mode, this.element_count, this.element_type, 0);
      } else {
        this.gl.drawArrays(this.draw_mode, 0, this.vertex_count);
      }
      VertexArrayObject.bind(this.gl, null);
      if (this.uniforms) {
        program.restoreUniforms(this.uniforms);
      }

      // Request next render if mesh is fading in
      return visible_time < this.fade_in_time;
    }

    // Bind buffers and vertex attributes to prepare for rendering
  }, {
    key: "bind",
    value: function bind(program) {
      var _this = this;
      // Bind VAO for this progam, or create one
      var vao = this.vaos[program.id];
      if (vao) {
        VertexArrayObject.bind(this.gl, vao);
      } else {
        this.vaos[program.id] = VertexArrayObject.create(this.gl, function () {
          _this.gl.bindBuffer(_this.gl.ARRAY_BUFFER, _this.vertex_buffer);
          if (_this.toggle_element_array) {
            _this.gl.bindBuffer(_this.gl.ELEMENT_ARRAY_BUFFER, _this.element_buffer);
          }
          _this.vertex_layout.enableDynamicAttributes(_this.gl, program);
        });
      }
      this.vertex_layout.enableStaticAttributes(this.gl, program);
    }

    // Upload buffer data to GPU
  }, {
    key: "upload",
    value: function upload() {
      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);
      this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertex_data, this.data_usage);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (!this.valid) {
        return false;
      }
      this.valid = false;
      for (var v in this.vaos) {
        VertexArrayObject.destroy(this.gl, this.vaos[v]);
      }
      this.gl.deleteBuffer(this.vertex_buffer);
      this.vertex_buffer = null;
      if (this.element_buffer) {
        this.gl.deleteBuffer(this.element_buffer);
        this.element_buffer = null;
      }
      delete this.vertex_data;
      delete this.element_data;
      if (this.textures) {
        this.textures.forEach(function (t) {
          return Texture.release(t);
        });
      }
      return true;
    }
  }]);
}();

var material_source = `/*

Defines globals:
material
light_accumulator_*

*/


// MATERIALS
//
struct Material {
    #ifdef TANGRAM_MATERIAL_EMISSION
        vec4 emission;
        #ifdef TANGRAM_MATERIAL_EMISSION_TEXTURE
            vec3 emissionScale;
        #endif
    #endif

    #ifdef TANGRAM_MATERIAL_AMBIENT
        vec4 ambient;
        #ifdef TANGRAM_MATERIAL_AMBIENT_TEXTURE
            vec3 ambientScale;
        #endif
    #endif

    #ifdef TANGRAM_MATERIAL_DIFFUSE
        vec4 diffuse;
        #ifdef TANGRAM_MATERIAL_DIFFUSE_TEXTURE
            vec3 diffuseScale;
        #endif
    #endif

    #ifdef TANGRAM_MATERIAL_SPECULAR
        vec4 specular;
        float shininess;
        #ifdef TANGRAM_MATERIAL_SPECULAR_TEXTURE
            vec3 specularScale;
        #endif
    #endif


    #ifdef TANGRAM_MATERIAL_NORMAL_TEXTURE
        vec3 normalScale;
        float normalAmount;
    #endif
};

// Note: uniform is copied to a global instance to allow modification
uniform Material u_material;
Material material;

#ifdef TANGRAM_MATERIAL_EMISSION_TEXTURE
uniform sampler2D u_material_emission_texture;
#endif

#ifdef TANGRAM_MATERIAL_AMBIENT_TEXTURE
uniform sampler2D u_material_ambient_texture;
#endif

#ifdef TANGRAM_MATERIAL_DIFFUSE_TEXTURE
uniform sampler2D u_material_diffuse_texture;
#endif

#ifdef TANGRAM_MATERIAL_SPECULAR_TEXTURE
uniform sampler2D u_material_specular_texture;
#endif

#ifdef TANGRAM_MATERIAL_NORMAL_TEXTURE
uniform sampler2D u_material_normal_texture;
#endif

// Global light accumulators for each property
vec4 light_accumulator_ambient = vec4(vec3(0.0), 1.);
vec4 light_accumulator_diffuse = vec4(vec3(0.0), 1.);
#ifdef TANGRAM_MATERIAL_SPECULAR
    vec4 light_accumulator_specular = vec4(vec3(0.0), 1.);
#endif


#ifdef TANGRAM_MATERIAL_TEXTURE_SPHEREMAP
vec4 getSphereMap (in sampler2D _tex, in vec3 _eyeToPoint, in vec3 _normal, in vec2 _skew) {
    // Normalized vector from camera to surface
    vec3 eye = normalize(_eyeToPoint);

    // Adjust for camera skew
    eye.xy -= _skew;
    eye = normalize(eye);

    // Reflection of eye off of surface normal
    vec3 r = reflect(eye, _normal);

    // Map reflected vector onto the surface of a sphere
    r.z += 1.0;
    float m = 2. * length(r);

    // Adjust xy to account for spherical shape, and center in middle of texture
    vec2 uv = r.xy / m + .5;

    // Sample the environment map
    return texture2D(_tex, uv);
}
#endif


#ifdef TANGRAM_MATERIAL_TEXTURE_TRIPLANAR
vec3 getTriPlanarBlend (in vec3 _normal) {
    vec3 blending = abs(_normal);
    blending = normalize(max(blending, 0.00001));
    float b = (blending.x + blending.y + blending.z);
    return blending / b;
}

vec4 getTriPlanar (in sampler2D _tex, in vec3 _pos, in vec3 _normal, in vec3 _scale) {
    vec3 blending = getTriPlanarBlend(_normal);
    vec4 xaxis = texture2D(_tex, fract(_pos.yz * _scale.x));
    vec4 yaxis = texture2D(_tex, fract(_pos.xz * _scale.y));
    vec4 zaxis = texture2D(_tex, fract(_pos.xy * _scale.z));
    return  xaxis * blending.x + yaxis * blending.y + zaxis * blending.z;
}
#endif


#ifdef TANGRAM_MATERIAL_TEXTURE_PLANAR
vec4 getPlanar (in sampler2D _tex, in vec3 _pos, in vec2 _scale) {
    return texture2D( _tex, fract(_pos.xy * _scale.x) );
}
#endif


#ifdef TANGRAM_MATERIAL_NORMAL_TEXTURE
void calculateNormal (inout vec3 _normal) {
    // Get NORMALMAP
    //------------------------------------------------
    #ifdef TANGRAM_MATERIAL_NORMAL_TEXTURE_UV
    _normal += texture2D(u_material_normal_texture, fract(v_texcoord*material.normalScale.xy)).rgb*2.0-1.0;
    #endif

    #ifdef TANGRAM_MATERIAL_NORMAL_TEXTURE_PLANAR
    vec3 normalTex = getPlanar(u_material_normal_texture, v_world_position.xyz, material.normalScale.xy).rgb*2.0-1.0;
    _normal += normalTex;
    #endif

    #ifdef TANGRAM_MATERIAL_NORMAL_TEXTURE_TRIPLANAR
    vec3 normalTex = getTriPlanar(u_material_normal_texture, v_world_position.xyz, _normal, material.normalScale).rgb*2.0-1.0;
    _normal += normalTex;
    #endif

    _normal = normalize(_normal);
}
#endif

void calculateMaterial (in vec3 _eyeToPoint, inout vec3 _normal) {
    // get EMISSION TEXTUREMAP
    //------------------------------------------------
    #ifdef TANGRAM_MATERIAL_EMISSION_TEXTURE
        #ifdef TANGRAM_MATERIAL_EMISSION_TEXTURE_UV
        material.emission *= texture2D(u_material_emission_texture,v_texcoord);
        #endif

        #ifdef TANGRAM_MATERIAL_EMISSION_TEXTURE_PLANAR
        material.emission *= getPlanar(u_material_emission_texture, v_world_position.xyz, material.emissionScale.xy);
        #endif

        #ifdef TANGRAM_MATERIAL_EMISSION_TEXTURE_TRIPLANAR
        material.emission *= getTriPlanar(u_material_emission_texture, v_world_position.xyz, _normal, material.emissionScale);
        #endif

        #ifdef TANGRAM_MATERIAL_EMISSION_TEXTURE_SPHEREMAP
        material.emission *= getSphereMap(u_material_emission_texture, _eyeToPoint, _normal, u_vanishing_point);
        #endif
    #endif

    // get AMBIENT TEXTUREMAP
    //------------------------------------------------
    #ifdef TANGRAM_MATERIAL_AMBIENT_TEXTURE
        #ifdef TANGRAM_MATERIAL_AMBIENT_TEXTURE_UV
        material.ambient *= texture2D(u_material_ambient_texture,v_texcoord);
        #endif

        #ifdef TANGRAM_MATERIAL_AMBIENT_TEXTURE_PLANAR
        material.ambient *= getPlanar(u_material_ambient_texture, v_world_position.xyz, material.ambientScale.xy);
        #endif

        #ifdef TANGRAM_MATERIAL_AMBIENT_TEXTURE_TRIPLANAR
        material.ambient *= getTriPlanar(u_material_ambient_texture, v_world_position.xyz, _normal, material.ambientScale);
        #endif

        #ifdef TANGRAM_MATERIAL_AMBIENT_TEXTURE_SPHEREMAP
        material.ambient *= getSphereMap(u_material_ambient_texture, _eyeToPoint, _normal, u_vanishing_point);
        #endif
    #endif

    // get DIFFUSE TEXTUREMAP
    //------------------------------------------------
    #ifdef TANGRAM_MATERIAL_DIFFUSE_TEXTURE
        #ifdef TANGRAM_MATERIAL_DIFFUSE_TEXTURE_UV
        material.diffuse *= texture2D(u_material_diffuse_texture,v_texcoord);
        #endif

        #ifdef TANGRAM_MATERIAL_DIFFUSE_TEXTURE_PLANAR
        material.diffuse *= getPlanar(u_material_diffuse_texture, v_world_position.xyz, material.diffuseScale.xy);
        #endif

        #ifdef TANGRAM_MATERIAL_DIFFUSE_TEXTURE_TRIPLANAR
        material.diffuse *= getTriPlanar(u_material_diffuse_texture, v_world_position.xyz, _normal, material.diffuseScale);
        #endif

        #ifdef TANGRAM_MATERIAL_DIFFUSE_TEXTURE_SPHEREMAP
        material.diffuse *= getSphereMap(u_material_diffuse_texture, _eyeToPoint, _normal, u_vanishing_point);
        #endif
    #endif

    // get SPECULAR TEXTUREMAP
    //------------------------------------------------
    #ifdef TANGRAM_MATERIAL_SPECULAR_TEXTURE
        #ifdef TANGRAM_MATERIAL_SPECULAR_TEXTURE_UV
        material.specular *= texture2D(u_material_specular_texture,v_texcoord);
        #endif

        #ifdef TANGRAM_MATERIAL_SPECULAR_TEXTURE_PLANAR
        material.specular *= getPlanar(u_material_specular_texture, v_world_position.xyz, material.specularScale.xy);
        #endif

        #ifdef TANGRAM_MATERIAL_SPECULAR_TEXTURE_TRIPLANAR
        material.specular *= getTriPlanar(u_material_specular_texture, v_world_position.xyz, _normal, material.specularScale);
        #endif

        #ifdef TANGRAM_MATERIAL_SPECULAR_TEXTURE_SPHEREMAP
        material.specular *= getSphereMap(u_material_specular_texture, _eyeToPoint, _normal, u_vanishing_point);
        #endif
    #endif
}
`;

var material_props = ['emission', 'ambient', 'diffuse', 'specular'];
var Material = /*#__PURE__*/function () {
  function Material(config) {
    var _this = this;
    _classCallCheck(this, Material);
    config = config || {};

    // These properties all have the same defaults, so they can be set in bulk
    material_props.forEach(function (prop) {
      var value = config[prop];
      if (value != null) {
        if (value.texture) {
          _this[prop] = {
            texture: value.texture,
            mapping: value.mapping || 'spheremap',
            scale: GLSL.expandVec3(value.scale != null ? value.scale : 1),
            amount: GLSL.expandVec4(value.amount != null ? value.amount : 1)
          };
        } else if (typeof value === 'number' || Array.isArray(value)) {
          _this[prop] = {
            amount: GLSL.expandVec4(value)
          };
        } else if (typeof value === 'string') {
          _this[prop] = {
            amount: StyleParser.parseColor(value)
          };
        } else {
          _this[prop] = value;
        }
      }
    });

    // Extra specular props
    if (this.specular) {
      this.specular.shininess = config.shininess ? parseFloat(config.shininess) : 0.2;
    }

    // Normal mapping
    if (config.normal != null) {
      this.normal = {
        texture: config.normal.texture,
        mapping: config.normal.mapping || 'triplanar',
        scale: GLSL.expandVec3(config.normal.scale != null ? config.normal.scale : 1),
        amount: config.normal.amount != null ? config.normal.amount : 1
      };
    }
  }

  // Determine if a material config block has sufficient properties to create a material
  return _createClass(Material, [{
    key: "inject",
    value: function inject(style) {
      var _this2 = this;
      // For each property, sets defines to configure texture mapping, with a pattern like:
      //   TANGRAM_MATERIAL_DIFFUSE, TANGRAM_MATERIAL_DIFFUSE_TEXTURE, TANGRAM_MATERIAL_DIFFUSE_TEXTURE_SPHEREMAP
      // Also sets flags to keep track of each unique mapping type being used, e.g.:
      //   TANGRAM_MATERIAL_TEXTURE_SPHEREMAP
      // Enables texture coordinates if needed and not already on
      material_props.forEach(function (prop) {
        var def = "TANGRAM_MATERIAL_".concat(prop.toUpperCase());
        var texdef = def + '_TEXTURE';
        style.defines[def] = _this2[prop] != null;
        if (_this2[prop] && _this2[prop].texture) {
          style.defines[texdef] = true;
          style.defines[texdef + '_' + _this2[prop].mapping.toUpperCase()] = true;
          style.defines["TANGRAM_MATERIAL_TEXTURE_".concat(_this2[prop].mapping.toUpperCase())] = true;
          style.texcoords = style.texcoords || _this2[prop].mapping === 'uv';
        }
      });

      // Normal mapping
      // As anove, sets flags to keep track of each unique mapping type being used, e.g.:
      //   TANGRAM_MATERIAL_TEXTURE_SPHEREMAP
      if (this.normal && this.normal.texture) {
        style.defines['TANGRAM_MATERIAL_NORMAL_TEXTURE'] = true;
        style.defines['TANGRAM_MATERIAL_NORMAL_TEXTURE_' + this.normal.mapping.toUpperCase()] = true;
        style.defines["TANGRAM_MATERIAL_TEXTURE_".concat(this.normal.mapping.toUpperCase())] = true;
        style.texcoords = style.texcoords || this.normal.mapping === 'uv';
      }
      style.replaceShaderBlock(Material.block, material_source, 'Material');
      style.addShaderBlock('setup', '\nmaterial = u_material;\n', 'Material');
    }
  }, {
    key: "setupProgram",
    value: function setupProgram(_program) {
      var _this3 = this;
      // For each property, sets uniforms in the pattern:
      // u_material.diffuse, u_material.diffuseScale u_material_diffuse_texture
      material_props.forEach(function (prop) {
        if (_this3[prop]) {
          if (_this3[prop].texture) {
            _program.setTextureUniform("u_material_".concat(prop, "_texture"), _this3[prop].texture);
            _program.uniform('3fv', "u_material.".concat(prop, "Scale"), _this3[prop].scale);
            _program.uniform('4fv', "u_material.".concat(prop), _this3[prop].amount);
          } else if (_this3[prop].amount) {
            _program.uniform('4fv', "u_material.".concat(prop), _this3[prop].amount);
          }
        }
      });

      // Extra specular props
      if (this.specular) {
        _program.uniform('1f', 'u_material.shininess', this.specular.shininess);
      }

      // Normal mapping
      if (this.normal && this.normal.texture) {
        _program.setTextureUniform('u_material_normal_texture', this.normal.texture);
        _program.uniform('3fv', 'u_material.normalScale', this.normal.scale);
        _program.uniform('1f', 'u_material.normalAmount', this.normal.amount);
      }
    }
  }], [{
    key: "isValid",
    value: function isValid(config) {
      if (config == null) {
        return false;
      }
      if (config.emission == null && config.ambient == null && config.diffuse == null && config.specular == null) {
        return false;
      }
      return true;
    }
  }]);
}();
Material.block = 'material';

function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}

function _superPropBase(t, o) {
  for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););
  return t;
}

function _get() {
  return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
    var p = _superPropBase(e, t);
    if (p) {
      var n = Object.getOwnPropertyDescriptor(p, t);
      return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
    }
  }, _get.apply(null, arguments);
}

function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}

function _possibleConstructorReturn(t, e) {
  if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}

function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf(t, e);
}

/*** Vector functions - vectors provided as [x, y] or [x, y, z] arrays ***/

var Vector;
var Vector$1 = Vector = {};
Vector.copy = function (v) {
  var V = [];
  var lim = v.length;
  for (var i = 0; i < lim; i++) {
    V[i] = v[i];
  }
  return V;
};
Vector.neg = function (v) {
  var V = [];
  var lim = v.length;
  for (var i = 0; i < lim; i++) {
    V[i] = -v[i];
  }
  return V;
};

// Addition of two vectors
Vector.add = function (v1, v2) {
  var v = [];
  var lim = Math.min(v1.length, v2.length);
  for (var i = 0; i < lim; i++) {
    v[i] = v1[i] + v2[i];
  }
  return v;
};

// Substraction of two vectors
Vector.sub = function (v1, v2) {
  var v = [];
  var lim = Math.min(v1.length, v2.length);
  for (var i = 0; i < lim; i++) {
    v[i] = v1[i] - v2[i];
  }
  return v;
};
Vector.signed_area = function (v1, v2, v3) {
  return (v2[0] - v1[0]) * (v3[1] - v1[1]) - (v3[0] - v1[0]) * (v2[1] - v1[1]);
};

// Multiplication of two vectors, or a vector and a scalar
Vector.mult = function (v1, v2) {
  var v = [],
    len = v1.length,
    i;
  if (typeof v2 === 'number') {
    // Mulitply by scalar
    for (i = 0; i < len; i++) {
      v[i] = v1[i] * v2;
    }
  } else {
    // Multiply two vectors
    len = Math.min(v1.length, v2.length);
    for (i = 0; i < len; i++) {
      v[i] = v1[i] * v2[i];
    }
  }
  return v;
};

// Division of two vectors
Vector.div = function (v1, v2) {
  var v = [],
    i;
  if (typeof v2 === 'number') {
    // Divide by scalar
    for (i = 0; i < v1.length; i++) {
      v[i] = v1[i] / v2;
    }
  } else {
    // Divide to vectors
    var len = Math.min(v1.length, v2.length);
    for (i = 0; i < len; i++) {
      v[i] = v1[i] / v2[i];
    }
  }
  return v;
};

// Get 2D perpendicular
Vector.perp = function (v1, v2) {
  return [v2[1] - v1[1], v1[0] - v2[0]];
};

// Get 2D vector rotated
Vector.rot = function (v, a) {
  var c = Math.cos(a);
  var s = Math.sin(a);
  return [v[0] * c - v[1] * s, v[0] * s + v[1] * c];
};

// Get 2D counter-clockwise angle
// Angles in quadrant I and II are mapped to [0, PI)
// Angles in quadrant III and IV are mapped to [-PI, 0]
Vector.angle = function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
    x = _ref2[0],
    y = _ref2[1];
  return Math.atan2(y, x);
};

// Get angle between two vectors
Vector.angleBetween = function (A, B) {
  var delta = Vector.dot(Vector.normalize(Vector.copy(A)), Vector.normalize(Vector.copy(B)));
  if (delta > 1) {
    delta = 1;
  } // protect against floating point error
  return Math.acos(delta);
};

// Compare two points
Vector.isEqual = function (v1, v2) {
  var len = v1.length;
  for (var i = 0; i < len; i++) {
    if (v1[i] !== v2[i]) {
      return false;
    }
  }
  return true;
};

// Vector length squared
Vector.lengthSq = function (v) {
  if (v.length === 2) {
    return v[0] * v[0] + v[1] * v[1];
  } else if (v.length >= 3) {
    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
  }
  return 0;
};

// Vector length
Vector.length = function (v) {
  return Math.sqrt(Vector.lengthSq(v));
};

// Normalize a vector *in place* (use Vector.copy() if you need a new vector instance)
Vector.normalize = function (v) {
  var d;
  if (v.length === 2) {
    d = v[0] * v[0] + v[1] * v[1];
    if (d === 1) {
      return v;
    }
    d = Math.sqrt(d);
    if (d !== 0) {
      v[0] /= d;
      v[1] /= d;
    } else {
      v[0] = 0, v[1] = 0;
    }
  } else if (v.length >= 3) {
    d = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
    if (d === 1) {
      return v;
    }
    d = Math.sqrt(d);
    if (d !== 0) {
      v[0] /= d;
      v[1] /= d;
      v[2] /= d;
    } else {
      v[0] = 0, v[1] = 0, v[2] = 0;
    }
  }
  return v;
};

// Cross product of two vectors
Vector.cross = function (v1, v2) {
  if (v1.length === 2) {
    return v1[0] * v2[1] - v1[1] * v2[0];
  } else if (v1.length === 3) {
    return [v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]];
  }
};

// Dot product of two vectors
Vector.dot = function (v1, v2) {
  var n = 0;
  var lim = Math.min(v1.length, v2.length);
  for (var i = 0; i < lim; i++) {
    n += v1[i] * v2[i];
  }
  return n;
};

var ambient_source = `/*

Expected globals:
light_accumulator_*

*/

struct AmbientLight {
    vec3 ambient;
};

void calculateLight(in AmbientLight _light, in vec3 _eyeToPoint, in vec3 _normal) {
    light_accumulator_ambient.rgb += _light.ambient;
}
`;

var directional_source = `/*

Expected globals:
material
light_accumulator_*

*/

struct DirectionalLight {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec3 direction;
};

void calculateLight(in DirectionalLight _light, in vec3 _eyeToPoint, in vec3 _normal) {

    light_accumulator_ambient.rgb += _light.ambient;

    float nDotVP = clamp(dot(_normal, -_light.direction), 0.0, 1.0);

    #ifdef TANGRAM_MATERIAL_DIFFUSE
        light_accumulator_diffuse.rgb += _light.diffuse * nDotVP;
    #endif

    #ifdef TANGRAM_MATERIAL_SPECULAR
        float pf = 0.0;
        if (nDotVP > 0.0) {
            vec3 reflectVector = reflect(_light.direction, _normal);
            float eyeDotR = max(dot(normalize(_eyeToPoint), reflectVector), 0.0);
            pf = pow(eyeDotR, material.shininess);
        }
        light_accumulator_specular.rgb += _light.specular * pf;
    #endif
}
`;

var point_source = `/*

Expected globals:
material
light_accumulator_*

*/

struct PointLight {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec4 position;

#ifdef TANGRAM_POINTLIGHT_ATTENUATION_EXPONENT
    float attenuationExponent;
#endif

#ifdef TANGRAM_POINTLIGHT_ATTENUATION_INNER_RADIUS
    float innerRadius;
#endif

#ifdef TANGRAM_POINTLIGHT_ATTENUATION_OUTER_RADIUS
    float outerRadius;
#endif
};

void calculateLight(in PointLight _light, in vec3 _eyeToPoint, in vec3 _normal) {

    float dist = length(_light.position.xyz - _eyeToPoint);

    // Compute vector from surface to light position
    vec3 VP = (_light.position.xyz - _eyeToPoint) / dist;

    // Normalize the vector from surface to light position
    float nDotVP = clamp(dot(VP, _normal), 0.0, 1.0);

    // Attenuation defaults
    float attenuation = 1.0;
    #ifdef TANGRAM_POINTLIGHT_ATTENUATION_EXPONENT
        float Rin = 1.0;
        float e = _light.attenuationExponent;

        #ifdef TANGRAM_POINTLIGHT_ATTENUATION_INNER_RADIUS
            Rin = _light.innerRadius;
        #endif

        #ifdef TANGRAM_POINTLIGHT_ATTENUATION_OUTER_RADIUS
            float Rdiff = _light.outerRadius-Rin;
            float d = clamp(max(0.0,dist-Rin)/Rdiff, 0.0, 1.0);
            attenuation = 1.0-(pow(d,e));
        #else
            // If no outer is provide behaves like:
            // https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/
            float d = max(0.0,dist-Rin)/Rin+1.0;
            attenuation = clamp(1.0/(pow(d,e)), 0.0, 1.0);
        #endif
    #else
        float Rin = 0.0;

        #ifdef TANGRAM_POINTLIGHT_ATTENUATION_INNER_RADIUS
            Rin = _light.innerRadius;
            #ifdef TANGRAM_POINTLIGHT_ATTENUATION_OUTER_RADIUS
                float Rdiff = _light.outerRadius-Rin;
                float d = clamp(max(0.0,dist-Rin)/Rdiff, 0.0, 1.0);
                attenuation = 1.0-d*d;
            #else
                // If no outer is provide behaves like:
                // https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/
                float d = max(0.0,dist-Rin)/Rin+1.0;
                attenuation = clamp(1.0/d, 0.0, 1.0);
            #endif
        #else
            #ifdef TANGRAM_POINTLIGHT_ATTENUATION_OUTER_RADIUS
                float d = clamp(dist/_light.outerRadius, 0.0, 1.0);
                attenuation = 1.0-d*d;
            #else
                attenuation = 1.0;
            #endif
        #endif
    #endif

    // Computer accumulators
    light_accumulator_ambient.rgb += _light.ambient * attenuation;

    #ifdef TANGRAM_MATERIAL_DIFFUSE
        light_accumulator_diffuse.rgb += _light.diffuse * nDotVP * attenuation;
    #endif

    #ifdef TANGRAM_MATERIAL_SPECULAR
        float pf = 0.0; // power factor for shiny speculars
        if (nDotVP > 0.0) {
            vec3 reflectVector = reflect(-VP, _normal);
            float eyeDotR = max(0.0, dot(-normalize(_eyeToPoint), reflectVector));
            pf = pow(eyeDotR, material.shininess);
        }

        light_accumulator_specular.rgb += _light.specular * pf * attenuation;
    #endif
}
`;

var spot_source = `/*

Expected globals:
material
light_accumulator_*

*/

struct SpotLight {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec4 position;

#ifdef TANGRAM_POINTLIGHT_ATTENUATION_EXPONENT
    float attenuationExponent;
#endif

#ifdef TANGRAM_POINTLIGHT_ATTENUATION_INNER_RADIUS
    float innerRadius;
#endif

#ifdef TANGRAM_POINTLIGHT_ATTENUATION_OUTER_RADIUS
    float outerRadius;
#endif

    vec3 direction;
    float spotCosCutoff;
    float spotExponent;
};

void calculateLight(in SpotLight _light, in vec3 _eyeToPoint, in vec3 _normal) {

    float dist = length(_light.position.xyz - _eyeToPoint);

    // Compute vector from surface to light position
    vec3 VP = (_light.position.xyz - _eyeToPoint) / dist;

    // normal . light direction
    float nDotVP = clamp(dot(_normal, VP), 0.0, 1.0);

    // Attenuation defaults
    float attenuation = 1.0;
    #ifdef TANGRAM_POINTLIGHT_ATTENUATION_EXPONENT
        float Rin = 1.0;
        float e = _light.attenuationExponent;

        #ifdef TANGRAM_POINTLIGHT_ATTENUATION_INNER_RADIUS
            Rin = _light.innerRadius;
        #endif

        #ifdef TANGRAM_POINTLIGHT_ATTENUATION_OUTER_RADIUS
            float Rdiff = _light.outerRadius-Rin;
            float d = clamp(max(0.0,dist-Rin)/Rdiff, 0.0, 1.0);
            attenuation = 1.0-(pow(d,e));
        #else
            // If no outer is provide behaves like:
            // https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/
            float d = max(0.0,dist-Rin)/Rin+1.0;
            attenuation = clamp(1.0/(pow(d,e)), 0.0, 1.0);
        #endif
    #else
        float Rin = 0.0;

        #ifdef TANGRAM_POINTLIGHT_ATTENUATION_INNER_RADIUS
            Rin = _light.innerRadius;
            #ifdef TANGRAM_POINTLIGHT_ATTENUATION_OUTER_RADIUS
                float Rdiff = _light.outerRadius-Rin;
                float d = clamp(max(0.0,dist-Rin)/Rdiff, 0.0, 1.0);
                attenuation = 1.0-d*d;
            #else
                // If no outer is provide behaves like:
                // https://imdoingitwrong.wordpress.com/2011/01/31/light-attenuation/
                float d = max(0.0,dist-Rin)/Rin+1.0;
                attenuation = clamp(1.0/d, 0.0, 1.0);
            #endif
        #else
            #ifdef TANGRAM_POINTLIGHT_ATTENUATION_OUTER_RADIUS
                float d = clamp(dist/_light.outerRadius, 0.0, 1.0);
                attenuation = 1.0-d*d;
            #else
                attenuation = 1.0;
            #endif
        #endif
    #endif

    // spotlight attenuation factor
    float spotAttenuation = 0.0;

    // See if point on surface is inside cone of illumination
    float spotDot = clamp(dot(-VP, _light.direction), 0.0, 1.0);

    if (spotDot >= _light.spotCosCutoff) {
        spotAttenuation = pow(spotDot, _light.spotExponent);
    }

    light_accumulator_ambient.rgb += _light.ambient * attenuation * spotAttenuation;

    #ifdef TANGRAM_MATERIAL_DIFFUSE
        light_accumulator_diffuse.rgb += _light.diffuse * nDotVP * attenuation * spotAttenuation;
    #endif

    #ifdef TANGRAM_MATERIAL_SPECULAR
        // Power factor for shiny speculars
        float pf = 0.0;
        if (nDotVP > 0.0) {
            vec3 reflectVector = reflect(-VP, _normal);
            float eyeDotR = max(dot(-normalize(_eyeToPoint), reflectVector), 0.0);
            pf = pow(eyeDotR, material.shininess);
        }
        light_accumulator_specular.rgb += _light.specular * pf * attenuation * spotAttenuation;
    #endif
}
`;

function _superPropGet$5(t, o, e, r) { var p = _get(_getPrototypeOf(t.prototype ), o, e); return "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
function _callSuper$a(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$a() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$a() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$a = function _isNativeReflectConstruct() { return !!t; })(); }

// Abstract light
var Light = /*#__PURE__*/function () {
  function Light(view, config) {
    _classCallCheck(this, Light);
    this.name = config.name;
    this.view = view;
    if (config.ambient == null || typeof config.ambient === 'number') {
      this.ambient = GLSL.expandVec3(config.ambient || 0);
    } else {
      this.ambient = StyleParser.parseColor(config.ambient).slice(0, 3);
    }
    if (config.diffuse == null || typeof config.diffuse === 'number') {
      this.diffuse = GLSL.expandVec3(config.diffuse != null ? config.diffuse : 1);
    } else {
      this.diffuse = StyleParser.parseColor(config.diffuse).slice(0, 3);
    }
    if (config.specular == null || typeof config.specular === 'number') {
      this.specular = GLSL.expandVec3(config.specular || 0);
    } else {
      this.specular = StyleParser.parseColor(config.specular).slice(0, 3);
    }
  }

  // Create a light by type name, factory-style
  // 'config' must include 'name' and 'type', along with any other type-specific properties
  return _createClass(Light, [{
    key: "inject",
    value:
    // Common instance definition
    function inject() {
      var instance = "\n            uniform ".concat(this.struct_name, " u_").concat(this.name, ";\n            ").concat(this.struct_name, " ").concat(this.name, ";\n            ");
      var assign = "\n            ".concat(this.name, " = u_").concat(this.name, ";\n\n        ");
      ShaderProgram.addBlock(Light.block, instance);
      ShaderProgram.addBlock('setup', assign);
    }

    // Update method called once per frame
  }, {
    key: "update",
    value: function update() {}

    // Called once per frame per program (e.g. for main render pass, then for each additional
    // pass for feature selection, etc.)
  }, {
    key: "setupProgram",
    value: function setupProgram(_program) {
      //  Three common light properties
      _program.uniform('3fv', "u_".concat(this.name, ".ambient"), this.ambient);
      _program.uniform('3fv', "u_".concat(this.name, ".diffuse"), this.diffuse);
      _program.uniform('3fv', "u_".concat(this.name, ".specular"), this.specular);
    }
  }], [{
    key: "create",
    value: function create(view, config) {
      if (Light.types[config.type]) {
        return new Light.types[config.type](view, config);
      }
    }

    // Set light for a style: fragment lighting, vertex lighting, or none
  }, {
    key: "setMode",
    value: function setMode(mode, style) {
      if (mode === true) {
        mode = 'fragment';
      }
      mode = Light.enabled && (mode != null ? mode : 'fragment'); // default to fragment lighting
      style.defines['TANGRAM_LIGHTING_FRAGMENT'] = mode === 'fragment';
      style.defines['TANGRAM_LIGHTING_VERTEX'] = mode === 'vertex';
    }

    // Inject all provided light definitions, and calculate cumulative light function
  }, {
    key: "inject",
    value: function inject(lights) {
      // Clear previous injections
      ShaderProgram.removeBlock(Light.block);

      // If lighting is globally disabled, nothing is injected (mostly for debugging or live editing)
      if (!Light.enabled) {
        return;
      }

      // Construct code to calculate each light instance
      var calculateLights = '';
      if (lights && Object.keys(lights).length > 0) {
        // Collect uniques types of lights
        var types = {};
        for (var light_name in lights) {
          types[lights[light_name].type] = true;
        }

        // Inject each type of light
        for (var type in types) {
          Light.types[type].inject();
        }

        // Inject per-instance blocks and construct the list of functions to calculate each light
        for (var _light_name in lights) {
          // Define instance
          lights[_light_name].inject();

          // Add the calculation function to the list
          calculateLights += "calculateLight(".concat(_light_name, ", _eyeToPoint, _normal);\n");
        }
      }

      // Glue together the final lighting function that sums all the lights
      var calculateFunction = "\n            vec4 calculateLighting(in vec3 _eyeToPoint, in vec3 _normal, in vec4 _color) {\n\n                // Do initial material calculations over normal, emission, ambient, diffuse and specular values\n                calculateMaterial(_eyeToPoint,_normal);\n\n                // Un roll the loop of individual ligths to calculate\n                ".concat(calculateLights, "\n\n                //  Final light intensity calculation\n                vec4 color = vec4(vec3(0.), _color.a); // start with vertex color alpha\n\n                #ifdef TANGRAM_MATERIAL_EMISSION\n                    color.rgb = material.emission.rgb;\n                    color.a *= material.emission.a;\n                #endif\n\n                #ifdef TANGRAM_MATERIAL_AMBIENT\n                    color.rgb += light_accumulator_ambient.rgb * _color.rgb * material.ambient.rgb;\n                    color.a *= material.ambient.a;\n                #else\n                    #ifdef TANGRAM_MATERIAL_DIFFUSE\n                        color.rgb += light_accumulator_ambient.rgb * _color.rgb * material.diffuse.rgb;\n                    #endif\n                #endif\n\n                #ifdef TANGRAM_MATERIAL_DIFFUSE\n                    color.rgb += light_accumulator_diffuse.rgb * _color.rgb * material.diffuse.rgb;\n                    color.a *= material.diffuse.a;\n                #endif\n\n                #ifdef TANGRAM_MATERIAL_SPECULAR\n                    color.rgb += light_accumulator_specular.rgb * material.specular.rgb;\n                    color.a *= material.specular.a;\n                #endif\n\n                // Clamp final color\n                color = clamp(color, 0.0, 1.0);\n\n                return color;\n            }");
      ShaderProgram.addBlock(Light.block, calculateFunction);
    }
  }]);
}();
Light.types = {}; // references to subclasses by short name
Light.block = 'lighting'; // shader block name
Light.enabled = true; // lighting can be globally enabled/disabled

// Light subclasses
var AmbientLight = /*#__PURE__*/function (_Light) {
  function AmbientLight(view, config) {
    var _this;
    _classCallCheck(this, AmbientLight);
    _this = _callSuper$a(this, AmbientLight, [view, config]);
    _this.type = 'ambient';
    _this.struct_name = 'AmbientLight';
    return _this;
  }

  // Inject struct and calculate function
  _inherits(AmbientLight, _Light);
  return _createClass(AmbientLight, [{
    key: "setupProgram",
    value: function setupProgram(_program) {
      _program.uniform('3fv', "u_".concat(this.name, ".ambient"), this.ambient);
    }
  }], [{
    key: "inject",
    value: function inject() {
      ShaderProgram.addBlock(Light.block, ambient_source);
    }
  }]);
}(Light);
Light.types['ambient'] = AmbientLight;
var DirectionalLight = /*#__PURE__*/function (_Light2) {
  function DirectionalLight(view, config) {
    var _this2;
    _classCallCheck(this, DirectionalLight);
    _this2 = _callSuper$a(this, DirectionalLight, [view, config]);
    _this2.type = 'directional';
    _this2.struct_name = 'DirectionalLight';
    if (config.direction) {
      _this2._direction = config.direction;
    } else {
      // Default directional light maintains full intensity on ground, with basic extrusion shading
      var theta = 135; // angle of light in xy plane (rotated around z axis)
      var scale = Math.sin(Math.PI * 60 / 180); // scaling factor to keep total directional intensity to 0.5
      _this2._direction = [Math.cos(Math.PI * theta / 180) * scale, Math.sin(Math.PI * theta / 180) * scale, -0.5];
      if (config.ambient == null) {
        _this2.ambient = GLSL.expandVec3(0.5);
      }
    }
    _this2.direction = _this2._direction.map(parseFloat);
    return _this2;
  }
  _inherits(DirectionalLight, _Light2);
  return _createClass(DirectionalLight, [{
    key: "direction",
    get: function get() {
      return this._direction;
    },
    set: function set(v) {
      this._direction = Vector$1.normalize(Vector$1.copy(v));
    }

    // Inject struct and calculate function
  }, {
    key: "setupProgram",
    value: function setupProgram(_program) {
      _superPropGet$5(DirectionalLight, "setupProgram", this)([_program]);
      _program.uniform('3fv', "u_".concat(this.name, ".direction"), this.direction);
    }
  }], [{
    key: "inject",
    value: function inject() {
      ShaderProgram.addBlock(Light.block, directional_source);
    }
  }]);
}(Light);
Light.types['directional'] = DirectionalLight;
var PointLight = /*#__PURE__*/function (_Light3) {
  function PointLight(view, config) {
    var _this3;
    _classCallCheck(this, PointLight);
    _this3 = _callSuper$a(this, PointLight, [view, config]);
    _this3.type = 'point';
    _this3.struct_name = 'PointLight';
    _this3.position = config.position || [0, 0, '100px'];
    _this3.position_eye = []; // position in eyespace
    _this3.origin = config.origin || 'ground';
    _this3.attenuation = !isNaN(parseFloat(config.attenuation)) ? parseFloat(config.attenuation) : 0;
    if (config.radius) {
      if (Array.isArray(config.radius) && config.radius.length === 2) {
        _this3.radius = config.radius;
      } else {
        _this3.radius = [null, config.radius];
      }
    } else {
      _this3.radius = null;
    }
    return _this3;
  }

  // Inject struct and calculate function
  _inherits(PointLight, _Light3);
  return _createClass(PointLight, [{
    key: "inject",
    value:
    // Inject isntance-specific settings
    function inject() {
      _superPropGet$5(PointLight, "inject", this)([]);
      ShaderProgram.defines['TANGRAM_POINTLIGHT_ATTENUATION_EXPONENT'] = this.attenuation !== 0;
      ShaderProgram.defines['TANGRAM_POINTLIGHT_ATTENUATION_INNER_RADIUS'] = this.radius != null && this.radius[0] != null;
      ShaderProgram.defines['TANGRAM_POINTLIGHT_ATTENUATION_OUTER_RADIUS'] = this.radius != null;
    }
  }, {
    key: "update",
    value: function update() {
      this.updateEyePosition();
    }
  }, {
    key: "updateEyePosition",
    value: function updateEyePosition() {
      if (this.origin === 'world') {
        // For world origin, format is: [longitude, latitude, meters (default) or pixels w/px units]

        // Move light's world position into camera space
        var m = Geo$1.latLngToMeters(_toConsumableArray(this.position));
        this.position_eye[0] = m[0] - this.view.camera.position_meters[0];
        this.position_eye[1] = m[1] - this.view.camera.position_meters[1];
        this.position_eye[2] = StyleParser.convertUnits(this.position[2], {
          zoom: this.view.zoom,
          meters_per_pixel: Geo$1.metersPerPixel(this.view.zoom)
        });
        this.position_eye[2] = this.position_eye[2] - this.view.camera.position_meters[2];
      } else if (this.origin === 'ground' || this.origin === 'camera') {
        // For camera or ground origin, format is: [x, y, z] in meters (default) or pixels w/px units

        // Light is in camera space by default
        this.position_eye = StyleParser.convertUnits(this.position, {
          zoom: this.view.zoom,
          meters_per_pixel: Geo$1.metersPerPixel(this.view.zoom)
        });
        if (this.origin === 'ground') {
          // Leave light's xy in camera space, but z needs to be moved relative to ground plane
          this.position_eye[2] = this.position_eye[2] - this.view.camera.position_meters[2];
        }
      }
      this.position_eye[3] = 1;
    }
  }, {
    key: "setupProgram",
    value: function setupProgram(_program) {
      _superPropGet$5(PointLight, "setupProgram", this)([_program]);
      _program.uniform('4fv', "u_".concat(this.name, ".position"), this.position_eye);
      if (ShaderProgram.defines['TANGRAM_POINTLIGHT_ATTENUATION_EXPONENT']) {
        _program.uniform('1f', "u_".concat(this.name, ".attenuationExponent"), this.attenuation);
      }
      if (ShaderProgram.defines['TANGRAM_POINTLIGHT_ATTENUATION_INNER_RADIUS']) {
        _program.uniform('1f', "u_".concat(this.name, ".innerRadius"), StyleParser.convertUnits(this.radius[0], {
          zoom: this.view.zoom,
          meters_per_pixel: Geo$1.metersPerPixel(this.view.zoom)
        }));
      }
      if (ShaderProgram.defines['TANGRAM_POINTLIGHT_ATTENUATION_OUTER_RADIUS']) {
        _program.uniform('1f', "u_".concat(this.name, ".outerRadius"), StyleParser.convertUnits(this.radius[1], {
          zoom: this.view.zoom,
          meters_per_pixel: Geo$1.metersPerPixel(this.view.zoom)
        }));
      }
    }
  }], [{
    key: "inject",
    value: function inject() {
      ShaderProgram.addBlock(Light.block, point_source);
    }
  }]);
}(Light);
Light.types['point'] = PointLight;
var SpotLight = /*#__PURE__*/function (_PointLight) {
  function SpotLight(view, config) {
    var _this4;
    _classCallCheck(this, SpotLight);
    _this4 = _callSuper$a(this, SpotLight, [view, config]);
    _this4.type = 'spotlight';
    _this4.struct_name = 'SpotLight';
    _this4.direction = _this4._direction = (config.direction || [0, 0, -1]).map(parseFloat); // [x, y, z]
    _this4.exponent = config.exponent ? parseFloat(config.exponent) : 0.2;
    _this4.angle = config.angle ? parseFloat(config.angle) : 20;
    return _this4;
  }
  _inherits(SpotLight, _PointLight);
  return _createClass(SpotLight, [{
    key: "direction",
    get: function get() {
      return this._direction;
    },
    set: function set(v) {
      this._direction = Vector$1.normalize(Vector$1.copy(v));
    }

    // Inject struct and calculate function
  }, {
    key: "setupProgram",
    value: function setupProgram(_program) {
      _superPropGet$5(SpotLight, "setupProgram", this)([_program]);
      _program.uniform('3fv', "u_".concat(this.name, ".direction"), this.direction);
      _program.uniform('1f', "u_".concat(this.name, ".spotCosCutoff"), Math.cos(this.angle * 3.14159 / 180));
      _program.uniform('1f', "u_".concat(this.name, ".spotExponent"), this.exponent);
    }
  }], [{
    key: "inject",
    value: function inject() {
      ShaderProgram.addBlock(Light.block, spot_source);
    }
  }]);
}(PointLight);
Light.types['spotlight'] = SpotLight;

function _isNativeFunction(t) {
  try {
    return -1 !== Function.toString.call(t).indexOf("[native code]");
  } catch (n) {
    return "function" == typeof t;
  }
}

function _wrapNativeSuper(t) {
  var r = "function" == typeof Map ? new Map() : void 0;
  return _wrapNativeSuper = function _wrapNativeSuper(t) {
    if (null === t || !_isNativeFunction(t)) return t;
    if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r) {
      if (r.has(t)) return r.get(t);
      r.set(t, Wrapper);
    }
    function Wrapper() {
      return _construct(t, arguments, _getPrototypeOf(this).constructor);
    }
    return Wrapper.prototype = Object.create(t.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), _setPrototypeOf(Wrapper, t);
  }, _wrapNativeSuper(t);
}

function _callSuper$9(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$9() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$9() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$9 = function _isNativeReflectConstruct() { return !!t; })(); }
var MethodNotImplemented = /*#__PURE__*/function (_Error) {
  function MethodNotImplemented(methodName) {
    var _this;
    _classCallCheck(this, MethodNotImplemented);
    _this = _callSuper$9(this, MethodNotImplemented);
    _this.name = 'MethodNotImplemented';
    _this.message = 'Method ' + methodName + ' must be implemented in subclass';
    return _this;
  }
  _inherits(MethodNotImplemented, _Error);
  return _createClass(MethodNotImplemented);
}(/*#__PURE__*/_wrapNativeSuper(Error));

function _superPropGet$4(t, o, e, r) { var p = _get(_getPrototypeOf(t.prototype ), o, e); return "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
function _callSuper$8(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$8() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$8() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$8 = function _isNativeReflectConstruct() { return !!t; })(); }
var DataSource = /*#__PURE__*/function () {
  function DataSource(config, sources) {
    var _this = this;
    _classCallCheck(this, DataSource);
    this.validate(config);
    this.config = config; // save original config
    this.sources = sources; // full set of data sources TODO: centralize these like textures?
    this.id = config.id;
    this.name = config.name;
    this.pad_scale = config.pad_scale || 0.00001; // scale tile up by small factor to cover seams
    this.default_winding = null; // winding order will adapt to data source
    this.rasters = []; // attached raster tile sources
    if (Array.isArray(config.rasters)) {
      // copy unique set of raster sources
      config.rasters.forEach(function (r) {
        if (_this.rasters.indexOf(r) === -1) {
          _this.rasters.push(r);
        }
      });
    }

    // Optional function to preprocess source data
    this.preprocess = config.preprocess;
    if (typeof this.preprocess === 'function') {
      this.preprocess.bind(this);
    }

    // Optional function to transform source data
    this.transform = config.transform;
    if (typeof this.transform === 'function') {
      this.transform.bind(this);
    }

    // Optional additional data to pass to the transform function
    this.extra_data = config.extra_data;

    // Optional additional scripts made available to the transform function
    // NOTE: these are loaded alongside the library when the workers are instantiated
    this.scripts = config.scripts;

    // Configure zoom ranges at which new data will be loaded
    this.setZooms(config);

    // set a custom extra overzoom adjustment factor to load consistently lower zoom levels
    // than the current map zoom level – eg a zoom_offset of 1 would load z3 data at z4
    this.zoom_offset = config.zoom_offset != null ? config.zoom_offset : 0;
    if (this.zoom_offset < 0) {
      var msg = "Data source '".concat(this.name, "' zoom_offset must not be negative \u2013 setting to 0.");
      log({
        level: 'warn',
        once: true
      }, msg);
      this.zoom_offset = 0;
    }
    this.setTileSize(config.tile_size);

    // no tiles will be requested or displayed outside of these min/max values
    this.min_display_zoom = Math.max(config.min_display_zoom || 0, this.zooms[0]);
    this.max_display_zoom = config.max_display_zoom != null ? config.max_display_zoom : null;
  }

  // Register a new data source type name, providing a function that returns the class name
  // to instantiate based on the source definition in the scene
  return _createClass(DataSource, [{
    key: "load",
    value: function load(dest) {
      var _this2 = this;
      dest.source_data = {};
      dest.source_data.layers = {};
      dest.pad_scale = this.pad_scale;
      dest.rasters = _toConsumableArray(this.rasters); // copy list of rasters to load for tile

      return this._load(dest).then(function (dest) {
        // Post-processing
        for (var layer in dest.source_data.layers) {
          var data = dest.source_data.layers[layer];
          if (data && data.features) {
            data.features.forEach(function (feature) {
              Geo$1.transformGeometry(feature.geometry, function (coord) {
                // Flip Y coords
                coord[1] = -coord[1];

                // Slightly scale up tile to cover seams
                if (_this2.pad_scale) {
                  coord[0] = Math.round(coord[0] * (1 + _this2.pad_scale) - Geo$1.tile_scale * _this2.pad_scale / 2);
                  coord[1] = Math.round(coord[1] * (1 + _this2.pad_scale) - Geo$1.tile_scale * _this2.pad_scale / 2);
                }
              });

              // Use first encountered polygon winding order as default for data source
              _this2.updateDefaultWinding(feature.geometry);
            });
          }
        }
        dest.default_winding = _this2.default_winding || 'CCW';
        return dest;
      });
    }

    // Sub-classes must implement
  }, {
    key: "_load",
    value: function _load(/*dest*/
    ) {
      throw new MethodNotImplemented('_load');
    }

    // Copy source data from another tile (so we can reuse source data for overzoomed tiles)
  }, {
    key: "copyTileData",
    value: function copyTileData(source, dest) {
      log('trace', "Copy tile data from ".concat(source.key, " to ").concat(dest.key));
      dest.source_data = {
        layers: source.source_data.layers
      };
      dest.rasters = _toConsumableArray(source.rasters);
      dest.pad_scale = source.pad_scale;
      dest.default_winding = source.default_winding;
      return dest;
    }

    // Configure zoom ranges at which new data will be loaded
    // e.g. can be used to skip fetching data for some zooms, reusing data from next lowest available zoom instead
  }, {
    key: "setZooms",
    value: function setZooms(_ref) {
      var max_zoom = _ref.max_zoom,
        zooms = _ref.zooms;
      // overzoom will apply for zooms higher than this
      this.max_zoom = max_zoom != null ? max_zoom : Geo$1.default_source_max_zoom;
      if (Array.isArray(zooms)) {
        this.zooms = zooms; // TODO: support range parsing, e.g. [0-4, 6-7, 12]?
        this.max_zoom = this.zooms[this.zooms.length - 1]; // overrides `max_zoom` when both are present
      } else {
        this.zooms = [];
        for (var i = 0; i <= this.max_zoom; i++) {
          this.zooms[i] = i;
        }
      }
    }

    // Set the internal tile size in pixels, e.g. '256px' (default), '512px', etc.
    // Must be a power of 2, and greater than or equal to 256
  }, {
    key: "setTileSize",
    value: function setTileSize(tile_size) {
      this.tile_size = tile_size || 256;
      if (typeof this.tile_size !== 'number' || this.tile_size < 256 || !Utils.isPowerOf2(this.tile_size)) {
        log({
          level: 'warn',
          once: true
        }, "Data source '".concat(this.name, "': 'tile_size' parameter must be a number that is a power of 2 greater than or equal to 256, but was '").concat(tile_size, "'"));
        this.tile_size = 256;
      }

      // # of zoom levels bigger than 256px tiles - 8 in place of log2(256)
      // Many Tangram functions assume 256px tiles, this factor adjusts for the
      // case of bigger tile sizes - eg 512px tiles are 1 zoom level bigger,
      // 1024px tiles are 2 levels bigger
      this.zoom_bias = Math.log2(this.tile_size) - 8 + this.zoom_offset;
    }

    // Infer winding for data source from first ring of provided geometry
  }, {
    key: "updateDefaultWinding",
    value: function updateDefaultWinding(geom) {
      if (this.default_winding == null) {
        if (geom.type === 'Polygon') {
          this.default_winding = Geo$1.ringWinding(geom.coordinates[0]);
        } else if (geom.type === 'MultiPolygon') {
          this.default_winding = Geo$1.ringWinding(geom.coordinates[0][0]);
        }
      }
      return this.default_winding;
    }

    // All data sources support a min zoom, tiled sources can subclass for more specific limits (e.g. bounding box)
  }, {
    key: "includesTile",
    value: function includesTile(coords, style_z) {
      // Limit by this data source
      if (coords.z < this.min_display_zoom || this.max_display_zoom != null && style_z > this.max_display_zoom) {
        return false;
      }

      // Limit by any dependent raster sources
      for (var r = 0; r < this.rasters.length; r++) {
        var source_name = this.rasters[r];
        if (this.sources[source_name] && this.sources[source_name] !== this && !this.sources[source_name].includesTile(coords, coords.z)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: "validate",
    value: function validate(/*source*/
    ) {}
  }], [{
    key: "register",
    value: function register(type_name, type_func) {
      if (!type_name || !type_func) {
        return;
      }
      DataSource.types[type_name] = type_func;
    }

    // Create a data source, factory-style
  }, {
    key: "create",
    value: function create(source, sources) {
      // Find the class to instantiate based on the source definition
      if (typeof DataSource.types[source.type] === 'function') {
        var source_class = DataSource.types[source.type](source);
        if (source_class) {
          return new source_class(source, sources);
        }
      }
    }

    // Check if a data source definition changed in a way that could affect which tiles are in view
  }, {
    key: "tileLayoutChanged",
    value: function tileLayoutChanged(source, prev_source) {
      if (!source || !prev_source) {
        return true;
      }

      // subset of parameters that affect tile layout
      var rebuild_params = ['max_zoom', 'zooms', 'min_display_zoom', 'max_display_zoom', 'bounds', 'tile_size', 'zoom_offset'];
      var cur = sliceObject(source.config, rebuild_params);
      var prev = sliceObject(prev_source.config, rebuild_params);
      return JSON.stringify(cur) !== JSON.stringify(prev);
    }

    // Mercator projection
  }, {
    key: "projectData",
    value: function projectData(source) {
      var timer = +new Date();
      for (var t in source.layers) {
        var num_features = source.layers[t].features.length;
        for (var f = 0; f < num_features; f++) {
          var feature = source.layers[t].features[f];
          Geo$1.transformGeometry(feature.geometry, this.projectCoord);
        }
      }
      if (source.debug !== undefined) {
        source.debug.projection = +new Date() - timer;
      }
    }
  }, {
    key: "projectCoord",
    value: function projectCoord(coord) {
      Geo$1.latLngToMeters(coord);
    }

    /**
     Re-scale geometries within each source to internal tile units
    */
  }, {
    key: "scaleData",
    value: function scaleData(source, _ref2) {
      var z = _ref2.coords.z,
        min = _ref2.min;
      var units_per_meter = Geo$1.unitsPerMeter(z);
      for (var t in source.layers) {
        var num_features = source.layers[t].features.length;
        for (var f = 0; f < num_features; f++) {
          var feature = source.layers[t].features[f];
          Geo$1.transformGeometry(feature.geometry, function (coord) {
            coord[0] = (coord[0] - min.x) * units_per_meter;
            coord[1] = (coord[1] - min.y) * units_per_meter * -1; // flip coords positive
          });
        }
      }
    }
  }]);
}();
DataSource.types = {}; // set of supported data source classes, referenced by type name

/*** Generic network loading source - abstract class ***/

var network_request_id = 0; // used to namespace URL requests

var NetworkSource = /*#__PURE__*/function (_DataSource) {
  function NetworkSource(source, sources) {
    var _this3;
    _classCallCheck(this, NetworkSource);
    _this3 = _callSuper$8(this, NetworkSource, [source, sources]);
    _this3.response_type = ''; // use to set explicit XHR type

    // Add extra URL params, and warn on duplicates
    var _URLs$addParamsToURL = addParamsToURL(source.url, source.url_params),
      _URLs$addParamsToURL2 = _slicedToArray(_URLs$addParamsToURL, 2),
      url = _URLs$addParamsToURL2[0],
      dupes = _URLs$addParamsToURL2[1];
    _this3.url = url;
    dupes.forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
        param = _ref4[0],
        value = _ref4[1];
      log({
        level: 'warn',
        once: true
      }, "Data source '".concat(_this3.name, "': parameter '").concat(param, "' already present in URL '").concat(source.url, "', ") + "skipping value '".concat(param, "=").concat(value, "' specified in 'url_params'"));
    });

    // Optional HTTP request headers to send
    if (source.request_headers && _typeof(source.request_headers) === 'object') {
      _this3.request_headers = source.request_headers;
    }
    return _this3;
  }
  _inherits(NetworkSource, _DataSource);
  return _createClass(NetworkSource, [{
    key: "_load",
    value: function _load(dest) {
      var _this4 = this;
      var url = this.formatURL(this.url, dest);
      var source_data = dest.source_data;
      source_data.url = url;
      dest.debug = dest.debug || {};
      dest.debug.network = +new Date();
      return new Promise(function (resolve) {
        var request_id = network_request_id++ + '-' + url;
        var promise = Utils.io(url, 60 * 1000, _this4.response_type, 'GET', _this4.request_headers, request_id);
        source_data.request_id = request_id;
        source_data.error = null;
        promise.then(function (_ref5) {
          var body = _ref5.body;
          dest.debug.response_size = body && (body.length || body.byteLength);
          dest.debug.network = +new Date() - dest.debug.network;
          dest.debug.parsing = +new Date();

          // Apply optional data transform on raw network response
          if (body != null && typeof _this4.preprocess === 'function') {
            body = _this4.preprocess(body);
          }

          // Return data immediately, or after user-returned promise resolves
          body = body instanceof Promise ? body : Promise.resolve(body);
          body.then(function (body) {
            if (body != null) {
              _this4.parseSourceData(dest, source_data, body);
            } else {
              source_data.layers = {}; // for cases where server returned no content (e.g. 204 response)
            }
            dest.debug.parsing = +new Date() - dest.debug.parsing;
            resolve(dest);
          });
        }).catch(function (error) {
          source_data.error = error.stack;
          resolve(dest); // resolve request but pass along error
        });
      });
    }
  }, {
    key: "validate",
    value: function validate(source) {
      if (typeof source.url !== 'string') {
        throw Error('Network data source must provide a string `url` property');
      }
    }

    // Sub-classes must implement:
  }, {
    key: "formatURL",
    value: function formatURL(/*url_template, dest*/
    ) {
      throw new MethodNotImplemented('formatURL');
    }
  }, {
    key: "parseSourceData",
    value: function parseSourceData(/*dest, source, reponse*/
    ) {
      throw new MethodNotImplemented('parseSourceData');
    }
  }]);
}(DataSource);

/*** Generic network tile loading - abstract class ***/

var NetworkTileSource = /*#__PURE__*/function (_NetworkSource) {
  function NetworkTileSource(source, sources) {
    var _this5;
    _classCallCheck(this, NetworkTileSource);
    _this5 = _callSuper$8(this, NetworkTileSource, [source, sources]);
    _this5.tiled = true;
    _this5.bounds = _this5.parseBounds(source);

    // indicates if source should build geometry tiles, enabled for sources referenced in the scene's layers,
    // and left disabled for sources that are never referenced, or only used as raster textures
    _this5.builds_geometry_tiles = false;
    _this5.tms = source.tms === true; // optionally flip tile coords for TMS

    // optional list of subdomains to round-robin through
    if (_this5.url && _this5.url.search('{s}') > -1) {
      if (Array.isArray(source.url_subdomains) && source.url_subdomains.length > 0) {
        _this5.url_subdomains = source.url_subdomains;
        _this5.next_url_subdomain = 0;
      } else {
        log({
          level: 'warn',
          once: true
        }, "Data source '".concat(_this5.name, "': source URL includes '{s}' subdomain marker ('").concat(_this5.url, "'), but no subdomains ") + 'were specified in \'url_subdomains\' parameter');
      }
    }

    // optional list of pixel density scale modifiers
    if (_this5.url && _this5.url.search('{r}') > -1) {
      if (Array.isArray(source.url_density_scales) && source.url_density_scales.length > 0) {
        _this5.url_density_scales = source.url_density_scales;
      } else {
        _this5.url_density_scales = [1, 2]; // default to supporting 1x and 2x display densities
      }
    }
    return _this5;
  }

  // Get bounds from source config parameters
  _inherits(NetworkTileSource, _NetworkSource);
  return _createClass(NetworkTileSource, [{
    key: "parseBounds",
    value: function parseBounds(source) {
      if (Array.isArray(source.bounds) && source.bounds.length === 4) {
        var _source$bounds = _slicedToArray(source.bounds, 4),
          w = _source$bounds[0],
          s = _source$bounds[1],
          e = _source$bounds[2],
          n = _source$bounds[3];
        return {
          latlng: _toConsumableArray(source.bounds),
          meters: {
            min: Geo$1.latLngToMeters([w, n]),
            max: Geo$1.latLngToMeters([e, s])
          },
          tiles: {
            // max tile bounds per zoom (lazily evaluated)
            min: {},
            max: {}
          }
        };
      }
    }

    // Returns false if tile is outside data source's bounds, true if within
  }, {
    key: "checkBounds",
    value: function checkBounds(coords, bounds) {
      // Check tile bounds
      if (bounds) {
        // get tile and bounds coords at current zoom, wrapping to keep x coords in positive range
        coords = Geo$1.wrapTile(coords);
        var min = bounds.tiles.min[coords.z];
        if (!min) {
          min = bounds.tiles.min[coords.z] = Geo$1.tileForMeters(bounds.meters.min, coords.z);
        }
        var max = bounds.tiles.max[coords.z];
        if (!max) {
          max = bounds.tiles.max[coords.z] = Geo$1.tileForMeters(bounds.meters.max, coords.z);
        }

        // check latitude
        if (coords.y < min.y || coords.y > max.y) {
          return false;
        }

        // longitude bounds are between meridians
        if (min.x <= max.x) {
          if (coords.x < min.x || coords.x > max.x) {
            return false;
          }
        }
        // longitude bounds cross the antimeridian
        else if (coords.x > max.x && coords.x < min.x) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: "includesTile",
    value: function includesTile(coords, style_z) {
      if (!_superPropGet$4(NetworkTileSource, "includesTile", this)([coords, style_z])) {
        return false;
      }

      // Check tile bounds
      if (!this.checkBounds(coords, this.bounds)) {
        return false;
      }
      return true;
    }
  }, {
    key: "formatURL",
    value: function formatURL(url_template, tile) {
      var coords = Geo$1.wrapTile(tile.coords, {
        x: true
      });
      if (this.tms) {
        coords.y = Math.pow(2, coords.z) - 1 - coords.y; // optionally flip tile coords for TMS
      }

      // tile URL template replacement
      var url = url_template.replace('{x}', coords.x).replace('{y}', coords.y).replace('{z}', coords.z).replace('{r}', this.getDensityModifier()) // modify URL by display density (e.g. @2x)
      .replace('{q}', this.toQuadKey(coords)); // quadkey for tile coordinates

      if (this.url_subdomains != null) {
        url = url.replace('{s}', this.url_subdomains[this.next_url_subdomain]);
        this.next_url_subdomain = (this.next_url_subdomain + 1) % this.url_subdomains.length;
      }
      return url;
    }

    // Find the right tile URL modifier based on the display density, e.g. add `@2x` for sources supporting 2x tiles.
    // Source `url_density_scales` param can specify an array of densities supported by the source,
    // each entry serves as a threshold based on the current display density.
  }, {
    key: "getDensityModifier",
    value: function getDensityModifier() {
      if (this.url_density_scales) {
        // find the highest matching density
        var dpr = Utils.device_pixel_ratio;
        var scale = this.url_density_scales.filter(function (s) {
          return dpr >= s;
        }).reverse()[0];

        // default to first scale if none matched
        scale = scale != null ? scale : this.url_density_scales[0];

        // scales higher than 1x use the `@` modifier (e.g. `@2x`)
        if (scale > 1) {
          return "@".concat(scale, "x");
        }
      }
      return ''; // for 1x (or less) displays, no URL modifier is used (following @2x URL convention)
    }
  }, {
    key: "toQuadKey",
    value: function toQuadKey(_ref6) {
      var x = _ref6.x,
        y = _ref6.y,
        z = _ref6.z;
      var quadkey = '';
      for (var i = z; i > 0; i--) {
        var b = 0;
        var mask = 1 << i - 1;
        if ((x & mask) !== 0) b++;
        if ((y & mask) !== 0) b += 2;
        quadkey += b.toString();
      }
      return quadkey;
    }

    // Checks for the x/y/z tile pattern in URL template
  }], [{
    key: "urlHasTilePattern",
    value: function urlHasTilePattern(url) {
      return url && (url.search('{x}') > -1 && url.search('{y}') > -1 && url.search('{z}') > -1 || url.search('{q}') > -1);
    }
  }]);
}(NetworkSource);

var TileID = {
  coord: function coord(c) {
    return {
      x: c.x,
      y: c.y,
      z: c.z,
      key: this.coordKey(c)
    };
  },
  coordKey: function coordKey(_ref) {
    var x = _ref.x,
      y = _ref.y,
      z = _ref.z;
    return x + '/' + y + '/' + z;
  },
  key: function key(coords, source, style_z) {
    if (coords.y < 0 || coords.y >= 1 << coords.z || coords.z < 0) {
      return; // cull tiles out of range (x will wrap)
    }
    return [source.name, coords.x, coords.y, coords.z, style_z].join('/');
  },
  normalizedKey: function normalizedKey(coords, source, style_z) {
    return this.key(this.normalizedCoord(coords, source), source, style_z);
  },
  normalizedCoord: function normalizedCoord(coords, source) {
    if (source.zoom_bias) {
      coords = this.coordAtZoom(coords, Math.max(coords.z - source.zoom_bias, source.zooms[0]));
    }
    return this.coordForTileZooms(coords, source.zooms);
  },
  coordAtZoom: function coordAtZoom(_ref2, zoom) {
    var x = _ref2.x,
      y = _ref2.y,
      z = _ref2.z;
    zoom = Math.max(0, zoom); // zoom can't go below zero
    if (z !== zoom) {
      var zscale = Math.pow(2, z - zoom);
      x = Math.floor(x / zscale);
      y = Math.floor(y / zscale);
      z = zoom;
    }
    return this.coord({
      x: x,
      y: y,
      z: z
    });
  },
  coordForTileZooms: function coordForTileZooms(_ref3, zooms) {
    var x = _ref3.x,
      y = _ref3.y,
      z = _ref3.z;
    var nz = this.findZoomInRange(z, zooms);
    if (nz !== z) {
      return this.coordAtZoom({
        x: x,
        y: y,
        z: z
      }, nz);
    }
    return this.coord({
      x: x,
      y: y,
      z: z
    });
  },
  findZoomInRange: function findZoomInRange(z, zooms) {
    return zooms.filter(function (s) {
      return z >= s;
    }).reverse()[0] || zooms[0];
  },
  isDescendant: function isDescendant(parent, descendant) {
    if (descendant.z > parent.z) {
      var _this$coordAtZoom = this.coordAtZoom(descendant, parent.z),
        x = _this$coordAtZoom.x,
        y = _this$coordAtZoom.y;
      return parent.x === x && parent.y === y;
    }
    return false;
  },
  // Return identifying info for tile's parent tile
  parent: function parent(_ref4) {
    var coords = _ref4.coords,
      source = _ref4.source,
      style_z = _ref4.style_z;
    if (style_z > 0) {
      // no more tiles above style zoom 0
      style_z--;
      var sz = Math.max(style_z - source.zoom_bias, source.zooms[0]); // z can't be lower than tile source
      var c = this.coordForTileZooms(this.coordAtZoom(coords, sz), source.zooms);
      if (c.z > style_z) {
        return null;
      }
      return {
        key: this.key(c, source, style_z),
        coords: c,
        style_z: style_z,
        source: source
      };
    }
  },
  // Return identifying info for tile's child tiles
  children: function children(_ref5) {
    var coords = _ref5.coords,
      source = _ref5.source,
      style_z = _ref5.style_z;
    var CACHE = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    style_z++;
    var c = this.coordForTileZooms(this.coordAtZoom(coords, style_z - source.zoom_bias), source.zooms);
    if (c.z === coords.z) {
      // same coord zoom for next level down
      return [{
        key: this.key(c, source, style_z),
        coords: c,
        style_z: style_z,
        source: source
      }];
    } else {
      // coord zoom advanced down
      var key = this.key(c, source, style_z);
      CACHE[source.id] = CACHE[source.id] || {};
      if (CACHE[source.id][key] == null) {
        var span = Math.pow(2, c.z - coords.z);
        var x = coords.x * span;
        var y = coords.y * span;
        var _children = [];
        for (var nx = x; nx < x + span; nx++) {
          for (var ny = y; ny < y + span; ny++) {
            var nc = this.coord({
              x: nx,
              y: ny,
              z: c.z
            });
            _children.push({
              key: this.key(nc, source, style_z),
              coords: nc,
              style_z: style_z,
              source: source
            });
          }
        }
        CACHE[source.id][key] = _children;
      }
      return CACHE[source.id][key];
    }
  }
};

function _callSuper$7(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$7() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$7() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$7 = function _isNativeReflectConstruct() { return !!t; })(); }
var RasterTileSource = /*#__PURE__*/function (_NetworkTileSource) {
  function RasterTileSource(source, sources) {
    var _this;
    _classCallCheck(this, RasterTileSource);
    _this = _callSuper$7(this, RasterTileSource, [source, sources]);
    if (_this.rasters.indexOf(_this.name) === -1) {
      _this.rasters.unshift(_this.name); // add this raster as the first
    }
    _this.filtering = source.filtering; // optional texture filtering (nearest, linear, mipmap)

    // save texture objects by tile key, so URL remains stable if tile is built multiple times,
    // e.g. avoid re-loading the same tile texture under a different subdomain when using tile hosts
    _this.textures = {};
    return _this;
  }
  _inherits(RasterTileSource, _NetworkTileSource);
  return _createClass(RasterTileSource, [{
    key: "load",
    value: function load(tile) {
      return new Promise(function ($return, $error) {
        tile.source_data = {};
        tile.source_data.layers = {};
        tile.pad_scale = this.pad_scale;
        tile.rasters = _toConsumableArray(this.rasters); // copy list of rasters to load for tile

        // Generate a single quad that fills the entire tile
        var scale = Geo$1.tile_scale;
        tile.source_data.layers = {
          _default: {
            type: 'FeatureCollection',
            features: [{
              geometry: {
                type: 'Polygon',
                coordinates: [[[0, 0], [scale, 0], [scale, -scale], [0, -scale], [0, 0]]]
              },
              properties: {}
            }]
          }
        };
        tile.default_winding = 'CW';
        return $return(tile);
      }.bind(this));
    }

    // Return texture info for a raster tile
  }, {
    key: "tileTexture",
    value: function tileTexture(tile) {
      return new Promise(function ($return, $error) {
        var coords = this.adjustRasterTileZoom(tile);
        var key = coords.key;
        // texture definitions are cached to avoid loading the same raster tile multiple times,
        // e.g. due to slightly different URLs when subdomain pattern is used (a.tile.com vs. b.tile.com)
        if (!this.textures[key]) {
          var url = this.formatURL(this.url, {
            coords: coords
          });
          this.textures[key] = {
            name: url,
            url: url,
            filtering: this.filtering,
            coords: coords
          };
        }
        return $return(this.textures[key]);
      }.bind(this));
    }

    // If the raster is attached to another source, we need to compare their levels of zoom detail
    // to see if any adjustments are needed. Both the `tile_size` and `zoom_offset` data source params
    // cause the zoom level to be downsampled relative to the "base" zoom level of the map view.
    // The attaching source has already applied its own zoom downsampling. If this source has a lower
    // level of detail, we apply the remaining differential here.
  }, {
    key: "adjustRasterTileZoom",
    value: function adjustRasterTileZoom(tile) {
      var coords = tile.coords;
      var tile_source = this.sources[tile.source];
      if (tile_source !== this) {
        // no-op if the raster source isn't being rendered as an attachment
        var zdiff = this.zoom_bias - tile_source.zoom_bias; // difference in zoom detail between the sources
        if (zdiff > 0) {
          // raster source is less detailed
          // do extra zoom adjustment and apply this raster source's max zoom
          coords = TileID.normalizedCoord(tile.coords, {
            zoom_bias: zdiff,
            zooms: this.zooms
          });
        } else {
          // raster source supports higher detail, but was downsampled to match (the downsampling already
          // happened upstream, when the attaching source calculated its own tile coordinate)
          if (zdiff < 0) {
            log({
              level: 'warn',
              once: true
            }, "Raster source '".concat(this.name, "' supports higher zoom detail than source '").concat(tile_source.name, "' ") + "it's attached to. Downsampling this source ".concat(-zdiff, " extra zoom levels to match."));
          }

          // no extra zoom adjustment needed, but still need to apply this raster source's max zoom
          coords = TileID.coordForTileZooms(coords, this.zooms);
        }
      }
      return coords;
    }
  }]);
}(NetworkTileSource);

// Data source for loading standalone, geo-referenced raster images
// The `bounds` parameter is used to position the raster image on the map
// Currently, only axis-aligned, rectangular North-up images are supported
// TODO: add support for arbitrarily rotated images and quadrangle control points
var RasterSource = /*#__PURE__*/function (_RasterTileSource) {
  function RasterSource(source, sources) {
    var _this2;
    _classCallCheck(this, RasterSource);
    _this2 = _callSuper$7(this, RasterSource, [source, sources]);
    _this2.load_image = {}; // resolves to image, cached for life of data source

    // alpha factor applied at time raster images are loaded and tiled (*not* at shader render-time)
    _this2.alpha = source.alpha != null ? Math.max(Math.min(source.alpha, 1), 0) : null;

    // non-full-alpha pixels should be discarded (for rendering rasters w/opaque blend)
    _this2.mask_alpha = true;

    // don't retain tiles for this source from nearby zooms (to improve memory usage)
    _this2.preserve_tiles_within_zoom = 0;

    // optionally set a max pixel density used for generated raster tiles (to improve memory usage)
    _this2.max_display_density = source.max_display_density;

    // Optionally composite multiple images into one raster layer
    if (Array.isArray(source.composite)) {
      // TODO: calculate enclosing bounding box to speed tile intersection checks
      _this2.images = source.composite.map(function (s) {
        return {
          url: s.url,
          bounds: _this2.parseBounds(s),
          alpha: s.alpha != null ? Math.max(Math.min(s.alpha, 1), 0) : null
        };
      });
    }
    // Single image raster layer
    else {
      _this2.images = [{
        url: _this2.url,
        bounds: _this2.bounds,
        alpha: _this2.alpha
      }];
    }
    return _this2;
  }

  // Render the sub-rectangle of the source raster image for the given tile, to a texture.
  // Clipping the source image to individual raster tiles naturally partitions images
  // (which may be large or only have a small portion in current view), and maintains
  // consistency with the raster tile pipeline allowing for sampling within the fragment shader,
  // and clipping the raster against vector source data.
  _inherits(RasterSource, _RasterTileSource);
  return _createClass(RasterSource, [{
    key: "tileTexture",
    value: function tileTexture(tile, _ref) {
      return new Promise(function ($return, $error) {
        var _this3, blend, generation, coords, use_alpha, name, dpr, canvas, ctx, images;
        _this3 = this;
        blend = _ref.blend, generation = _ref.generation;
        coords = this.adjustRasterTileZoom(tile);
        use_alpha = blend !== 'opaque';
        name = "raster-".concat(this.name, "-").concat(coords.key, "-").concat(use_alpha ? 'alpha' : 'opaque', "-").concat(generation);
        // unique texture name

        // only render each raster tile once (per scene generation)
        if (Texture.textures[name]) {
          return $return({
            name: name,
            coords: coords,
            // tell style to skip re-creating this texture
            // we have an explicit flag for this because element-based (e.g. canvas) textures
            // are usually considered dynamic and always re-created when a new tile needs them
            // (because the user could have updated the canvas pixel contents outside of Tangram)
            skip_create: true
          });
        }

        // Display density, with extra 2x for better intra-zoom scaling, because raster tiles
        // can be scaled up to 100% before next zoom level is loaded
        dpr = Utils.device_pixel_ratio;
        if (this.max_display_density) {
          dpr = Math.min(dpr, this.max_display_density); // optionally cap pixel density
        }
        dpr *= 2;
        canvas = document.createElement('canvas');
        ctx = canvas.getContext('2d');
        canvas.width = this.tile_size * dpr; // adjusted for display density
        canvas.height = this.tile_size * dpr;

        // Applies nearest neighbor filtering to the canvas image rendering when data source requests it
        // NB: does not work on IE11 (image will be blurry when scaled)
        ctx.imageSmoothingEnabled = this.filtering !== 'nearest';

        // Draw one or more images
        images = this.images.filter(function (r) {
          return _this3.checkBounds(tile.coords, r.bounds);
        });
        return Promise.resolve(Promise.all(images.map(function (i) {
          // TODO: log warning if alpha specified but will be ignored (in opaque mode)?
          var alpha = use_alpha ? i.alpha != null ? i.alpha : _this3.alpha : 1;
          return _this3.drawImage(i.url, i.bounds, alpha, tile, dpr, ctx);
        }))).then(function ($await_2) {
          try {
            // texture config
            return $return({
              name: name,
              element: canvas,
              filtering: this.filtering,
              coords: coords
            });
          } catch ($boundEx) {
            return $error($boundEx);
          }
        }.bind(this), $error);
      }.bind(this));
    }

    // Draw a single image to the tile canvas based on on its bounds
  }, {
    key: "drawImage",
    value: function drawImage(url, bounds, alpha, tile, dpr, ctx) {
      return new Promise(function ($return, $error) {
        var key, image, mpp, dx, dy, sx, sy;
        key = hashString(url);
        // use hash of URL for shorter keys
        this.load_image[key] = this.load_image[key] || this.loadImage(url);
        return Promise.resolve(this.load_image[key]).then(function ($await_3) {
          try {
            image = $await_3;
            mpp = Geo$1.metersPerPixel(tile.coords.z) / dpr / (this.tile_size / Geo$1.tile_size);
            dx = (bounds.meters.min[0] - tile.min.x) / mpp;
            dy = -(bounds.meters.min[1] - tile.min.y) / mpp;
            sx = (bounds.meters.max[0] - bounds.meters.min[0]) / mpp;
            sy = -(bounds.meters.max[1] - bounds.meters.min[1]) / mpp;
            // Draw the raster, clipped to the current tile
            // NB: this is drawing the *whole* raster, no matter how large, and relying on the native Canvas clipping.
            // May want to benchmark with a pre-clipped draw area, though the native implementation is likely fast,
            // and has to apply its own clipping check anyway.
            ctx.globalAlpha = alpha != null ? alpha : 1;
            ctx.drawImage(image, dx, dy, sx, sy);
            return $return();
          } catch ($boundEx) {
            return $error($boundEx);
          }
        }.bind(this), $error);
      }.bind(this));
    }

    // Load source raster image
  }, {
    key: "loadImage",
    value: function loadImage(url) {
      var _this4 = this;
      return new Promise(function (resolve) {
        var image = new Image();
        image.onload = function () {
          return resolve(image);
        };
        image.onerror = function (e) {
          // Warn and resolve on error
          log('warn', "Raster source '".concat(_this4.name, "': failed to load url: '").concat(url, "'"), e);
          resolve(null);
        };

        // Safari has a bug loading data-URL images with CORS enabled, so it must be disabled in that case
        // https://bugs.webkit.org/show_bug.cgi?id=123978
        if (!(Utils.isSafari() && url.slice(0, 5) === 'data:')) {
          image.crossOrigin = 'anonymous';
        }
        image.src = url;
      });
    }

    // Checks if tile interects any rasters in this source
  }, {
    key: "includesTile",
    value: function includesTile(coords, style_z) {
      var _this5 = this;
      // Checks zoom range and dependent rasters
      if (!DataSource.prototype.includesTile.call(this, coords, style_z)) {
        return false;
      }
      return this.images.some(function (r) {
        return _this5.checkBounds(coords, r.bounds);
      }); // check if any images intersect
    }
  }, {
    key: "validate",
    value: function validate(source) {
      var is_composite = Array.isArray(source.composite);
      var url_msg = 'Raster data source must provide a string `url` parameter, or an array of `composite` raster ';
      url_msg += 'image objects that each have a `url` parameter';
      var bounds_msg = 'Raster data source must provide a `bounds` parameter, or an array of `composite` raster ';
      bounds_msg += 'image objects that each have a `bounds` parameter';
      var mutex_msg = 'Raster data source must have *either* a single image specified as `url` and `bounds `';
      mutex_msg += 'parameters, or an array of `composite` raster image objects, each with `url` and `bounds`.';
      if (is_composite) {
        if (source.composite.some(function (s) {
          return typeof s.url !== 'string';
        })) {
          throw Error(url_msg);
        }
        if (source.composite.some(function (s) {
          return !(Array.isArray(s.bounds) && s.bounds.length === 4);
        })) {
          throw Error(bounds_msg);
        }
        if (source.url != null || source.bounds != null) {
          throw Error(mutex_msg);
        }
      } else {
        if (typeof source.url !== 'string') {
          throw Error(url_msg);
        }
        if (!(Array.isArray(source.bounds) && source.bounds.length === 4)) {
          throw Error(bounds_msg);
        }
      }
    }
  }]);
}(RasterTileSource);

// Check for URL tile pattern, if not found, treat as geo-referenced raster layer
DataSource.register('Raster', function (source) {
  return RasterTileSource.urlHasTilePattern(source.url) ? RasterTileSource : RasterSource;
});

// Rearranges element array for triangles into a new element array that draws a wireframe
// Used for debugging
function makeWireframeForTriangleElementData(element_data) {
  var wireframe_data = new Uint16Array(element_data.length * 2);

  // Draw triangles as lines:
  // Make a copy of element_data, and for every group of three vertices, duplicate
  // each vertex according to the following pattern:
  // [1, 2, 3] => [1, 2, 2, 3, 3, 1]
  // This takes three vertices which would have been interpreted as a triangle,
  // and converts them into three 2-vertex line segments.
  for (var i = 0; i < element_data.length; i += 3) {
    wireframe_data.set([element_data[i], element_data[i + 1], element_data[i + 1], element_data[i + 2], element_data[i + 2], element_data[i]], i * 2);
  }
  return wireframe_data;
}

var selection_fragment_source = `// Fragment shader for feature selection passes
// Renders in silhouette according to selection (picking) color, or black if none defined

#ifdef TANGRAM_FEATURE_SELECTION
    varying vec4 v_selection_color;
#endif

void main (void) {
    #ifdef TANGRAM_FEATURE_SELECTION
        gl_FragColor = v_selection_color;
    #else
        gl_FragColor = vec4(0., 0., 0., 1.);
    #endif
}
`;

var rasters_source = `// Uniforms defining raster textures and macros for accessing them

#ifdef TANGRAM_FRAGMENT_SHADER
uniform sampler2D u_rasters[TANGRAM_NUM_RASTER_SOURCES];    // raster tile texture samplers
uniform vec2 u_raster_sizes[TANGRAM_NUM_RASTER_SOURCES];    // raster tile texture sizes (width/height in pixels)
uniform vec3 u_raster_offsets[TANGRAM_NUM_RASTER_SOURCES];  // raster tile texture UV starting offset for tile

// Raster sources can optionally mask by the alpha channel (render with only full or no alpha, based on a threshold),
// which is used for handling transparency outside the raster image when rendering with opaque blending
#if defined(TANGRAM_HAS_MASKED_RASTERS) && !defined(TANGRAM_ALL_MASKED_RASTERS) // only add uniform if we need it
uniform bool u_raster_mask_alpha;
#endif

// Note: the raster accessors below are #defines rather than functions to
// avoid issues with constant integer expressions for array indices

// Adjusts UVs in model space to account for raster tile texture overzooming
// (applies scale and offset adjustments)
#define adjustRasterUV(raster_index, uv) \\
    ((uv) * u_raster_offsets[raster_index].z + u_raster_offsets[raster_index].xy)

// Returns the UVs of the current model position for a raster sampler
#define currentRasterUV(raster_index) \\
    (adjustRasterUV(raster_index, v_modelpos_base_zoom.xy))

// Returns pixel location in raster tile texture at current model position
#define currentRasterPixel(raster_index) \\
    (currentRasterUV(raster_index) * rasterPixelSize(raster_index))

// Samples a raster tile texture for the current model position
#define sampleRaster(raster_index) \\
    (texture2D(u_rasters[raster_index], currentRasterUV(raster_index)))

// Samples a raster tile texture for a given pixel
#define sampleRasterAtPixel(raster_index, pixel) \\
    (texture2D(u_rasters[raster_index], (pixel) / rasterPixelSize(raster_index)))

// Returns size of raster sampler in pixels
#define rasterPixelSize(raster_index) \\
    (u_raster_sizes[raster_index])

#endif
`;

function ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }

// Base class

var Style = {
  init: function init() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      generation = _ref.generation,
      styles = _ref.styles,
      _ref$sources = _ref.sources,
      sources = _ref$sources === void 0 ? {} : _ref$sources,
      introspection = _ref.introspection;
    this.setGeneration(generation);
    this.styles = styles; // styles for scene
    this.sources = sources; // data sources for scene
    this.defines = Object.prototype.hasOwnProperty.call(this, 'defines') && this.defines || {}; // #defines to be injected into the shaders
    this.shaders = Object.prototype.hasOwnProperty.call(this, 'shaders') && this.shaders || {}; // shader customization (uniforms, defines, blocks, etc.)
    this.introspection = introspection || false;
    this.selection = this.selection || this.introspection || false; // flag indicating if this style supports feature selection
    this.compile_setup = false; // one-time setup steps for program compilation
    this.program = null; // GL program reference (for main render pass)
    this.selection_program = null; // GL program reference for feature selection render pass
    this.feature_style = {}; // style for feature currently being parsed, shared to lessen GC/memory thrash
    this.vertex_template = []; // shared single-vertex template, filled out by each style
    this.tile_data = {};
    this.stencil_proxy_tiles = true; // applied to proxy tiles w/non-opaque blend mode to avoid compounding alpha

    this.variants = {}; // mesh variants by variant key
    this.vertex_layouts = {}; // vertex layouts by variant key

    // Default world coords to wrap every 100,000 meters, can turn off by setting this to 'false'
    this.defines.TANGRAM_WORLD_POSITION_WRAP = 100000;

    // Blending
    // `opaque` styles are drawn first/under other styles, without alpha blending
    this.blend = this.blend || 'opaque'; // default to opaque
    if (this.blend !== 'opaque') {
      // non-opaque styles can customize their blend order, which will determine which features
      // are drawn first/under each other
      if (this.blend_order == null) {
        this.blend_order = this.default_blend_orders[this.blend];
      }
    } else {
      // `opaque` ignores blend order, always render first/under
      this.blend_order = this.default_blend_orders[this.blend];
    }
    this.defines["TANGRAM_BLEND_".concat(this.blend.toUpperCase())] = true;
    this.removeShaderBlock('setup'); // clear before material injection

    // If the style defines its own material, replace the inherited material instance
    if (!(this.material instanceof Material)) {
      if (!Material.isValid(this.material)) {
        this.material = StyleParser.defaults.material;
      }
      this.material = new Material(this.material);
    }
    this.material.inject(this);

    // Set lighting mode: fragment, vertex, or none (specified as 'false')
    Light.setMode(this.lighting, this);

    // Setup raster samplers if needed
    this.setupRasters();

    // Setup shader definitions for custom attributes
    this.setupCustomAttributes();
    this.initialized = true;
  },
  destroy: function destroy() {
    if (this.program) {
      this.program.destroy();
      this.program = null;
    }
    if (this.selection_program) {
      this.selection_program.destroy();
      this.selection_program = null;
    }
    WorkerBroker$1.removeTarget(this.main_thread_target);
    this.gl = null;
    this.initialized = false;
  },
  reset: function reset() {},
  baseStyle: function baseStyle() {
    return this.base || this.name;
  },
  setGeneration: function setGeneration(generation) {
    // Scene generation id this style was created for
    this.generation = generation;

    // Provide a hook for this object to be called from worker threads
    this.main_thread_target = ['Style', this.name, this.generation].join('_');
    if (Thread.is_main) {
      WorkerBroker$1.addTarget(this.main_thread_target, this);
    }
  },
  /*** Style parsing and geometry construction ***/
  // Returns an object to hold feature data (for a tile or other object)
  startData: function startData(tile) {
    this.tile_data[tile.id] = this.tile_data[tile.id] || {
      meshes: {},
      uniforms: {},
      textures: []
    };
  },
  // Finalizes an object holding feature data (for a tile or other object)
  endData: function endData(tile) {
    return new Promise(function ($return, $error) {
      var tile_data = this.tile_data[tile.id];
      this.tile_data[tile.id] = null;
      if (tile_data && Object.keys(tile_data.meshes).length > 0) {
        for (var variant in tile_data.meshes) {
          var mesh = tile_data.meshes[variant];

          // Remove empty mesh variants
          if (mesh.vertex_data.vertex_count === 0) {
            delete tile_data.meshes[variant];
            continue;
          }

          // Only keep final byte buffer
          mesh.vertex_data.end();
          mesh.vertex_elements = mesh.vertex_data.element_buffer;
          mesh.vertex_data = mesh.vertex_data.vertex_buffer; // convert from instance to raw typed array
        }

        // Load raster tiles passed from data source
        // Blocks mesh completion to avoid flickering
        return $return(this.buildRasterTextures(tile, tile_data));
      } else {
        return $return(null); // don't send tile data back if doesn't have geometry
      }
    }.bind(this));
  },
  // Has mesh data for a given tile?
  hasDataForTile: function hasDataForTile(tile) {
    return this.tile_data[tile.id] != null;
  },
  getTileMesh: function getTileMesh(tile, variant) {
    var meshes = this.tile_data[tile.id].meshes;
    if (meshes[variant.key] == null) {
      var vertex_layout = this.vertexLayoutForMeshVariant(variant);
      meshes[variant.key] = {
        variant: variant,
        vertex_data: vertex_layout.createVertexData()
      };
    }
    return meshes[variant.key];
  },
  vertexLayoutForMeshVariant: function vertexLayoutForMeshVariant() {
    // styles must implement
  } /*variant*/,
  meshVariantTypeForDraw: function meshVariantTypeForDraw() {
    // styles must implement
  } /*draw*/,
  addFeature: function addFeature(feature, draw, context) {
    var tile = context.tile;
    if (tile.generation !== this.generation) {
      return;
    }
    if (!this.tile_data[tile.id]) {
      this.startData(tile);
    }
    var style = this.parseFeature(feature, draw, context);
    if (!style) {
      return; // skip feature
    }
    if (this.buildGeometry(feature.geometry, style, context) > 0) {
      feature.generation = this.generation; // track scene generation that feature was rendered for
    }
  },
  buildGeometry: function buildGeometry(geometry, style, context) {
    var _this = this;
    var geom_count;
    if (geometry.type === 'Polygon') {
      geom_count = this.buildPolygons([geometry.coordinates], style, context);
    } else if (geometry.type === 'MultiPolygon') {
      geom_count = this.buildPolygons(geometry.coordinates, style, context);
    } else if (geometry.type === 'LineString') {
      geom_count = this.buildLines([geometry.coordinates], style, context);
    } else if (geometry.type === 'MultiLineString') {
      geom_count = this.buildLines(geometry.coordinates, style, context);
    } else if (geometry.type === 'Point') {
      geom_count = this.buildPoints([geometry.coordinates], style, context);
    } else if (geometry.type === 'MultiPoint') {
      geom_count = this.buildPoints(geometry.coordinates, style, context);
    }

    // Optionally collect per-layer stats
    if (geom_count > 0 && debugSettings$1.layer_stats) {
      var tile = context.tile;
      tile.debug.layers = tile.debug.layers || {
        list: {},
        tree: {}
      };
      var list = tile.debug.layers.list;
      var tree = tile.debug.layers.tree;
      var ftree = {}; // tree of layers for this feature
      context.layers.forEach(function (layer) {
        addLayerDebugEntry(list, layer, 1, geom_count, _defineProperty({}, _this.name, geom_count), _defineProperty({}, _this.baseStyle(), geom_count));
        var node = tree;
        var fnode = ftree;
        var levels = layer.split(':');
        for (var i = 0; i < levels.length; i++) {
          var level = levels[i];
          node[level] = node[level] || {
            features: 0,
            geoms: 0,
            styles: {},
            base: {}
          };
          if (fnode[level] == null) {
            // only count each layer level once per feature
            fnode[level] = {};
            addLayerDebugEntry(node, level, 1, geom_count, _defineProperty({}, _this.name, geom_count), _defineProperty({}, _this.baseStyle(), geom_count));
          }
          if (i < levels.length - 1) {
            node[level].layers = node[level].layers || {};
          }
          node = node[level].layers;
          fnode = fnode[level];
        }
      });
    }
    return geom_count;
  },
  parseFeature: function parseFeature(feature, draw, context) {
    try {
      var style = this.feature_style;

      // Calculate order
      style.order = this.parseOrder(draw.order, context);
      if (style.order == null && this.blend !== 'overlay') {
        var msg = "Layer '".concat(draw.layers.join(', '), "', draw group '").concat(draw.group, "': ");
        msg += '\'order\' parameter is required unless blend mode is \'overlay\'';
        if (draw.order != null) {
          msg += '; \'order\' was set to a dynamic value (e.g. string tied to feature property, ';
          msg += 'or JS function), but evaluated to null for one or more features';
        }
        log({
          level: 'warn',
          once: true
        }, msg);
        return;
      }

      // Subclass implementation
      style = this._parseFeature(feature, draw, context);
      if (!style) {
        return; // skip feature
      }

      // Custom attributes
      if (this.shaders.attributes) {
        style.attributes = style.attributes || {};
        for (var aname in this.shaders.attributes) {
          style.attributes[aname] = StyleParser.evalCachedProperty(draw.attributes && draw.attributes[aname], context);
          // set attribute value to zero for null/undefined/non-numeric values
          if (typeof style.attributes[aname] !== 'number') {
            style.attributes[aname] = 0;
          }
        }
      }

      // Feature selection (only if feature is marked as interactive, and style supports it)
      if (this.selection) {
        style.interactive = StyleParser.evalProperty(draw.interactive, context);
      } else {
        style.interactive = false;
      }
      if (style.interactive === true) {
        style.selection_color = FeatureSelection.makeColor(feature, context.tile, context);
      } else {
        style.selection_color = FeatureSelection.defaultColor;
      }
      return style;
    } catch (error) {
      log('error', 'Style.parseFeature: style parsing error', feature, style, error.stack);
    }
  },
  _parseFeature: function _parseFeature() {
    return this.feature_style;
  } /*feature, draw, context*/,
  preprocess: function preprocess(draw) {
    // Preprocess first time
    if (!draw.preprocessed) {
      // Apply draw defaults
      if (this.draw) {
        // Merge each property separately to avoid modifying `draw` instance identity
        for (var param in this.draw) {
          var val = this.draw[param];
          if (_typeof(val) === 'object' && !Array.isArray(val)) {
            // nested param (e.g. `outline`)
            draw[param] = mergeObjects({}, val, draw[param]);
          } else if (draw[param] == null) {
            // simple param (single scalar value or array)
            draw[param] = val;
          }
        }
      }
      if (!this.selection) {
        draw.interactive = false; // always disable feature selection for when style doesn't support it
      } else if (this.introspection) {
        draw.interactive = true; // always enable feature selection for introspection
      }
      draw = this._preprocess(draw); // optional subclass implementation
      if (!draw) {
        return;
      }

      // Custom attributes
      if (this.shaders.attributes) {
        draw.attributes = draw.attributes || {};
        for (var aname in this.shaders.attributes) {
          draw.attributes[aname] = StyleParser.createPropertyCache(draw.attributes[aname] != null ? draw.attributes[aname] : 0);
        }
      }
      draw.preprocessed = true;
    }
    return draw;
  },
  // optionally implemented by subclass
  _preprocess: function _preprocess(draw) {
    return draw;
  },
  // Parse an order value
  parseOrder: function parseOrder(order, context) {
    // Calculate order if it was not cached
    if (typeof order !== 'number') {
      return StyleParser.calculateOrder(order, context);
    }
    return order;
  },
  // Expand final precision for half-layers (for outlines)
  scaleOrder: function scaleOrder(order) {
    return order * 2;
  },
  // Parse a color of choose a default if acceptable, return undefined if color missing
  parseColor: function parseColor(color, context) {
    // Need either a color, or a shader block for 'color' or 'filter'
    if (color) {
      return StyleParser.evalCachedColorProperty(color, context);
    } else if (this.shaders.blocks.color || this.shaders.blocks.filter) {
      return StyleParser.defaults.color;
    }
  },
  // Build functions are no-ops until overriden
  buildPolygons: function buildPolygons() {
    return 0;
  },
  buildLines: function buildLines() {
    return 0;
  },
  buildPoints: function buildPoints() {
    return 0;
  },
  /*** GL state and rendering ***/setGL: function setGL(gl) {
    this.gl = gl;
    this.max_texture_size = Texture.getMaxTextureSize(this.gl);
  },
  makeMesh: function makeMesh(vertex_data, vertex_elements) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var vertex_layout = this.vertexLayoutForMeshVariant(options.variant);
    if (debugSettings$1.wireframe) {
      // In wireframe debug mode, transform mesh into lines
      vertex_elements = makeWireframeForTriangleElementData(vertex_elements);
      return new VBOMesh(this.gl, vertex_data, vertex_elements, vertex_layout, _objectSpread$4(_objectSpread$4({}, options), {}, {
        draw_mode: this.gl.LINES
      }));
    }
    return new VBOMesh(this.gl, vertex_data, vertex_elements, vertex_layout, options);
  },
  render: function render(mesh) {
    return mesh.render();
  },
  // Get a specific program, compiling if necessary
  getProgram: function getProgram() {
    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';
    this.compileSetup();
    var program = this[key];
    if (!program || program.error) {
      return;
    }
    if (!program.compiled) {
      log('debug', "Compiling style '".concat(this.name, "', program key '").concat(key, "'"));
      try {
        program.compile();
      } catch (e) {
        log('error', "Style: error compiling program for style '".concat(this.name, "' (program key '").concat(key, "')"), this, e.stack, e.type, e.shader_errors);
        throw e; // re-throw so users can be notified via event subscriptions
      }
    }
    return program;
  },
  // One-time setup for compiling style's programs
  compileSetup: function compileSetup() {
    if (this.compile_setup) {
      return;
    }
    if (!this.gl) {
      throw new Error("style.compile(): skipping for ".concat(this.name, " because no GL context"));
    }

    // Build defines & for selection (need to create a new object since the first is stored as a reference by the program)
    var defines = this.buildDefineList();
    if (this.selection) {
      var selection_defines = Object.assign({}, defines);
      selection_defines.TANGRAM_FEATURE_SELECTION = true;
    }

    // Shader blocks
    var blocks = this.shaders && this.shaders.blocks;
    var block_scopes = this.shaders && this.shaders.block_scopes;

    // Uniforms
    var uniforms = Object.assign({}, this.shaders && this.shaders.uniforms);
    for (var u in uniforms) {
      // validate uniforms
      if (uniforms[u] == null) {
        log({
          level: 'warn',
          once: true
        }, "Style '".concat(this.name, "' has invalid uniform '").concat(u, "': uniform values must be non-null"));
      }
    }

    // Accept a single extension, or an array of extensions
    var extensions = this.shaders && this.shaders.extensions;
    if (typeof extensions === 'string') {
      extensions = [extensions];
    }

    // Create shaders
    this.program = new ShaderProgram(this.gl, this.vertex_shader_src, this.fragment_shader_src, {
      name: this.name,
      defines: defines,
      uniforms: uniforms,
      blocks: blocks,
      block_scopes: block_scopes,
      extensions: extensions
    });
    if (this.selection) {
      this.selection_program = new ShaderProgram(this.gl, this.vertex_shader_src, selection_fragment_source, {
        name: this.name + ' (selection)',
        defines: selection_defines,
        uniforms: uniforms,
        blocks: blocks,
        block_scopes: block_scopes,
        extensions: extensions
      });
    } else {
      this.selection_program = null;
    }
    this.compile_setup = true;
  },
  // Add a shader block
  addShaderBlock: function addShaderBlock(key, block) {
    var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    this.shaders.blocks = this.shaders.blocks || {};
    this.shaders.blocks[key] = this.shaders.blocks[key] || [];
    this.shaders.blocks[key].push(block);
    this.shaders.block_scopes = this.shaders.block_scopes || {};
    this.shaders.block_scopes[key] = this.shaders.block_scopes[key] || [];
    this.shaders.block_scopes[key].push(scope);
  },
  // Remove all shader blocks for key
  removeShaderBlock: function removeShaderBlock(key) {
    if (this.shaders.blocks) {
      this.shaders.blocks[key] = null;
    }
    if (this.shaders.block_scopes) {
      this.shaders.block_scopes[key] = null;
    }
  },
  replaceShaderBlock: function replaceShaderBlock(key, block) {
    var scope = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    this.removeShaderBlock(key);
    this.addShaderBlock(key, block, scope);
  },
  /** TODO: could probably combine and generalize this with similar method in ShaderProgram
   * (list of define objects that inherit from each other)
   */
  buildDefineList: function buildDefineList() {
    // Add any custom defines to built-in style defines
    var defines = {}; // create a new object to avoid mutating a prototype value that may be shared with other styles
    if (this.defines != null) {
      for (var d in this.defines) {
        defines[d] = this.defines[d];
      }
    }
    if (this.shaders != null && this.shaders.defines != null) {
      for (d in this.shaders.defines) {
        defines[d] = this.shaders.defines[d];
      }
    }
    return defines;
  },
  // Determines if 'raster' parameter is set to a valid value
  hasRasters: function hasRasters() {
    return ['color', 'normal', 'custom'].indexOf(this.raster) > -1;
  },
  // Setup raster access in shaders
  setupRasters: function setupRasters() {
    var _this2 = this;
    if (!this.hasRasters()) {
      return;
    }

    // Enable raster textures and configure how first raster is applied
    if (this.raster === 'color') {
      this.defines.TANGRAM_RASTER_TEXTURE_COLOR = true;
    } else if (this.raster === 'normal') {
      this.defines.TANGRAM_RASTER_TEXTURE_NORMAL = true;
    }
    // else custom raster (samplers will be made available but not automatically applied)

    // A given style may be built with multiple data sources, each of which may attach
    // a variable number of raster sources (0 to N, where N is the max number of raster sources
    // defined for the scene). This means we don't know *which* or *how many* rasters will be
    // bound now, at initial compile-time; we only know this at geometry build-time. To ensure
    // that we can bind as many raster sources as needed, we declare our uniform arrays to hold
    // the maximum number of possible sources. At render time, only the necessary number of rasters
    // are bound (the remaining slots aren't intended to be accessed).
    var num_raster_sources = Object.keys(this.sources).filter(function (s) {
      return _this2.sources[s] instanceof RasterTileSource;
    }).length;
    this.defines.TANGRAM_NUM_RASTER_SOURCES = "".concat(num_raster_sources); // force to string to avoid auto-float conversion
    if (num_raster_sources > 0) {
      // Track how many raster sources have alpha masking (used for handling transparency outside raster image)
      var num_masked_rasters = Object.keys(this.sources).filter(function (s) {
        return _this2.sources[s].mask_alpha;
      }).length;
      this.defines.TANGRAM_HAS_MASKED_RASTERS = num_masked_rasters > 0;
      this.defines.TANGRAM_ALL_MASKED_RASTERS = num_masked_rasters === num_raster_sources;

      // Use model position of tile's coordinate zoom for raster tile texture UVs
      this.defines.TANGRAM_MODEL_POSITION_BASE_ZOOM_VARYING = true;

      // Uniforms and samplers
      this.replaceShaderBlock('raster', rasters_source, 'Raster');
    }
  },
  // Load raster tile textures and set uniforms
  buildRasterTextures: function buildRasterTextures(tile, tile_data) {
    return new Promise(function ($return, $error) {
      var textures, u_samplers, u_sizes, u_offsets;
      // skip if style doesn't support rasters
      if (!this.hasRasters()) {
        return $return(tile_data);
      }

      // skip if source didn't attach any rasters to tile
      if (tile.rasters.length === 0) {
        return $return(tile_data);
      }

      // Load textures on main thread and return when done
      // We want to block the building of a raster tile mesh until its texture is loaded,
      // to avoid flickering while loading (texture will render as black)
      var $Try_3_Post = function () {
        try {
          if (!textures || textures.length < 1) {
            // no textures found (unexpected)
            // TODO: warning
            return $return(tile_data);
          } else if (textures.some(function (t) {
            return !t.loaded;
          })) {
            // some textures failed, throw out style for this tile
            return $return(null);
          }

          // Enable alpha masking if needed (for transparency outside raster image, on first raster only)
          tile_data.uniforms['u_raster_mask_alpha'] = this.sources[tile.rasters[0]].mask_alpha === true;

          // Set texture uniforms (returned after loading from main thread)
          u_samplers = tile_data.uniforms['u_rasters'] = [];
          u_sizes = tile_data.uniforms['u_raster_sizes'] = [];
          u_offsets = tile_data.uniforms['u_raster_offsets'] = [];
          textures.forEach(function (t) {
            var i = t.index;
            u_samplers[i] = t.name;
            tile_data.textures.push(t.name);
            u_sizes[i] = [t.width, t.height];

            // Tile geometry may be at a higher zoom than the raster tile texture,
            // (e.g. an overzoomed raster tile), in which case we need to adjust the
            // raster texture UVs to offset to the appropriate starting point for
            // this geometry tile.
            if (tile.coords.z > t.coords.z) {
              var dz = tile.coords.z - t.coords.z; // # of levels raster source is overzoomed
              var dz2 = Math.pow(2, dz);
              u_offsets[i] = [(tile.coords.x % dz2 + dz2) % dz2 / dz2,
              // double-modulo to handle negative (wrapped) tile coords
              (dz2 - 1 - tile.coords.y % dz2) / dz2,
              // GL texture coords are +Y up
              1 / dz2];
            } else {
              u_offsets[i] = [0, 0, 1];
            }
          });
          return $return(tile_data);
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }.bind(this);
      var $Try_3_Catch = function (e) {
        try {
          // error thrown if style has been removed from main thread
          return $return(tile_data);
        } catch ($boundEx) {
          return $error($boundEx);
        }
      };
      try {
        return Promise.resolve(WorkerBroker$1.postMessage("".concat(this.main_thread_target, ".loadTextures"), {
          coords: tile.coords,
          source: tile.source,
          rasters: tile.rasters,
          min: tile.min,
          max: tile.max
        })).then(function ($await_4) {
          try {
            textures = $await_4;
            return $Try_3_Post();
          } catch ($boundEx) {
            return $Try_3_Catch($boundEx);
          }
        }, $Try_3_Catch);
      } catch (e) {
        $Try_3_Catch();
      }
    }.bind(this));
  },
  // Determine which raster tile textures need to load for this tile, load them and return metadata to worker
  // Called on main thread
  loadTextures: function loadTextures(tile) {
    return new Promise(function ($return, $error) {
      var _this3, configs, index, queue, textures;
      _this3 = this;
      configs = {};
      index = {};
      queue = [];
      // Find raster textures that need to be loaded
      tile.rasters.map(function (r) {
        return _this3.sources[r];
      }).filter(function (x) {
        return x;
      }).forEach(function (source, i) {
        if (source instanceof RasterTileSource) {
          queue.push(source.tileTexture(tile, _this3).then(function (config) {
            configs[config.name] = config;
            index[config.name] = i;
          }));
        }
      });
      return Promise.resolve(Promise.all(queue)).then(function ($await_5) {
        try {
          return Promise.resolve(Texture.createFromObject(this.gl, configs)).then(function ($await_6) {
            try {
              return Promise.resolve(Promise.all(Object.keys(configs).map(function (t) {
                return Texture.textures[t] && Texture.textures[t].load();
              }).filter(function (x) {
                return x;
              }))).then(function ($await_7) {
                try {
                  textures = $await_7;
                  textures.forEach(function (t) {
                    return t.retain();
                  });

                  // Take a subset of texture metadata, and decorate with raster-specific info
                  // NB: only return name and size of textures loaded, because we can't send actual texture objects to worker
                  return $return(textures.map(function (t) {
                    return {
                      name: t.name,
                      width: t.width,
                      height: t.height,
                      loaded: t.loaded,
                      index: index[t.name],
                      // raster sampler index
                      coords: configs[t.name].coords // tile coords of raster tile
                    };
                  }));
                } catch ($boundEx) {
                  return $error($boundEx);
                }
              }, $error);
            } catch ($boundEx) {
              return $error($boundEx);
            }
          }, $error);
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }.bind(this), $error);
    }.bind(this));
  },
  // Setup shader definitions for custom attributes
  setupCustomAttributes: function setupCustomAttributes() {
    if (this.shaders.attributes) {
      for (var _i = 0, _Object$entries = Object.entries(this.shaders.attributes); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          aname = _Object$entries$_i[0],
          attrib = _Object$entries$_i[1];
        // alias each custom attribute to the internal attribute name in vertex shader,
        // and internal varying name in fragment shader (if varying is enabled)
        if (attrib.type === 'float') {
          if (attrib.varying !== false) {
            this.addShaderBlock('attributes', "\n                            #ifdef TANGRAM_VERTEX_SHADER\n                                attribute float a_".concat(aname, ";\n                                varying float v_").concat(aname, ";\n                                #define ").concat(aname, " a_").concat(aname, "\n                            #else\n                                varying float v_").concat(aname, ";\n                                #define ").concat(aname, " v_").concat(aname, "\n                            #endif\n                        "));
            this.addShaderBlock('setup', "#ifdef TANGRAM_VERTEX_SHADER\nv_".concat(aname, " = a_").concat(aname, ";\n#endif"));
          } else {
            this.addShaderBlock('attributes', "\n                            #ifdef TANGRAM_VERTEX_SHADER\n                                attribute float a_".concat(aname, ";\n                                #define ").concat(aname, " a_").concat(aname, "\n                            #endif\n                        "));
          }
        }
      }
    }
  },
  // Add custom attributes to a list of attributes for initializing a vertex layout
  addCustomAttributesToAttributeList: function addCustomAttributesToAttributeList(attribs) {
    if (this.shaders.attributes) {
      for (var _i2 = 0, _Object$entries2 = Object.entries(this.shaders.attributes); _i2 < _Object$entries2.length; _i2++) {
        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
          aname = _Object$entries2$_i[0],
          attrib = _Object$entries2$_i[1];
        if (attrib.type === 'float') {
          attribs.push({
            name: "a_".concat(aname),
            size: 1,
            type: gl$1.FLOAT,
            normalized: false
          });
        }
      }
    }
    return attribs;
  },
  // Add current feature values for custom attributes to vertex template
  addCustomAttributesToVertexTemplate: function addCustomAttributesToVertexTemplate(draw, index) {
    if (this.shaders.attributes) {
      for (var aname in this.shaders.attributes) {
        this.vertex_template[index++] = draw.attributes[aname] != null ? draw.attributes[aname] : 0;
      }
    }
  },
  // Setup any GL state for rendering
  setup: function setup() {
    this.setUniforms();
    this.material.setupProgram(ShaderProgram.current);
  },
  // Set style uniforms on currently bound program
  setUniforms: function setUniforms() {
    var _this$shaders;
    var program = ShaderProgram.current;
    if (!program) {
      return;
    }
    program.setUniforms((_this$shaders = this.shaders) === null || _this$shaders === void 0 ? void 0 : _this$shaders.uniforms, true); // reset texture unit to 0
  },
  // Render state settings by blend mode
  render_states: {
    opaque: {
      depth_test: true,
      depth_write: true
    },
    translucent: {
      depth_test: true,
      depth_write: true
    },
    add: {
      depth_test: true,
      depth_write: false
    },
    multiply: {
      depth_test: true,
      depth_write: false
    },
    inlay: {
      depth_test: true,
      depth_write: false
    },
    overlay: {
      depth_test: false,
      depth_write: false
    }
  },
  // Default sort order for blend modes
  default_blend_orders: {
    opaque: Number.MIN_SAFE_INTEGER,
    add: 1,
    multiply: 2,
    inlay: 3,
    translucent: 4,
    overlay: 5
  },
  getBlendOrderForDraw: function getBlendOrderForDraw(draw) {
    // Allow draw block to override blend_order for non-opaque blend styles
    return this.blend !== 'opaque' && draw.blend_order != null ? draw.blend_order : this.blend_order;
  }
};

// add feature and geometry counts for a single layer
function addLayerDebugEntry(target, layer, faeture_count, geom_count, styles, bases) {
  target[layer] = target[layer] || {
    features: 0,
    geoms: 0,
    styles: {},
    base: {}
  };
  target[layer].features += faeture_count; // feature count
  target[layer].geoms += geom_count; // geometry count

  // geometry count by style
  for (var style in styles) {
    target[layer].styles[style] = target[layer].styles[style] || 0;
    target[layer].styles[style] += styles[style];
  }

  // geometry count by base style
  for (var _style in bases) {
    target[layer].base[_style] = target[layer].base[_style] || 0;
    target[layer].base[_style] += bases[_style];
  }
}

var MAX_VALUE = Math.pow(2, 16) - 1;
var has_element_index_uint = false;
var VertexElements = /*#__PURE__*/function () {
  function VertexElements() {
    _classCallCheck(this, VertexElements);
    this.array = [];
    this.has_overflown = false;
  }
  return _createClass(VertexElements, [{
    key: "push",
    value: function push(value) {
      // If values have overflown and no Uint32 option is available, do not push values
      if (this.has_overflown && !has_element_index_uint) {
        return;
      }

      // Trigger overflow if value is greater than Uint16 max
      if (value > MAX_VALUE) {
        this.has_overflown = true;
        if (!has_element_index_uint) {
          return;
        }
      }
      this.array.push(value);
    }
  }, {
    key: "end",
    value: function end() {
      if (this.array.length) {
        var buffer = createBuffer(this.array, this.has_overflown);
        this.array = [];
        this.has_overflown = false;
        return buffer;
      } else {
        return false;
      }
    }
  }]);
}();
VertexElements.setElementIndexUint = function (flag) {
  has_element_index_uint = flag;
};
function createBuffer(array, overflown) {
  var typedArray = overflown && has_element_index_uint ? Uint32Array : Uint16Array;
  return new typedArray(array);
}

// Maps GL types to JS array types
var array_types = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, gl$1.FLOAT, Float32Array), gl$1.BYTE, Int8Array), gl$1.UNSIGNED_BYTE, Uint8Array), gl$1.INT, Int32Array), gl$1.UNSIGNED_INT, Uint32Array), gl$1.SHORT, Int16Array), gl$1.UNSIGNED_SHORT, Uint16Array);

// An intermediary object that holds vertex data in typed arrays, according to a given vertex layout
// Used to construct a mesh/VBO for rendering
var VertexData = /*#__PURE__*/function () {
  function VertexData(vertex_layout) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$prealloc = _ref.prealloc,
      prealloc = _ref$prealloc === void 0 ? 500 : _ref$prealloc;
    _classCallCheck(this, VertexData);
    this.vertex_layout = vertex_layout;
    this.vertex_elements = new VertexElements();
    this.stride = this.vertex_layout.stride;
    if (VertexData.array_pool.length > 0) {
      this.vertex_buffer = VertexData.array_pool.pop();
      this.byte_length = this.vertex_buffer.byteLength;
      this.size = Math.floor(this.byte_length / this.stride);
      log('trace', "VertexData: reused buffer of bytes ".concat(this.byte_length, ", ").concat(this.size, " vertices"));
    } else {
      this.size = prealloc; // # of vertices to allocate
      this.byte_length = this.stride * this.size;
      this.vertex_buffer = new Uint8Array(this.byte_length);
    }
    this.offset = 0; // byte offset into currently allocated buffer

    this.vertex_count = 0;
    this.realloc_count = 0;
    this.setBufferViews();
    this.setAddVertexFunction();
  }

  // (Re-)allocate typed views into the main buffer - only create the types we need for this layout
  return _createClass(VertexData, [{
    key: "setBufferViews",
    value: function setBufferViews() {
      var _this = this;
      this.views = {};
      this.views[gl$1.UNSIGNED_BYTE] = this.vertex_buffer;
      this.vertex_layout.dynamic_attribs.forEach(function (attrib) {
        // Need view for this type?
        if (_this.views[attrib.type] == null) {
          var array_type = array_types[attrib.type];
          _this.views[attrib.type] = new array_type(_this.vertex_buffer.buffer);
        }
      });
    }

    // Check allocated buffer size, expand/realloc buffer if needed
  }, {
    key: "checkBufferSize",
    value: function checkBufferSize() {
      if (this.offset + this.stride > this.byte_length) {
        this.size = Math.floor(this.size * 1.5);
        this.size -= this.size % 4;
        this.byte_length = this.stride * this.size;
        var new_view = new Uint8Array(this.byte_length);
        new_view.set(this.vertex_buffer); // copy existing data to new buffer
        VertexData.array_pool.push(this.vertex_buffer); // save previous buffer for use by next tile
        this.vertex_buffer = new_view;
        this.setBufferViews();
        this.realloc_count++;
        // log('info', `VertexData: expanded vertex block to ${this.size} vertices`);
      }
    }

    // Initialize the add vertex function (lazily compiled by vertex layout)
  }, {
    key: "setAddVertexFunction",
    value: function setAddVertexFunction() {
      this.vertexLayoutAddVertex = this.vertex_layout.getAddVertexFunction();
    }

    // Add a vertex, copied from a plain JS array of elements matching the order of the vertex layout
  }, {
    key: "addVertex",
    value: function addVertex(vertex) {
      this.checkBufferSize();
      this.vertexLayoutAddVertex(vertex, this.views, this.offset);
      this.offset += this.stride;
      this.vertex_count++;
    }

    // Finalize vertex buffer for use in constructing a mesh
  }, {
    key: "end",
    value: function end() {
      // Clip the buffer to size used for this VBO
      this.vertex_buffer = this.vertex_buffer.subarray(0, this.offset);
      this.element_buffer = this.vertex_elements.end();
      log('trace', "VertexData: ".concat(this.size, " vertices total, realloc count ").concat(this.realloc_count));
      return this;
    }
  }]);
}();
VertexData.array_pool = []; // pool of currently available (previously used) buffers (uint8)

// Describes a vertex layout that can be used with many different GL programs.
var VertexLayout = /*#__PURE__*/function () {
  // Attribs are an array, in layout order, of: name, size, type, normalized
  // ex: { name: 'position', size: 3, type: gl.FLOAT, normalized: false }
  function VertexLayout(attribs) {
    _classCallCheck(this, VertexLayout);
    this.attribs = attribs; // array of attributes, specified as standard GL attrib options
    this.dynamic_attribs = this.attribs.filter(function (x) {
      return x.static == null;
    }); // attributes with per-vertex values, used to build VBOs
    this.static_attribs = this.attribs.filter(function (x) {
      return x.static != null;
    }); // attributes with fixed values
    this.components = []; // list of type and offset info about each attribute component
    this.index = {}; // JS buffer index of each attribute component, e.g. this.index.position
    this.offset = {}; // VBO buffer byte offset of each attribute component, e.g. this.offset.color
    this.stride = 0; // byte stride of a single vertex

    var index = 0,
      count = 0;
    for (var a = 0; a < this.attribs.length; a++) {
      var attrib = this.attribs[a];
      // Dynamic attribute
      if (attrib.static == null) {
        attrib.offset = this.stride;
        attrib.byte_size = attrib.size;
        var shift = 0;
        switch (attrib.type) {
          case gl$1.FLOAT:
          case gl$1.INT:
          case gl$1.UNSIGNED_INT:
            attrib.byte_size *= 4;
            shift = 2;
            break;
          case gl$1.SHORT:
          case gl$1.UNSIGNED_SHORT:
            attrib.byte_size *= 2;
            shift = 1;
            break;
        }

        // Force 4-byte alignment on attributes
        if (attrib.byte_size & 3) {
          // pad to multiple of 4 bytes
          attrib.byte_size += 4 - (attrib.byte_size & 3);
        }
        this.stride += attrib.byte_size;

        // Add info to list of attribute components (e.g. float is 1 component, vec3 is 3 separate components)
        // Used to map plain JS array to typed arrays
        var offset_typed = attrib.offset >> shift;
        for (var s = 0; s < attrib.size; s++) {
          this.components.push({
            type: attrib.type,
            shift: shift,
            offset: offset_typed++,
            index: count++
          });
        }

        // Provide an index into the vertex data buffer for each attribute by name
        this.index[attrib.name] = index;
        index += attrib.size;

        // Store byte offset of each attribute by name
        this.offset[attrib.name] = attrib.offset;
      }
      // Static attribute
      else {
        attrib.static = Array.isArray(attrib.static) ? attrib.static : [attrib.static]; // convert single value to array
        attrib.method = "vertexAttrib".concat(attrib.static.length, "fv");
      }
    }
  }

  // Enables dynamic (array-based) attributes for a given GL program
  // Assumes that the desired vertex buffer (VBO) is already bound
  // If the program doesn't include all attributes, it can still use the vertex layout
  // to read those attribs that it does recognize, using the attrib offsets to skip others.
  return _createClass(VertexLayout, [{
    key: "enableDynamicAttributes",
    value: function enableDynamicAttributes(gl, program) {
      var _this = this;
      // Disable all attributes
      for (var location in VertexLayout.enabled_attribs) {
        gl.disableVertexAttribArray(location);
      }
      VertexLayout.enabled_attribs = {};

      // Enable dynamic attributes for this layout
      this.dynamic_attribs.forEach(function (attrib) {
        var location = program.attribute(attrib.name).location;
        if (location !== -1) {
          gl.enableVertexAttribArray(location);
          gl.vertexAttribPointer(location, attrib.size, attrib.type, attrib.normalized, _this.stride, attrib.offset);
          VertexLayout.enabled_attribs[location] = program;
        }
      });
    }

    // Enable static attributes for this layout. Since these aren't captured as part of Vertex Array Object state,
    // they are enabled separately.
  }, {
    key: "enableStaticAttributes",
    value: function enableStaticAttributes(gl, program) {
      this.static_attribs.forEach(function (attrib) {
        var location = program.attribute(attrib.name).location;
        if (location !== -1 && gl[attrib.method] instanceof Function) {
          // N.B.: Safari appears to require an explicit array enable to set vertex attribute as "active"
          // (the static attribute value method does not work without it). So the attribute is temporarily
          // enabled as an array, then disabled.
          gl.enableVertexAttribArray(location);
          gl[attrib.method](location, attrib.static);
          gl.disableVertexAttribArray(location);
        }
      });
    }
  }, {
    key: "createVertexData",
    value: function createVertexData() {
      return new VertexData(this);
    }

    // Lazily create the add vertex function
  }, {
    key: "getAddVertexFunction",
    value: function getAddVertexFunction() {
      if (this.addVertex == null) {
        this.createAddVertexFunction();
      }
      return this.addVertex;
    }

    // Dynamically compile a function to add a plain JS vertex array to this layout's typed VBO arrays
  }, {
    key: "createAddVertexFunction",
    value: function createAddVertexFunction() {
      var key = hashString(JSON.stringify(this.attribs));
      if (VertexLayout.add_vertex_funcs[key] == null) {
        // `t` = current typed array to write to
        // `o` = current offset into VBO, in current type size (e.g. divide 2 for shorts, divide by 4 for floats, etc.)
        // `v` = plain JS array containing vertex data
        // `vs` = typed arrays (one per GL type needed for this vertex layout)
        // `off` = current offset into VBO, in bytes
        var src = ['var t, o;'];

        // Sort by array type to reduce redundant array look-up and offset calculation
        var last_type;
        var components = _toConsumableArray(this.components);
        components.sort(function (a, b) {
          return a.type !== b.type ? a.type - b.type : a.index - b.index;
        });
        for (var c = 0; c < components.length; c++) {
          var component = components[c];
          if (last_type !== component.type) {
            src.push("t = vs[".concat(component.type, "];"));
            src.push("o = off".concat(component.shift ? ' >> ' + component.shift : '', ";"));
            last_type = component.type;
          }
          src.push("t[o + ".concat(component.offset, "] = v[").concat(component.index, "];"));
        }
        src = src.join('\n');
        var func = new Function('v', 'vs', 'off', src); // jshint ignore:line
        VertexLayout.add_vertex_funcs[key] = func;
      }
      this.addVertex = VertexLayout.add_vertex_funcs[key];
    }
  }]);
}(); // Track currently enabled attribs, by the program they are bound to
VertexLayout.enabled_attribs = {};

// Functions to add plain JS vertex array to typed VBO arrays
VertexLayout.add_vertex_funcs = {}; // keyed by unique set of attributes

// Geometry building functions
var tile_bounds = [{
  x: 0,
  y: 0
}, {
  x: Geo$1.tile_scale,
  y: -Geo$1.tile_scale
} // TODO: correct for flipped y-axis?
];
var default_uvs = [0, 0, 1, 1];

// Tests if a line segment (from point A to B) is outside the tile bounds
// (within a certain tolerance to account for geometry nearly on tile edges)
function outsideTile(_a, _b, tolerance) {
  var tile_min = tile_bounds[0];
  var tile_max = tile_bounds[1];

  // TODO: fix flipped Y coords here, confusing with 'max' reference
  if (_a[0] <= tile_min.x + tolerance && _b[0] <= tile_min.x + tolerance || _a[0] >= tile_max.x - tolerance && _b[0] >= tile_max.x - tolerance || _a[1] >= tile_min.y - tolerance && _b[1] >= tile_min.y - tolerance || _a[1] <= tile_max.y + tolerance && _b[1] <= tile_max.y + tolerance) {
    return true;
  }
  return false;
}
function isCoordOutsideTile(coord, tolerance) {
  tolerance = tolerance || 0;
  var tile_min = tile_bounds[0];
  var tile_max = tile_bounds[1];
  return coord[0] <= tile_min.x + tolerance || coord[0] >= tile_max.x - tolerance || coord[1] >= tile_min.y - tolerance || coord[1] <= tile_max.y + tolerance;
}

var earcut$1 = {exports: {}};

var hasRequiredEarcut;

function requireEarcut () {
	if (hasRequiredEarcut) return earcut$1.exports;
	hasRequiredEarcut = 1;

	earcut$1.exports = earcut;
	earcut$1.exports.default = earcut;

	function earcut(data, holeIndices, dim) {

	    dim = dim || 2;

	    var hasHoles = holeIndices && holeIndices.length,
	        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
	        outerNode = linkedList(data, 0, outerLen, dim, true),
	        triangles = [];

	    if (!outerNode || outerNode.next === outerNode.prev) return triangles;

	    var minX, minY, maxX, maxY, x, y, invSize;

	    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

	    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
	    if (data.length > 80 * dim) {
	        minX = maxX = data[0];
	        minY = maxY = data[1];

	        for (var i = dim; i < outerLen; i += dim) {
	            x = data[i];
	            y = data[i + 1];
	            if (x < minX) minX = x;
	            if (y < minY) minY = y;
	            if (x > maxX) maxX = x;
	            if (y > maxY) maxY = y;
	        }

	        // minX, minY and invSize are later used to transform coords into integers for z-order calculation
	        invSize = Math.max(maxX - minX, maxY - minY);
	        invSize = invSize !== 0 ? 1 / invSize : 0;
	    }

	    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);

	    return triangles;
	}

	// create a circular doubly linked list from polygon points in the specified winding order
	function linkedList(data, start, end, dim, clockwise) {
	    var i, last;

	    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
	        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
	    } else {
	        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
	    }

	    if (last && equals(last, last.next)) {
	        removeNode(last);
	        last = last.next;
	    }

	    return last;
	}

	// eliminate colinear or duplicate points
	function filterPoints(start, end) {
	    if (!start) return start;
	    if (!end) end = start;

	    var p = start,
	        again;
	    do {
	        again = false;

	        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
	            removeNode(p);
	            p = end = p.prev;
	            if (p === p.next) break;
	            again = true;

	        } else {
	            p = p.next;
	        }
	    } while (again || p !== end);

	    return end;
	}

	// main ear slicing loop which triangulates a polygon (given as a linked list)
	function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
	    if (!ear) return;

	    // interlink polygon nodes in z-order
	    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

	    var stop = ear,
	        prev, next;

	    // iterate through ears, slicing them one by one
	    while (ear.prev !== ear.next) {
	        prev = ear.prev;
	        next = ear.next;

	        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
	            // cut off the triangle
	            triangles.push(prev.i / dim);
	            triangles.push(ear.i / dim);
	            triangles.push(next.i / dim);

	            removeNode(ear);

	            // skipping the next vertex leads to less sliver triangles
	            ear = next.next;
	            stop = next.next;

	            continue;
	        }

	        ear = next;

	        // if we looped through the whole remaining polygon and can't find any more ears
	        if (ear === stop) {
	            // try filtering points and slicing again
	            if (!pass) {
	                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

	            // if this didn't work, try curing all small self-intersections locally
	            } else if (pass === 1) {
	                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
	                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

	            // as a last resort, try splitting the remaining polygon into two
	            } else if (pass === 2) {
	                splitEarcut(ear, triangles, dim, minX, minY, invSize);
	            }

	            break;
	        }
	    }
	}

	// check whether a polygon node forms a valid ear with adjacent nodes
	function isEar(ear) {
	    var a = ear.prev,
	        b = ear,
	        c = ear.next;

	    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

	    // now make sure we don't have other points inside the potential ear
	    var p = ear.next.next;

	    while (p !== ear.prev) {
	        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
	            area(p.prev, p, p.next) >= 0) return false;
	        p = p.next;
	    }

	    return true;
	}

	function isEarHashed(ear, minX, minY, invSize) {
	    var a = ear.prev,
	        b = ear,
	        c = ear.next;

	    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

	    // triangle bbox; min & max are calculated like this for speed
	    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
	        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
	        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
	        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

	    // z-order range for the current triangle bbox;
	    var minZ = zOrder(minTX, minTY, minX, minY, invSize),
	        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);

	    var p = ear.prevZ,
	        n = ear.nextZ;

	    // look for points inside the triangle in both directions
	    while (p && p.z >= minZ && n && n.z <= maxZ) {
	        if (p !== ear.prev && p !== ear.next &&
	            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
	            area(p.prev, p, p.next) >= 0) return false;
	        p = p.prevZ;

	        if (n !== ear.prev && n !== ear.next &&
	            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
	            area(n.prev, n, n.next) >= 0) return false;
	        n = n.nextZ;
	    }

	    // look for remaining points in decreasing z-order
	    while (p && p.z >= minZ) {
	        if (p !== ear.prev && p !== ear.next &&
	            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
	            area(p.prev, p, p.next) >= 0) return false;
	        p = p.prevZ;
	    }

	    // look for remaining points in increasing z-order
	    while (n && n.z <= maxZ) {
	        if (n !== ear.prev && n !== ear.next &&
	            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
	            area(n.prev, n, n.next) >= 0) return false;
	        n = n.nextZ;
	    }

	    return true;
	}

	// go through all polygon nodes and cure small local self-intersections
	function cureLocalIntersections(start, triangles, dim) {
	    var p = start;
	    do {
	        var a = p.prev,
	            b = p.next.next;

	        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

	            triangles.push(a.i / dim);
	            triangles.push(p.i / dim);
	            triangles.push(b.i / dim);

	            // remove two nodes involved
	            removeNode(p);
	            removeNode(p.next);

	            p = start = b;
	        }
	        p = p.next;
	    } while (p !== start);

	    return filterPoints(p);
	}

	// try splitting polygon into two and triangulate them independently
	function splitEarcut(start, triangles, dim, minX, minY, invSize) {
	    // look for a valid diagonal that divides the polygon into two
	    var a = start;
	    do {
	        var b = a.next.next;
	        while (b !== a.prev) {
	            if (a.i !== b.i && isValidDiagonal(a, b)) {
	                // split the polygon in two by the diagonal
	                var c = splitPolygon(a, b);

	                // filter colinear points around the cuts
	                a = filterPoints(a, a.next);
	                c = filterPoints(c, c.next);

	                // run earcut on each half
	                earcutLinked(a, triangles, dim, minX, minY, invSize);
	                earcutLinked(c, triangles, dim, minX, minY, invSize);
	                return;
	            }
	            b = b.next;
	        }
	        a = a.next;
	    } while (a !== start);
	}

	// link every hole into the outer loop, producing a single-ring polygon without holes
	function eliminateHoles(data, holeIndices, outerNode, dim) {
	    var queue = [],
	        i, len, start, end, list;

	    for (i = 0, len = holeIndices.length; i < len; i++) {
	        start = holeIndices[i] * dim;
	        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
	        list = linkedList(data, start, end, dim, false);
	        if (list === list.next) list.steiner = true;
	        queue.push(getLeftmost(list));
	    }

	    queue.sort(compareX);

	    // process holes from left to right
	    for (i = 0; i < queue.length; i++) {
	        eliminateHole(queue[i], outerNode);
	        outerNode = filterPoints(outerNode, outerNode.next);
	    }

	    return outerNode;
	}

	function compareX(a, b) {
	    return a.x - b.x;
	}

	// find a bridge between vertices that connects hole with an outer ring and and link it
	function eliminateHole(hole, outerNode) {
	    outerNode = findHoleBridge(hole, outerNode);
	    if (outerNode) {
	        var b = splitPolygon(outerNode, hole);

	        // filter collinear points around the cuts
	        filterPoints(outerNode, outerNode.next);
	        filterPoints(b, b.next);
	    }
	}

	// David Eberly's algorithm for finding a bridge between hole and outer polygon
	function findHoleBridge(hole, outerNode) {
	    var p = outerNode,
	        hx = hole.x,
	        hy = hole.y,
	        qx = -Infinity,
	        m;

	    // find a segment intersected by a ray from the hole's leftmost point to the left;
	    // segment's endpoint with lesser x will be potential connection point
	    do {
	        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
	            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
	            if (x <= hx && x > qx) {
	                qx = x;
	                if (x === hx) {
	                    if (hy === p.y) return p;
	                    if (hy === p.next.y) return p.next;
	                }
	                m = p.x < p.next.x ? p : p.next;
	            }
	        }
	        p = p.next;
	    } while (p !== outerNode);

	    if (!m) return null;

	    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint

	    // look for points inside the triangle of hole point, segment intersection and endpoint;
	    // if there are no points found, we have a valid connection;
	    // otherwise choose the point of the minimum angle with the ray as connection point

	    var stop = m,
	        mx = m.x,
	        my = m.y,
	        tanMin = Infinity,
	        tan;

	    p = m;

	    do {
	        if (hx >= p.x && p.x >= mx && hx !== p.x &&
	                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

	            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

	            if (locallyInside(p, hole) &&
	                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {
	                m = p;
	                tanMin = tan;
	            }
	        }

	        p = p.next;
	    } while (p !== stop);

	    return m;
	}

	// whether sector in vertex m contains sector in vertex p in the same coordinates
	function sectorContainsSector(m, p) {
	    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
	}

	// interlink polygon nodes in z-order
	function indexCurve(start, minX, minY, invSize) {
	    var p = start;
	    do {
	        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
	        p.prevZ = p.prev;
	        p.nextZ = p.next;
	        p = p.next;
	    } while (p !== start);

	    p.prevZ.nextZ = null;
	    p.prevZ = null;

	    sortLinked(p);
	}

	// Simon Tatham's linked list merge sort algorithm
	// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
	function sortLinked(list) {
	    var i, p, q, e, tail, numMerges, pSize, qSize,
	        inSize = 1;

	    do {
	        p = list;
	        list = null;
	        tail = null;
	        numMerges = 0;

	        while (p) {
	            numMerges++;
	            q = p;
	            pSize = 0;
	            for (i = 0; i < inSize; i++) {
	                pSize++;
	                q = q.nextZ;
	                if (!q) break;
	            }
	            qSize = inSize;

	            while (pSize > 0 || (qSize > 0 && q)) {

	                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
	                    e = p;
	                    p = p.nextZ;
	                    pSize--;
	                } else {
	                    e = q;
	                    q = q.nextZ;
	                    qSize--;
	                }

	                if (tail) tail.nextZ = e;
	                else list = e;

	                e.prevZ = tail;
	                tail = e;
	            }

	            p = q;
	        }

	        tail.nextZ = null;
	        inSize *= 2;

	    } while (numMerges > 1);

	    return list;
	}

	// z-order of a point given coords and inverse of the longer side of data bbox
	function zOrder(x, y, minX, minY, invSize) {
	    // coords are transformed into non-negative 15-bit integer range
	    x = 32767 * (x - minX) * invSize;
	    y = 32767 * (y - minY) * invSize;

	    x = (x | (x << 8)) & 0x00FF00FF;
	    x = (x | (x << 4)) & 0x0F0F0F0F;
	    x = (x | (x << 2)) & 0x33333333;
	    x = (x | (x << 1)) & 0x55555555;

	    y = (y | (y << 8)) & 0x00FF00FF;
	    y = (y | (y << 4)) & 0x0F0F0F0F;
	    y = (y | (y << 2)) & 0x33333333;
	    y = (y | (y << 1)) & 0x55555555;

	    return x | (y << 1);
	}

	// find the leftmost node of a polygon ring
	function getLeftmost(start) {
	    var p = start,
	        leftmost = start;
	    do {
	        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;
	        p = p.next;
	    } while (p !== start);

	    return leftmost;
	}

	// check if a point lies within a convex triangle
	function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
	    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
	           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
	           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
	}

	// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
	function isValidDiagonal(a, b) {
	    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
	           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
	            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
	            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case
	}

	// signed area of a triangle
	function area(p, q, r) {
	    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
	}

	// check if two points are equal
	function equals(p1, p2) {
	    return p1.x === p2.x && p1.y === p2.y;
	}

	// check if two segments intersect
	function intersects(p1, q1, p2, q2) {
	    var o1 = sign(area(p1, q1, p2));
	    var o2 = sign(area(p1, q1, q2));
	    var o3 = sign(area(p2, q2, p1));
	    var o4 = sign(area(p2, q2, q1));

	    if (o1 !== o2 && o3 !== o4) return true; // general case

	    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
	    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
	    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
	    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

	    return false;
	}

	// for collinear points p, q, r, check if point q lies on segment pr
	function onSegment(p, q, r) {
	    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
	}

	function sign(num) {
	    return num > 0 ? 1 : num < 0 ? -1 : 0;
	}

	// check if a polygon diagonal intersects any polygon segments
	function intersectsPolygon(a, b) {
	    var p = a;
	    do {
	        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
	                intersects(p, p.next, a, b)) return true;
	        p = p.next;
	    } while (p !== a);

	    return false;
	}

	// check if a polygon diagonal is locally inside the polygon
	function locallyInside(a, b) {
	    return area(a.prev, a, a.next) < 0 ?
	        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
	        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
	}

	// check if the middle point of a polygon diagonal is inside the polygon
	function middleInside(a, b) {
	    var p = a,
	        inside = false,
	        px = (a.x + b.x) / 2,
	        py = (a.y + b.y) / 2;
	    do {
	        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
	                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
	            inside = !inside;
	        p = p.next;
	    } while (p !== a);

	    return inside;
	}

	// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
	// if one belongs to the outer ring and another to a hole, it merges it into a single ring
	function splitPolygon(a, b) {
	    var a2 = new Node(a.i, a.x, a.y),
	        b2 = new Node(b.i, b.x, b.y),
	        an = a.next,
	        bp = b.prev;

	    a.next = b;
	    b.prev = a;

	    a2.next = an;
	    an.prev = a2;

	    b2.next = a2;
	    a2.prev = b2;

	    bp.next = b2;
	    b2.prev = bp;

	    return b2;
	}

	// create a node and optionally link it with previous one (in a circular doubly linked list)
	function insertNode(i, x, y, last) {
	    var p = new Node(i, x, y);

	    if (!last) {
	        p.prev = p;
	        p.next = p;

	    } else {
	        p.next = last.next;
	        p.prev = last;
	        last.next.prev = p;
	        last.next = p;
	    }
	    return p;
	}

	function removeNode(p) {
	    p.next.prev = p.prev;
	    p.prev.next = p.next;

	    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
	    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
	}

	function Node(i, x, y) {
	    // vertex index in coordinates array
	    this.i = i;

	    // vertex coordinates
	    this.x = x;
	    this.y = y;

	    // previous and next vertex nodes in a polygon ring
	    this.prev = null;
	    this.next = null;

	    // z-order curve value
	    this.z = null;

	    // previous and next nodes in z-order
	    this.prevZ = null;
	    this.nextZ = null;

	    // indicates whether this is a steiner point
	    this.steiner = false;
	}

	// return a percentage difference between the polygon area and its triangulation area;
	// used to verify correctness of triangulation
	earcut.deviation = function (data, holeIndices, dim, triangles) {
	    var hasHoles = holeIndices && holeIndices.length;
	    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

	    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
	    if (hasHoles) {
	        for (var i = 0, len = holeIndices.length; i < len; i++) {
	            var start = holeIndices[i] * dim;
	            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
	            polygonArea -= Math.abs(signedArea(data, start, end, dim));
	        }
	    }

	    var trianglesArea = 0;
	    for (i = 0; i < triangles.length; i += 3) {
	        var a = triangles[i] * dim;
	        var b = triangles[i + 1] * dim;
	        var c = triangles[i + 2] * dim;
	        trianglesArea += Math.abs(
	            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
	            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
	    }

	    return polygonArea === 0 && trianglesArea === 0 ? 0 :
	        Math.abs((trianglesArea - polygonArea) / polygonArea);
	};

	function signedArea(data, start, end, dim) {
	    var sum = 0;
	    for (var i = start, j = end - dim; i < end; i += dim) {
	        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
	        j = i;
	    }
	    return sum;
	}

	// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
	earcut.flatten = function (data) {
	    var dim = data[0][0].length,
	        result = {vertices: [], holes: [], dimensions: dim},
	        holeIndex = 0;

	    for (var i = 0; i < data.length; i++) {
	        for (var j = 0; j < data[i].length; j++) {
	            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
	        }
	        if (i > 0) {
	            holeIndex += data[i - 1].length;
	            result.holes.push(holeIndex);
	        }
	    }
	    return result;
	};
	return earcut$1.exports;
}

var earcutExports = requireEarcut();
var earcut = /*@__PURE__*/getDefaultExportFromCjs(earcutExports);

/**
 * Rearranges items so that all items in the [left, k] are the smallest.
 * The k-th element will have the (k - left + 1)-th smallest value in [left, right].
 *
 * @template T
 * @param {T[]} arr the array to partially sort (in place)
 * @param {number} k middle index for partial sorting (as defined above)
 * @param {number} [left=0] left index of the range to sort
 * @param {number} [right=arr.length-1] right index
 * @param {(a: T, b: T) => number} [compare = (a, b) => a - b] compare function
 */
function quickselect(arr, k, left = 0, right = arr.length - 1, compare = defaultCompare) {

    while (right > left) {
        if (right - left > 600) {
            const n = right - left + 1;
            const m = k - left + 1;
            const z = Math.log(n);
            const s = 0.5 * Math.exp(2 * z / 3);
            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            quickselect(arr, k, newLeft, newRight, compare);
        }

        const t = arr[k];
        let i = left;
        /** @type {number} */
        let j = right;

        swap(arr, left, k);
        if (compare(arr[right], t) > 0) swap(arr, left, right);

        while (i < j) {
            swap(arr, i, j);
            i++;
            j--;
            while (compare(arr[i], t) < 0) i++;
            while (compare(arr[j], t) > 0) j--;
        }

        if (compare(arr[left], t) === 0) swap(arr, left, j);
        else {
            j++;
            swap(arr, j, right);
        }

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
}

/**
 * @template T
 * @param {T[]} arr
 * @param {number} i
 * @param {number} j
 */
function swap(arr, i, j) {
    const tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}

/**
 * @template T
 * @param {T} a
 * @param {T} b
 * @returns {number}
 */
function defaultCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}

var up_vec3 = [0, 0, 1];

/**
 * To tesselate flat 2D polygons.
 * The x & y coordinates will be set as first two elements of provided vertex_template.
 * @param {Array.<Array.<Array.<Array.<number>>>>} polygons The polygons to tesselate.
 * @param {VertexData} vertex_data The VertexData were to store the results
 * @param {Array.<number>} vertex_template The vertex template to use
 * @param {Object} options The texture coordinate options to apply
 * @return {number} the number of the resulting geometries (triangles)
 */
function buildPolygons(polygons, vertex_data, vertex_template, _ref) {
  var texcoord_index = _ref.texcoord_index,
    texcoord_scale = _ref.texcoord_scale,
    texcoord_normalize = _ref.texcoord_normalize;
  var vertex_elements = vertex_data.vertex_elements,
    num_polygons = polygons.length,
    geom_count = 0,
    min_u,
    min_v,
    max_u,
    max_v,
    min_x,
    min_y,
    max_x,
    max_y,
    span_x,
    span_y,
    scale_u,
    scale_v;
  if (texcoord_index) {
    texcoord_normalize = texcoord_normalize || 1;
    var _ref2 = texcoord_scale || default_uvs;
    var _ref3 = _slicedToArray(_ref2, 4);
    min_u = _ref3[0];
    min_v = _ref3[1];
    max_u = _ref3[2];
    max_v = _ref3[3];
  }
  for (var p = 0; p < num_polygons; p++) {
    var max_rings = 500;
    var polygon = polygons[p];
    if (polygon.length > max_rings) {
      polygon = _toConsumableArray(polygon); // copy to avoid modifying original
      quickselect(polygon, max_rings, 1, polygon.length - 1, function (a, b) {
        return b.area - a.area;
      });
      polygon = polygon.slice(0, max_rings);
    }
    var indices = triangulatePolygon(earcut.flatten(polygon));
    var num_indices = indices.length;
    var element_offset = vertex_data.vertex_count;

    // The vertices and vertex-elements must not be added if earcut returns no indices:
    if (num_indices) {
      // Find polygon extents to calculate UVs, fit them to the axis-aligned bounding box:
      if (texcoord_index) {
        var _Geo$findBoundingBox, _Geo$findBoundingBox2;
        _Geo$findBoundingBox = Geo$1.findBoundingBox(polygon), _Geo$findBoundingBox2 = _slicedToArray(_Geo$findBoundingBox, 4), min_x = _Geo$findBoundingBox2[0], min_y = _Geo$findBoundingBox2[1], max_x = _Geo$findBoundingBox2[2], max_y = _Geo$findBoundingBox2[3], span_x = max_x - min_x, span_y = max_y - min_y, scale_u = (max_u - min_u) / span_x, scale_v = (max_v - min_v) / span_y;
      }
      for (var ring_index = 0; ring_index < polygon.length; ring_index++) {
        // Add vertex data:
        var polygon_ring = polygon[ring_index];
        for (var i = 0; i < polygon_ring.length; i++) {
          var vertex = polygon_ring[i];
          vertex_template[0] = vertex[0];
          vertex_template[1] = vertex[1];

          // Add UVs:
          if (texcoord_index) {
            vertex_template[texcoord_index + 0] = ((vertex[0] - min_x) * scale_u + min_u) * texcoord_normalize;
            vertex_template[texcoord_index + 1] = ((vertex[1] - min_y) * scale_v + min_v) * texcoord_normalize;
          }
          vertex_data.addVertex(vertex_template);
        }
      }

      // Add element indices:
      for (var _i = 0; _i < num_indices; _i++) {
        vertex_elements.push(element_offset + indices[_i]);
      }
      geom_count += num_indices / 3;
    }
  }
  return geom_count;
}

// Tesselate and extrude a flat 2D polygon into a simple 3D model with fixed height and add to GL vertex buffer
function buildExtrudedPolygons(polygons, z, height, min_height, vertex_data, vertex_template, normal_index, normal_normalize, _ref4) {
  var remove_tile_edges = _ref4.remove_tile_edges,
    tile_edge_tolerance = _ref4.tile_edge_tolerance,
    texcoord_index = _ref4.texcoord_index,
    texcoord_scale = _ref4.texcoord_scale,
    texcoord_normalize = _ref4.texcoord_normalize,
    winding = _ref4.winding;
  // Top
  var min_z = z + (min_height || 0);
  var max_z = z + height;
  vertex_template[2] = max_z;
  var geom_count = buildPolygons(polygons, vertex_data, vertex_template, {
    texcoord_index: texcoord_index,
    texcoord_scale: texcoord_scale,
    texcoord_normalize: texcoord_normalize
  });
  var vertex_elements = vertex_data.vertex_elements;
  var element_offset = vertex_data.vertex_count;

  // Walls
  // Fit UVs to wall quad
  if (texcoord_index) {
    texcoord_normalize = texcoord_normalize || 1;
    var _ref5 = texcoord_scale || default_uvs,
      _ref6 = _slicedToArray(_ref5, 4),
      min_u = _ref6[0],
      min_v = _ref6[1],
      max_u = _ref6[2],
      max_v = _ref6[3];
    var texcoords = [[min_u, max_v], [min_u, min_v], [max_u, min_v], [max_u, max_v]];
  }
  var num_polygons = polygons.length;
  for (var p = 0; p < num_polygons; p++) {
    var polygon = polygons[p];
    for (var q = 0; q < polygon.length; q++) {
      var contour = polygon[q];
      for (var w = 0; w < contour.length - 1; w++) {
        if (remove_tile_edges && outsideTile(contour[w], contour[w + 1], tile_edge_tolerance)) {
          continue; // don't extrude tile edges
        }

        // Wall order is dependent on winding order, so that normals face outward
        var w0 = void 0,
          w1 = void 0;
        if (winding === 'CCW') {
          w0 = w;
          w1 = w + 1;
        } else {
          w0 = w + 1;
          w1 = w;
        }

        // Two triangles for the quad formed by each vertex pair, going from bottom to top height
        var wall_vertices = [[contour[w1][0], contour[w1][1], max_z], [contour[w1][0], contour[w1][1], min_z], [contour[w0][0], contour[w0][1], min_z], [contour[w0][0], contour[w0][1], max_z]];

        // Calc the normal of the wall from up vector and one segment of the wall triangles
        var wall_vec = Vector$1.normalize([contour[w1][0] - contour[w0][0], contour[w1][1] - contour[w0][1], 0]);
        var normal = Vector$1.cross(up_vec3, wall_vec);

        // Update vertex template with current surface normal
        vertex_template[normal_index + 0] = normal[0] * normal_normalize;
        vertex_template[normal_index + 1] = normal[1] * normal_normalize;
        vertex_template[normal_index + 2] = normal[2] * normal_normalize;
        for (var wv = 0; wv < wall_vertices.length; wv++) {
          vertex_template[0] = wall_vertices[wv][0];
          vertex_template[1] = wall_vertices[wv][1];
          vertex_template[2] = wall_vertices[wv][2];
          if (texcoord_index) {
            vertex_template[texcoord_index + 0] = texcoords[wv][0] * texcoord_normalize;
            vertex_template[texcoord_index + 1] = texcoords[wv][1] * texcoord_normalize;
          }
          vertex_data.addVertex(vertex_template);
        }
        vertex_elements.push(element_offset + 0);
        vertex_elements.push(element_offset + 1);
        vertex_elements.push(element_offset + 2);
        vertex_elements.push(element_offset + 2);
        vertex_elements.push(element_offset + 3);
        vertex_elements.push(element_offset + 0);
        element_offset += 4;
        geom_count += 2;
      }
    }
  }
  return geom_count;
}

// Triangulation using earcut
// https://github.com/mapbox/earcut
function triangulatePolygon(data) {
  return earcut(data.vertices, data.holes, data.dimensions);
}

var polygons_vs = `uniform vec2 u_resolution;
uniform float u_time;
uniform vec3 u_map_position;
uniform vec4 u_tile_origin;
uniform float u_tile_proxy_order_offset;
uniform float u_meters_per_pixel;
uniform float u_device_pixel_ratio;

uniform mat4 u_model;
uniform mat4 u_modelView;
uniform mat3 u_normalMatrix;
uniform mat3 u_inverseNormalMatrix;

attribute vec4 a_position;
attribute vec4 a_color;

// Optional normal attribute, otherwise default to up
#ifdef TANGRAM_NORMAL_ATTRIBUTE
    attribute vec3 a_normal;
    #define TANGRAM_NORMAL a_normal
#else
    #define TANGRAM_NORMAL vec3(0., 0., 1.)
#endif

// Optional dynamic line extrusion
#ifdef TANGRAM_EXTRUDE_LINES
    attribute vec2 a_extrude; // extrusion direction in xy plane
    attribute vec2 a_offset;  // offset direction in xy plane

    // Polygon and line styles have slightly different VBO layouts, saving memory by optimizing vertex packing.
    // All lines have a width scaling factor, but only some have a height (position.z) or offset.
    // The vertex height is stored in different attributes to account for this.
    attribute vec2 a_z_and_offset_scale; // stores vertex height in x, and offset scaling factor in y
    #define TANGRAM_POSITION_Z a_z_and_offset_scale.x // vertex height is stored in separate line-specific attrib
    #define TANGRAM_OFFSET_SCALING a_z_and_offset_scale.y // zoom scaling factor for line offset
    #define TANGRAM_WIDTH_SCALING a_position.z // zoom scaling factor for line width (stored in position attrib)

    uniform float u_v_scale_adjust; // scales texture UVs for line dash patterns w/fractional pixel width
#else
    #define TANGRAM_POSITION_Z a_position.z // vertex height
#endif

varying vec4 v_position;
varying vec3 v_normal;
varying vec4 v_color;
varying vec4 v_world_position;

// Optional texture UVs
#if defined(TANGRAM_TEXTURE_COORDS) || defined(TANGRAM_EXTRUDE_LINES)
    attribute vec2 a_texcoord;
    varying vec2 v_texcoord;
#endif

// Optional model position varying for tile coordinate zoom
#ifdef TANGRAM_MODEL_POSITION_BASE_ZOOM_VARYING
    varying vec4 v_modelpos_base_zoom;
#endif

#if defined(TANGRAM_LIGHTING_VERTEX)
    varying vec4 v_lighting;
#endif

#define TANGRAM_UNPACK_SCALING(x) (x / 1024.)

#pragma tangram: attributes
#pragma tangram: camera
#pragma tangram: material
#pragma tangram: lighting
#pragma tangram: raster
#pragma tangram: global

void main() {
    // Initialize globals
    #pragma tangram: setup

    // Texture UVs
    #ifdef TANGRAM_TEXTURE_COORDS
        v_texcoord = a_texcoord;
        #ifdef TANGRAM_EXTRUDE_LINES
            v_texcoord.y *= u_v_scale_adjust;
        #endif
    #endif

    // Pass model position to fragment shader
    #ifdef TANGRAM_MODEL_POSITION_BASE_ZOOM_VARYING
        v_modelpos_base_zoom = modelPositionBaseZoom();
    #endif

    // Position
    vec4 position = vec4(a_position.xy, TANGRAM_POSITION_Z / TANGRAM_HEIGHT_SCALE, 1.); // convert height back to meters

    #ifdef TANGRAM_EXTRUDE_LINES
        vec2 _extrude = a_extrude.xy;
        vec2 _offset = a_offset.xy;

        // Adjust line width based on zoom level, to prevent proxied lines
        // from being either too small or too big.
        // "Flattens" the zoom between 1-2 to peg it to 1 (keeps lines from
        // prematurely shrinking), then interpolate and clamp to 4 (keeps lines
        // from becoming too small when far away).
        float _dz = clamp(u_map_position.z - u_tile_origin.z, 0., 4.);
        _dz += step(1., _dz) * (1. - _dz) + mix(0., 2., clamp((_dz - 2.) / 2., 0., 1.));

        // Interpolate line width between zooms
        float _mdz = (_dz - 0.5) * 2.; // zoom from mid-point
        _extrude -= _extrude * TANGRAM_UNPACK_SCALING(TANGRAM_WIDTH_SCALING) * _mdz;

        // Interpolate line offset between zooms
        // Scales from the larger value to the smaller one
        float _dwdz = TANGRAM_UNPACK_SCALING(TANGRAM_OFFSET_SCALING);
        float _sdwdz = sign(step(0., _dwdz) - 0.5); // sign indicates "direction" of scaling
        _offset -= _offset * abs(_dwdz) * ((1.-step(0., _sdwdz)) - (_dz * -_sdwdz)); // scale "up" or "down"

        // Scale line width and offset to be consistent in screen space
        float _ssz = exp2(-_dz - (u_tile_origin.z - u_tile_origin.w));
        _extrude *= _ssz;
        _offset *= _ssz;

        // Modify line width before extrusion
        #ifdef TANGRAM_BLOCK_WIDTH
            float width = 1.;
            #pragma tangram: width
            _extrude *= width;
        #endif

        position.xy += _extrude + _offset;
    #endif

    // World coordinates for 3d procedural textures
    v_world_position = wrapWorldPosition(u_model * position);

    // Adjust for tile and view position
    position = u_modelView * position;

    // Modify position before camera projection
    #pragma tangram: position

    // Setup varyings
    v_position = position;
    v_normal = normalize(u_normalMatrix * TANGRAM_NORMAL);
    v_color = a_color;

    #if defined(TANGRAM_LIGHTING_VERTEX)
        // Vertex lighting
        vec3 normal = v_normal;

        // Modify normal before lighting
        #pragma tangram: normal

        // Pass lighting intensity to fragment shader
        v_lighting = calculateLighting(position.xyz - u_eye, normal, vec4(1.));
    #endif

    // Camera
    cameraProjection(position);

    // +1 is to keep all layers including proxies > 0
    applyLayerOrder(a_position.w + u_tile_proxy_order_offset + 1., position);

    gl_Position = position;
}
`;

var polygons_fs = `uniform vec2 u_resolution;
uniform float u_time;
uniform vec3 u_map_position;
uniform vec4 u_tile_origin;
uniform float u_meters_per_pixel;
uniform float u_device_pixel_ratio;

uniform mat3 u_normalMatrix;
uniform mat3 u_inverseNormalMatrix;

varying vec4 v_position;
varying vec3 v_normal;
varying vec4 v_color;
varying vec4 v_world_position;

#ifdef TANGRAM_EXTRUDE_LINES
    uniform bool u_has_line_texture;
    uniform sampler2D u_texture;
    uniform float u_texture_ratio;
    uniform vec4 u_dash_background_color;
    uniform float u_has_dash;
#endif

#define TANGRAM_NORMAL v_normal

#if defined(TANGRAM_TEXTURE_COORDS) || defined(TANGRAM_EXTRUDE_LINES)
    varying vec2 v_texcoord;
#endif

#ifdef TANGRAM_MODEL_POSITION_BASE_ZOOM_VARYING
    varying vec4 v_modelpos_base_zoom;
#endif

#if defined(TANGRAM_LIGHTING_VERTEX)
    varying vec4 v_lighting;
#endif

#pragma tangram: attributes
#pragma tangram: camera
#pragma tangram: material
#pragma tangram: lighting
#pragma tangram: raster
#pragma tangram: global

void main (void) {
    // Initialize globals
    #pragma tangram: setup

    vec4 color = v_color;
    vec3 normal = TANGRAM_NORMAL;

    // Apply raster to vertex color
    #ifdef TANGRAM_RASTER_TEXTURE_COLOR
        vec4 _raster_color = sampleRaster(0);

        #if defined(TANGRAM_BLEND_OPAQUE) || defined(TANGRAM_BLEND_TRANSLUCENT) || defined(TANGRAM_BLEND_MULTIPLY)
            // Raster sources can optionally mask by the alpha channel, which will render with only full or no alpha.
            // This is used for handling transparency outside the raster image in some blend modes,
            // which either don't support alpha, or would cause transparent pixels to write to the depth buffer,
            // obscuring geometry underneath.
            #ifdef TANGRAM_HAS_MASKED_RASTERS   // skip masking logic if no masked raster sources
            #ifndef TANGRAM_ALL_MASKED_RASTERS  // skip source check for masking if *all* raster sources are masked
            if (u_raster_mask_alpha) {
            #else
            {
            #endif
                #if defined(TANGRAM_BLEND_TRANSLUCENT) || defined(TANGRAM_BLEND_MULTIPLY)
                if (_raster_color.a < TANGRAM_EPSILON) {
                    discard;
                }
                #else // TANGRAM_BLEND_OPAQUE
                if (_raster_color.a < 1. - TANGRAM_EPSILON) {
                    discard;
                }
                // only allow full alpha in opaque blend mode (avoids artifacts blending w/canvas tile background)
                _raster_color.a = 1.;
                #endif
            }
            #endif
        #endif

        color *= _raster_color; // multiplied to tint texture color
    #endif

    // Apply line texture
    #ifdef TANGRAM_EXTRUDE_LINES
    { // enclose in scope to avoid leakage of internal variables
        if (u_has_line_texture) {
            vec2 _line_st = vec2(v_texcoord.x, fract(v_texcoord.y / u_texture_ratio));
            vec4 _line_color = texture2D(u_texture, _line_st);

            // If the line has a dash pattern, the line texture indicates if the current fragment should be
            // the dash foreground or background color. If the line doesn't have a dash pattern,
            // the line texture color is used directly (but also tinted by the vertex color).
            color = mix(
                color * _line_color, // no dash: tint the line texture with the vertex color
                mix(u_dash_background_color, color, _line_color.a), // choose dash foreground or background color
                u_has_dash // 0 if no dash, 1 if has dash
            );

            // Use alpha discard test as a lower-quality substitute for blending
            #if defined(TANGRAM_BLEND_OPAQUE)
                if (color.a < TANGRAM_ALPHA_TEST) {
                    discard;
                }
            #endif
        }
    }
    #endif

    // First, get normal from raster tile (if applicable)
    #ifdef TANGRAM_RASTER_TEXTURE_NORMAL
        normal = normalize(sampleRaster(0).rgb * 2. - 1.);
    #endif

    // Second, alter normal with normal map texture (if applicable)
    #if defined(TANGRAM_LIGHTING_FRAGMENT) && defined(TANGRAM_MATERIAL_NORMAL_TEXTURE)
        calculateNormal(normal);
    #endif

    // Normal modification applied here for fragment lighting or no lighting,
    // and in vertex shader for vertex lighting
    #if !defined(TANGRAM_LIGHTING_VERTEX)
        #pragma tangram: normal
    #endif

    // Color modification before lighting is applied
    #pragma tangram: color

    #if defined(TANGRAM_LIGHTING_FRAGMENT)
        // Calculate per-fragment lighting
        color = calculateLighting(v_position.xyz - u_eye, normal, color);
    #elif defined(TANGRAM_LIGHTING_VERTEX)
        // Apply lighting intensity interpolated from vertex shader
        color *= v_lighting;
    #endif

    // Post-processing effects (modify color after lighting)
    #pragma tangram: filter

    gl_FragColor = color;
}
`;

// Polygon rendering style

var Polygons = Object.create(Style);
Object.assign(Polygons, {
  name: 'polygons',
  built_in: true,
  vertex_shader_src: polygons_vs,
  fragment_shader_src: polygons_fs,
  selection: true,
  // enable feature selection
  init: function init() {
    Style.init.apply(this, arguments);

    // Tell the shader about optional attributes (shader is shared with lines style, which has different config)
    this.defines.TANGRAM_NORMAL_ATTRIBUTE = true;
    this.defines.TANGRAM_TEXTURE_COORDS = this.texcoords;
  },
  _parseFeature: function _parseFeature(feature, draw, context) {
    var style = this.feature_style;
    style.color = this.parseColor(draw.color, context);
    if (!style.color) {
      return null;
    }
    style.alpha = StyleParser.evalCachedProperty(draw.alpha, context); // optional alpha override

    style.variant = draw.variant; // pre-calculated mesh variant

    style.z = StyleParser.evalCachedDistanceProperty(draw.z, context) || StyleParser.defaults.z;
    style.z *= Geo$1.height_scale; // provide sub-meter precision of height values

    style.extrude = StyleParser.evalProperty(draw.extrude, context);
    if (style.extrude) {
      // use feature's height and min_height properties
      if (style.extrude === true) {
        style.height = feature.properties.height || StyleParser.defaults.height;
        style.min_height = feature.properties.min_height || StyleParser.defaults.min_height;
      }
      // explicit height, no min_height
      else if (typeof style.extrude === 'number') {
        style.height = style.extrude;
        style.min_height = 0;
      }
      // explicit height and min_height
      else if (Array.isArray(style.extrude)) {
        style.min_height = style.extrude[0];
        style.height = style.extrude[1];
      }
      style.height *= Geo$1.height_scale; // provide sub-meter precision of height values
      style.min_height *= Geo$1.height_scale;
    }
    style.tile_edges = draw.tile_edges; // usually activated for debugging, or rare visualization needs

    return style;
  },
  _preprocess: function _preprocess(draw) {
    draw.color = StyleParser.createColorPropertyCache(draw.color);
    draw.alpha = StyleParser.createPropertyCache(draw.alpha);
    draw.z = StyleParser.createPropertyCache(draw.z, StyleParser.parseUnits);
    this.computeVariant(draw);
    return draw;
  },
  // Calculate and store mesh variant (unique by draw group but not feature)
  computeVariant: function computeVariant(draw) {
    // Factors that determine a unique mesh rendering variant
    var selection = draw.interactive ? 1 : 0; // whether feature has interactivity
    var normal = draw.extrude != null ? 1 : 0; // whether feature has extrusion (need per-vertex normals)
    var texcoords = this.texcoords ? 1 : 0; // whether feature has texture UVs
    var blend_order = this.getBlendOrderForDraw(draw);
    var key = [selection, normal, texcoords, blend_order].join('/');
    draw.variant = key;
    if (this.variants[key] == null) {
      this.variants[key] = {
        key: key,
        blend_order: blend_order,
        mesh_order: 0,
        selection: selection,
        normal: normal,
        texcoords: texcoords
      };
    }
  },
  // Override
  // Create or return desired vertex layout permutation based on flags
  vertexLayoutForMeshVariant: function vertexLayoutForMeshVariant(variant) {
    if (this.vertex_layouts[variant.key] == null) {
      // Attributes for this mesh variant
      // Optional attributes have placeholder values assigned with `static` parameter
      var attribs = [{
        name: 'a_position',
        size: 4,
        type: gl$1.SHORT,
        normalized: false
      }, {
        name: 'a_normal',
        size: 3,
        type: gl$1.BYTE,
        normalized: true,
        static: variant.normal ? null : [0, 0, 1]
      },
      // gets padded to 4-bytes
      {
        name: 'a_color',
        size: 4,
        type: gl$1.UNSIGNED_BYTE,
        normalized: true
      }, {
        name: 'a_selection_color',
        size: 4,
        type: gl$1.UNSIGNED_BYTE,
        normalized: true,
        static: variant.selection ? null : [0, 0, 0, 0]
      }, {
        name: 'a_texcoord',
        size: 2,
        type: gl$1.UNSIGNED_SHORT,
        normalized: true,
        static: variant.texcoords ? null : [0, 0]
      }];
      this.addCustomAttributesToAttributeList(attribs);
      this.vertex_layouts[variant.key] = new VertexLayout(attribs);
    }
    return this.vertex_layouts[variant.key];
  },
  // Override
  meshVariantTypeForDraw: function meshVariantTypeForDraw(draw) {
    return this.variants[draw.variant]; // return pre-calculated mesh variant
  },
  /**
   * A "template" that sets constant attibutes for each vertex, which is then modified per vertex or per feature.
   * A plain JS array matching the order of the vertex layout.
   */
  makeVertexTemplate: function makeVertexTemplate(style, mesh) {
    var i = 0;

    // a_position.xyz - vertex position
    // a_position.w - layer order
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = style.z || 0;
    this.vertex_template[i++] = this.scaleOrder(style.order);

    // a_normal.xyz - surface normal
    // only stored per-vertex for extruded features (hardcoded to 'up' for others)
    if (mesh.variant.normal) {
      this.vertex_template[i++] = 0;
      this.vertex_template[i++] = 0;
      this.vertex_template[i++] = 1 * 127;
    }

    // a_color.rgba - feature color
    this.vertex_template[i++] = style.color[0] * 255;
    this.vertex_template[i++] = style.color[1] * 255;
    this.vertex_template[i++] = style.color[2] * 255;
    this.vertex_template[i++] = (style.alpha != null ? style.alpha : style.color[3]) * 255;

    // a_selection_color.rgba - selection color
    if (mesh.variant.selection) {
      this.vertex_template[i++] = style.selection_color[0] * 255;
      this.vertex_template[i++] = style.selection_color[1] * 255;
      this.vertex_template[i++] = style.selection_color[2] * 255;
      this.vertex_template[i++] = style.selection_color[3] * 255;
    }

    // a_texcoord.uv - texture coordinates
    if (mesh.variant.texcoords) {
      this.vertex_template[i++] = 0;
      this.vertex_template[i++] = 0;
    }
    this.addCustomAttributesToVertexTemplate(style, i);
    return this.vertex_template;
  },
  buildPolygons: function buildPolygons$1(polygons, style, context) {
    var mesh = this.getTileMesh(context.tile, this.meshVariantTypeForDraw(style));
    var vertex_data = mesh.vertex_data;
    var vertex_layout = vertex_data.vertex_layout;
    var vertex_template = this.makeVertexTemplate(style, mesh);
    var options = {
      texcoord_index: vertex_layout.index.a_texcoord,
      texcoord_normalize: 65535,
      // scale UVs to unsigned shorts
      remove_tile_edges: !style.tile_edges,
      tile_edge_tolerance: Geo$1.tile_scale * context.tile.pad_scale * 4,
      winding: context.winding
    };

    // Extruded polygons (e.g. 3D buildings)
    if (style.extrude && style.height) {
      return buildExtrudedPolygons(polygons, style.z, style.height, style.min_height, vertex_data, vertex_template, vertex_layout.index.a_normal, 127,
      // scale normals to signed bytes
      options);
    }
    // Regular polygons
    else {
      return buildPolygons(polygons, vertex_data, vertex_template, options);
    }
  }
});

// Geometry building functions

var zero_vec2 = [0, 0];

// Build tessellated triangles for a polyline
var CAP_TYPE = {
  butt: 0,
  square: 1,
  round: 2
};
var JOIN_TYPE = {
  miter: 0,
  bevel: 1,
  round: 2
};
var DEFAULT_MITER_LIMIT = 3;
var MIN_FAN_WIDTH = 5; // Width of line in tile units to place 1 triangle per fan
var TEXCOORD_NORMALIZE = 65535; // Scaling factor for UV attribute values

// Scaling factor to add precision to line texture V coordinate packed as normalized short
var V_SCALE_ADJUST = Geo$1.tile_scale;
var zero_v = [0, 0],
  one_v = [1, 0],
  mid_v = [0.5, 0]; // reusable instances, updated with V coordinate

function buildPolylines(lines, style, vertex_data, vertex_template, vindex, closed_polygon, remove_tile_edges, tile_edge_tolerance) {
  var cap_type = style.cap ? CAP_TYPE[style.cap] : CAP_TYPE.butt;
  var join_type = style.join ? JOIN_TYPE[style.join] : JOIN_TYPE.miter;

  // Configure miter limit
  if (join_type === JOIN_TYPE.miter) {
    var miter_limit = style.miter_limit || DEFAULT_MITER_LIMIT; // default miter limit
    var miter_len_sq = miter_limit * miter_limit;
  }

  // Texture Variables
  var v_scale;
  if (vindex.a_texcoord) {
    v_scale = 1 / (style.texcoord_width * V_SCALE_ADJUST); // scales line texture as a ratio of the line's width
  }

  // Values that are constant for each line and are passed to helper functions
  var context = {
    closed_polygon: closed_polygon,
    remove_tile_edges: remove_tile_edges,
    tile_edge_tolerance: tile_edge_tolerance,
    miter_len_sq: miter_len_sq,
    join_type: join_type,
    cap_type: cap_type,
    vertex_data: vertex_data,
    vertex_template: vertex_template,
    half_width: style.width / 2,
    extrude_index: vindex.a_extrude,
    offset_index: vindex.a_offset,
    v_scale: v_scale,
    texcoord_index: vindex.a_texcoord,
    texcoord_width: style.texcoord_width,
    offset: style.offset,
    geom_count: 0
  };

  // Process lines
  for (var i = 0; i < lines.length; i++) {
    buildPolyline(lines[i], context);
  }

  // Process extra lines (which are created above if lines need to be mutated for easier processing)
  if (context.extra_lines) {
    for (var _i = 0; _i < context.extra_lines.length; _i++) {
      buildPolyline(context.extra_lines[_i], context);
    }
  }
  return context.geom_count;
}
function buildPolyline(line, context) {
  // Skip if line is not valid
  if (line.length < 2) {
    return;
  }
  var coordCurr, coordNext, normPrev, normNext;
  var join_type = context.join_type,
    cap_type = context.cap_type,
    closed_polygon = context.closed_polygon,
    remove_tile_edges = context.remove_tile_edges,
    tile_edge_tolerance = context.tile_edge_tolerance,
    v_scale = context.v_scale,
    miter_len_sq = context.miter_len_sq;
  var has_texcoord = context.texcoord_index != null;
  var v = 0; // Texture v-coordinate

  // Loop backwards through line to a tile boundary if found
  // since you need to draw lines that are only partially inside the tile,
  // so we start at the first index where it is safe to loop through to the last index within the tile
  if (closed_polygon && join_type === JOIN_TYPE.miter) {
    var boundaryIndex = getTileBoundaryIndex(line);
    if (boundaryIndex !== 0) {
      // create new line that is a cyclic permutation of the original
      var permutedLine = permuteLine(line, boundaryIndex);
      context.extra_lines = context.extra_lines || [];
      context.extra_lines.push(permutedLine);
      return;
    }
  }
  var index_start = 0;
  var index_end = line.length - 1;
  var ignored_indices_count = 0;

  // FIRST POINT
  // loop through beginning points if duplicates
  coordCurr = line[index_start];
  coordNext = line[index_start + 1];
  while (Vector$1.isEqual(coordCurr, coordNext)) {
    index_start++;
    coordCurr = coordNext;
    coordNext = line[index_start + 1];
    ignored_indices_count++;
    if (index_start === line.length - 1) {
      return;
    }
  }

  // loop through ending points to check for duplicates
  while (Vector$1.isEqual(line[index_end], line[index_end - 1])) {
    index_end--;
    ignored_indices_count++;
    if (index_end === 0) {
      return;
    }
  }
  if (line.length < 2 + ignored_indices_count) {
    return;
  }
  normNext = Vector$1.normalize(Vector$1.perp(coordCurr, coordNext));

  // Skip tile boundary lines and append a new line if needed
  if (remove_tile_edges && outsideTile(coordCurr, coordNext, tile_edge_tolerance)) {
    var nonBoundarySegment = getNextNonBoundarySegment(line, index_start, tile_edge_tolerance);
    if (nonBoundarySegment) {
      context.extra_lines = context.extra_lines || [];
      context.extra_lines.push(nonBoundarySegment);
    }
    return;
  }
  if (closed_polygon) {
    // Begin the polygon with a join (connecting the first and last segments)
    normPrev = Vector$1.normalize(Vector$1.perp(line[index_end - 1], coordCurr));
    startPolygon(coordCurr, normPrev, normNext, join_type, context);
  } else {
    // If line begins at edge, don't add a cap
    if (!isCoordOutsideTile(coordCurr)) {
      addCap(coordCurr, v, normNext, cap_type, true, context);
      if (has_texcoord && cap_type !== CAP_TYPE.butt) {
        v += 0.5 * v_scale * context.texcoord_width;
      }
    }

    // Add first pair of points for the line strip
    addVertex(coordCurr, normNext, normNext, 1, v, context, 1);
    addVertex(coordCurr, normNext, normNext, 0, v, context, -1);
  }

  // INTERMEDIARY POINTS
  if (has_texcoord) {
    v += v_scale * Vector$1.length(Vector$1.sub(coordNext, coordCurr));
  }
  for (var i = index_start + 1; i < index_end; i++) {
    var currIndex = i;
    var nextIndex = i + 1;
    coordCurr = line[currIndex];
    coordNext = line[nextIndex];

    // Skip redundant vertices
    if (Vector$1.isEqual(coordCurr, coordNext)) {
      continue;
    }

    // Remove tile boundaries
    if (remove_tile_edges && outsideTile(coordCurr, coordNext, tile_edge_tolerance)) {
      addVertex(coordCurr, normNext, normNext, 1, v, context, 1);
      addVertex(coordCurr, normNext, normNext, 0, v, context, -1);
      indexPairs(1, context);
      var nonBoundaryLines = getNextNonBoundarySegment(line, currIndex + 1, tile_edge_tolerance);
      if (nonBoundaryLines) {
        context.extra_lines = context.extra_lines || [];
        context.extra_lines.push(nonBoundaryLines);
      }
      return;
    }
    normPrev = normNext;
    normNext = Vector$1.normalize(Vector$1.perp(coordCurr, coordNext));

    // Add join
    if (join_type === JOIN_TYPE.miter) {
      addMiter(v, coordCurr, normPrev, normNext, miter_len_sq, false, context);
    } else {
      addJoin(join_type, v, coordCurr, normPrev, normNext, false, context);
    }
    if (has_texcoord) {
      v += v_scale * Vector$1.length(Vector$1.sub(coordNext, coordCurr));
    }
  }

  // LAST POINT
  coordCurr = coordNext;
  normPrev = normNext;
  if (closed_polygon) {
    // Close the polygon with a miter joint or butt cap if on a tile boundary
    normNext = Vector$1.normalize(Vector$1.perp(coordCurr, line[1]));
    endPolygon(coordCurr, normPrev, normNext, join_type, v, context);
  } else {
    // Finish the line strip
    addVertex(coordCurr, normPrev, normNext, 1, v, context, 1);
    addVertex(coordCurr, normPrev, normNext, 0, v, context, -1);
    indexPairs(1, context);

    // If line ends at edge, don't add a cap
    if (!isCoordOutsideTile(coordCurr)) {
      addCap(coordCurr, v, normPrev, cap_type, false, context);
    }
  }
}
function getTileBoundaryIndex(line) {
  if (isCoordOutsideTile(line[0])) {
    return 0;
  }
  for (var backIndex = 0; backIndex < line.length; backIndex++) {
    var coordCurr = line[line.length - 1 - backIndex];
    if (isCoordOutsideTile(coordCurr)) {
      return line.length - 1 - backIndex;
    }
  }
  return 0;
}

// Iterate through line from startIndex to find a segment not on a tile boundary, if any.
function getNextNonBoundarySegment(line, startIndex, tolerance) {
  var endIndex = startIndex;
  while (line[endIndex + 1] && outsideTile(line[endIndex], line[endIndex + 1], tolerance)) {
    endIndex++;
  }

  // If there is a line segment remaining that is within the tile, push it to the lines array
  return line.length - endIndex >= 2 ? line.slice(endIndex) : false;
}

// Begin a polygon with a join connecting to the last segment (if valid join-type specified)
function startPolygon(coordCurr, normPrev, normNext, join_type, context) {
  // If polygon starts on a tile boundary, don't add a join
  if (join_type === undefined || isCoordOutsideTile(coordCurr)) {
    addVertex(coordCurr, normNext, normNext, 1, 0, context, 1);
    addVertex(coordCurr, normNext, normNext, 0, 0, context, -1);
  } else {
    // If polygon starts within a tile, add a join
    var v = 0;
    if (join_type === JOIN_TYPE.miter) {
      addMiter(v, coordCurr, normPrev, normNext, context.miter_len_sq, true, context);
    } else {
      addJoin(join_type, v, coordCurr, normPrev, normNext, true, context);
    }
  }
}

// End a polygon appropriately
function endPolygon(coordCurr, normPrev, normNext, join_type, v, context) {
  // If polygon ends on a tile boundary, don't add a join
  if (isCoordOutsideTile(coordCurr)) {
    addVertex(coordCurr, normPrev, normPrev, 1, v, context, 1);
    addVertex(coordCurr, normPrev, normPrev, 0, v, context, -1);
    indexPairs(1, context);
  } else {
    // If polygon ends within a tile, add Miter or no joint (join added on startPolygon)
    var miterVec = createMiterVec(normPrev, normNext);
    if (join_type === JOIN_TYPE.miter && Vector$1.lengthSq(miterVec) > context.miter_len_sq) {
      join_type = JOIN_TYPE.bevel; // switch to bevel
    }
    if (join_type === JOIN_TYPE.miter) {
      addVertex(coordCurr, miterVec, normPrev, 1, v, context, 1);
      addVertex(coordCurr, miterVec, normPrev, 0, v, context, -1);
      indexPairs(1, context);
    } else {
      addVertex(coordCurr, normPrev, normPrev, 1, v, context, 1);
      addVertex(coordCurr, normPrev, normPrev, 0, v, context, -1);
      indexPairs(1, context);
    }
  }
}
function createMiterVec(normPrev, normNext) {
  var miterVec = Vector$1.normalize(Vector$1.add(normPrev, normNext));
  var scale = 2 / (1 + Math.abs(Vector$1.dot(normPrev, miterVec)));
  return Vector$1.mult(miterVec, scale * scale);
}

// Add a miter vector or a join if the miter is too sharp
function addMiter(v, coordCurr, normPrev, normNext, miter_len_sq, isBeginning, context) {
  var miterVec = createMiterVec(normPrev, normNext);

  //  Miter limit: if miter join is too sharp, convert to bevel instead
  if (Vector$1.lengthSq(miterVec) > miter_len_sq) {
    addJoin(JOIN_TYPE.bevel, v, coordCurr, normPrev, normNext, isBeginning, context);
  } else {
    addVertex(coordCurr, miterVec, miterVec, 1, v, context, 1);
    addVertex(coordCurr, miterVec, miterVec, 0, v, context, -1);
    if (!isBeginning) {
      indexPairs(1, context);
    }
  }
}

// Add a bevel or round join
function addJoin(join_type, v, coordCurr, normPrev, normNext, isBeginning, context) {
  var miterVec = createMiterVec(normPrev, normNext);
  var isClockwise = normNext[0] * normPrev[1] - normNext[1] * normPrev[0] > 0;
  if (context.texcoord_index != null) {
    zero_v[1] = v;
    one_v[1] = v;
  }
  if (isClockwise) {
    addVertex(coordCurr, miterVec, miterVec, 1, v, context, 1);
    addVertex(coordCurr, normPrev, miterVec, 0, v, context, -1);
    if (!isBeginning) {
      indexPairs(1, context);
    }
    addFan(coordCurr,
    // extrusion vector of first vertex
    Vector$1.neg(normPrev),
    // controls extrude distance of pivot vertex
    miterVec,
    // extrusion vector of last vertex
    Vector$1.neg(normNext),
    // line normal (unused here)
    miterVec,
    // uv coordinates
    zero_v, one_v, zero_v, false, join_type === JOIN_TYPE.bevel, context);
    addVertex(coordCurr, miterVec, miterVec, 1, v, context, 1);
    addVertex(coordCurr, normNext, miterVec, 0, v, context, -1);
  } else {
    addVertex(coordCurr, normPrev, miterVec, 1, v, context, 1);
    addVertex(coordCurr, miterVec, miterVec, 0, v, context, -1);
    if (!isBeginning) {
      indexPairs(1, context);
    }
    addFan(coordCurr,
    // extrusion vector of first vertex
    normPrev,
    // extrusion vector of pivot vertex
    Vector$1.neg(miterVec),
    // extrusion vector of last vertex
    normNext,
    // line normal for offset
    miterVec,
    // uv coordinates
    one_v, zero_v, one_v, false, join_type === JOIN_TYPE.bevel, context);
    addVertex(coordCurr, normNext, miterVec, 1, v, context, 1);
    addVertex(coordCurr, miterVec, miterVec, 0, v, context, -1);
  }
}

// Add indices to vertex_elements
function indexPairs(num_pairs, context) {
  var vertex_elements = context.vertex_data.vertex_elements;
  var num_vertices = context.vertex_data.vertex_count;
  var offset = num_vertices - 2 * num_pairs - 2;
  for (var i = 0; i < num_pairs; i++) {
    vertex_elements.push(offset + 2 * i + 2);
    vertex_elements.push(offset + 2 * i + 1);
    vertex_elements.push(offset + 2 * i + 0);
    vertex_elements.push(offset + 2 * i + 2);
    vertex_elements.push(offset + 2 * i + 3);
    vertex_elements.push(offset + 2 * i + 1);
    context.geom_count += 2;
  }
}
function addVertex(position, extrude, normal, u, v, context, flip) {
  var vertex_template = context.vertex_template;
  var vertex_data = context.vertex_data;

  // set vertex position
  vertex_template[0] = position[0];
  vertex_template[1] = position[1];

  // set line extrusion vector
  var len = context.half_width * flip;
  vertex_template[context.extrude_index + 0] = extrude[0] * len;
  vertex_template[context.extrude_index + 1] = extrude[1] * len;

  // set line offset vector
  if (context.offset) {
    vertex_template[context.offset_index + 0] = normal[0] * context.offset;
    vertex_template[context.offset_index + 1] = normal[1] * context.offset;
  }

  // set UVs
  if (context.texcoord_index != null) {
    vertex_template[context.texcoord_index + 0] = u * TEXCOORD_NORMALIZE;
    vertex_template[context.texcoord_index + 1] = v * TEXCOORD_NORMALIZE;
  }
  vertex_data.addVertex(vertex_template);
}

//  Tesselate a fan geometry between points A ----- B
//  using their normals from a center p      \ . . /
//  and interpolating their UVs               \ p /
//                                             \./
//                                              C
var uvCurr = [0, 0];
function addFan(coord, eA, eC, eB, normal, uvA, uvC, uvB, isCap, isBevel, context) {
  // eA = extrusion vector of first outer vertex
  // eC = extrusion vector of inner vertex
  // eA, eC, eB = extrusion vectors
  // normal = line normal for calculating cap offsets
  // coord = center point p - vertex connecting two line segments

  var cross = eA[0] * eB[1] - eA[1] * eB[0];
  var dot = Vector$1.dot(eA, eB);
  var angle = Math.atan2(cross, dot);
  while (angle >= Math.PI) {
    angle -= 2 * Math.PI;
  }
  if (isBevel) {
    numTriangles = 1;
  } else {
    // vary number of triangles in fan with angle (based on MIN_FAN_WIDTH)
    var numTriangles = trianglesPerArc(angle, context.half_width);
    if (numTriangles < 1) {
      return;
    }
  }
  var pivotIndex = context.vertex_data.vertex_count;
  var vertex_elements = context.vertex_data.vertex_elements;
  if (angle < 0) {
    // cw
    addVertex(coord, eC, normal, uvC[0], uvC[1], context, 1);
    addVertex(coord, eA, normal, uvA[0], uvA[1], context, 1);
  } else {
    // ccw
    addVertex(coord, eC, normal, uvC[0], uvC[1], context, 1);
    addVertex(coord, eA, normal, uvA[0], uvA[1], context, 1);
  }
  var blade = eA;
  var has_texcoord = context.texcoord_index != null;
  if (has_texcoord) {
    if (isCap) {
      var affine_uvCurr = Vector$1.sub(uvA, uvC);
    } else {
      uvCurr = Vector$1.copy(uvA);
      var uv_delta = Vector$1.div(Vector$1.sub(uvB, uvA), numTriangles);
    }
  }
  var angle_step = angle / numTriangles;
  var flip = angle < 0 ? -1 : 1; // if angle < 0, is cw - set 'flip' flag

  // add outside vertices in reverse order depending on sign of angle
  var v1, v2;
  if (cross > 0) {
    v1 = 2;
    v2 = 1;
  } else {
    v1 = 1;
    v2 = 2;
  }
  for (var i = 0; i < numTriangles; i++) {
    if (i === 0 && angle < 0) {
      // if ccw, flip the extrusion vector so offsets work properly
      blade = Vector$1.neg(blade);
    }
    blade = Vector$1.rot(blade, angle_step);
    if (has_texcoord) {
      if (isCap) {
        // UV textures go "through" the cap
        affine_uvCurr = Vector$1.rot(affine_uvCurr, angle_step);
        uvCurr[0] = affine_uvCurr[0] + uvC[0];
        uvCurr[1] = affine_uvCurr[1] * context.texcoord_width * context.v_scale + uvC[1]; // scale the v-coordinate
      } else {
        // UV textures go "around" the join
        uvCurr = Vector$1.add(uvCurr, uv_delta);
      }
    }
    addVertex(coord, blade, normal, uvCurr[0], uvCurr[1], context, flip);
    vertex_elements.push(pivotIndex + i + v1);
    vertex_elements.push(pivotIndex);
    vertex_elements.push(pivotIndex + i + v2);
  }
}

//  Function to add the vertices needed for line caps,
//  because to re-use the buffers they need to be at the end
function addCap(coord, v, normal, type, isBeginning, context) {
  var neg_normal = Vector$1.neg(normal);
  var has_texcoord = context.texcoord_index != null;
  switch (type) {
    case CAP_TYPE.square:
      var tangent;
      // first vertex on the lineString
      if (isBeginning) {
        tangent = [normal[1], -normal[0]];
        addVertex(coord, Vector$1.add(normal, tangent), normal, 1, v, context, 1);
        addVertex(coord, Vector$1.add(neg_normal, tangent), normal, 0, v, context, 1);
        if (has_texcoord) {
          // Add length of square cap to texture coordinate
          v += 0.5 * context.texcoord_width * context.v_scale;
        }
        addVertex(coord, normal, normal, 1, v, context, 1);
        addVertex(coord, neg_normal, normal, 0, v, context, 1);
      }
      // last vertex on the lineString
      else {
        tangent = [-normal[1], normal[0]];
        addVertex(coord, normal, normal, 1, v, context, 1);
        addVertex(coord, neg_normal, normal, 0, v, context, 1);
        if (has_texcoord) {
          // Add length of square cap to texture coordinate
          v += 0.5 * context.texcoord_width * context.v_scale;
        }
        addVertex(coord, Vector$1.add(normal, tangent), normal, 1, v, context, 1);
        addVertex(coord, Vector$1.add(neg_normal, tangent), normal, 0, v, context, 1);
      }
      indexPairs(1, context);
      break;
    case CAP_TYPE.round:
      // default for end cap, beginning cap will overwrite below (this way we're always passing a non-null value,
      // even if texture coords are disabled)
      var uvA = zero_v,
        uvB = one_v,
        uvC = mid_v;
      var nA, nB;

      // first vertex on the lineString
      if (isBeginning) {
        nA = normal;
        nB = neg_normal;
        if (has_texcoord) {
          v += 0.5 * context.texcoord_width * context.v_scale;
          uvA = one_v, uvB = zero_v, uvC = mid_v; // update cap UV order
        }
      }
      // last vertex on the lineString - flip the direction of the cap
      else {
        nA = neg_normal;
        nB = normal;
      }
      if (has_texcoord) {
        zero_v[1] = v, one_v[1] = v, mid_v[1] = v; // update cap UV values
      }
      addFan(coord, nA, zero_vec2, nB,
      // extrusion normal
      normal,
      // line normal, for offsets
      uvA, uvC, uvB,
      // texture coords (ignored if disabled)
      true, false, context);
      break;
    case CAP_TYPE.butt:
      return;
  }
}

// Calculate number of triangles for a fan given an angle and line width
function trianglesPerArc(angle, width) {
  if (angle < 0) {
    angle = -angle;
  }
  var numTriangles = width > 2 * MIN_FAN_WIDTH ? Math.log2(width / MIN_FAN_WIDTH) : 1;
  return Math.ceil(angle / Math.PI * numTriangles);
}

// Cyclically permute closed line starting at an index
function permuteLine(line, startIndex) {
  var newLine = [];
  for (var i = 0; i < line.length; i++) {
    var index = (i + startIndex) % line.length;
    // skip the first (repeated) index
    if (index !== 0) {
      newLine.push(line[index]);
    }
  }
  newLine.push(newLine[0]);
  return newLine;
}

// Renders an array specifying a line pattern of alternating dashes and spaces,
// similar to an SVG `dasharray` or Canvas setLineDash(), into a byte array of RGBA pixels
// Returns:
// {
//    pixel: rendered image in Uint8Array buffer
//    length: pixel length of rendered dash pattern (sum of all dashes and spaces)
// }
//
// https://www.w3.org/TR/SVG/painting.html#StrokeDasharrayProperty
// https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray
// https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash

var default_dash_color = [255, 255, 255, 255];
var default_background_color = [0, 0, 0, 0];
function renderDashArray(pattern) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var dash_pixel = options.dash_color || default_dash_color;
  var background_color = options.background_color || default_background_color;
  var dashes = pattern;
  var scale = options.scale || 1;

  // If pattern is odd, repeat it to make it even (see SVG spec)
  if (dashes.length % 2 === 1) {
    Array.prototype.push.apply(dashes, dashes);
  }
  var dash = true;
  var pixels = [];
  for (var i = 0; i < dashes.length; i++) {
    var segment = Math.floor(dashes[i] * scale);
    for (var s = 0; s < segment; s++) {
      Array.prototype.push.apply(pixels, dash ? dash_pixel : background_color);
    }
    dash = !dash; // alternate between dashes and spaces
  }
  pixels.reverse(); // flip Y (GL textures are upside down)
  pixels = new Uint8Array(pixels); // convert to typed array
  var length = pixels.length / 4; // one RGBA byte sequences to one pixel

  return {
    pixels: pixels,
    length: length
  };
}

// Line rendering style

var Lines = Object.create(Style);
var DASH_SCALE = 20; // adjustment factor for UV scale to for line dash patterns w/fractional pixel width

Object.assign(Lines, {
  name: 'lines',
  built_in: true,
  vertex_shader_src: polygons_vs,
  fragment_shader_src: polygons_fs,
  selection: true,
  // enable feature selection
  init: function init() {
    Style.init.apply(this, arguments);

    // Tell the shader we want a order in vertex attributes, and to extrude lines
    this.defines.TANGRAM_EXTRUDE_LINES = true;
    this.defines.TANGRAM_TEXTURE_COORDS = true; // texcoords attribute is set to static when not needed

    // Additional single-allocated object used for holding outline style as it is processed
    // Separate from this.feature_style so that outline properties do not overwrite calculated
    // inline properties (outline call is made *within* the inline call)
    this.outline_feature_style = {};
    this.inline_feature_style = this.feature_style; // save reference to main computed style object

    this.dash_textures = {}; // cache previously rendered line dash pattern textures
  },
  // Calculate width or offset at zoom given in `context`
  calcDistance: function calcDistance(prop, context) {
    return StyleParser.evalCachedDistanceProperty(prop, context) || 0;
  },
  // Calculate width or offset at next zoom (used for zoom-based interpolation in shader)
  calcDistanceNextZoom: function calcDistanceNextZoom(prop, context) {
    context.zoom++;
    var val = this.calcDistance(prop, context);
    context.zoom--;
    return val;
  },
  // Calculate width at current and next zoom, and scaling factor between
  calcWidth: function calcWidth(draw, style, context) {
    // line width in meters
    var width = this.calcDistance(draw.width, context);
    if (width < 0) {
      return; // skip lines with negative width
    }
    var next_width;
    if (draw.next_width) {
      next_width = this.calcDistanceNextZoom(draw.next_width, context);
    } else {
      next_width = width / 2; // when width is static, width at next zoom is just half as many tile units
    }
    if (width === 0 && next_width === 0 || next_width < 0) {
      return false; // skip lines that don't interpolate to a positive value at next zoom
    }

    // these values are saved for later calculating the outline width, which needs to add the base line's width
    style.width_unscaled = width;
    style.next_width_unscaled = next_width;

    // calculate relative change in line width between zooms
    // interpolate from the line width at the zoom mid-point, towards/away from the previous/next integer zoom
    if (draw.next_width) {
      next_width *= 2; // NB: a given width is twice as big in screen space at the next zoom
      var mid_width = (width + next_width) * 0.5;
      style.width = mid_width * context.units_per_meter_overzoom; // width at zoom mid-point
      style.width_scale = 1 - next_width / mid_width;
    } else {
      style.width = width * context.units_per_meter_overzoom;
      style.width_scale = 0;
    }

    // optional adjustment to texcoord width based on scale
    if (draw.texcoords) {
      // when drawing an outline, use the inline's texture scale
      // (e.g. keeps dashed outline pattern locked to inline pattern)
      if (draw.inline_texcoord_width) {
        style.texcoord_width = draw.inline_texcoord_width;
      }
      // when drawing an inline, calculate UVs based on line width
      else {
        // UVs can't calc for zero-width, use next zoom width in that case
        style.texcoord_width = (style.width_unscaled || style.next_width_unscaled) * context.units_per_meter_overzoom / context.tile.overzoom2; // shorten calcs
      }
    }
    return true;
  },
  // Calculate offset at current and next zoom, and scaling factor between
  calcOffset: function calcOffset(draw, style, context) {
    // Pre-calculated offset passed
    // This happens when a line passes pre-computed offset values to its outline
    if (draw.offset_precalc) {
      style.offset = draw.offset_precalc;
      style.offset_scale = draw.offset_scale_precalc;
    }
    // Offset to calculate
    else if (draw.offset) {
      var offset = this.calcDistance(draw.offset, context);
      if (draw.next_offset) {
        var next_offset = this.calcDistanceNextZoom(draw.next_offset, context) * 2;
        if (Math.abs(offset) >= Math.abs(next_offset)) {
          style.offset = offset * context.units_per_meter_overzoom;
          if (offset !== 0) {
            style.offset_scale = 1 - next_offset / offset;
          } else {
            style.offset_scale = 0;
          }
        } else {
          style.offset = next_offset * context.units_per_meter_overzoom;
          if (next_offset !== 0) {
            style.offset_scale = (1 - offset / next_offset) * -1;
          } else {
            style.offset_scale = 0;
          }
        }
      } else {
        style.offset = offset * context.units_per_meter_overzoom;
        style.offset_scale = 0;
      }
    }
    // No offset
    else {
      style.offset = 0;
      style.offset_scale = 0;
    }
  },
  _parseFeature: function _parseFeature(feature, draw, context) {
    var style = this.feature_style;

    // calculate line width at current and next zoom
    if (this.calcWidth(draw, style, context) === false) {
      return; // missing or zero width
    }

    // calculate line offset at current and next zoom
    this.calcOffset(draw, style, context);
    style.color = this.parseColor(draw.color, context);
    if (!style.color) {
      return;
    }
    style.alpha = StyleParser.evalCachedProperty(draw.alpha, context); // optional alpha override

    style.variant = draw.variant; // pre-calculated mesh variant

    // height defaults to feature height, but extrude style can dynamically adjust height by returning a number or array (instead of a boolean)
    style.z = StyleParser.evalCachedDistanceProperty(draw.z, context) || StyleParser.defaults.z;
    style.height = feature.properties.height || StyleParser.defaults.height;
    style.extrude = StyleParser.evalProperty(draw.extrude, context);
    if (style.extrude) {
      if (typeof style.extrude === 'number') {
        style.height = style.extrude;
      } else if (Array.isArray(style.extrude)) {
        style.height = style.extrude[1];
      }
    }

    // Raise line height if extruded
    if (style.extrude && style.height) {
      style.z += style.height;
    }
    style.z *= Geo$1.height_scale; // provide sub-meter precision of height values

    style.cap = draw.cap;
    style.join = draw.join;
    style.miter_limit = draw.miter_limit;
    style.tile_edges = draw.tile_edges; // usually activated for debugging, or rare visualization needs

    // Construct an outline style
    // Reusable outline style object, marked as already wrapped in cache objects (preprocessed = true)
    style.outline = style.outline || {
      width: {},
      next_width: {},
      preprocessed: true
    };
    if (draw.outline && draw.outline.visible !== false && draw.outline.color && draw.outline.width) {
      // outline width in meters
      // NB: multiply by 2 because outline is applied on both sides of line
      var outline_width = this.calcDistance(draw.outline.width, context) * 2;
      var outline_next_width = this.calcDistanceNextZoom(draw.outline.next_width, context) * 2;
      if (outline_width === 0 && outline_next_width === 0 || outline_width < 0 || outline_next_width < 0) {
        // skip lines that don't interpolate between zero or greater width
        style.outline.width.value = null;
        style.outline.next_width.value = null;
        style.outline.color = null;
        style.outline.inline_texcoord_width = null;
        style.outline.texcoords = false;
      } else {
        // Maintain consistent outline width around the line fill
        style.outline.width.value = outline_width + style.width_unscaled;
        style.outline.next_width.value = outline_next_width + style.next_width_unscaled;
        style.outline.inline_texcoord_width = style.texcoord_width;

        // Offset is directly copied from fill to outline, no need to re-calculate it
        style.outline.offset_precalc = style.offset;
        style.outline.offset_scale_precalc = style.offset_scale;
        style.outline.color = draw.outline.color;
        style.outline.alpha = draw.outline.alpha;
        style.outline.interactive = draw.outline.interactive;
        style.outline.cap = draw.outline.cap;
        style.outline.join = draw.outline.join;
        style.outline.miter_limit = draw.outline.miter_limit;
        style.outline.texcoords = draw.outline.texcoords;
        style.outline.extrude = draw.outline.extrude;
        style.outline.z = draw.outline.z;
        style.outline.style = draw.outline.style;
        style.outline.variant = draw.outline.variant;

        // Explicitly defined outline order, or inherited from inner line
        if (draw.outline.order) {
          style.outline.order = this.parseOrder(draw.outline.order, context);
        } else {
          style.outline.order = style.order;
        }

        // Don't let outline be above inner line
        if (style.outline.order > style.order) {
          style.outline.order = style.order;
        }

        // Outlines are always at half-layer intervals to avoid conflicting with inner lines
        style.outline.order -= 0.5;
      }
    } else {
      style.outline.width.value = null;
      style.outline.next_width.value = null;
      style.outline.color = null;
      style.outline.inline_texcoord_width = null;
    }
    return style;
  },
  _preprocess: function _preprocess(draw) {
    draw.color = StyleParser.createColorPropertyCache(draw.color);
    draw.alpha = StyleParser.createPropertyCache(draw.alpha);
    draw.width = StyleParser.createPropertyCache(draw.width, StyleParser.parseUnits);
    if (draw.width && draw.width.type !== StyleParser.CACHE_TYPE.STATIC) {
      draw.next_width = StyleParser.createPropertyCache(draw.width, StyleParser.parseUnits);
    }
    draw.offset = draw.offset && StyleParser.createPropertyCache(draw.offset, StyleParser.parseUnits);
    if (draw.offset && draw.offset.type !== StyleParser.CACHE_TYPE.STATIC) {
      draw.next_offset = StyleParser.createPropertyCache(draw.offset, StyleParser.parseUnits);
    }
    draw.z = StyleParser.createPropertyCache(draw.z, StyleParser.parseUnits);
    draw.dash = draw.dash !== undefined ? draw.dash : this.dash;
    draw.dash_key = draw.dash && this.dashTextureKey(draw.dash);
    draw.dash_background_color = draw.dash_background_color !== undefined ? draw.dash_background_color : this.dash_background_color;
    draw.dash_background_color = draw.dash_background_color && StyleParser.parseColor(draw.dash_background_color);
    draw.texture_merged = draw.dash_key || (draw.texture !== undefined ? draw.texture : this.texture);
    draw.texcoords = this.texcoords || draw.texture_merged ? 1 : 0;
    this.computeVariant(draw);
    if (draw.outline) {
      draw.outline.is_outline = true; // mark as outline (so mesh variant can be adjusted for render order, etc.)
      draw.outline.style = draw.outline.style || this.name;
      draw.outline.color = StyleParser.createColorPropertyCache(draw.outline.color);
      draw.outline.alpha = StyleParser.createPropertyCache(draw.outline.alpha);
      draw.outline.width = StyleParser.createPropertyCache(draw.outline.width, StyleParser.parseUnits);
      draw.outline.next_width = StyleParser.createPropertyCache(draw.outline.width, StyleParser.parseUnits); // width re-computed for next zoom

      draw.outline.interactive = draw.outline.interactive != null ? draw.outline.interactive : draw.interactive;
      draw.outline.cap = draw.outline.cap || draw.cap;
      draw.outline.join = draw.outline.join || draw.join;
      draw.outline.miter_limit = draw.outline.miter_limit != null ? draw.outline.miter_limit : draw.miter_limit;

      // always apply inline values for offset and extrusion/height to outline
      draw.outline.offset = draw.offset;
      draw.outline.extrude = draw.extrude;
      draw.outline.z = draw.z;

      // outline inherits dash pattern, but NOT explicit texture
      var outline_style = this.styles[draw.outline.style];
      if (outline_style) {
        draw.outline.dash = draw.outline.dash !== undefined ? draw.outline.dash : outline_style.dash;
        draw.outline.texture = draw.outline.texture !== undefined ? draw.outline.texture : outline_style.texture;
        if (draw.outline.dash != null) {
          // dash was defined by outline draw or style
          draw.outline.dash_key = draw.outline.dash && this.dashTextureKey(draw.outline.dash);
          draw.outline.texture_merged = draw.outline.dash_key;
        } else if (draw.outline.dash === null) {
          // dash explicitly disabled by outline draw or style
          draw.outline.dash_key = null;
          draw.outline.texture_merged = draw.outline.texture;
        } else if (draw.outline.texture != null) {
          // texture was defined by outline draw or style
          draw.outline.dash_key = null; // outline explicitly turning off dash
          draw.outline.texture_merged = draw.outline.texture;
        } else {
          // no dash or texture defined for outline, inherit parent dash
          draw.outline.dash = draw.dash;
          draw.outline.dash_key = draw.outline.dash && this.dashTextureKey(draw.outline.dash);
          draw.outline.texture_merged = draw.outline.dash_key;
        }
        draw.outline.dash_background_color = draw.outline.dash_background_color !== undefined ? draw.outline.dash_background_color : outline_style.dash_background_color;
        draw.outline.dash_background_color = draw.outline.dash_background_color !== undefined ? draw.outline.dash_background_color : draw.dash_background_color;
        draw.outline.dash_background_color = draw.outline.dash_background_color && StyleParser.parseColor(draw.outline.dash_background_color);
        draw.outline.texcoords = outline_style.texcoords || draw.outline.texture_merged ? 1 : 0;

        // outline inherits draw blend order from parent inline, unless explicitly turned off with null
        if (draw.outline.blend_order === undefined && draw.blend_order != null) {
          draw.outline.blend_order = draw.blend_order;
        }
        outline_style.computeVariant(draw.outline);
      } else {
        log({
          level: 'warn',
          once: true
        }, "Layer group '".concat(draw.layers.join(', '), "': ") + "line 'outline' specifies non-existent draw style '".concat(draw.outline.style, "' (or maybe the style is ") + 'defined but is missing a \'base\' or has another error), skipping outlines for features matching this layer group');
        draw.outline = null;
      }
    }
    return draw;
  },
  // Unique string key for a dash pattern (used as texture name)
  dashTextureKey: function dashTextureKey(dash) {
    return '__dash_' + JSON.stringify(dash);
  },
  // Return or render a dash pattern texture
  getDashTexture: function getDashTexture(dash) {
    var dash_key = this.dashTextureKey(dash);
    if (this.dash_textures[dash_key] == null) {
      this.dash_textures[dash_key] = true;
      // Render line pattern
      var dash_texture = renderDashArray(dash, {
        scale: DASH_SCALE
      });
      Texture.create(this.gl, dash_key, {
        data: dash_texture.pixels,
        height: dash_texture.length,
        width: 1,
        filtering: 'nearest'
      });
    }
  },
  // Override
  endData: function endData(tile) {
    return new Promise(function ($return, $error) {
      var _this, tile_data, pending, _loop;
      _this = this;
      return Promise.resolve(Style.endData.call(this, tile)).then(function ($await_9) {
        try {
          tile_data = $await_9;
          if (tile_data) {
            tile_data.uniforms.u_has_line_texture = false;
            tile_data.uniforms.u_texture = Texture.default;
            tile_data.uniforms.u_v_scale_adjust = Geo$1.tile_scale;
            pending = [];
            _loop = function _loop() {
              return new Promise(function ($return, $error) {
                var variant, uniforms, texture;
                variant = tile_data.meshes[m].variant;
                if (variant.texture) {
                  uniforms = tile_data.meshes[m].uniforms = tile_data.meshes[m].uniforms || {};
                  uniforms.u_has_line_texture = true;
                  uniforms.u_texture = variant.texture;
                  uniforms.u_texture_ratio = 1;
                  if (variant.dash) {
                    uniforms.u_v_scale_adjust = Geo$1.tile_scale * DASH_SCALE;
                    uniforms.u_has_dash = variant.dash_background_color != null ? 1 : 0;
                    uniforms.u_dash_background_color = variant.dash_background_color || [0, 0, 0, 0];
                  }
                  if (variant.dash_key && _this.dash_textures[variant.dash_key] == null) {
                    _this.dash_textures[variant.dash_key] = true;
                    var $Try_1_Post = function () {
                      try {
                        return $If_4.call(this);
                      } catch ($boundEx) {
                        return $error($boundEx);
                      }
                    }.bind(this);
                    var $Try_1_Catch = function (e) {
                      try {
                        log('trace', "".concat(_this.name, ": line dash texture create failed because style no longer on main thread"));
                        return $Try_1_Post();
                      } catch ($boundEx) {
                        return $error($boundEx);
                      }
                    };
                    try {
                      return Promise.resolve(WorkerBroker$1.postMessage(_this.main_thread_target + '.getDashTexture', variant.dash)).then(function ($await_10) {
                        try {
                          return $Try_1_Post();
                        } catch ($boundEx) {
                          return $Try_1_Catch($boundEx);
                        }
                      }, $Try_1_Catch);
                    } catch (e) {
                      $Try_1_Catch(e);
                    }
                  }
                  function $If_4() {
                    if (Texture.textures[variant.texture] == null) {
                      pending.push(Texture.syncTexturesToWorker([variant.texture]).then(function (textures) {
                        var texture = textures[variant.texture];
                        if (texture) {
                          uniforms.u_texture_ratio = texture.height / texture.width;
                        }
                      }));
                    } else {
                      texture = Texture.textures[variant.texture];
                      uniforms.u_texture_ratio = texture.height / texture.width;
                    }
                    return $If_3.call(this);
                  }
                  return $If_4.call(this);
                }
                function $If_3() {
                  return $return();
                }
                return $If_3.call(this);
              });
            };
            var $idx_5,
              $in_6 = [];
            for ($idx_5 in tile_data.meshes) $in_6.push($idx_5);
            var m;
            var $Loop_7_trampoline;
            function $Loop_7() {
              if ($in_6.length) {
                m = $in_6.shift();
                return Promise.resolve(_loop()).then(function ($await_11) {
                  try {
                    return $Loop_7;
                  } catch ($boundEx) {
                    return $error($boundEx);
                  }
                }, $error);
              } else return [1];
            }
            return ($Loop_7_trampoline = function (q) {
              while (q) {
                if (q.then) return void q.then($Loop_7_trampoline, $error);
                try {
                  if (q.pop) {
                    if (q.length) return q.pop() ? $Loop_7_exit.call(this) : q;else q = $Loop_7;
                  } else q = q.call(this);
                } catch (_exception) {
                  return $error(_exception);
                }
              }
            }.bind(this))($Loop_7);
            function $Loop_7_exit() {
              return Promise.resolve(Promise.all(pending)).then(function ($await_12) {
                try {
                  return $If_2.call(this);
                } catch ($boundEx) {
                  return $error($boundEx);
                }
              }.bind(this), $error);
            }
          }
          function $If_2() {
            return $return(tile_data);
          }
          return $If_2.call(this);
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }.bind(this), $error);
    }.bind(this));
  },
  // Calculate and store mesh variant (unique by draw group but not feature)
  computeVariant: function computeVariant(draw) {
    // Factors that determine a unique mesh rendering variant
    var key = draw.offset ? 1 : 0; // whether feature has a line offset
    key += '/' + draw.texcoords; // whether feature has texture UVs
    key += '/' + (draw.interactive ? 1 : 0); // whether feature has interactivity
    key += '/' + (draw.extrude || draw.z ? 1 : 0); // whether feature has a z coordinate
    key += '/' + draw.is_outline; // whether this is an outline of a line feature

    if (draw.dash_key) {
      // whether feature has a line dash pattern
      key += draw.dash_key;
      if (draw.dash_background_color) {
        key += draw.dash_background_color;
      }
    }
    if (draw.texture_merged) {
      // whether feature has a line texture
      key += draw.texture_merged;
    }
    var blend_order = this.getBlendOrderForDraw(draw);
    key += '/' + blend_order;

    // Create unique key
    key = hashString(key);
    draw.variant = key;
    if (this.variants[key] == null) {
      this.variants[key] = {
        key: key,
        blend_order: blend_order,
        mesh_order: draw.is_outline ? 0 : 1,
        // outlines should be drawn first, so inline is on top
        selection: draw.interactive ? 1 : 0,
        offset: draw.offset ? 1 : 0,
        z_or_offset: draw.offset || draw.extrude || draw.z ? 1 : 0,
        texcoords: draw.texcoords,
        texture: draw.texture_merged,
        dash: draw.dash,
        dash_key: draw.dash_key,
        dash_background_color: draw.dash_background_color
      };
    }
  },
  // Override
  // Create or return desired vertex layout permutation based on flags
  vertexLayoutForMeshVariant: function vertexLayoutForMeshVariant(variant) {
    if (this.vertex_layouts[variant.key] == null) {
      // Attributes for this mesh variant
      // Optional attributes have placeholder values assigned with `static` parameter
      var attribs = [{
        name: 'a_position',
        size: 4,
        type: gl$1.SHORT,
        normalized: false
      }, {
        name: 'a_extrude',
        size: 2,
        type: gl$1.SHORT,
        normalized: false
      }, {
        name: 'a_offset',
        size: 2,
        type: gl$1.SHORT,
        normalized: false,
        static: variant.offset ? null : [0, 0]
      }, {
        name: 'a_z_and_offset_scale',
        size: 2,
        type: gl$1.SHORT,
        normalized: false,
        static: variant.z_or_offset ? null : [0, 0]
      }, {
        name: 'a_texcoord',
        size: 2,
        type: gl$1.UNSIGNED_SHORT,
        normalized: true,
        static: variant.texcoords ? null : [0, 0]
      }, {
        name: 'a_color',
        size: 4,
        type: gl$1.UNSIGNED_BYTE,
        normalized: true
      }, {
        name: 'a_selection_color',
        size: 4,
        type: gl$1.UNSIGNED_BYTE,
        normalized: true,
        static: variant.selection ? null : [0, 0, 0, 0]
      }];
      this.addCustomAttributesToAttributeList(attribs);
      this.vertex_layouts[variant.key] = new VertexLayout(attribs);
    }
    return this.vertex_layouts[variant.key];
  },
  // Override
  meshVariantTypeForDraw: function meshVariantTypeForDraw(draw) {
    return this.variants[draw.variant]; // return pre-calculated mesh variant
  },
  /**
   * A "template" that sets constant attibutes for each vertex, which is then modified per vertex or per feature.
   * A plain JS array matching the order of the vertex layout.
   */
  makeVertexTemplate: function makeVertexTemplate(style, mesh) {
    var i = 0;

    // a_position.xy - vertex position
    // a_position.z - line width scaling factor
    // a_position.w - layer order
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = style.width_scale * 1024;
    this.vertex_template[i++] = this.scaleOrder(style.order);

    // a_extrude.xy - extrusion vector (vertex extrusion away from center of line)
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = 0;

    // a_offset.xy - normal vector
    // offset can be static or dynamic depending on style
    if (mesh.variant.offset) {
      this.vertex_template[i++] = 0;
      this.vertex_template[i++] = 0;
    }

    // a_z_and_offset_scale.xy
    if (mesh.variant.z_or_offset) {
      this.vertex_template[i++] = style.z || 0; // feature z position
      this.vertex_template[i++] = style.offset_scale * 1024; // line offset scaling factor
    }

    // a_texcoord.uv - texture coordinates
    if (mesh.variant.texcoords) {
      this.vertex_template[i++] = 0;
      this.vertex_template[i++] = 0;
    }

    // a_color.rgba - feature color
    this.vertex_template[i++] = style.color[0] * 255;
    this.vertex_template[i++] = style.color[1] * 255;
    this.vertex_template[i++] = style.color[2] * 255;
    this.vertex_template[i++] = (style.alpha != null ? style.alpha : style.color[3]) * 255;

    // a_selection_color.rgba - selection color
    if (mesh.variant.selection) {
      this.vertex_template[i++] = style.selection_color[0] * 255;
      this.vertex_template[i++] = style.selection_color[1] * 255;
      this.vertex_template[i++] = style.selection_color[2] * 255;
      this.vertex_template[i++] = style.selection_color[3] * 255;
    }
    this.addCustomAttributesToVertexTemplate(style, i);
    return this.vertex_template;
  },
  buildLines: function buildLines(lines, style, context, options) {
    // Outline (build first so that blended geometry without a depth test is drawn first/under the inner line)
    this.feature_style = this.outline_feature_style; // swap in outline-specific style holder
    if (style.outline && style.outline.color != null && style.outline.width.value != null) {
      var outline_style = this.styles[style.outline.style];
      if (outline_style) {
        outline_style.addFeature(context.feature, style.outline, context);
      }
    }

    // Main line
    this.feature_style = this.inline_feature_style; // restore calculated style for inline
    var mesh = this.getTileMesh(context.tile, this.meshVariantTypeForDraw(style));
    var vertex_data = mesh.vertex_data;
    var vertex_layout = vertex_data.vertex_layout;
    var vertex_template = this.makeVertexTemplate(style, mesh);
    return buildPolylines(lines, style, vertex_data, vertex_template, vertex_layout.index, options && options.closed_polygon,
    // closed_polygon
    !style.tile_edges && options && options.remove_tile_edges,
    // remove_tile_edges
    Geo$1.tile_scale * context.tile.pad_scale * 2 // tile_edge_tolerance
    );
  },
  buildPolygons: function buildPolygons(polygons, style, context) {
    // Render polygons as individual lines
    var geom_count = 0;
    for (var p = 0; p < polygons.length; p++) {
      geom_count += this.buildLines(polygons[p], style, context, {
        closed_polygon: true,
        remove_tile_edges: true
      });
    }
    return geom_count;
  }
});

// Point builders

// Scaling values to encode fractional values with fixed-point integer attributes
var pre_angles_normalize = 128 / Math.PI;
var angles_normalize = 16384 / Math.PI;
var offsets_normalize = 64;
var texcoord_normalize = 65535;
var size_normalize = 128; // width/height are 8.8 fixed-point, but are halved (so multiply by 128 instead of 256)

// These index values map a 4-element vertex position counter from this pattern (used for size and UVs):
//  [min_x, min_y, max_x, max_y]
// to this pattern:
//  [min_x, min_y],
//  [max_x, min_y],
//  [max_x, max_y],
//  [min_x, max_y]
var ix = [0, 2, 2, 0];
var iy = [1, 1, 3, 3];
var shape = new Array(4); // single, reusable allocation

// Build a billboard sprite quad centered on a point. Sprites are intended to be drawn in screenspace, and have
// properties for width, height, angle, and texture UVs. Curved label segment sprites have additional properties
// for interpolating their position and angle across zooms.
function buildQuadForPoint(point, vertex_data, vertex_template, vindex, size, offset, offsets, pre_angles, angle, angles, texcoords, curve) {
  // Half-sized point dimensions in fixed point
  var w2 = size[0] * size_normalize;
  var h2 = size[1] * size_normalize;
  shape[0] = -w2;
  shape[1] = -h2;
  shape[2] = w2;
  shape[3] = h2;
  var uvs = texcoords || default_uvs;
  var vertex_elements = vertex_data.vertex_elements;
  var element_offset = vertex_data.vertex_count;
  for (var p = 0; p < 4; p++) {
    vertex_template[vindex.a_position + 0] = point[0];
    vertex_template[vindex.a_position + 1] = point[1];
    vertex_template[vindex.a_shape + 0] = shape[ix[p]];
    vertex_template[vindex.a_shape + 1] = shape[iy[p]];
    vertex_template[vindex.a_shape + 2] = angle;
    vertex_template[vindex.a_offset + 0] = offset[0];
    vertex_template[vindex.a_offset + 1] = offset[1];

    // Add texcoords
    if (vindex.a_texcoord) {
      vertex_template[vindex.a_texcoord + 0] = uvs[ix[p]] * texcoord_normalize;
      vertex_template[vindex.a_texcoord + 1] = uvs[iy[p]] * texcoord_normalize;
    }

    // Add curved label segment props
    if (curve) {
      // 1 byte (signed) range: [-127, 128]
      // actual range: [-2pi, 2pi]
      // total: multiply by 128 / (2 PI)
      vertex_template[vindex.a_pre_angles + 0] = pre_angles_normalize * pre_angles[0];
      vertex_template[vindex.a_pre_angles + 1] = pre_angles_normalize * pre_angles[1];
      vertex_template[vindex.a_pre_angles + 2] = pre_angles_normalize * pre_angles[2];
      vertex_template[vindex.a_pre_angles + 3] = pre_angles_normalize * pre_angles[3];

      // 2 byte (signed) of resolution [-32767, 32768]
      // actual range: [-2pi, 2pi]
      // total: multiply by 32768 / (2 PI) = 16384 / PI
      vertex_template[vindex.a_angles + 0] = angles_normalize * angles[0];
      vertex_template[vindex.a_angles + 1] = angles_normalize * angles[1];
      vertex_template[vindex.a_angles + 2] = angles_normalize * angles[2];
      vertex_template[vindex.a_angles + 3] = angles_normalize * angles[3];

      // offset range can be [0, 65535]
      // actual range: [0, 1024]
      vertex_template[vindex.a_offsets + 0] = offsets_normalize * offsets[0];
      vertex_template[vindex.a_offsets + 1] = offsets_normalize * offsets[1];
      vertex_template[vindex.a_offsets + 2] = offsets_normalize * offsets[2];
      vertex_template[vindex.a_offsets + 3] = offsets_normalize * offsets[3];
    }
    vertex_data.addVertex(vertex_template);
  }
  vertex_elements.push(element_offset + 0);
  vertex_elements.push(element_offset + 1);
  vertex_elements.push(element_offset + 2);
  vertex_elements.push(element_offset + 2);
  vertex_elements.push(element_offset + 3);
  vertex_elements.push(element_offset + 0);
  return 2; // geom count is always two triangles, for one quad
}

// Sets of values to match for directional and corner anchors
var lefts = ['left', 'top-left', 'bottom-left'];
var rights = ['right', 'top-right', 'bottom-right'];
var tops = ['top', 'top-left', 'top-right'];
var bottoms = ['bottom', 'bottom-left', 'bottom-right'];
var PointAnchor = {
  computeOffset: function computeOffset(offset, size, anchor) {
    var buffer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    if (!anchor || anchor === 'center') {
      return offset;
    }
    var offset2 = [offset[0], offset[1]];
    buffer = buffer || this.default_buffer;

    // An optional left/right offset
    if (this.isLeftAnchor(anchor)) {
      offset2[0] -= size[0] / 2;
      if (anchor === 'left') {
        offset2[0] -= buffer[0];
      }
    } else if (this.isRightAnchor(anchor)) {
      offset2[0] += size[0] / 2;
      if (anchor === 'right') {
        offset2[0] += buffer[1];
      }
    }

    // An optional top/bottom offset
    if (this.isTopAnchor(anchor)) {
      offset2[1] -= size[1] / 2;
      if (anchor === 'top') {
        offset2[1] -= buffer[2];
      }
    } else if (this.isBottomAnchor(anchor)) {
      offset2[1] += size[1] / 2;
      if (anchor === 'bottom') {
        offset2[1] += buffer[3];
      }
    }
    return offset2;
  },
  alignForAnchor: function alignForAnchor(anchor) {
    if (anchor && anchor !== 'center') {
      if (this.isLeftAnchor(anchor)) {
        return 'right';
      } else if (this.isRightAnchor(anchor)) {
        return 'left';
      }
    }
    return 'center';
  },
  isLeftAnchor: function isLeftAnchor(anchor) {
    return lefts.indexOf(anchor) > -1;
  },
  isRightAnchor: function isRightAnchor(anchor) {
    return rights.indexOf(anchor) > -1;
  },
  isTopAnchor: function isTopAnchor(anchor) {
    return tops.indexOf(anchor) > -1;
  },
  isBottomAnchor: function isBottomAnchor(anchor) {
    return bottoms.indexOf(anchor) > -1;
  },
  // Buffers: [left, right, top, bottom]
  default_buffer: [2.5, 2.5, 1.5, 0.75],
  zero_buffer: [0, 0, 0, 0]
};

// Do AABB `a` and `b` intersect?
function boxIntersectsBox(a, b) {
  if (a[2] < b[0] ||
  // a is left of b
  a[0] > b[2] ||
  // a is right of b
  a[3] < b[1] ||
  // a is above b
  a[1] > b[3]) {
    // a is below b
    return false;
  }
  return true; // boxes overlap
}

// Does AABB `a` intersect any of the AABBs in array `boxes`?
// Invokes `callback` with index of intersecting box
// Stops intersecting if `callback` returns non-null value (continues otherwise)
function boxIntersectsList(a, boxes, callback) {
  for (var i = 0; i < boxes.length; i++) {
    if (boxIntersectsBox(a, boxes[i])) {
      if (callback(i) != null) {
        break;
      }
    }
  }
}

// single-allocation, reusable objects
var ZERO_AXES = [[1, 0], [0, 1]];
var proj_a = [],
  proj_b = [];
var d0, d1, d2, d3;
var OBB = /*#__PURE__*/function () {
  function OBB(x, y, a, w, h) {
    _classCallCheck(this, OBB);
    this.dimension = [w / 2, h / 2]; // store half-dimension as that's what's needed in calculations below
    this.angle = a;
    this.centroid = [x, y];
    this.quad = null;
    this.axis_0 = null;
    this.axis_1 = null;
    this.update();
  }
  return _createClass(OBB, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        x: this.centroid[0],
        y: this.centroid[1],
        a: this.angle,
        w: this.dimension[0],
        h: this.dimension[1]
      };
    }
  }, {
    key: "getExtent",
    value: function getExtent() {
      // special handling to skip calculations for 0-angle
      if (this.angle === 0) {
        return [this.quad[0], this.quad[1],
        // lower-left
        this.quad[4], this.quad[5] // upper-right
        ];
      }
      var aabb = [Math.min(this.quad[0], this.quad[2], this.quad[4], this.quad[6]),
      // min x
      Math.min(this.quad[1], this.quad[3], this.quad[5], this.quad[7]),
      // min y
      Math.max(this.quad[0], this.quad[2], this.quad[4], this.quad[6]),
      // max x
      Math.max(this.quad[1], this.quad[3], this.quad[5], this.quad[7]) // max y
      ];
      return aabb;
    }
  }, {
    key: "updateAxes",
    value: function updateAxes() {
      // upper-left to upper-right
      this.axis_0 = Vector$1.normalize([this.quad[4] - this.quad[6], this.quad[5] - this.quad[7]]);

      // lower-right to upper-right
      this.axis_1 = Vector$1.normalize([this.quad[4] - this.quad[2], this.quad[5] - this.quad[3]]);
    }
  }, {
    key: "update",
    value: function update() {
      var c = this.centroid;
      var w2 = this.dimension[0];
      var h2 = this.dimension[1];

      // special handling to skip calculations for 0-angle
      if (this.angle === 0) {
        // quad is a flat array storing 4 [x, y] vectors
        this.quad = [c[0] - w2, c[1] - h2,
        // lower-left
        c[0] + w2, c[1] - h2,
        // lower-right
        c[0] + w2, c[1] + h2,
        // upper-right
        c[0] - w2, c[1] + h2 // upper-left
        ];
        this.axis_0 = ZERO_AXES[0];
        this.axis_1 = ZERO_AXES[1];
      }
      // calculate axes and enclosing quad
      else {
        var x0 = Math.cos(this.angle) * w2;
        var x1 = Math.sin(this.angle) * w2;
        var y0 = -Math.sin(this.angle) * h2;
        var y1 = Math.cos(this.angle) * h2;

        // quad is a flat array storing 4 [x, y] vectors
        this.quad = [c[0] - x0 - y0, c[1] - x1 - y1,
        // lower-left
        c[0] + x0 - y0, c[1] + x1 - y1,
        // lower-right
        c[0] + x0 + y0, c[1] + x1 + y1,
        // upper-right
        c[0] - x0 + y0, c[1] - x1 + y1 // upper-left
        ];
        this.updateAxes();
      }
    }
  }], [{
    key: "projectToAxis",
    value: function projectToAxis(obb, axis, proj) {
      // for each axis, project obb quad to it and find min and max values
      var quad = obb.quad;
      d0 = quad[0] * axis[0] + quad[1] * axis[1];
      d1 = quad[2] * axis[0] + quad[3] * axis[1];
      d2 = quad[4] * axis[0] + quad[5] * axis[1];
      d3 = quad[6] * axis[0] + quad[7] * axis[1];
      proj[0] = Math.min(d0, d1, d2, d3);
      proj[1] = Math.max(d0, d1, d2, d3);
      return proj;
    }
  }, {
    key: "axisCollide",
    value: function axisCollide(obb_a, obb_b, axis_0, axis_1) {
      OBB.projectToAxis(obb_a, axis_0, proj_a);
      OBB.projectToAxis(obb_b, axis_0, proj_b);
      if (proj_b[0] > proj_a[1] || proj_b[1] < proj_a[0]) {
        return false;
      }
      OBB.projectToAxis(obb_a, axis_1, proj_a);
      OBB.projectToAxis(obb_b, axis_1, proj_b);
      if (proj_b[0] > proj_a[1] || proj_b[1] < proj_a[0]) {
        return false;
      }
      return true;
    }
  }, {
    key: "intersect",
    value: function intersect(obb_a, obb_b) {
      return OBB.axisCollide(obb_a, obb_b, obb_a.axis_0, obb_a.axis_1) && OBB.axisCollide(obb_a, obb_b, obb_b.axis_0, obb_b.axis_1);
    }
  }]);
}();

// import log from '../utils/log';
var Label = /*#__PURE__*/function () {
  function Label(size) {
    var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, Label);
    this.id = Label.nextLabelId();
    this.type = ''; // set by subclass
    this.size = size;
    this.layout = layout;
    this.position = null;
    this.angle = 0;
    this.anchor = Array.isArray(this.layout.anchor) ? this.layout.anchor[0] : this.layout.anchor; // initial anchor
    this.placed = null;
    this.offset = layout.offset;
    this.unit_scale = this.layout.units_per_pixel;
    this.aabb = null;
    this.obb = null;
    this.align = 'center';
    this.throw_away = false; // if label does not fit (exceeds tile boundary, etc) this boolean will be true
  }

  // Minimal representation of label
  return _createClass(Label, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        id: this.id,
        type: this.type,
        obb: this.obb.toJSON(),
        position: this.position,
        angle: this.angle,
        size: this.size,
        offset: this.offset,
        breach: this.breach,
        may_repeat_across_tiles: this.may_repeat_across_tiles,
        layout: textLayoutToJSON(this.layout)
      };
    }
  }, {
    key: "update",
    value: function update() {
      this.align = this.layout.align || PointAnchor.alignForAnchor(this.anchor);
    }

    // check for overlaps with other labels in the tile
  }, {
    key: "occluded",
    value: function occluded(bboxes) {
      var _this = this;
      var exclude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var intersect = false;
      var aabbs = bboxes.aabb;
      var obbs = bboxes.obb;

      // Broad phase
      if (aabbs.length > 0) {
        boxIntersectsList(this.aabb, aabbs, function (j) {
          // log('trace', 'collision: broad phase collide', this.layout.id, this, this.aabb, aabbs[j]);

          // Skip if colliding with excluded label
          if (exclude && aabbs[j] === exclude.aabb) {
            // log('trace', 'collision: skipping due to explicit exclusion', this, exclude);
            return;
          }

          // Skip narrow phase collision if no rotation
          if (_this.obb.angle === 0 && obbs[j].angle === 0) {
            // log('trace', 'collision: skip narrow phase collide because neither is rotated', this.layout.id, this, this.obb, obbs[j]);
            intersect = true;
            return true;
          }

          // Narrow phase
          if (OBB.intersect(_this.obb, obbs[j])) {
            // log('trace', 'collision: narrow phase collide', this.layout.id, this, this.obb, obbs[j]);
            intersect = true;
            return true;
          }
        });
      }
      return intersect;
    }

    // checks whether the label is within the tile boundaries
  }, {
    key: "inTileBounds",
    value: function inTileBounds() {
      if (this.aabb[0] >= 0 && this.aabb[1] > -Geo$1.tile_scale && this.aabb[0] < Geo$1.tile_scale && this.aabb[1] <= 0 || this.aabb[2] >= 0 && this.aabb[3] > -Geo$1.tile_scale && this.aabb[2] < Geo$1.tile_scale && this.aabb[3] <= 0) {
        return true;
      }
      return false;
    }

    // some labels need further repeat culling checks on the main thread
    // checks whether the label is within its repeat distance of the tile boundaries
  }, {
    key: "mayRepeatAcrossTiles",
    value: function mayRepeatAcrossTiles() {
      if (this.layout.collide) {
        return true; // additional collision pass will already apply, so skip further distance checks
      }
      var dist = this.layout.repeat_distance;
      if (dist === 0) {
        return false;
      }
      return Math.abs(this.position[0]) < dist || Math.abs(this.position[0] - Geo$1.tile_scale) < dist || Math.abs(this.position[1]) < dist || Math.abs(-(this.position[1] - Geo$1.tile_scale)) < dist;
    }

    // Whether the label should be discarded
    // Depends on whether label must fit in the tile bounds, and if so, can it be moved to fit there
  }, {
    key: "discard",
    value: function discard(bboxes) {
      var exclude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (this.throw_away) {
        return true;
      }
      return this.occluded(bboxes, exclude);
    }
  }]);
}(); // Generic label placement function, adds a label's bounding boxes to the currently placed set
Label.add = function (label, bboxes) {
  label.placed = true;
  if (label.aabb) {
    bboxes.aabb.push(label.aabb);
    bboxes.obb.push(label.obb);
  }
  if (label.aabbs) {
    for (var i = 0; i < label.aabbs.length; i++) {
      bboxes.aabb.push(label.aabbs[i]);
      bboxes.obb.push(label.obbs[i]);
    }
  }
};
Label.id = 0;
Label.id_prefix = 0; // id prefix scoped to worker thread
Label.id_multiplier = 0; // multiplier to keep label ids distinct across threads

Label.nextLabelId = function () {
  return Label.id_prefix + Label.id++ * Label.id_multiplier;
};
Label.epsilon = 0.9999; // tolerance around collision boxes, prevent perfectly adjacent objects from colliding

// Minimal representation of text layout, sent to main thread for label collisions
function textLayoutToJSON(layout) {
  return {
    priority: layout.priority,
    collide: layout.collide,
    repeat_distance: layout.repeat_distance,
    repeat_group: layout.repeat_group,
    buffer: layout.buffer,
    italic: layout.italic // affects bounding box size
  };
}

var RepeatGroup = /*#__PURE__*/function () {
  function RepeatGroup(key, repeat_dist) {
    _classCallCheck(this, RepeatGroup);
    this.key = key;
    this.repeat_dist = repeat_dist;
    this.repeat_dist_sq = this.repeat_dist * this.repeat_dist;
    this.positions = [];
  }

  // Check an object to see if it's a repeat in this group
  return _createClass(RepeatGroup, [{
    key: "check",
    value: function check(obj) {
      // Check distance from new object to objects already in group
      var p1 = obj.position;
      for (var i = 0; i < this.positions.length; i++) {
        var p2 = this.positions[i];
        var dx = p1[0] - p2[0];
        var dy = p1[1] - p2[1];
        var dist_sq = dx * dx + dy * dy;

        // Found an existing object within allowed distance
        if (dist_sq < this.repeat_dist_sq) {
          return true;
        }
      }
    }

    // Add object to this group
  }, {
    key: "add",
    value: function add(obj) {
      // only store object's position, to save space / prevent unnecessary references
      if (obj && obj.position) {
        this.positions.push(obj.position);
      }
    }

    // Static methods are used to manage repeat groups, within and across tiles

    // Reset all groups for this tile
  }], [{
    key: "clear",
    value: function clear(tile) {
      this.groups[tile] = {};
    }

    // Check an object to see if it's a repeat within its designated group
  }, {
    key: "check",
    value: function check(obj, layout, tile) {
      if (layout.repeat_distance && layout.repeat_group && this.groups[tile][layout.repeat_group]) {
        return this.groups[tile][layout.repeat_group].check(obj);
      }
    }

    // Add an object to its designated group
  }, {
    key: "add",
    value: function add(obj, layout, tile) {
      if (layout.repeat_distance && layout.repeat_group) {
        if (this.groups[tile][layout.repeat_group] == null) {
          this.groups[tile][layout.repeat_group] = new RepeatGroup(layout.repeat_group, layout.repeat_distance * layout.repeat_scale);
        }
        this.groups[tile][layout.repeat_group].add(obj);
      }
    }
  }]);
}(); // Current set of repeat groups, grouped and keyed by tile
RepeatGroup.groups = {};

var CollisionGrid = /*#__PURE__*/function () {
  function CollisionGrid(anchor, span) {
    _classCallCheck(this, CollisionGrid);
    this.anchor = anchor;
    this.span = span;
    this.cells = {};
  }
  return _createClass(CollisionGrid, [{
    key: "addLabel",
    value: function addLabel(label) {
      var _this = this;
      if (label.aabb) {
        this.addLabelBboxes(label, label.aabb);
      }
      if (label.aabbs) {
        label.aabbs.forEach(function (aabb) {
          return _this.addLabelBboxes(label, aabb);
        });
      }
    }
  }, {
    key: "addLabelBboxes",
    value: function addLabelBboxes(label, aabb) {
      // min/max cells that the label falls into
      // keep grid coordinates at zero or above so any labels that go "below" the anchor are in the lowest grid cell
      var cell_bounds = [Math.max(Math.floor((aabb[0] - this.anchor.x) / this.span), 0), Math.max(Math.floor(-(aabb[1] - this.anchor.y) / this.span), 0), Math.max(Math.floor((aabb[2] - this.anchor.x) / this.span), 0), Math.max(Math.floor(-(aabb[3] - this.anchor.y) / this.span), 0)];
      label.cells = []; // label knows which cells it falls in

      // initialize each grid cell as necessary, and add to label's list of cells
      for (var gy = cell_bounds[1]; gy <= cell_bounds[3]; gy++) {
        this.cells[gy] = this.cells[gy] || {};
        for (var gx = cell_bounds[0]; gx <= cell_bounds[2]; gx++) {
          this.cells[gy][gx] = this.cells[gy][gx] || {
            aabb: [],
            obb: []
          };
          label.cells.push(this.cells[gy][gx]);
        }
      }
    }
  }]);
}();

var Collision = {
  tiles: {},
  grid: null,
  // no collision grid by default
  initGrid: function initGrid(options) {
    if (options == null) {
      this.grid = null;
    } else {
      this.grid = new CollisionGrid(options.anchor, options.span);
    }
  },
  startTile: function startTile(tile) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$apply_repeat_gro = _ref.apply_repeat_groups,
      apply_repeat_groups = _ref$apply_repeat_gro === void 0 ? true : _ref$apply_repeat_gro,
      _ref$return_hidden = _ref.return_hidden,
      return_hidden = _ref$return_hidden === void 0 ? false : _ref$return_hidden;
    var state = this.tiles[tile] = {
      bboxes: {
        // current set of placed bounding boxes
        aabb: [],
        obb: []
      },
      objects: {},
      // objects to collide, grouped by priority, then by style
      labels: {},
      // objects post-collision, grouped by style, marked as show/hide
      styles: {},
      // styles contributing collision objects
      repeat: apply_repeat_groups,
      return_hidden: return_hidden
    };

    // Promise resolved when all registered styles have added objects
    if (state.complete == null) {
      state.complete = new Promise(function (resolve, reject) {
        state.resolve = resolve;
        state.reject = reject;
      });
    }
  },
  resetTile: function resetTile(tile) {
    delete this.tiles[tile];
  },
  abortTile: function abortTile(tile) {
    if (this.tiles[tile] && this.tiles[tile].resolve) {
      this.tiles[tile].resolve([]);
    }
    this.resetTile(tile);
  },
  // Add a style to the pending set, collision will block on all styles submitting to collision set
  addStyle: function addStyle(style, tile) {
    this.tiles[tile].styles[style] = true;
  },
  // Add collision objects for a style
  collide: function collide(objects, style, tile) {
    var state = this.tiles[tile];
    if (!state) {
      log('trace', 'Collision.collide() called with null tile', tile, this.tiles, style, objects);
      return Promise.resolve([]);
    }

    // Group by priority and style
    var tile_objects = state.objects;
    for (var i = 0; i < objects.length; i++) {
      var obj = objects[i];
      var priority = obj.label.layout.priority;
      tile_objects[priority] = tile_objects[priority] || {};
      tile_objects[priority][style] = tile_objects[priority][style] || [];
      tile_objects[priority][style].push(obj);
    }

    // Remove from pending style set, if no more styles, do collision & finish tile
    delete state.styles[style];
    if (Object.keys(state.styles).length === 0) {
      this.endTile(tile);
    }

    // Wait for objects to be added from all styles
    return state.complete.then(function () {
      state.resolve = null;
      return state.labels[style] || [];
    });
  },
  // Test labels for collisions, higher to lower priority
  // When two collide, hide the lower-priority label
  endTile: function endTile(tile) {
    var state = this.tiles[tile];
    var labels = state.labels;
    if (this.grid) {
      this.addLabelsToGrid(tile);
    }
    if (state.repeat) {
      RepeatGroup.clear(tile);
    }

    // Process labels by priority, then by style
    var priorities = Object.keys(state.objects).sort(function (a, b) {
      return a - b;
    });
    for (var p = 0; p < priorities.length; p++) {
      var style_objects = state.objects[priorities[p]];
      if (!style_objects) {
        // no labels at this priority, skip to next
        continue;
      }

      // For each style
      for (var style in style_objects) {
        var objects = style_objects[style];
        labels[style] = labels[style] || [];
        for (var i = 0; i < objects.length; i++) {
          var object = objects[i];
          if (this.canBePlaced(object, tile, object.linked, state)) {
            // show object if it isn't dependent on a parent object
            if (!object.linked) {
              object.show = true;
              labels[style].push(object);
              this.place(object, tile, state);
            }
            // If object is dependent on a parent, only show if both can be placed
            else if (this.canBePlaced(object.linked, tile, object, state)) {
              object.show = true;

              // If a label is breach, its linked label should be considered breach as well
              // (this keeps linked labels (in)visible in tandem)
              if (object.label.breach || object.linked.label.breach) {
                object.label.breach = true;
                object.linked.label.breach = true;
              }

              // Similarly for labels that need main thread repeat culling, keep linked labels in sync
              if (object.label.may_repeat_across_tiles || object.linked.label.may_repeat_across_tiles) {
                object.label.may_repeat_across_tiles = true;
                object.linked.label.may_repeat_across_tiles = true;
              }
              labels[style].push(object);
              this.place(object, tile, state);
              this.place(object.linked, tile, state);
            } else if (state.return_hidden) {
              object.show = false;
              labels[style].push(object);
            }
          } else if (state.return_hidden) {
            object.show = false;
            labels[style].push(object);
          }
        }
      }
    }
    delete this.tiles[tile];
    state.resolve();
  },
  addLabelsToGrid: function addLabelsToGrid(tile_id) {
    var _this = this;
    // Process labels by priority, then by style
    var tile = this.tiles[tile_id];
    for (var priority in tile.objects) {
      var style_objects = tile.objects[priority];
      if (!style_objects) {
        // no labels at this priority, skip to next
        continue;
      }

      // For each style
      for (var style in style_objects) {
        var objects = style_objects[style];
        objects.forEach(function (object) {
          return _this.grid.addLabel(object.label);
        });
      }
    }
  },
  // Run collision and repeat check to see if label can currently be placed
  canBePlaced: function canBePlaced(object, tile) {
    var exclude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
      _ref2$repeat = _ref2.repeat,
      repeat = _ref2$repeat === void 0 ? true : _ref2$repeat;
    var label = object.label;
    var layout = object.label.layout;

    // Skip if already processed (e.g. by parent object)
    if (label.placed != null) {
      return label.placed;
    }
    var placeable = !layout.collide;
    if (!placeable) {
      // Test the label for intersections with other labels
      if (this.grid && label.cells) {
        // test label candidate against labels placed in each grid cell
        placeable = label.cells.reduce(function (keep, cell) {
          if (keep && label.discard(cell, exclude && exclude.label)) {
            keep = false;
          }
          return keep;
        }, true);
      } else {
        placeable = !label.discard(this.tiles[tile].bboxes, exclude && exclude.label);
      }
    }
    if (placeable) {
      // repeat culling with nearby labels
      if (repeat && RepeatGroup.check(label, layout, tile)) {
        label.placed = false;
      } else {
        return true;
      }
    } else if (layout.collide) {
      // log('trace', `hide label '${label.text}' due to collision`);
      label.placed = false;
    }
    return label.placed;
  },
  // Place label
  place: function place(_ref3, tile, _ref4) {
    var label = _ref3.label;
    var _ref4$repeat = _ref4.repeat,
      repeat = _ref4$repeat === void 0 ? true : _ref4$repeat;
    // Skip if already processed (e.g. by parent object)
    if (label.placed != null) {
      return;
    }

    // Register as placed for future collision and repeat culling
    if (repeat) {
      RepeatGroup.add(label, label.layout, tile);
    }
    if (this.grid && label.cells) {
      label.cells.forEach(function (cell) {
        return Label.add(label, cell);
      });
    } else {
      Label.add(label, this.tiles[tile].bboxes);
    }
  }
};

function _callSuper$6(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$6() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$6() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$6 = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet$3(t, o, e, r) { var p = _get(_getPrototypeOf(t.prototype ), o, e); return "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var LabelPoint = /*#__PURE__*/function (_Label) {
  function LabelPoint(position, size, layout) {
    var _this;
    var angle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    _classCallCheck(this, LabelPoint);
    _this = _callSuper$6(this, LabelPoint, [size, layout]);
    _this.type = 'point';
    _this.position = [position[0], position[1]];
    _this.angle = angle;
    _this.parent = _this.layout.parent;
    _this.update();
    _this.start_anchor_index = 1;
    _this.degenerate = !_this.size[0] && !_this.size[1] && !_this.layout.buffer[0] && !_this.layout.buffer[1];
    _this.throw_away = false;
    return _this;
  }
  _inherits(LabelPoint, _Label);
  return _createClass(LabelPoint, [{
    key: "update",
    value: function update() {
      _superPropGet$3(LabelPoint, "update", this)([]);
      this.computeOffset();
      this.updateBBoxes();
    }
  }, {
    key: "computeOffset",
    value: function computeOffset() {
      this.offset = [this.layout.offset[0], this.layout.offset[1]];

      // Additional anchor/offset for point:
      if (this.parent) {
        var parent = this.parent;
        // point's own anchor, text anchor applied to point, additional point offset
        this.offset = PointAnchor.computeOffset(this.offset, parent.size, parent.anchor, PointAnchor.zero_buffer);
        this.offset = PointAnchor.computeOffset(this.offset, parent.size, this.anchor, PointAnchor.zero_buffer);
        if (parent.offset !== StyleParser.zeroPair) {
          // point has an offset
          if (this.offset === StyleParser.zeroPair) {
            // no text offset, use point's
            this.offset = parent.offset;
          } else {
            // text has offset, add point's
            this.offset[0] += parent.offset[0];
            this.offset[1] += parent.offset[1];
          }
        }
      }
      this.offset = PointAnchor.computeOffset(this.offset, this.size, this.anchor);
    }
  }, {
    key: "updateBBoxes",
    value: function updateBBoxes() {
      var width = (this.size[0] + this.layout.buffer[0] * 2) * this.unit_scale * Label.epsilon;
      var height = (this.size[1] + this.layout.buffer[1] * 2) * this.unit_scale * Label.epsilon;

      // fudge width value as text may overflow bounding box if it has italic, bold, etc style
      if (this.layout.italic) {
        width += 5 * this.unit_scale;
      }

      // make bounding boxes
      this.obb = new OBB(this.position[0] + this.offset[0] * this.unit_scale, this.position[1] - this.offset[1] * this.unit_scale, -this.angle,
      // angle is negative because tile system y axis is pointing down
      width, height);
      this.aabb = this.obb.getExtent();
      if (this.inTileBounds) {
        this.breach = !this.inTileBounds();
      }
      if (this.mayRepeatAcrossTiles) {
        this.may_repeat_across_tiles = this.mayRepeatAcrossTiles();
      }
    }
  }, {
    key: "discard",
    value: function discard(bboxes) {
      var exclude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (this.degenerate) {
        return false;
      }
      if (_superPropGet$3(LabelPoint, "discard", this)([bboxes, exclude])) {
        // If more than one anchor specified, try them in order
        if (Array.isArray(this.layout.anchor)) {
          // Start on second anchor (first anchor was set on creation)
          for (var i = this.start_anchor_index; i < this.layout.anchor.length; i++) {
            this.anchor = this.layout.anchor[i];
            this.update();
            if (!_superPropGet$3(LabelPoint, "discard", this)([bboxes, exclude])) {
              return false;
            }
          }
        }
        return true;
      }
      return false;
    }
  }]);
}(Label); // Placement strategies
LabelPoint.PLACEMENT = {
  VERTEX: 0,
  // place labels at endpoints of line segments
  MIDPOINT: 1,
  // place labels at midpoints of line segments
  SPACED: 2,
  // place labels equally spaced along line
  CENTROID: 3 // place labels at center of polygons
};

// Logic for placing point labels along a line geometry

var PLACEMENT$1 = LabelPoint.PLACEMENT;
var default_spacing = 80; // spacing of points along line in pixels

function placePointsOnLine(line, size, layout) {
  var labels = [];
  var strategy = layout.placement;
  var min_length = Math.max(size[0], size[1]) * layout.placement_min_length_ratio * layout.units_per_pixel;
  if (strategy === PLACEMENT$1.SPACED) {
    var result = getPositionsAndAngles(line, min_length, layout);
    // false will be returned if line have no length
    if (!result) {
      return [];
    }
    var positions = result.positions;
    var angles = result.angles;
    for (var i = 0; i < positions.length; i++) {
      var position = positions[i];
      var angle = angles[i];
      if (layout.tile_edges === true || !isCoordOutsideTile(position)) {
        labels.push(new LabelPoint(position, size, layout, angle));
      }
    }
  } else if (strategy === PLACEMENT$1.VERTEX) {
    var p, q;
    for (var _i = 0; _i < line.length - 1; _i++) {
      p = line[_i];
      q = line[_i + 1];
      if (layout.tile_edges === true || !isCoordOutsideTile(p)) {
        var _angle = getAngle(p, q, layout.angle);
        labels.push(new LabelPoint(p, size, layout, _angle));
      }
    }

    // add last endpoint
    var _angle2 = getAngle(p, q, layout.angle);
    labels.push(new LabelPoint(q, size, layout, _angle2));
  } else if (strategy === PLACEMENT$1.MIDPOINT) {
    for (var _i2 = 0; _i2 < line.length - 1; _i2++) {
      var _p = line[_i2];
      var _q = line[_i2 + 1];
      var _position = [0.5 * (_p[0] + _q[0]), 0.5 * (_p[1] + _q[1])];
      if (layout.tile_edges === true || !isCoordOutsideTile(_position)) {
        if (!min_length || norm(_p, _q) > min_length) {
          var _angle3 = getAngle(_p, _q, layout.angle);
          labels.push(new LabelPoint(_position, size, layout, _angle3));
        }
      }
    }
  }
  return labels;
}
function getPositionsAndAngles(line, min_length, layout) {
  var upp = layout.units_per_pixel;
  var spacing = (layout.placement_spacing || default_spacing) * upp;
  var length = getLineLength(line);
  if (length <= min_length) {
    return false;
  }
  var num_labels = Math.max(Math.floor(length / spacing), 1);
  var remainder = length - (num_labels - 1) * spacing;
  var positions = [];
  var angles = [];
  var distance = 0.5 * remainder;
  for (var i = 0; i < num_labels; i++) {
    var _interpolateLine = interpolateLine(line, distance, min_length, layout),
      position = _interpolateLine.position,
      angle = _interpolateLine.angle;
    if (position != null && angle != null) {
      positions.push(position);
      angles.push(angle);
    }
    distance += spacing;
  }
  return {
    positions: positions,
    angles: angles
  };
}
function getAngle(p, q) {
  var angle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  return angle === 'auto' ? Math.atan2(q[0] - p[0], q[1] - p[1]) : angle;
}
function getLineLength(line) {
  var distance = 0;
  for (var i = 0; i < line.length - 1; i++) {
    distance += norm(line[i], line[i + 1]);
  }
  return distance;
}
function norm(p, q) {
  return Math.sqrt(Math.pow(p[0] - q[0], 2) + Math.pow(p[1] - q[1], 2));
}

// TODO: can be optimized.
// you don't have to start from the first index every time for placement
function interpolateLine(line, distance, min_length, layout) {
  var sum = 0;
  var position, angle;
  for (var i = 0; i < line.length - 1; i++) {
    var p = line[i];
    var q = line[i + 1];
    var length = norm(p, q);
    if (length <= min_length) {
      continue;
    }
    sum += length;
    if (sum > distance) {
      position = interpolateSegment(p, q, sum - distance);
      angle = getAngle(p, q, layout.angle);
      break;
    }
  }
  return {
    position: position,
    angle: angle
  };
}
function interpolateSegment(p, q, distance) {
  var length = norm(p, q);
  var ratio = distance / length;
  return [ratio * p[0] + (1 - ratio) * q[0], ratio * p[1] + (1 - ratio) * q[1]];
}

var TextSettings = {
  // A key for grouping all labels of the same text style (e.g. same Canvas state, to minimize state changes)
  key: function key(settings) {
    return [settings.style, settings.weight, settings.family, settings.px_size, settings.fill, settings.stroke, settings.stroke_width, settings.underline_width, settings.background_color, settings.background_width, settings.background_stroke_color, settings.background_stroke_width, settings.transform, settings.text_wrap, settings.max_lines, settings.supersample, Utils.device_pixel_ratio].join('/');
  },
  defaults: {
    style: 'normal',
    weight: 'normal',
    size: '12px',
    px_size: 12,
    family: 'Helvetica',
    fill: [1, 1, 1, 1],
    text_wrap: 15,
    max_lines: 5,
    align: 'center'
  },
  compute: function compute(draw, context) {
    var style = {};
    draw.font = draw.font || this.defaults;
    style.supersample = draw.supersample_text ? 1.5 : 1; // optionally render text at 150% to improve clarity

    // LineString labels can articulate while point labels cannot. Needed for future texture coordinate calculations.
    style.can_articulate = draw.can_articulate;

    // Text fill
    style.fill = StyleParser.evalCachedColorPropertyWithAlpha(draw.font.fill, draw.font.alpha, context);
    style.fill = Utils.toCSSColor(style.fill); // convert to CSS for Canvas

    // Text stroke
    if (draw.font.stroke && draw.font.stroke.color) {
      style.stroke = StyleParser.evalCachedColorPropertyWithAlpha(draw.font.stroke.color, draw.font.stroke.alpha, context);
      style.stroke = Utils.toCSSColor(style.stroke); // convert to CSS for Canvas
      style.stroke_width = StyleParser.evalCachedProperty(draw.font.stroke.width, context);
    }

    // Text underline
    if (draw.font.underline === true && !style.can_articulate) {
      style.underline_width = 1.5 * style.supersample;
    }

    // Background box
    if (draw.font.background && !style.can_articulate) {
      // supported for point labels only
      // Background fill
      style.background_color = StyleParser.evalCachedColorPropertyWithAlpha(draw.font.background.color, draw.font.background.alpha, context);
      style.background_color = Utils.toCSSColor(style.background_color); // convert to CSS for Canvas
      if (style.background_color) {
        style.background_width = StyleParser.evalCachedProperty(draw.font.background.width, context);
      }

      // Background stroke
      style.background_stroke_color = draw.font.background.stroke && draw.font.background.stroke.color && StyleParser.evalCachedColorPropertyWithAlpha(draw.font.background.stroke.color, draw.font.background.stroke.alpha, context);
      if (style.background_stroke_color) {
        style.background_stroke_color = Utils.toCSSColor(style.background_stroke_color); // convert to CSS for Canvas

        // default background stroke to 1px when stroke color but no stroke width specified
        style.background_stroke_width = draw.font.background.stroke.width != null ? StyleParser.evalCachedProperty(draw.font.background.stroke.width, context) : 1;
      }
    }

    // Font properties are modeled after CSS names:
    // - family: Helvetica, Futura, etc.
    // - size: in pt, px, or em
    // - style: normal, italic, oblique
    // - weight: normal, bold, etc.
    // - transform: capitalize, uppercase, lowercase

    // clamp weight to 1-1000 (see https://drafts.csswg.org/css-fonts-4/#valdef-font-weight-number)
    style.weight = StyleParser.evalCachedProperty(draw.font.weight, context) || this.defaults.weight;
    if (typeof style.weight === 'number') {
      style.weight = Math.min(Math.max(style.weight, 1), 1000);
    }
    if (draw.font.family) {
      style.family = draw.font.family;
      if (style.family !== this.defaults.family) {
        style.family += ', ' + this.defaults.family;
      }
    } else {
      style.family = this.defaults.family;
    }
    style.style = draw.font.style || this.defaults.style;
    style.transform = draw.font.transform;

    // calculated pixel size
    style.px_size = StyleParser.evalCachedProperty(draw.font.px_size, context) * style.supersample;
    style.font_css = this.fontCSS(style);

    // Word wrap and text alignment
    // Not a font properties, but affect atlas of unique text textures
    var text_wrap = draw.text_wrap; // use explicitly set value

    if (text_wrap == null && !style.can_articulate) {
      // point labels (for point and polygon features) have word wrap on w/default max length,
      // line labels default off
      text_wrap = true;
    }

    // setting to 'true' causes default wrap value to be used
    if (text_wrap === true) {
      text_wrap = this.defaults.text_wrap;
    }
    style.text_wrap = text_wrap;

    // max_lines setting to truncate very long labels with an ellipsis
    style.max_lines = draw.max_lines || this.defaults.max_lines;
    return style;
  },
  // Build CSS-style font string (to set Canvas draw state)
  fontCSS: function fontCSS(_ref) {
    var style = _ref.style,
      weight = _ref.weight,
      px_size = _ref.px_size,
      family = _ref.family;
    return [style, weight, px_size + 'px', family].filter(function (x) {
      return x;
    }) // remove null props
    .join(' ');
  }
};

var fontfaceobserver_standalone = {exports: {}};

var hasRequiredFontfaceobserver_standalone;

function requireFontfaceobserver_standalone () {
	if (hasRequiredFontfaceobserver_standalone) return fontfaceobserver_standalone.exports;
	hasRequiredFontfaceobserver_standalone = 1;
	(function (module) {
		(function(){function m(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b);}function n(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a();}):document.attachEvent("onreadystatechange",function l(){if("interactive"==document.readyState||"complete"==document.readyState)document.detachEvent("onreadystatechange",l),a();});}function t(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
		this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c);}
		function x(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;left:-999px;white-space:nowrap;font:"+b+";";}function y(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b,!0):!1}function z(a,b){function c(){var a=l;y(a)&&a.a.parentNode&&b(a.g);}var l=a;m(a.b,c);m(a.c,c);y(a);}function A(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal";}var B=null,C=null,E=null,F=null;function I(){if(null===E){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif";}catch(b){}E=""!==a.style.font;}return E}function J(a,b){return [a.style,a.weight,I()?a.stretch:"","100px",b].join(" ")}
		A.prototype.load=function(a,b){var c=this,l=a||"BESbswy",r=0,D=b||3E3,G=(new Date).getTime();return new Promise(function(a,b){var e;null===F&&(F=!!document.fonts);if(e=F)null===C&&(C=/OS X.*Version\/10\..*Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),e=!C;if(e){e=new Promise(function(a,b){function f(){(new Date).getTime()-G>=D?b():document.fonts.load(J(c,'"'+c.family+'"'),l).then(function(c){1<=c.length?a():setTimeout(f,25);},function(){b();});}f();});var K=new Promise(function(a,
		c){r=setTimeout(c,D);});Promise.race([K,e]).then(function(){clearTimeout(r);a(c);},function(){b(c);});}else n(function(){function e(){var b;if(b=-1!=g&&-1!=h||-1!=g&&-1!=k||-1!=h&&-1!=k)(b=g!=h&&g!=k&&h!=k)||(null===B&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),B=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))),b=B&&(g==u&&h==u&&k==u||g==v&&h==v&&k==v||g==w&&h==w&&k==w)),b=!b;b&&(d.parentNode&&d.parentNode.removeChild(d),clearTimeout(r),a(c));}
		function H(){if((new Date).getTime()-G>=D)d.parentNode&&d.parentNode.removeChild(d),b(c);else {var a=document.hidden;if(!0===a||void 0===a)g=f.a.offsetWidth,h=p.a.offsetWidth,k=q.a.offsetWidth,e();r=setTimeout(H,50);}}var f=new t(l),p=new t(l),q=new t(l),g=-1,h=-1,k=-1,u=-1,v=-1,w=-1,d=document.createElement("div");d.dir="ltr";x(f,J(c,"sans-serif"));x(p,J(c,"serif"));x(q,J(c,"monospace"));d.appendChild(f.a);d.appendChild(p.a);d.appendChild(q.a);document.body.appendChild(d);u=f.a.offsetWidth;v=p.a.offsetWidth;
		w=q.a.offsetWidth;H();z(f,function(a){g=a;e();});x(f,J(c,'"'+c.family+'",sans-serif'));z(p,function(a){h=a;e();});x(p,J(c,'"'+c.family+'",serif'));z(q,function(a){k=a;e();});x(q,J(c,'"'+c.family+'",monospace'));});})};module.exports=A;}()); 
	} (fontfaceobserver_standalone));
	return fontfaceobserver_standalone.exports;
}

var fontfaceobserver_standaloneExports = requireFontfaceobserver_standalone();
var FontFaceObserver = /*@__PURE__*/getDefaultExportFromCjs(fontfaceobserver_standaloneExports);

var FontManager = {
  // Font detection
  fonts_loaded: Promise.resolve(),
  // resolves when all requested fonts have been detected
  last_loaded: null,
  // tracks last set of fonts loaded
  // Load set of custom font faces
  // `fonts` is an object where the key is a font family name, and the value is one or more font face
  // definitions. The value can be either a single object, or an array of such objects.
  // If the special string value 'external' is used, it indicates the the font will be loaded via external CSS.
  loadFonts: function loadFonts(fonts) {
    var _this = this;
    var same = JSON.stringify(fonts) === this.last_loaded;
    if (fonts && !same) {
      var queue = [];
      var _loop = function _loop(family) {
        if (Array.isArray(fonts[family])) {
          fonts[family].forEach(function (face) {
            return queue.push(_this.loadFontFace(family, face));
          });
        } else {
          queue.push(_this.loadFontFace(family, fonts[family]));
        }
      };
      for (var family in fonts) {
        _loop(family);
      }
      this.last_loaded = JSON.stringify(fonts);
      this.fonts_loaded = Promise.all(queue.filter(function (x) {
        return x;
      }));
    }
    return this.fonts_loaded;
  },
  // Load a single font face
  // `face` contains the font face definition, with optional parameters for `weight`, `style`, and `url`.
  // If the `url` is defined, the font is injected into the document as a CSS font-face.
  // If the object's value is the special string 'external', or if no `url` is defined, then the font face
  // is assumed is assumed to been loaded via external CSS. In either case, the function returns a promise
  // that resolves when the font face has loaded, or times out.
  loadFontFace: function loadFontFace(family, face) {
    return new Promise(function ($return, $error) {
      var options, observer;
      if (face == null || _typeof(face) !== 'object' && face !== 'external') {
        return $return();
      }
      options = {
        family: family
      };
      if (_typeof(face) === 'object') {
        Object.assign(options, face);

        // If URL is defined, inject font into document
        if (typeof face.url === 'string') {
          return Promise.resolve(this.injectFontFace(options)).then(function ($await_5) {
            try {
              return $If_3.call(this);
            } catch ($boundEx) {
              return $error($boundEx);
            }
          }.bind(this), $error);
        }
        function $If_3() {
          return $If_2.call(this);
        }
        return $If_3.call(this);
      }

      // Wait for font to load
      function $If_2() {
        var $Try_1_Post = function () {
          try {
            return $return();
          } catch ($boundEx) {
            return $error($boundEx);
          }
        };
        var $Try_1_Catch = function (e) {
          try {
            // Promise rejects, font is not available
            log('warn', "Font face '".concat(family, "' is NOT available"), options, e);
            return $Try_1_Post();
          } catch ($boundEx) {
            return $error($boundEx);
          }
        };
        try {
          // FontFaceObserver does not directly support variable fonts syntax, which allows for ranges,
          // e.g. `font-weight: 100 800`. FontFaceObserver will insert the entire string value into a
          // CSS `font` shorthand property, causing an error. To get around this, we simply take the first
          // value, because as soon as one variant of the variable font is available, they all should be.
          // See https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide
          options.weight = typeof options.weight === 'string' ? options.weight.split(' ')[0] : options.weight;
          observer = new FontFaceObserver(family, options);
          return Promise.resolve(observer.load()).then(function ($await_6) {
            try {
              // Promise resolves, font is available
              log('debug', "Font face '".concat(family, "' is available"), options);
              return $Try_1_Post();
            } catch ($boundEx) {
              return $Try_1_Catch($boundEx);
            }
          }, $Try_1_Catch);
        } catch (e) {
          $Try_1_Catch(e);
        }
      }
      return $If_2.call(this);
    }.bind(this));
  },
  // Loads a font face via either the native FontFace API, or CSS injection
  // TODO: consider support for multiple format URLs per face, unicode ranges
  injectFontFace: function injectFontFace(_ref) {
    return new Promise(function ($return, $error) {
      var family, url, weight, style, data, bytes, str, i, face, css, style_el;
      family = _ref.family, url = _ref.url, weight = _ref.weight, style = _ref.style;
      if (this.supports_native_font_loading === undefined) {
        this.supports_native_font_loading = window.FontFace !== undefined;
      }

      // Convert blob URLs, depending on whether the native FontFace API will be used or not.
      //
      // When the FontFace API *is* supported, the blob URL is read into a raw data array.
      // NB: it's inefficient to be converting blob URLs into typed arrays here, since they originated
      // as raw data *before* they were converted into blob URLs. However, this process should be fast since
      // these are native browser functions and all data is local (no network request), and it keeps the
      // logic streamlined by allowing us to continue to use a URL-based interface for all scene resources.
      //
      // When the FontFace API is *not* supported, the blob URL data is converted to a base64 data URL.
      // This avoids security restricions in some browsers.
      // Also see https://github.com/bramstein/fontloader/blob/598e9399117bdc946ff786fa2c5007a6bd7d3b9e/src/fontface.js#L145-L153
      data = url;
      if (url.slice(0, 5) === 'blob:') {
        return Promise.resolve(Utils.io(url, 60000, 'arraybuffer')).then(function ($await_7) {
          try {
            data = $await_7.body;
            bytes = new Uint8Array(data);
            if (this.supports_native_font_loading) {
              data = bytes; // use raw binary data
            } else {
              str = '';
              for (i = 0; i < bytes.length; i++) {
                str += String.fromCharCode(bytes[i]);
              }
              data = 'data:font/opentype;base64,' + btoa(str); // base64 encode as data URL
            }
            return $If_4.call(this);
          } catch ($boundEx) {
            return $error($boundEx);
          }
        }.bind(this), $error);
      }
      function $If_4() {
        if (this.supports_native_font_loading) {
          if (typeof data === 'string') {
            // add as URL
            face = new FontFace(family, "url(".concat(encodeURI(data), ")"), {
              weight: weight,
              style: style
            });
          } else if (data instanceof Uint8Array) {
            // add as binary data
            face = new FontFace(family, data, {
              weight: weight,
              style: style
            });
          }
          document.fonts.add(face);
          log('trace', 'Adding FontFace to document.fonts:', face);
        } else {
          css = "\n                @font-face {\n                    font-family: '".concat(family, "';\n                    font-weight: ").concat(weight || 'normal', ";\n                    font-style: ").concat(style || 'normal', ";\n                    src: url(").concat(encodeURI(data), ");\n                }");
          style_el = document.createElement('style');
          style_el.appendChild(document.createTextNode(''));
          document.head.appendChild(style_el);
          style_el.sheet.insertRule(css, 0);
          log('trace', 'Injecting CSS font face:', css);
        }
        return $return();
      }
      return $If_4.call(this);
    }.bind(this));
  }
};

// Text directionality (right-to-left, bi-directional) and segmentation (curved labels, Arabic handling)

// Right-to-left / bi-directional text handling
// Taken from http://stackoverflow.com/questions/12006095/javascript-how-to-check-if-character-is-rtl
var rtl_test = new RegExp("[\u0591-\u07FF\u200F\u202B\u202E\uFB1D-\uFDFD\uFE70-\uFEFC]");
function isTextRTL(s) {
  return rtl_test.test(s);
}
var neutral_chars = "\0-/:-@[-`{-\xBF\xD7\xF7\u02B9-\u02FF\u2000-\u2BFF\u2010-\u2029\u202C\u202F-\u2BFF";
var neutral_test = new RegExp('[' + neutral_chars + ']+');
function isTextNeutral(s) {
  return neutral_test.test(s);
}
var RTL_MARKER = "\u200F"; // explicit right-to-left marker

// Arabic script ranges
// test http://localhost:8000/#16.72917/30.08541/31.28466
var arabic_range = new RegExp('^[' + neutral_chars + "\u0600-\u06FF]+"); // all characters are Arabic or neutral
var arabic_splitters = new RegExp('[' + neutral_chars + "\u0622-\u0625\u0627\u062F-\u0632\u0648\u0671-\u0677\u0688-\u0699\u06C4-\u06CB\u06CF\u06D2\u06D3\u06EE\u06EF]");
var arabic_vowels = new RegExp("^[\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED]+");

// Complex script ranges (non-Arabic)
var accents_and_vowels = "[\u0300-\u036F" +
// Combining Diacritical Marks
"\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7" +
// Hebrew
"\u07A6-\u07B0" +
// Thaana
"\u0900-\u0903\u093A-\u094C\u094E\u094F\u0951-\u0957\u0962\u0963" +
// Devanagari
"\u0981-\u0983\u09BC\u09BE-\u09CC\u09D7\u09E2\u09E3" +
// Bengali
"\u0A01-\u0A03\u0A3C-\u0A4C\u0A51" +
// Gurmukhi
"\u0A81-\u0A83\u0ABC\u0ABE-\u0ACC\u0AE2\u0AE3" +
// Gujarati
"\u0B01-\u0B03\u0B3C\u0B3E-\u0B4C\u0B56\u0B57\u0B62\u0B63" +
// Oriya
"\u0B82\u0BBE-\u0BCD\u0BD7" +
// Tamil
"\u0C00-\u0C03\u0C3E-\u0C4C\u0C55\u0C56\u0C62\u0C63" +
// Telugu
"\u0C81-\u0C83\u0CBC\u0CBE-\u0CCC\u0CD5\u0CD6\u0CE2\u0CE3" +
// Kannada
"\u0D01-\u0D03\u0D3E-\u0D4C\u0D4E\u0D57\u0D62\u0D63" +
// Malayalam
"\u0D82\u0D83\u0DCA-\u0DDF\u0DF2\u0DF3" +
// Sinhala
"\u0E31\u0E34-\u0E3A\u0E47-\u0E4E" +
// Thai
"\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD" +
// Lao
"\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F83\u0F86\u0F87\u0F8D-\u0FBC\u0FC6" +
// Tibetan
"\u102B-\u1038\u103A-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D" +
// Burmese
"\u17B4-\u17D1\u17D3" +
// Khmer
"\u1A55-\u1A5E\u1A61-\u1A7C" +
// Tai Tham
"\u1DC0-\u1DFF" +
// Combining Diacritical Marks Supplement
"\u20D0-\u20FF" +
// Combining Diacritical Marks for Symbols
']';
var combo_characters = "[\u094D\u09CD\u0A4D\u0ACD\u0B4D\u0C4D\u0CCD\u0D4D\u0F84\u1039\u17D2\u1A60\u1A7F]";

// Find the next grapheme cluster (non-Arabic)
var grapheme_match = new RegExp("^.(?:".concat(accents_and_vowels, "+)?(").concat(combo_characters, "\\W(?:").concat(accents_and_vowels, "+)?)*")); // eslint-disable-line no-misleading-character-class

// Scripts that cannot be curved due (due to contextual shaping and/or layout complexity)
var curve_blacklist = {
  Mongolian: "\u1800-\u18AF"
};
var curve_blacklist_range = Object.keys(curve_blacklist).map(function (r) {
  return curve_blacklist[r];
}).join('');
var curve_blacklist_test = new RegExp('[' + curve_blacklist_range + ']');
function isTextCurveBlacklisted(s) {
  return curve_blacklist_test.test(s);
}

// Splitting strategy for chopping a label into segments
var default_segment_length = 2; // character length of each segment when dividing up label text

function splitLabelText(text, rtl, cache) {
  // Use single-character segments for RTL, to avoid additional handling for neutral characters
  // (see https://github.com/tangrams/tangram/issues/541)
  var segment_length = rtl ? 1 : default_segment_length;

  // Only one segment
  if (text.length < segment_length) {
    return [text];
  }

  // Check segment cache first (skips processing for labels we've seen before)
  var key = text;
  if (cache.segment[key]) {
    cache.stats.segment_hits++;
    return cache.segment[key];
  }
  var segments = [];

  // Arabic-specific text handling
  // NB: works for strings that are *only* Arabic; mixed-script labels may need more work
  if (arabic_range.exec(text)) {
    segments = text.split(arabic_splitters);
    var offset = -1;
    for (var s = 0; s < segments.length - 1; s++) {
      if (s > 0) {
        var carryover_vowels = arabic_vowels.exec(segments[s]);
        if (carryover_vowels) {
          segments[s] = segments[s].substring(carryover_vowels[0].length);
          segments[s - 1] += carryover_vowels[0];
          offset += carryover_vowels[0].length;
        }
      }
      offset += 1 + segments[s].length;
      segments[s] += text.slice(offset, offset + 1);
    }
    text = ''; // will skip non-Arabic handling below
  }

  // Non-Arabic text handling
  while (text.length) {
    var segment = '';
    var test_text = text;
    var grapheme_count = 0;
    for (grapheme_count; grapheme_count < segment_length && test_text.length; grapheme_count++) {
      var grapheme_cluster = (grapheme_match.exec(test_text) || test_text)[0];
      segment += grapheme_cluster;
      test_text = test_text.substring(grapheme_cluster.length);
    }
    segments.push(segment);
    text = text.substring(segment.length);
  }

  // Reverse segments if needed
  if (rtl) {
    segments.reverse();
  }

  // Cache and return
  cache.stats.segment_misses++;
  cache.segment[key] = segments;
  return segments;
}

// Private class to arrange text labels into multiple lines based on
// "text wrap" and "max line" values
var MultiLine = /*#__PURE__*/function () {
  function MultiLine(context) {
    var max_lines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
    var text_wrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
    _classCallCheck(this, MultiLine);
    this.width = 0;
    this.height = 0;
    this.lines = [];
    this.max_lines = max_lines;
    this.text_wrap = text_wrap;
    this.context = context;
  }
  return _createClass(MultiLine, [{
    key: "createLine",
    value: function createLine(line_height) {
      if (this.lines.length < this.max_lines) {
        return new Line(line_height, this.text_wrap);
      } else {
        return false;
      }
    }
  }, {
    key: "push",
    value: function push(line) {
      if (this.lines.length < this.max_lines) {
        // measure line width
        var line_width = this.context.measureText(line.text).width;
        line.width = line_width;
        if (line_width > this.width) {
          this.width = Math.ceil(line_width);
        }

        // add to lines and increment height
        this.lines.push(line);
        this.height += line.height;
        return true;
      } else {
        this.addEllipsis();
        return false;
      }
    }

    // pushes to the lines array and returns a new line if possible (false otherwise)
  }, {
    key: "advance",
    value: function advance(line, line_height) {
      var can_push = this.push(line);
      if (can_push) {
        return this.createLine(line_height);
      } else {
        return false;
      }
    }
  }, {
    key: "addEllipsis",
    value: function addEllipsis() {
      var last_line = this.lines[this.lines.length - 1];
      var ellipsis_width = Math.ceil(this.context.measureText(MultiLine.ellipsis).width);
      last_line.append(MultiLine.ellipsis);
      last_line.width += ellipsis_width;
      if (last_line.width > this.width) {
        this.width = last_line.width;
      }
    }
  }, {
    key: "finish",
    value: function finish(line) {
      if (line) {
        this.push(line);
      } else {
        this.addEllipsis();
      }
    }
  }], [{
    key: "parse",
    value: function parse(str, text_wrap, max_lines, line_height, ctx) {
      // Word wrapping
      // Line breaks can be caused by:
      //  - implicit line break when a maximum character threshold is exceeded per line (text_wrap)
      //  - explicit line break in the label text (\n)
      var words;
      if (typeof text_wrap === 'number') {
        words = str.split(' '); // split words on spaces
      } else {
        words = [str]; // no max line word wrapping (but new lines will still be in effect)
      }
      var multiline = new MultiLine(ctx, max_lines, text_wrap);
      var line = multiline.createLine(line_height);

      // First iterate on space-break groups (will be one if max line length off), then iterate on line-break groups
      for (var i = 0; i < words.length; i++) {
        var breaks = words[i].split('\n'); // split on line breaks
        var new_line = i === 0 ? true : false;
        for (var n = 0; n < breaks.length; n++) {
          if (!line) {
            break;
          }
          var word = breaks[n];

          // force punctuation (neutral chars) at the end of a RTL line, so they stay attached to original word
          if (isTextRTL(word) && isTextNeutral(word[word.length - 1])) {
            word += RTL_MARKER;
          }
          var spaced_word = new_line ? word : ' ' + word;

          // if adding current word would overflow, add a new line instead
          // first word (i === 0) always appends
          if (text_wrap && i > 0 && line.exceedsTextwrap(spaced_word)) {
            line = multiline.advance(line, line_height);
            if (!line) {
              break;
            }
            line.append(word);
            new_line = true;
          } else {
            line.append(spaced_word);
          }

          // if line breaks present, add new line (unless on last line)
          if (n < breaks.length - 1) {
            line = multiline.advance(line, line_height);
            new_line = true;
          }
        }
        if (i === words.length - 1) {
          multiline.finish(line);
        }
      }
      return multiline;
    }
  }]);
}();
MultiLine.ellipsis = '...';

// A Private class used by MultiLine to contain the logic for a single line
// including character count, width, height and text
var Line = /*#__PURE__*/function () {
  function Line() {
    var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var text_wrap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    _classCallCheck(this, Line);
    this.chars = 0;
    this.text = '';
    this.height = Math.ceil(height);
    this.text_wrap = text_wrap;
  }
  return _createClass(Line, [{
    key: "append",
    value: function append(text) {
      this.chars += text.length;
      this.text += text;
    }
  }, {
    key: "exceedsTextwrap",
    value: function exceedsTextwrap(text) {
      return text.length + this.chars > this.text_wrap;
    }
  }]);
}();

function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var TextCanvas = /*#__PURE__*/function () {
  function TextCanvas() {
    _classCallCheck(this, TextCanvas);
    this.createCanvas(); // create initial canvas and context
    this.vertical_text_buffer = 8; // vertical pixel padding around text
    this.horizontal_text_buffer = 4; // text styling such as italic emphasis is not measured by the Canvas API, so padding is necessary
    this.background_size = 4; // padding around label for optional background box (TODO: make configurable?)
  }
  return _createClass(TextCanvas, [{
    key: "createCanvas",
    value: function createCanvas() {
      this.canvas = document.createElement('canvas');
      this.canvas.style.backgroundColor = 'transparent'; // render text on transparent background
      this.context = this.canvas.getContext('2d');
    }
  }, {
    key: "resize",
    value: function resize(width, height) {
      this.canvas.width = width;
      this.canvas.height = height;
      this.context.clearRect(0, 0, width, height);
    }

    // Set font style params for canvas drawing
  }, {
    key: "setFont",
    value: function setFont(_ref) {
      var font_css = _ref.font_css,
        fill = _ref.fill,
        stroke = _ref.stroke,
        stroke_width = _ref.stroke_width,
        px_size = _ref.px_size,
        supersample = _ref.supersample;
      this.px_size = px_size;
      var ctx = this.context;
      var dpr = Utils.device_pixel_ratio * supersample;
      if (stroke && stroke_width > 0) {
        ctx.strokeStyle = stroke;
        ctx.lineWidth = stroke_width * dpr;
      }
      ctx.fillStyle = fill;
      ctx.font = font_css;
      ctx.miterLimit = 2;
    }
  }, {
    key: "textSizes",
    value: function textSizes(tile_id, texts) {
      return new Promise(function ($return, $error) {
        return Promise.resolve(FontManager.loadFonts()).then(function ($await_1) {
          try {
            return $return(Task.add({
              type: 'textSizes',
              run: this.processTextSizesTask.bind(this),
              texts: texts,
              tile_id: tile_id,
              cursor: {
                styles: Object.keys(texts),
                texts: null,
                style_idx: null,
                text_idx: null
              }
            }));
          } catch ($boundEx) {
            return $error($boundEx);
          }
        }.bind(this), $error);
      }.bind(this));
    }
  }, {
    key: "processTextSizesTask",
    value: function processTextSizesTask(task) {
      var cursor = task.cursor,
        texts = task.texts;
      cursor.style_idx = cursor.style_idx || 0;
      while (cursor.style_idx < cursor.styles.length) {
        var style = cursor.styles[cursor.style_idx];
        if (cursor.text_idx == null) {
          cursor.text_idx = 0;
          cursor.texts = Object.keys(texts[style]);
        }
        var text_infos = texts[style];
        var first = true;
        while (cursor.text_idx < cursor.texts.length) {
          var text = cursor.texts[cursor.text_idx];
          var text_info = text_infos[text];
          var text_settings = text_info.text_settings;
          if (first) {
            this.setFont(text_settings);
            first = false;
          }

          // add size of full text string
          text_info.size = this.textSize(style, text, text_settings).size;

          // if text may curve, calculate per-segment as well
          if (text_settings.can_articulate) {
            var rtl = false;
            var bidi = false;
            if (isTextRTL(text)) {
              if (!isTextNeutral(text)) {
                bidi = true;
              } else {
                rtl = true;
              }
            }
            text_info.isRTL = rtl;
            text_info.no_curving = bidi || isTextCurveBlacklisted(text); // used in LabelLine to prevent curved labels
            text_info.vertical_buffer = this.vertical_text_buffer;
            text_info.segment_sizes = [];
            if (!text_info.no_curving) {
              var segments = splitLabelText(text, rtl, TextCanvas.cache);
              text_info.segments = segments;
              for (var i = 0; i < segments.length; i++) {
                text_info.segment_sizes.push(this.textSize(style, segments[i], text_settings).size);
              }
            }
          }
          cursor.text_idx++;
          if (!Task.shouldContinue(task)) {
            return false;
          }
        }
        cursor.text_idx = null;
        cursor.style_idx++;
      }
      Task.finish(task, texts);
      return true;
    }

    // Computes width and height of text based on current font style
    // Includes word wrapping, returns size info for whole text block and individual lines
  }, {
    key: "textSize",
    value: function textSize(style, text, _ref2) {
      var transform = _ref2.transform,
        text_wrap = _ref2.text_wrap,
        max_lines = _ref2.max_lines,
        _ref2$stroke_width = _ref2.stroke_width,
        stroke_width = _ref2$stroke_width === void 0 ? 0 : _ref2$stroke_width,
        background_color = _ref2.background_color,
        _ref2$background_stro = _ref2.background_stroke_width,
        background_stroke_width = _ref2$background_stro === void 0 ? 0 : _ref2$background_stro,
        background_width = _ref2.background_width,
        _ref2$underline_width = _ref2.underline_width,
        underline_width = _ref2$underline_width === void 0 ? 0 : _ref2$underline_width,
        supersample = _ref2.supersample;
      // Check cache first
      TextCanvas.cache.text[style] = TextCanvas.cache.text[style] || {};
      if (TextCanvas.cache.text[style][text]) {
        TextCanvas.cache.stats.text_hits++;
        return TextCanvas.cache.text[style][text];
      }
      TextCanvas.cache.stats.text_misses++;
      TextCanvas.cache.text_count++;

      // Calc and store in cache
      var dpr = Utils.device_pixel_ratio * supersample;
      var str = this.applyTextTransform(text, transform);
      var ctx = this.context;
      var vertical_buffer = this.vertical_text_buffer * dpr;
      var horizontal_buffer = (stroke_width + this.horizontal_text_buffer) * dpr;
      background_width = background_width != null ? background_width : this.background_size; // apply default background width
      var background_size = background_color || background_stroke_width ? (background_width + background_stroke_width) * dpr : 0;
      var leading = (2 + underline_width + (underline_width ? stroke_width + 1 : 0)) * dpr; // adjust for underline and text stroke
      var line_height = this.px_size + leading; // px_size already in device pixels

      // Parse string into series of lines if it exceeds the text wrapping value or contains line breaks
      // const multiline = MultiLine.parse(str, text_wrap, max_lines, line_height, ctx);
      var _MultiLine$parse = MultiLine.parse(str, text_wrap, max_lines, line_height, ctx),
        width = _MultiLine$parse.width,
        height = _MultiLine$parse.height,
        lines = _MultiLine$parse.lines;
      width += background_size * 2;
      height += background_size * 2;
      var collision_size = [width / dpr, height / dpr];
      var texture_size = [width + 2 * horizontal_buffer, height + 2 * vertical_buffer];
      var logical_size = [texture_size[0] / dpr, texture_size[1] / dpr];

      // Returns lines (w/per-line info for drawing) and text's overall bounding box + canvas size
      TextCanvas.cache.text[style][text] = {
        lines: lines,
        size: {
          collision_size: collision_size,
          texture_size: texture_size,
          logical_size: logical_size,
          horizontal_buffer: horizontal_buffer,
          vertical_buffer: vertical_buffer,
          dpr: dpr,
          line_height: line_height,
          background_size: background_size
        }
      };
      return TextCanvas.cache.text[style][text];
    }

    // Draw multiple lines of text
  }, {
    key: "drawTextMultiLine",
    value: function drawTextMultiLine(lines, _ref3, size, text_settings, label_type) {
      var _ref4 = _slicedToArray(_ref3, 2),
        x = _ref4[0],
        y = _ref4[1];
      var dpr = size.dpr,
        collision_size = size.collision_size,
        texture_size = size.texture_size,
        line_height = size.line_height,
        horizontal_buffer = size.horizontal_buffer,
        vertical_buffer = size.vertical_buffer;

      // draw optional background box
      if (text_settings.background_color || text_settings.background_stroke_color) {
        var background_stroke_color = text_settings.background_stroke_color;
        var background_stroke_width = (text_settings.background_stroke_width || 0) * dpr;
        this.context.save();
        if (text_settings.background_color) {
          this.context.fillStyle = text_settings.background_color;
          this.context.fillRect(
          // shift to "foreground" stroke texture for curved labels (separate stroke and fill textures)
          x + horizontal_buffer + (label_type === 'curved' ? texture_size[0] : 0) + background_stroke_width, y + vertical_buffer + background_stroke_width, dpr * collision_size[0] - background_stroke_width * 2, dpr * collision_size[1] - background_stroke_width * 2);
        }

        // optional stroke around background box
        if (background_stroke_color && background_stroke_width) {
          this.context.strokeStyle = background_stroke_color;
          this.context.lineWidth = background_stroke_width;
          this.context.strokeRect(
          // shift to "foreground" stroke texture for curved labels (separate stroke and fill textures)
          x + horizontal_buffer + (label_type === 'curved' ? texture_size[0] : 0) + background_stroke_width * 0.5, y + vertical_buffer + background_stroke_width * 0.5, dpr * collision_size[0] - background_stroke_width, dpr * collision_size[1] - background_stroke_width);
        }
        this.context.restore();
      }

      // draw text
      var underline_width = text_settings.underline_width || 0;
      var stroke_width = text_settings.stroke_width || 0;
      var voffset = underline_width ?
      // offset text position to account for underline and text stroke
      (underline_width + stroke_width + 1) * 0.5 * dpr : 0;
      var ty = y - voffset;
      for (var line_num = 0; line_num < lines.length; line_num++) {
        var line = lines[line_num];
        this.drawTextLine(line, [x, ty], size, text_settings, label_type);
        ty += line_height;
      }
      this.drawTextDebug([x, y], size, label_type);
    }

    // Draw single line of text at specified location, adjusting for buffer and baseline
  }, {
    key: "drawTextLine",
    value: function drawTextLine(line, _ref5, size, text_settings, type) {
      var _ref6 = _slicedToArray(_ref5, 2),
        x = _ref6[0],
        y = _ref6[1];
      var stroke = text_settings.stroke,
        stroke_width = text_settings.stroke_width,
        transform = text_settings.transform,
        _text_settings$align = text_settings.align,
        align = _text_settings$align === void 0 ? 'center' : _text_settings$align;
      var horizontal_buffer = size.horizontal_buffer,
        vertical_buffer = size.vertical_buffer,
        texture_size = size.texture_size,
        background_size = size.background_size,
        line_height = size.line_height,
        dpr = size.dpr;
      var underline_width = (text_settings.underline_width || 0) * dpr;
      var text = this.applyTextTransform(line.text, transform);

      // Text alignment
      var tx;
      if (align === 'left') {
        tx = x + horizontal_buffer + background_size;
      } else if (align === 'center') {
        tx = x + texture_size[0] / 2 - line.width / 2;
      } else if (align === 'right') {
        tx = x + texture_size[0] - line.width - horizontal_buffer - background_size;
      }

      // In the absence of better Canvas TextMetrics (not supported by browsers yet),
      // 0.75 buffer produces a better approximate vertical centering of text
      var ty = y + vertical_buffer * 0.75 + line_height + background_size - underline_width * 0.5;

      // Draw stroke and fill separately for curved text. Offset stroke in texture atlas by shift.
      var shift = stroke && stroke_width > 0 && type === 'curved' ? texture_size[0] : 0;

      // optional text underline
      if (underline_width) {
        this.context.save();
        this.context.strokeStyle = this.context.fillStyle;
        this.context.lineWidth = underline_width;

        // adjust the underline to account for the text stroke
        var uy = ty + (stroke_width * 0.5 + 2) * dpr + this.context.lineWidth * 0.5;
        this.context.beginPath();
        this.context.moveTo(tx + shift, uy);
        this.context.lineTo(tx + shift + line.width, uy);
        this.context.stroke();
        this.context.restore();
      }
      if (stroke && stroke_width > 0) {
        this.context.strokeText(text, tx + shift, ty);
      }
      this.context.fillText(text, tx, ty);
    }

    // Draw optional text debug boxes
  }, {
    key: "drawTextDebug",
    value: function drawTextDebug(_ref7, size, label_type) {
      var _ref8 = _slicedToArray(_ref7, 2),
        x = _ref8[0],
        y = _ref8[1];
      var dpr = size.dpr,
        horizontal_buffer = size.horizontal_buffer,
        vertical_buffer = size.vertical_buffer,
        texture_size = size.texture_size,
        collision_size = size.collision_size;
      var line_width = 2;
      if (debugSettings$1.draw_label_collision_boxes) {
        this.context.save();
        this.context.strokeStyle = 'blue';
        this.context.lineWidth = line_width;
        this.context.strokeRect(x + horizontal_buffer, y + vertical_buffer, dpr * collision_size[0], dpr * collision_size[1]);
        if (label_type === 'curved') {
          this.context.strokeRect(x + texture_size[0] + horizontal_buffer, y + vertical_buffer, dpr * collision_size[0], dpr * collision_size[1]);
        }
        this.context.restore();
      }
      if (debugSettings$1.draw_label_texture_boxes) {
        this.context.save();
        this.context.strokeStyle = 'green';
        this.context.lineWidth = line_width;
        // stroke is applied internally, so the outer border is the edge of the texture
        this.context.strokeRect(x + line_width, y + line_width, texture_size[0] - 2 * line_width, texture_size[1] - 2 * line_width);
        if (label_type === 'curved') {
          this.context.strokeRect(x + line_width + texture_size[0], y + line_width, texture_size[0] - 2 * line_width, texture_size[1] - 2 * line_width);
        }
        this.context.restore();
      }
    }
  }, {
    key: "rasterize",
    value: function rasterize(texts, textures, tile_id, texture_prefix, gl) {
      return Task.add({
        type: 'rasterizeLabels',
        run: this.processRasterizeTask.bind(this),
        cancel: this.cancelRasterizeTask.bind(this),
        pause_factor: 2,
        // pause 2 frames when task run past allowed time
        user_moving_view: false,
        // don't run task when user is moving view
        texts: texts,
        textures: textures,
        texture_prefix: texture_prefix,
        gl: gl,
        tile_id: tile_id,
        cursor: {
          styles: Object.keys(texts),
          texts: null,
          style_idx: 0,
          text_idx: null,
          texture_idx: 0,
          texture_resize: true,
          texture_names: []
        }
      });
    }
  }, {
    key: "processRasterizeTask",
    value: function processRasterizeTask(task) {
      var cursor = task.cursor,
        texts = task.texts,
        textures = task.textures;
      var texture;

      // Rasterize one texture at a time, so we only have to keep one canvas in memory (they can be large)
      while (cursor.texture_idx < task.textures.length) {
        texture = textures[cursor.texture_idx];
        if (cursor.texture_resize) {
          cursor.texture_resize = false;
          this.resize.apply(this, _toConsumableArray(texture.texture_size));
        }
        while (cursor.style_idx < cursor.styles.length) {
          var style = cursor.styles[cursor.style_idx];
          if (cursor.text_idx == null) {
            cursor.text_idx = 0;
            cursor.texts = Object.keys(texts[style]);
          }
          var text_infos = texts[style];
          var first = true;
          while (cursor.text_idx < cursor.texts.length) {
            var text = cursor.texts[cursor.text_idx];
            var text_info = text_infos[text];
            var text_settings = text_info.text_settings;

            // set font on first occurence of new font style
            if (first) {
              this.setFont(text_settings);
              first = false;
            }
            if (text_settings.can_articulate) {
              text_info.texcoords = text_info.texcoords || {};
              for (var t = 0; t < text_info.type.length; t++) {
                var type = text_info.type[t];
                if (type === 'straight') {
                  // Only render for current texture
                  if (text_info.textures[t] !== cursor.texture_idx) {
                    continue;
                  }
                  var word = text_info.isRTL ? text.split().reverse().join() : text;
                  var cache = texture.texcoord_cache[style][word];
                  var texcoord = void 0;
                  if (cache.texcoord) {
                    texcoord = cache.texcoord;
                  } else {
                    var texture_position = cache.texture_position;
                    var _this$textSize = this.textSize(style, word, text_settings),
                      size = _this$textSize.size,
                      lines = _this$textSize.lines;
                    this.drawTextMultiLine(lines, texture_position, size, text_settings, type);
                    texcoord = Texture.getTexcoordsForSprite(texture_position, size.texture_size, texture.texture_size);
                    cache.texcoord = texcoord;
                  }
                  text_info.texcoords[type] = {
                    texcoord: texcoord,
                    texture_id: cache.texture_id
                  };
                } else if (type === 'curved') {
                  var words = text_info.segments;
                  text_info.texcoords.curved = text_info.texcoords.curved || [];
                  text_info.texcoords_stroke = text_info.texcoords_stroke || [];
                  for (var w = 0; w < words.length; w++) {
                    // Only render for current texture
                    if (text_info.textures[t][w] !== cursor.texture_idx) {
                      continue;
                    }
                    var _word = words[w];
                    var _cache = texture.texcoord_cache[style][_word];
                    var _texcoord = void 0;
                    var texcoord_stroke = void 0;
                    if (_cache.texcoord) {
                      _texcoord = _cache.texcoord;
                      texcoord_stroke = _cache.texcoord_stroke;
                      text_info.texcoords_stroke.push(texcoord_stroke);
                    } else {
                      var _texture_position = _cache.texture_position;
                      var _this$textSize2 = this.textSize(style, _word, text_settings),
                        _size = _this$textSize2.size,
                        _lines = _this$textSize2.lines;
                      this.drawTextMultiLine(_lines, _texture_position, _size, text_settings, type);
                      _texcoord = Texture.getTexcoordsForSprite(_texture_position, _size.texture_size, texture.texture_size);
                      var texture_position_stroke = [_texture_position[0] + _size.texture_size[0], _texture_position[1]];
                      texcoord_stroke = Texture.getTexcoordsForSprite(texture_position_stroke, _size.texture_size, texture.texture_size);
                      _cache.texcoord = _texcoord;
                      _cache.texcoord_stroke = texcoord_stroke;

                      // NB: texture_id is the same between stroke and fill, so it's not duplicated here
                      text_info.texcoords_stroke.push(texcoord_stroke);
                    }
                    text_info.texcoords.curved.push({
                      texcoord: _texcoord,
                      texture_id: _cache.texture_id
                    });
                  }
                }
              }
            } else {
              var _lines2 = this.textSize(style, text, text_settings).lines;
              var aligned_text_settings = _objectSpread$3({}, text_settings);
              for (var align in text_info.align) {
                // Only render for current texture
                if (text_info.align[align].texture_id !== cursor.texture_idx) {
                  continue;
                }
                aligned_text_settings.align = align;
                this.drawTextMultiLine(_lines2, text_info.align[align].texture_position, text_info.size, aligned_text_settings);
                text_info.align[align].texcoords = Texture.getTexcoordsForSprite(text_info.align[align].texture_position, text_info.size.texture_size, texture.texture_size);
              }
            }
            cursor.text_idx++;
            if (!Task.shouldContinue(task)) {
              return false;
            }
          }
          cursor.text_idx = null;
          cursor.style_idx++;
        }

        // Create GL texture (canvas element will be reused for next texture)
        var tname = task.texture_prefix + cursor.texture_idx;
        Texture.create(task.gl, tname, {
          element: this.canvas,
          filtering: 'linear',
          UNPACK_PREMULTIPLY_ALPHA_WEBGL: true
        });
        Texture.retain(tname);
        cursor.texture_names.push(tname);
        cursor.texture_idx++;
        cursor.texture_resize = true;
        cursor.style_idx = 0;
      }
      Task.finish(task, cursor.texture_names);
      return true;
    }

    // Free any textures that have been allocated part-way through label rasterization for a tile
  }, {
    key: "cancelRasterizeTask",
    value: function cancelRasterizeTask(task) {
      log('trace', "RasterizeTask: release textures [".concat(task.cursor.texture_names.join(', '), "]"));
      task.cursor.texture_names.forEach(function (t) {
        return Texture.release(t);
      });
    }

    // Place text labels within an atlas of the given max size
  }, {
    key: "setTextureTextPositions",
    value: function setTextureTextPositions(texts, max_texture_size) {
      var texture = {
          cx: 0,
          cy: 0,
          width: 0,
          height: 0,
          column_width: 0,
          texture_id: 0,
          texcoord_cache: {}
        },
        textures = [];
      for (var style in texts) {
        var text_infos = texts[style];
        for (var text in text_infos) {
          var text_info = text_infos[text];
          var texture_position = void 0;
          if (text_info.text_settings.can_articulate) {
            text_info.textures = [];
            texture.texcoord_cache[style] = texture.texcoord_cache[style] || {};
            for (var t = 0; t < text_info.type.length; t++) {
              var type = text_info.type[t];
              if (type === 'straight') {
                var word = text_info.isRTL ? text.split().reverse().join() : text;
                if (!texture.texcoord_cache[style][word]) {
                  var size = text_info.size.texture_size;
                  texture_position = this.placeText(size[0], size[1], style, texture, textures, max_texture_size);
                  texture.texcoord_cache[style][word] = {
                    texture_id: texture.texture_id,
                    texture_position: texture_position
                  };
                }
                text_info.textures[t] = texture.texture_id;
              } else if (type === 'curved') {
                text_info.textures[t] = [];
                for (var w = 0; w < text_info.segment_sizes.length; w++) {
                  var _word2 = text_info.segments[w];
                  if (!texture.texcoord_cache[style][_word2]) {
                    var _size2 = text_info.segment_sizes[w].texture_size;
                    var width = 2 * _size2[0]; // doubled to account for side-by-side rendering of fill and stroke
                    texture_position = this.placeText(width, _size2[1], style, texture, textures, max_texture_size);
                    texture.texcoord_cache[style][_word2] = {
                      texture_id: texture.texture_id,
                      texture_position: texture_position
                    };
                  }
                  text_info.textures[t].push(texture.texture_id);
                }
              }
            }
          } else {
            // rendered size is same for all alignments
            var _size3 = text_info.size.texture_size;

            // but each alignment needs to be rendered separately
            for (var align in text_info.align) {
              texture_position = this.placeText(_size3[0], _size3[1], style, texture, textures, max_texture_size);
              text_info.align[align].texture_id = texture.texture_id;
              text_info.align[align].texture_position = texture_position;
            }
          }
        }
      }

      // save final texture
      if (texture.column_width > 0 && texture.height > 0) {
        textures[texture.texture_id] = {
          texture_size: [texture.width, texture.height],
          texcoord_cache: texture.texcoord_cache
        };
      }

      // return computed texture sizes and UV cache
      return textures;
    }

    // Place text sprite in texture atlas, enlarging current texture, or starting new one if max texture size reached
  }, {
    key: "placeText",
    value: function placeText(text_width, text_height, style, texture, textures, max_texture_size) {
      var texture_position;

      // TODO: what if first label is wider than entire max texture?

      if (texture.cy + text_height > max_texture_size) {
        // start new column
        texture.cx += texture.column_width;
        texture.cy = 0;
        texture.column_width = text_width;
      } else {
        // expand current column
        texture.column_width = Math.max(texture.column_width, text_width);
      }
      if (texture.cx + texture.column_width <= max_texture_size) {
        // add label to current texture
        texture_position = [texture.cx, texture.cy];
        texture.cy += text_height;

        // expand texture if needed
        texture.height = Math.max(texture.height, texture.cy);
        texture.width = Math.max(texture.width, texture.cx + texture.column_width);
      } else {
        // start new texture
        // save size and cache of last texture
        textures[texture.texture_id] = {
          texture_size: [texture.width, texture.height],
          texcoord_cache: texture.texcoord_cache
        };
        texture.texcoord_cache = {}; // reset cache
        texture.texcoord_cache[style] = {};
        texture.texture_id++;
        texture.cx = 0;
        texture.cy = text_height;
        texture.column_width = text_width;
        texture.width = text_width;
        texture.height = text_height;
        texture_position = [0, 0]; // TODO: allocate zero array once
      }
      return texture_position;
    }

    // Called before rasterization
  }, {
    key: "applyTextTransform",
    value: function applyTextTransform(text, transform) {
      if (transform === 'capitalize') {
        return text.replace(/\w\S*/g, function (txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1);
        });
      } else if (transform === 'uppercase') {
        return text.toUpperCase();
      } else if (transform === 'lowercase') {
        return text.toLowerCase();
      }
      return text;
    }

    // Convert font CSS-style size ('12px', '14pt', '1.5em', etc.) to pixel size (adjusted for device pixel ratio)
    // Defaults units to pixels if not specified
  }], [{
    key: "fontPixelSize",
    value: function fontPixelSize(size) {
      if (size == null) {
        return;
      }
      size = typeof size === 'string' ? size : String(size); // need a string for regex

      var _ref9 = size.match(TextCanvas.font_size_re) || [],
        _ref10 = _slicedToArray(_ref9, 3),
        px_size = _ref10[1],
        units = _ref10[2];
      units = units || 'px';
      if (units === 'em') {
        px_size *= 16;
      } else if (units === 'pt') {
        px_size /= 0.75;
      } else if (units === '%') {
        px_size /= 6.25;
      }
      px_size = StyleParser.parsePositiveNumber(px_size);
      px_size *= Utils.device_pixel_ratio;
      return px_size;
    }
  }, {
    key: "pruneTextCache",
    value: function pruneTextCache() {
      if (TextCanvas.cache.text_count > TextCanvas.cache.text_count_max) {
        TextCanvas.cache.text = {};
        TextCanvas.cache.text_count = 0;
        log('debug', 'TextCanvas: pruning text cache');
      }
      if (Object.keys(TextCanvas.cache.segment).length > TextCanvas.cache.segment_count_max) {
        TextCanvas.cache.segment = {};
        log('debug', 'TextCanvas: pruning segment cache');
      }
    }
  }]);
}(); // Extract font size and units
TextCanvas.font_size_re = /((?:[0-9]*\.)?[0-9]+)\s*(px|pt|em|%)?/;

// Cache sizes of rendered text
TextCanvas.cache = {
  text: {},
  // size and line parsing, by text style, then text string
  text_count: 0,
  // current size of cache (measured as # of entries)
  text_count_max: 2000,
  // prune cache when it exceeds this size
  segment: {},
  // segmentation of text (by run of characters or grapheme clusters), by text string
  segment_count_max: 2000,
  // prune cache when it exceeds this size
  stats: {
    text_hits: 0,
    text_misses: 0,
    segment_hits: 0,
    segment_misses: 0
  }
};

function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }

// namespaces label textures (ensures new texture name when a tile is built multiple times)
var text_texture_id = 0;
var TextLabels = {
  resetText: function resetText() {
    if (Thread.is_main) {
      this.canvas = new TextCanvas();
    } else if (Thread.is_worker) {
      this.texts = {}; // unique texts, grouped by tile, by style
    }
  },
  freeText: function freeText(tile) {
    delete this.texts[tile.id];
  },
  parseTextFeature: function parseTextFeature(feature, draw, context, tile) {
    // Compute label text
    var text = this.parseTextSource(feature, draw, context);
    if (text == null || text === '') {
      return; // no text for this feature
    }

    // Compute text style and layout settings for this feature label
    var text_settings = TextSettings.compute(draw, context);
    var text_settings_key = TextSettings.key(text_settings);

    // first label in tile, or with this style?
    this.texts[tile.id] = this.texts[tile.id] || {};
    var sizes = this.texts[tile.id][text_settings_key] = this.texts[tile.id][text_settings_key] || {};
    if (text instanceof Object) {
      var results = [];

      // add both left/right text elements to repeat group to improve repeat culling
      // avoids one component of a boundary label (e.g. Colorado) being culled too aggressively when it also
      // appears in nearby boundary labels (e.g. Colorado/Utah & Colorado/New Mexico repeat as separate groups)
      var repeat_group_prefix = text.left + '-' + text.right; // NB: should be all text keys, not just left/right

      for (var key in text) {
        var current_text = text[key];
        if (!current_text) {
          continue;
        }
        var layout = this.computeTextLayout({}, feature, draw, context, tile, current_text, text_settings, repeat_group_prefix, key);
        if (!sizes[current_text]) {
          // first label with this text/style/tile combination, make a new label entry
          sizes[current_text] = {
            text_settings: text_settings,
            ref: 0 // # of times this text/style combo appears in tile
          };
        }
        results.push({
          draw: draw,
          text: current_text,
          text_settings_key: text_settings_key,
          layout: layout
        });
      }
      return results.length > 0 && results; // return null if no boundary labels found
    } else {
      // unique text strings, grouped by text drawing style
      var _layout = this.computeTextLayout({}, feature, draw, context, tile, text, text_settings);
      if (!sizes[text]) {
        // first label with this text/style/tile combination, make a new label entry
        sizes[text] = {
          text_settings: text_settings,
          ref: 0 // # of times this text/style combo appears in tile
        };
      }
      return {
        draw: draw,
        text: text,
        text_settings_key: text_settings_key,
        layout: _layout
      };
    }
  },
  // Compute the label text, default is value of feature.properties.name
  // - String value indicates a feature property look-up, e.g. `short_name` means use feature.properties.short_name
  // - Function will use the return value as the label text (for custom labels)
  // - Array (of strings and/or functions) defines a list of fallbacks, evaluated according to the above rules,
  //   with the first non-null value used as the label text
  //   e.g. `[name:es, name:en, name]` prefers Spanish names, followed by English, and last the default local name
  parseTextSource: function parseTextSource(feature, draw, context) {
    var text;
    var source = draw.text_source || 'name';
    if (source != null && !Array.isArray(source) && _typeof(source) === 'object') {
      // left/right boundary labels
      text = {};
      for (var key in source) {
        text[key] = this.parseTextSourceValue(source[key], feature, context);
      }
    } else {
      // single label
      text = this.parseTextSourceValue(source, feature, context);
    }
    return text;
  },
  parseTextSourceValue: function parseTextSourceValue(source, feature, context) {
    var text;
    if (Array.isArray(source)) {
      for (var s = 0; s < source.length; s++) {
        if (typeof source[s] === 'string') {
          text = feature.properties[source[s]];
        } else if (typeof source[s] === 'function') {
          text = source[s](context);
        }
        if (text) {
          return text; // stop if we found a text property
        }
      }
    } else if (typeof source === 'string') {
      text = feature.properties[source];
    } else if (source instanceof Function) {
      text = source(context);
    }
    return text;
  },
  prepareTextLabels: function prepareTextLabels(tile, queue) {
    return new Promise(function ($return, $error) {
      var texts;
      if (Object.keys(this.texts[tile.id] || {}).length === 0) {
        return $return([]);
      }
      var $Try_1_Catch = function (e) {
        try {
          // error thrown if style has been removed from main thread
          Collision.abortTile(tile.id);
          return $return([]);
        } catch ($boundEx) {
          return $error($boundEx);
        }
      };
      try {
        return Promise.resolve(WorkerBroker$1.postMessage(this.main_thread_target + '.calcTextSizes', tile.id, this.texts[tile.id])).then(function ($await_3) {
          try {
            texts = $await_3;
            if (tile.canceled) {
              log('trace', "Style ".concat(this.name, ": stop tile build because tile was canceled: ").concat(tile.key, ", post-calcTextSizes()"));
              return $return([]);
            }
            this.texts[tile.id] = texts || [];
            if (!texts) {
              Collision.abortTile(tile.id);
              return $return([]);
            }
            return $return(this.buildTextLabels(tile, queue));
          } catch ($boundEx) {
            return $Try_1_Catch($boundEx);
          }
        }.bind(this), $Try_1_Catch);
      } catch (e) {
        $Try_1_Catch();
      }
    }.bind(this));
  },
  collideAndRenderTextLabels: function collideAndRenderTextLabels(tile, collision_group, queue) {
    return new Promise(function ($return, $error) {
      var labels, texts, rasterized;
      return Promise.resolve(this.prepareTextLabels(tile, queue)).then(function ($await_4) {
        try {
          labels = $await_4;
          if (labels.length === 0) {
            Collision.collide([], collision_group, tile.id);
            return $return({});
          }
          return Promise.resolve(Collision.collide(labels, collision_group, tile.id)).then(function ($await_5) {
            try {
              labels = $await_5;
              if (tile.canceled) {
                log('trace', "stop tile build because tile was canceled: ".concat(tile.key, ", post-collide()"));
                return $return({});
              }
              texts = this.texts[tile.id];
              if (texts == null || labels.length === 0) {
                return $return({});
              }
              this.cullTextStyles(texts, labels);

              // set alignments
              labels.forEach(function (q) {
                var text_settings_key = q.text_settings_key;
                var text_info = texts[text_settings_key] && texts[text_settings_key][q.text];
                if (!text_info.text_settings.can_articulate) {
                  text_info.align = text_info.align || {};
                  text_info.align[q.label.align] = {};
                } else {
                  // consider making it a set
                  if (!text_info.type) {
                    text_info.type = [];
                  }
                  if (text_info.type.indexOf(q.label.type) === -1) {
                    text_info.type.push(q.label.type);
                  }
                }
              });

              // second call to main thread, for rasterizing the set of texts
              var $Try_2_Post = function () {
                try {
                  return $return();
                } catch ($boundEx) {
                  return $error($boundEx);
                }
              };
              var $Try_2_Catch = function (e) {
                try {
                  // error thrown if style has been removed from main thread
                  return $return({});
                } catch ($boundEx) {
                  return $error($boundEx);
                }
              };
              try {
                return Promise.resolve(WorkerBroker$1.postMessage(this.main_thread_target + '.rasterizeTexts', tile.id, tile.key, texts)).then(function ($await_6) {
                  try {
                    rasterized = $await_6;
                    if (tile.canceled) {
                      log('trace', "stop tile build because tile was canceled: ".concat(tile.key, ", post-rasterizeTexts()"));
                      return $return({});
                    }
                    return $return(_objectSpread$2({
                      labels: labels
                    }, rasterized));
                  } catch ($boundEx) {
                    return $Try_2_Catch($boundEx);
                  }
                }, $Try_2_Catch);
              } catch (e) {
                $Try_2_Catch(e);
              }
            } catch ($boundEx) {
              return $error($boundEx);
            }
          }.bind(this), $error);
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }.bind(this), $error);
    }.bind(this));
  },
  // Remove unused text/style combinations to avoid unnecessary rasterization
  cullTextStyles: function cullTextStyles(texts, labels) {
    // Count how many times each text/style combination is used
    for (var i = 0; i < labels.length; i++) {
      var label = labels[i];
      texts[label.text_settings_key][label.text].ref++;
    }

    // Remove text/style combinations that have no visible labels
    for (var style in texts) {
      for (var text in texts[style]) {
        // no labels for this text
        if (texts[style][text].ref < 1) {
          delete texts[style][text];
        }
      }
    }
    for (var _style in texts) {
      // no labels for this style
      if (Object.keys(texts[_style]).length === 0) {
        delete texts[_style];
      }
    }
  },
  // Called on main thread from worker, to compute the size of each text string,
  // were it to be rendered. This info is then used to perform initial label culling, *before*
  // labels are actually rendered.
  calcTextSizes: function calcTextSizes(tile_id, texts) {
    return this.canvas.textSizes(tile_id, texts);
  },
  // Called on main thread from worker, to create atlas of labels for a tile
  rasterizeTexts: function rasterizeTexts(tile_id, tile_key, texts) {
    return new Promise(function ($return, $error) {
      var canvas, max_texture_size, textures, texture_prefix;
      canvas = new TextCanvas();
      max_texture_size = Math.min(this.max_texture_size, 2048);
      textures = canvas.setTextureTextPositions(texts, max_texture_size);
      texture_prefix = ['labels', this.name, tile_key, tile_id, text_texture_id, ''].join('-');
      text_texture_id++;
      return Promise.resolve(canvas.rasterize(texts, textures, tile_id, texture_prefix, this.gl)).then(function ($await_7) {
        try {
          textures = $await_7;
          if (!textures) {
            return $return({});
          }
          return $return({
            texts: texts,
            textures: textures
          });
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }, $error);
    }.bind(this));
  },
  preprocessText: function preprocessText(draw) {
    // Font settings are required
    if (!draw || !draw.font || _typeof(draw.font) !== 'object') {
      return;
    }

    // Font weight
    draw.font.weight = StyleParser.createPropertyCache(draw.font.weight);

    // Colors
    draw.font.fill = StyleParser.createPropertyCache(draw.font.fill || TextSettings.defaults.fill);
    draw.font.alpha = StyleParser.createPropertyCache(draw.font.alpha);
    if (draw.font.stroke) {
      draw.font.stroke.color = StyleParser.createPropertyCache(draw.font.stroke.color);
      draw.font.stroke.alpha = StyleParser.createPropertyCache(draw.font.stroke.alpha);
    }
    if (draw.font.background) {
      draw.font.background.color = StyleParser.createPropertyCache(draw.font.background.color);
      draw.font.background.alpha = StyleParser.createPropertyCache(draw.font.background.alpha);
      draw.font.background.width = StyleParser.createPropertyCache(draw.font.background.width, StyleParser.parsePositiveNumber);
      if (draw.font.background.stroke) {
        draw.font.background.stroke.color = StyleParser.createPropertyCache(draw.font.background.stroke.color);
        draw.font.background.stroke.alpha = StyleParser.createPropertyCache(draw.font.background.stroke.alpha);
      }
    }

    // Convert font and text stroke sizes
    draw.font.px_size = StyleParser.createPropertyCache(draw.font.size || TextSettings.defaults.size, TextCanvas.fontPixelSize, TextCanvas.fontPixelSize);
    if (draw.font.stroke && draw.font.stroke.width != null) {
      draw.font.stroke.width = StyleParser.createPropertyCache(draw.font.stroke.width, StyleParser.parsePositiveNumber);
    }
    if (draw.font.background && draw.font.background.stroke && draw.font.background.stroke.width != null) {
      draw.font.background.stroke.width = StyleParser.createPropertyCache(draw.font.background.stroke.width, StyleParser.parsePositiveNumber);
    }

    // Offset (2d array)
    draw.offset = StyleParser.createPropertyCache(draw.offset, function (v) {
      return Array.isArray(v) && v.map(StyleParser.parseNumber);
    });

    // Buffer (1d value or or 2d array) - must be >= 0
    draw.buffer = StyleParser.createPropertyCache(draw.buffer, function (v) {
      return (Array.isArray(v) ? v : [v, v]).map(StyleParser.parsePositiveNumber);
    });

    // Repeat rules - for text labels, defaults to tile size
    draw.repeat_distance = StyleParser.createPropertyCache(draw.repeat_distance, StyleParser.parsePositiveNumber);
    return draw;
  },
  // Additional text-specific layout settings
  computeTextLayout: function computeTextLayout(target, feature, draw, context, tile, text, text_settings, repeat_group_prefix, orientation) {
    var layout = target || {};

    // common settings w/points
    layout = this.computeLayout(layout, feature, draw, context, tile);

    // if draw group didn't specify repeat distance, override with text label-specific logic
    if (draw.repeat_distance == null) {
      // defaults: no limit on labels for point geometries,  tile size (256px) limit for other geometries
      layout.repeat_distance = context.geometry === 'point' ? 0 : Geo$1.tile_size;
      if (layout.repeat_distance) {
        layout.repeat_distance *= layout.units_per_pixel;
        layout.repeat_scale = 1; // initial repeat pass in tile with full scale

        if (typeof draw.repeat_group === 'function') {
          layout.repeat_group = draw.repeat_group(context); // dynamic repeat group
        } else {
          layout.repeat_group = draw.repeat_group; // pre-computed repeat group
        }
      }
    }

    // repeat rules include the text
    if (layout.repeat_distance) {
      if (repeat_group_prefix) {
        layout.repeat_group += '/' + repeat_group_prefix;
      }
      layout.repeat_group += '/' + text;
    }

    // Max number of subdivisions to try
    layout.subdiv = tile.overzoom2;
    layout.align = draw.align;

    // used to fudge width value as text may overflow bounding box if it has italic, bold, etc style
    // TODO rename to more generic, not italic-specific (bold)
    layout.italic = text_settings.style !== 'normal';

    // used to determine orientation of text if the text_source has a `left` or `right` key
    if (orientation === 'right') {
      layout.orientation = 1;
    } else if (orientation === 'left') {
      layout.orientation = -1;
    }
    return layout;
  }
};

var normalFromMat4_1;
var hasRequiredNormalFromMat4;

function requireNormalFromMat4 () {
	if (hasRequiredNormalFromMat4) return normalFromMat4_1;
	hasRequiredNormalFromMat4 = 1;
	normalFromMat4_1 = normalFromMat4;

	/**
	* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
	*
	* @alias mat3.normalFromMat4
	* @param {mat3} out mat3 receiving operation result
	* @param {mat4} a Mat4 to derive the normal matrix from
	*
	* @returns {mat3} out
	*/
	function normalFromMat4(out, a) {
	  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
	  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
	  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
	  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

	  var b00 = a00 * a11 - a01 * a10;
	  var b01 = a00 * a12 - a02 * a10;
	  var b02 = a00 * a13 - a03 * a10;
	  var b03 = a01 * a12 - a02 * a11;
	  var b04 = a01 * a13 - a03 * a11;
	  var b05 = a02 * a13 - a03 * a12;
	  var b06 = a20 * a31 - a21 * a30;
	  var b07 = a20 * a32 - a22 * a30;
	  var b08 = a20 * a33 - a23 * a30;
	  var b09 = a21 * a32 - a22 * a31;
	  var b10 = a21 * a33 - a23 * a31;
	  var b11 = a22 * a33 - a23 * a32;

	  // Calculate the determinant
	  var det = b00 * b11
	          - b01 * b10
	          + b02 * b09
	          + b03 * b08
	          - b04 * b07
	          + b05 * b06;

	  if (!det) return null
	  det = 1.0 / det;

	  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

	  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

	  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

	  return out
	}
	return normalFromMat4_1;
}

var normalFromMat4Exports = requireNormalFromMat4();
var mat3_normalFromMat4 = /*@__PURE__*/getDefaultExportFromCjs(normalFromMat4Exports);

var invert_1;
var hasRequiredInvert;

function requireInvert () {
	if (hasRequiredInvert) return invert_1;
	hasRequiredInvert = 1;
	invert_1 = invert;

	/**
	 * Inverts a mat3
	 *
	 * @alias mat3.invert
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	function invert(out, a) {
	  var a00 = a[0], a01 = a[1], a02 = a[2];
	  var a10 = a[3], a11 = a[4], a12 = a[5];
	  var a20 = a[6], a21 = a[7], a22 = a[8];

	  var b01 = a22 * a11 - a12 * a21;
	  var b11 = -a22 * a10 + a12 * a20;
	  var b21 = a21 * a10 - a11 * a20;

	  // Calculate the determinant
	  var det = a00 * b01 + a01 * b11 + a02 * b21;

	  if (!det) return null
	  det = 1.0 / det;

	  out[0] = b01 * det;
	  out[1] = (-a22 * a01 + a02 * a21) * det;
	  out[2] = (a12 * a01 - a02 * a11) * det;
	  out[3] = b11 * det;
	  out[4] = (a22 * a00 - a02 * a20) * det;
	  out[5] = (-a12 * a00 + a02 * a10) * det;
	  out[6] = b21 * det;
	  out[7] = (-a21 * a00 + a01 * a20) * det;
	  out[8] = (a11 * a00 - a01 * a10) * det;

	  return out
	}
	return invert_1;
}

var invertExports = requireInvert();
var mat3_invert = /*@__PURE__*/getDefaultExportFromCjs(invertExports);

var multiply_1;
var hasRequiredMultiply;

function requireMultiply () {
	if (hasRequiredMultiply) return multiply_1;
	hasRequiredMultiply = 1;
	multiply_1 = multiply;

	/**
	 * Multiplies two mat4's
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the first operand
	 * @param {mat4} b the second operand
	 * @returns {mat4} out
	 */
	function multiply(out, a, b) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

	    // Cache only the current line of the second matrix
	    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
	    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

	    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
	    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

	    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
	    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

	    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
	    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
	    return out;
	}	return multiply_1;
}

var multiplyExports = requireMultiply();
var mat4_multiply = /*@__PURE__*/getDefaultExportFromCjs(multiplyExports);

var translate_1;
var hasRequiredTranslate;

function requireTranslate () {
	if (hasRequiredTranslate) return translate_1;
	hasRequiredTranslate = 1;
	translate_1 = translate;

	/**
	 * Translate a mat4 by the given vector
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to translate
	 * @param {vec3} v vector to translate by
	 * @returns {mat4} out
	 */
	function translate(out, a, v) {
	    var x = v[0], y = v[1], z = v[2],
	        a00, a01, a02, a03,
	        a10, a11, a12, a13,
	        a20, a21, a22, a23;

	    if (a === out) {
	        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
	        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
	        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
	        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
	    } else {
	        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
	        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
	        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

	        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
	        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
	        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

	        out[12] = a00 * x + a10 * y + a20 * z + a[12];
	        out[13] = a01 * x + a11 * y + a21 * z + a[13];
	        out[14] = a02 * x + a12 * y + a22 * z + a[14];
	        out[15] = a03 * x + a13 * y + a23 * z + a[15];
	    }

	    return out;
	}	return translate_1;
}

var translateExports = requireTranslate();
var mat4_translate = /*@__PURE__*/getDefaultExportFromCjs(translateExports);

var scale_1;
var hasRequiredScale;

function requireScale () {
	if (hasRequiredScale) return scale_1;
	hasRequiredScale = 1;
	scale_1 = scale;

	/**
	 * Scales the mat4 by the dimensions in the given vec3
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to scale
	 * @param {vec3} v the vec3 to scale the matrix by
	 * @returns {mat4} out
	 **/
	function scale(out, a, v) {
	    var x = v[0], y = v[1], z = v[2];

	    out[0] = a[0] * x;
	    out[1] = a[1] * x;
	    out[2] = a[2] * x;
	    out[3] = a[3] * x;
	    out[4] = a[4] * y;
	    out[5] = a[5] * y;
	    out[6] = a[6] * y;
	    out[7] = a[7] * y;
	    out[8] = a[8] * z;
	    out[9] = a[9] * z;
	    out[10] = a[10] * z;
	    out[11] = a[11] * z;
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	}	return scale_1;
}

var scaleExports = requireScale();
var mat4_scale = /*@__PURE__*/getDefaultExportFromCjs(scaleExports);

var perspective_1;
var hasRequiredPerspective;

function requirePerspective () {
	if (hasRequiredPerspective) return perspective_1;
	hasRequiredPerspective = 1;
	perspective_1 = perspective;

	/**
	 * Generates a perspective projection matrix with the given bounds
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {number} fovy Vertical field of view in radians
	 * @param {number} aspect Aspect ratio. typically viewport width/height
	 * @param {number} near Near bound of the frustum
	 * @param {number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	function perspective(out, fovy, aspect, near, far) {
	    var f = 1.0 / Math.tan(fovy / 2),
	        nf = 1 / (near - far);
	    out[0] = f / aspect;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = f;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = (far + near) * nf;
	    out[11] = -1;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = (2 * far * near) * nf;
	    out[15] = 0;
	    return out;
	}	return perspective_1;
}

var perspectiveExports = requirePerspective();
var mat4_perspective = /*@__PURE__*/getDefaultExportFromCjs(perspectiveExports);

var identity_1;
var hasRequiredIdentity;

function requireIdentity () {
	if (hasRequiredIdentity) return identity_1;
	hasRequiredIdentity = 1;
	identity_1 = identity;

	/**
	 * Set a mat4 to the identity matrix
	 *
	 * @param {mat4} out the receiving matrix
	 * @returns {mat4} out
	 */
	function identity(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}	return identity_1;
}

var lookAt_1;
var hasRequiredLookAt;

function requireLookAt () {
	if (hasRequiredLookAt) return lookAt_1;
	hasRequiredLookAt = 1;
	var identity = requireIdentity();

	lookAt_1 = lookAt;

	/**
	 * Generates a look-at matrix with the given eye position, focal point, and up axis
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {vec3} eye Position of the viewer
	 * @param {vec3} center Point the viewer is looking at
	 * @param {vec3} up vec3 pointing up
	 * @returns {mat4} out
	 */
	function lookAt(out, eye, center, up) {
	    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
	        eyex = eye[0],
	        eyey = eye[1],
	        eyez = eye[2],
	        upx = up[0],
	        upy = up[1],
	        upz = up[2],
	        centerx = center[0],
	        centery = center[1],
	        centerz = center[2];

	    if (Math.abs(eyex - centerx) < 0.000001 &&
	        Math.abs(eyey - centery) < 0.000001 &&
	        Math.abs(eyez - centerz) < 0.000001) {
	        return identity(out);
	    }

	    z0 = eyex - centerx;
	    z1 = eyey - centery;
	    z2 = eyez - centerz;

	    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
	    z0 *= len;
	    z1 *= len;
	    z2 *= len;

	    x0 = upy * z2 - upz * z1;
	    x1 = upz * z0 - upx * z2;
	    x2 = upx * z1 - upy * z0;
	    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
	    if (!len) {
	        x0 = 0;
	        x1 = 0;
	        x2 = 0;
	    } else {
	        len = 1 / len;
	        x0 *= len;
	        x1 *= len;
	        x2 *= len;
	    }

	    y0 = z1 * x2 - z2 * x1;
	    y1 = z2 * x0 - z0 * x2;
	    y2 = z0 * x1 - z1 * x0;

	    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
	    if (!len) {
	        y0 = 0;
	        y1 = 0;
	        y2 = 0;
	    } else {
	        len = 1 / len;
	        y0 *= len;
	        y1 *= len;
	        y2 *= len;
	    }

	    out[0] = x0;
	    out[1] = y0;
	    out[2] = z0;
	    out[3] = 0;
	    out[4] = x1;
	    out[5] = y1;
	    out[6] = z1;
	    out[7] = 0;
	    out[8] = x2;
	    out[9] = y2;
	    out[10] = z2;
	    out[11] = 0;
	    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
	    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
	    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
	    out[15] = 1;

	    return out;
	}	return lookAt_1;
}

var lookAtExports = requireLookAt();
var mat4_lookAt = /*@__PURE__*/getDefaultExportFromCjs(lookAtExports);

var identityExports = requireIdentity();
var mat4_identity = /*@__PURE__*/getDefaultExportFromCjs(identityExports);

var copy_1;
var hasRequiredCopy;

function requireCopy () {
	if (hasRequiredCopy) return copy_1;
	hasRequiredCopy = 1;
	copy_1 = copy;

	/**
	 * Copy the values from one mat4 to another
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	function copy(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    out[9] = a[9];
	    out[10] = a[10];
	    out[11] = a[11];
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	}	return copy_1;
}

var copyExports = requireCopy();
var mat4_copy = /*@__PURE__*/getDefaultExportFromCjs(copyExports);

// Partial import of gl-matrix via modularized stack-gl forks
// https://github.com/toji/gl-matrix
// https://github.com/stackgl

// vec3

// Substitute 64-bit version
// We need the extra precision when multiplying matrices w/mercator projected values
var vec3 = {
  fromValues: function fromValues(x, y, z) {
    var out = new Float64Array(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
};
var mat3 = {
  normalFromMat4: mat3_normalFromMat4,
  invert: mat3_invert
};
var mat4 = {
  multiply: mat4_multiply,
  translate: mat4_translate,
  scale: mat4_scale,
  perspective: mat4_perspective,
  lookAt: mat4_lookAt,
  identity: mat4_identity,
  copy: mat4_copy
};

function _callSuper$5(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$5() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$5() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$5 = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet$2(t, o, e, r) { var p = _get(_getPrototypeOf(t.prototype ), o, e); return "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }

// Abstract base class
var Camera = /*#__PURE__*/function () {
  function Camera(name, view) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck(this, Camera);
    this.view = view;
    this.position = options.position;
    this.zoom = options.zoom;
  }

  // Create a camera by type name, factory-style
  return _createClass(Camera, [{
    key: "update",
    value:
    // Update method called once per frame
    function update() {}

    // Called once per frame per program (e.g. for main render pass, then for each additional pass for feature selection, etc.)
  }, {
    key: "setupProgram",
    value: function setupProgram(/*program*/
    ) {}

    // Sync camera position/zoom to scene view
  }, {
    key: "updateView",
    value: function updateView() {
      if (this.position || this.zoom) {
        var view = {};
        if (this.position) {
          view = {
            lng: this.position[0],
            lat: this.position[1],
            zoom: this.position[2]
          };
        }
        if (this.zoom) {
          view.zoom = this.zoom;
        }
        this.view.setView(view);
      }
    }

    // Set model-view and normal matrices
  }, {
    key: "setupMatrices",
    value: function setupMatrices(matrices, program) {
      // Model view matrix - transform tile space into view space (meters, relative to camera)
      mat4.multiply(matrices.model_view32, this.view_matrix, matrices.model);
      program.uniform('Matrix4fv', 'u_modelView', matrices.model_view32);

      // Normal matrices - transforms surface normals into view space
      mat3.normalFromMat4(matrices.normal32, matrices.model_view32);
      mat3.invert(matrices.inverse_normal32, matrices.normal32);
      program.uniform('Matrix3fv', 'u_normalMatrix', matrices.normal32);
      program.uniform('Matrix3fv', 'u_inverseNormalMatrix', matrices.inverse_normal32);
    }
  }], [{
    key: "create",
    value: function create(name, view, config) {
      switch (config.type) {
        case 'isometric':
          return new IsometricCamera(name, view, config);
        case 'flat':
          return new FlatCamera(name, view, config);
        case 'perspective':
        /* falls through */
        default:
          return new PerspectiveCamera(name, view, config);
      }
    }
  }]);
}();
var PerspectiveCamera = /*#__PURE__*/function (_Camera) {
  function PerspectiveCamera(name, view) {
    var _this;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck(this, PerspectiveCamera);
    _this = _callSuper$5(this, PerspectiveCamera, [name, view, options]);
    _this.type = 'perspective';

    // a single scalar, or pairs of stops mapping zoom levels, e.g. [zoom, focal length]
    _this.focal_length = options.focal_length;
    _this.fov = options.fov;
    if (!_this.focal_length && !_this.fov) {
      // Default focal length ranges by zoom
      _this.focal_length = [[16, 2], [17, 2.5], [18, 3], [19, 4], [20, 6]];
    }
    _this.vanishing_point = options.vanishing_point || [0, 0]; // [x, y]
    _this.vanishing_point = _this.vanishing_point.map(parseFloat); // we implicitly only support px units here
    _this.vanishing_point_skew = [];
    _this.position_meters = null;
    _this.view_matrix = new Float64Array(16);
    _this.projection_matrix = new Float32Array(16);

    // 'camera' is the name of the shader block, e.g. determines where in the shader this code is injected
    ShaderProgram.replaceBlock('camera', "\n            uniform mat4 u_projection;\n            uniform vec3 u_eye;\n            uniform vec2 u_vanishing_point;\n\n            void cameraProjection (inout vec4 position) {\n                position = u_projection * position;\n            }");
    return _this;
  }

  // Constrains the camera so that the viewable area matches given the viewport height
  // (in world space, e.g. meters), given either a camera focal length or field-of-view
  // (focal length is used if both are passed).
  _inherits(PerspectiveCamera, _Camera);
  return _createClass(PerspectiveCamera, [{
    key: "constrainCamera",
    value: function constrainCamera(_ref) {
      var view_height = _ref.view_height,
        height = _ref.height,
        focal_length = _ref.focal_length,
        fov = _ref.fov;
      // Solve for camera height
      if (!height) {
        // We have focal length, calculate FOV
        if (focal_length) {
          fov = Math.atan(1 / focal_length) * 2;
        }
        // We have FOV, calculate focal length
        else if (fov) {
          fov = fov * Math.PI / 180; // convert FOV degrees to radians
          focal_length = 1 / Math.tan(fov / 2);
        }

        // Distance that camera should be from ground such that it fits the field of view expected
        // for a conventional web mercator map at the current zoom level and camera focal length
        height = view_height / 2 * focal_length;
      }
      // Solve for camera focal length / field-of-view
      else {
        focal_length = 2 * height / view_height;
        fov = Math.atan(1 / focal_length) * 2;
      }
      return {
        view_height: view_height,
        height: height,
        focal_length: focal_length,
        fov: fov
      };
    }
  }, {
    key: "updateMatrices",
    value: function updateMatrices() {
      // TODO: only re-calculate these vars when necessary

      // Height of the viewport in meters at current zoom
      var viewport_height = this.view.size.css.height * this.view.meters_per_pixel;

      // Compute camera properties to fit desired view
      var _this$constrainCamera = this.constrainCamera({
          view_height: viewport_height,
          focal_length: Utils.interpolate(this.view.zoom, this.focal_length),
          fov: Utils.interpolate(this.view.zoom, this.fov)
        }),
        height = _this$constrainCamera.height,
        fov = _this$constrainCamera.fov;

      // View matrix
      var position = [this.view.center.meters.x, this.view.center.meters.y, height];
      this.position_meters = position;

      // mat4.lookAt(this.view_matrix,
      //     vec3.fromValues(...position),
      //     vec3.fromValues(position[0], position[1], height - 1),
      //     vec3.fromValues(0, 1, 0));
      // Exclude camera height from view matrix
      mat4.lookAt(this.view_matrix, vec3.fromValues(position[0], position[1], 0), vec3.fromValues(position[0], position[1], -1), vec3.fromValues(0, 1, 0));

      // Projection matrix
      mat4.perspective(this.projection_matrix, fov, this.view.aspect, 1, height * 2);

      // Convert vanishing point from pixels to viewport space
      this.vanishing_point_skew[0] = this.vanishing_point[0] / this.view.size.css.width;
      this.vanishing_point_skew[1] = this.vanishing_point[1] / this.view.size.css.height;

      // Adjust projection matrix to include vanishing point skew
      this.projection_matrix[8] = -this.vanishing_point_skew[0] * 2; // z column of x row, e.g. amount z skews x
      this.projection_matrix[9] = -this.vanishing_point_skew[1] * 2; // z column of y row, e.g. amount z skews y

      // Translate geometry into the distance so that camera is appropriate height above ground
      // Additionally, adjust xy to compensate for any vanishing point skew, e.g. move geometry so that the displayed g
      // plane of the map matches that expected by a traditional web mercator map at this [lat, lng, zoom].
      mat4.translate(this.projection_matrix, this.projection_matrix, vec3.fromValues(viewport_height / 2 * this.view.aspect * (-this.vanishing_point_skew[0] * 2), viewport_height / 2 * (-this.vanishing_point_skew[1] * 2), 0));

      // Include camera height in projection matrix
      mat4.translate(this.projection_matrix, this.projection_matrix, vec3.fromValues(0, 0, -height));
    }
  }, {
    key: "update",
    value: function update() {
      _superPropGet$2(PerspectiveCamera, "update", this)([]);
      this.updateMatrices();
    }
  }, {
    key: "setupProgram",
    value: function setupProgram(program) {
      program.uniform('Matrix4fv', 'u_projection', this.projection_matrix);
      program.uniform('3f', 'u_eye', [0, 0, this.position_meters[2]]);
      program.uniform('2fv', 'u_vanishing_point', this.vanishing_point_skew);
    }
  }]);
}(Camera); // Isometric-style projection
// Note: this is actually an "axonometric" projection, but I'm using the colloquial term isometric because it is more recognizable.
// An isometric projection is a specific subset of axonometric projections.
// 'axis' determines the xy skew applied to a vertex based on its z coordinate, e.g. [0, 1] axis causes buildings to be drawn
// straight upwards on screen at their true height, [0, .5] would draw them up at half-height, [1, 0] would be sideways, etc.
var IsometricCamera = /*#__PURE__*/function (_Camera2) {
  function IsometricCamera(name, view) {
    var _this2;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck(this, IsometricCamera);
    _this2 = _callSuper$5(this, IsometricCamera, [name, view, options]);
    _this2.type = 'isometric';
    _this2.axis = options.axis || {
      x: 0,
      y: 1
    };
    if (_this2.axis.length === 2) {
      _this2.axis = {
        x: _this2.axis[0],
        y: _this2.axis[1]
      }; // allow axis to also be passed as 2-elem array
    }
    _this2.position_meters = null;
    _this2.viewport_height = null;
    _this2.view_matrix = new Float64Array(16);
    _this2.projection_matrix = new Float32Array(16);

    // 'camera' is the name of the shader block, e.g. determines where in the shader this code is injected
    ShaderProgram.replaceBlock('camera', "\n            uniform mat4 u_projection;\n            uniform vec3 u_eye;\n            uniform vec2 u_vanishing_point;\n\n            void cameraProjection (inout vec4 position) {\n                position = u_projection * position;\n                // position.xy += position.z * u_isometric_axis;\n\n                // Reverse z for depth buffer so up is negative,\n                // and scale down values so objects higher than one screen height will not get clipped\n                // pull forward slightly to avoid going past far clipping plane\n                position.z = -position.z / 100. + 1. - 0.001;\n            }");
    return _this2;
  }
  _inherits(IsometricCamera, _Camera2);
  return _createClass(IsometricCamera, [{
    key: "update",
    value: function update() {
      _superPropGet$2(IsometricCamera, "update", this)([]);
      this.viewport_height = this.view.size.css.height * this.view.meters_per_pixel;
      var position = [this.view.center.meters.x, this.view.center.meters.y, this.viewport_height];
      this.position_meters = position;

      // View
      mat4.identity(this.view_matrix);
      mat4.translate(this.view_matrix, this.view_matrix, vec3.fromValues(-position[0], -position[1], 0));

      // Projection
      mat4.identity(this.projection_matrix);

      // apply isometric skew
      this.projection_matrix[8] = this.axis.x / this.view.aspect; // z column of x row, e.g. amount z skews x
      this.projection_matrix[9] = this.axis.y; // z column of x row, e.g. amount z skews y

      // convert meters to viewport
      mat4.scale(this.projection_matrix, this.projection_matrix, vec3.fromValues(2 / this.view.size.meters.x, 2 / this.view.size.meters.y, 2 / this.view.size.meters.y));
    }
  }, {
    key: "setupProgram",
    value: function setupProgram(program) {
      program.uniform('Matrix4fv', 'u_projection', this.projection_matrix);
      program.uniform('3fv', 'u_eye', [0, 0, this.viewport_height]);
      // program.uniform('3f', 'u_eye', this.viewport_height * this.axis.x, this.viewport_height * this.axis.y, this.viewport_height);
      program.uniform('2fv', 'u_vanishing_point', [0, 0]);
    }
  }]);
}(Camera); // Flat projection (e.g. just top-down, no perspective) - a degenerate isometric camera
var FlatCamera = /*#__PURE__*/function (_IsometricCamera) {
  function FlatCamera(name, view) {
    var _this3;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck(this, FlatCamera);
    _this3 = _callSuper$5(this, FlatCamera, [name, view, options]);
    _this3.type = 'flat';
    return _this3;
  }
  _inherits(FlatCamera, _IsometricCamera);
  return _createClass(FlatCamera, [{
    key: "update",
    value: function update() {
      // Axis is fixed to (0, 0) for flat camera
      this.axis.x = 0;
      this.axis.y = 0;
      _superPropGet$2(FlatCamera, "update", this)([]);
    }
  }]);
}(IsometricCamera);

var VIEW_PAN_SNAP_TIME = 0.5;
var View = /*#__PURE__*/function () {
  function View(scene, options) {
    _classCallCheck(this, View);
    subscribeMixin(this);
    this.scene = scene;
    this.createMatrices();
    this.zoom = null;
    this.center = null;
    this.bounds = null;
    this.meters_per_pixel = null;
    this.panning = false;
    this.panning_stop_at = 0;
    this.pan_snap_timer = 0;
    this.zoom_direction = 0;
    this.user_input_at = 0;
    this.user_input_timeout = 50;
    this.user_input_active = false;

    // Size of viewport in CSS pixels, device pixels, and mercator meters
    this.size = {
      css: {},
      device: {},
      meters: {}
    };
    this.aspect = null;
    this.buffer = 0;
    this.continuous_zoom = typeof options.continuousZoom === 'boolean' ? options.continuousZoom : true;
    this.wrap = options.wrapView === false ? false : true;
    this.preserve_tiles_within_zoom = 1;
    this.reset();
  }

  // Reset state before scene config is updated
  return _createClass(View, [{
    key: "reset",
    value: function reset() {
      this.createCamera();
    }

    // Create camera
  }, {
    key: "createCamera",
    value: function createCamera() {
      var active_camera = this.getActiveCamera();
      if (active_camera) {
        this.camera = Camera.create(active_camera, this, this.scene.config.cameras[active_camera]);
        this.camera.updateView();
      }
    }

    // Get active camera - for public API
  }, {
    key: "getActiveCamera",
    value: function getActiveCamera() {
      if (this.scene.config && this.scene.config.cameras) {
        for (var name in this.scene.config.cameras) {
          if (this.scene.config.cameras[name].active) {
            return name;
          }
        }

        // If no camera set as active, use first one
        var keys = Object.keys(this.scene.config.cameras);
        return keys.length && keys[0];
      }
    }

    // Set active camera and recompile - for public API
  }, {
    key: "setActiveCamera",
    value: function setActiveCamera(name) {
      var prev = this.getActiveCamera();
      if (prev === name) {
        return name;
      }
      if (this.scene.config.cameras[name]) {
        this.scene.config.cameras[name].active = true;

        // Clear previously active camera
        if (prev && this.scene.config.cameras[prev]) {
          delete this.scene.config.cameras[prev].active;
        }
      }
      this.scene.updateConfig({
        rebuild: false,
        normalize: false
      });
      return this.getActiveCamera();
    }

    // Update method called once per frame
  }, {
    key: "update",
    value: function update() {
      if (this.camera != null && this.ready()) {
        this.camera.update();
      }
      this.pan_snap_timer = (+new Date() - this.panning_stop_at) / 1000;
      this.user_input_active = +new Date() - this.user_input_at < this.user_input_timeout;
    }

    // Set logical pixel size of viewport
  }, {
    key: "setViewportSize",
    value: function setViewportSize(width, height) {
      this.size.css = {
        width: width,
        height: height
      };
      this.size.device = {
        width: Math.round(this.size.css.width * Utils.device_pixel_ratio),
        height: Math.round(this.size.css.height * Utils.device_pixel_ratio)
      };
      this.aspect = this.size.css.width / this.size.css.height;
      this.updateBounds();
    }

    // Set the map view, can be passed an object with lat/lng and/or zoom
  }, {
    key: "setView",
    value: function setView() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        lng = _ref.lng,
        lat = _ref.lat,
        zoom = _ref.zoom;
      var changed = false;

      // Set center
      if (typeof lng === 'number' && typeof lat === 'number') {
        if (!this.center || lng !== this.center.lng || lat !== this.center.lat) {
          changed = true;
          this.center = {
            lng: lng,
            lat: lat
          };
        }
      }

      // Set zoom
      if (typeof zoom === 'number' && zoom !== this.zoom) {
        changed = true;
        this.setZoom(zoom);
      }
      if (changed) {
        this.updateBounds();
      }
      return changed;
    }
  }, {
    key: "setZoom",
    value: function setZoom(zoom) {
      var last_tile_zoom = this.tile_zoom;
      var tile_zoom = this.baseZoom(zoom);
      if (!this.continuous_zoom) {
        zoom = tile_zoom;
      }
      if (tile_zoom !== last_tile_zoom) {
        this.zoom_direction = tile_zoom > last_tile_zoom ? 1 : -1;
      }
      this.zoom = zoom;
      this.tile_zoom = tile_zoom;
      this.updateBounds();
      this.scene.requestRedraw();
    }

    // Choose the base zoom level to use for a given fractional zoom
  }, {
    key: "baseZoom",
    value: function baseZoom(zoom) {
      return Math.floor(zoom);
    }
  }, {
    key: "setPanning",
    value: function setPanning(panning) {
      this.panning = panning;
      if (!this.panning) {
        this.panning_stop_at = +new Date();
      }
    }
  }, {
    key: "markUserInput",
    value: function markUserInput() {
      this.user_input_at = +new Date();
    }
  }, {
    key: "ready",
    value: function ready() {
      // TODO: better concept of "readiness" state?
      if (typeof this.size.css.width !== 'number' || typeof this.size.css.height !== 'number' || this.center == null || typeof this.zoom !== 'number') {
        return false;
      }
      return true;
    }

    // Calculate viewport bounds based on current center and zoom
  }, {
    key: "updateBounds",
    value: function updateBounds() {
      if (!this.ready()) {
        return;
      }
      this.meters_per_pixel = Geo$1.metersPerPixel(this.zoom);

      // Size of the half-viewport in meters at current zoom
      this.size.meters = {
        x: this.size.css.width * this.meters_per_pixel,
        y: this.size.css.height * this.meters_per_pixel
      };

      // Center of viewport in meters, and tile
      var m = Geo$1.latLngToMeters([this.center.lng, this.center.lat]);
      this.center.meters = {
        x: m[0],
        y: m[1]
      };
      this.center.tile = Geo$1.tileForMeters([this.center.meters.x, this.center.meters.y], this.tile_zoom);

      // Bounds in meters
      this.bounds = {
        sw: {
          x: this.center.meters.x - this.size.meters.x / 2,
          y: this.center.meters.y - this.size.meters.y / 2
        },
        ne: {
          x: this.center.meters.x + this.size.meters.x / 2,
          y: this.center.meters.y + this.size.meters.y / 2
        }
      };
      this.scene.tile_manager.updateTilesForView();
      this.trigger('move');
      this.scene.requestRedraw(); // TODO automate via move event?
    }
  }, {
    key: "findVisibleTileCoordinates",
    value: function findVisibleTileCoordinates() {
      if (!this.bounds) {
        return [];
      }
      var z = this.tile_zoom;
      var sw = Geo$1.tileForMeters([this.bounds.sw.x, this.bounds.sw.y], z);
      var ne = Geo$1.tileForMeters([this.bounds.ne.x, this.bounds.ne.y], z);
      var range = [sw.x - this.buffer, ne.x + this.buffer,
      // x
      ne.y - this.buffer, sw.y + this.buffer // y
      ];
      if (this.wrap === false) {
        // prevent tiles from wrapping across antimeridian
        var tmax = (1 << z) - 1; // max xy tile number for this zoom
        range = range.map(function (v) {
          return Math.min(Math.max(0, v), tmax);
        });
      }
      var coords = [];
      for (var x = range[0]; x <= range[1]; x++) {
        for (var y = range[2]; y <= range[3]; y++) {
          coords.push(TileID.coord({
            x: x,
            y: y,
            z: z
          }));
        }
      }
      return coords;
    }

    // Remove tiles too far outside of view
  }, {
    key: "pruneTilesForView",
    value: function pruneTilesForView() {
      var _this = this;
      // TODO: will this function ever be called when view isn't ready?
      if (!this.ready()) {
        return;
      }
      this.scene.tile_manager.removeTiles(function (tile) {
        // Ignore visible tiles
        if (tile.visible || tile.isProxy()) {
          return false;
        }

        // Remove tiles outside given zoom that are still loading
        if (tile.loading && tile.style_z !== _this.tile_zoom) {
          return true;
        }

        // Discard if too far from current zoom
        var zdiff = Math.abs(tile.style_z - _this.tile_zoom);
        var preserve_tiles_within_zoom = tile.preserve_tiles_within_zoom != null ? tile.preserve_tiles_within_zoom : _this.preserve_tiles_within_zoom; // optionally tile source specific
        if (zdiff > preserve_tiles_within_zoom) {
          return true;
        }

        // Discard tiles outside an area surrounding the viewport, handling tiles at different zooms
        // Get min and max tiles for the viewport, at the scale of the tile currently being evaluated
        var view_buffer = _this.meters_per_pixel * Geo$1.tile_size; // buffer area to keep tiles surrounding viewport
        var view_tile_min = TileID.coordAtZoom(Geo$1.tileForMeters([_this.center.meters.x - _this.size.meters.x / 2 - view_buffer, _this.center.meters.y + _this.size.meters.y / 2 + view_buffer], _this.tile_zoom), tile.coords.z);
        var view_tile_max = TileID.coordAtZoom(Geo$1.tileForMeters([_this.center.meters.x + _this.size.meters.x / 2 + view_buffer, _this.center.meters.y - _this.size.meters.y / 2 - view_buffer], _this.tile_zoom), tile.coords.z);
        if (tile.coords.x < view_tile_min.x || tile.coords.x > view_tile_max.x || tile.coords.y < view_tile_min.y || tile.coords.y > view_tile_max.y) {
          log('trace', "View: remove tile ".concat(tile.key, " (as ").concat(tile.coords.key, ") ") + "for being too far out of visible area (".concat(view_tile_min.key, ", ").concat(view_tile_max.key, ")"));
          return true;
        }
        return false;
      });
    }

    // Allocate model-view matrices
    // 64-bit versions are for CPU calcuations
    // 32-bit versions are downsampled and sent to GPU
  }, {
    key: "createMatrices",
    value: function createMatrices() {
      this.matrices = {};
      this.matrices.model = new Float64Array(16);
      this.matrices.model32 = new Float32Array(16);
      this.matrices.model_view = new Float64Array(16);
      this.matrices.model_view32 = new Float32Array(16);
      this.matrices.normal = new Float64Array(9);
      this.matrices.normal32 = new Float32Array(9);
      this.matrices.inverse_normal32 = new Float32Array(9);
    }

    // Calculate and set model/view and normal matrices for a tile
  }, {
    key: "setupTile",
    value: function setupTile(tile, program) {
      // Tile-specific state
      // TODO: calc these once per tile (currently being needlessly re-calculated per-tile-per-style)
      tile.setupProgram(this.matrices, program);

      // Model-view and normal matrices
      this.camera.setupMatrices(this.matrices, program);
    }

    // Set general uniforms that must be updated once per program
  }, {
    key: "setupProgram",
    value: function setupProgram(program) {
      program.uniform('2fv', 'u_resolution', [this.size.device.width, this.size.device.height]);
      program.uniform('3fv', 'u_map_position', [this.center.meters.x, this.center.meters.y, this.zoom]);
      program.uniform('1f', 'u_meters_per_pixel', this.meters_per_pixel);
      program.uniform('1f', 'u_device_pixel_ratio', Utils.device_pixel_ratio);
      program.uniform('1f', 'u_view_pan_snap_timer', this.pan_snap_timer);
      program.uniform('1i', 'u_view_panning', this.panning);
      this.camera.setupProgram(program);
    }

    // View requires some animation, such as after panning stops
  }, {
    key: "isAnimating",
    value: function isAnimating() {
      return this.pan_snap_timer <= VIEW_PAN_SNAP_TIME;
    }
  }]);
}();

var points_vs = `uniform vec2 u_resolution;
uniform float u_time;
uniform vec3 u_map_position;
uniform vec4 u_tile_origin;
uniform float u_tile_proxy_order_offset;
uniform bool u_tile_fade_in;
uniform float u_meters_per_pixel;
uniform float u_device_pixel_ratio;
uniform float u_visible_time;
uniform bool u_view_panning;
uniform float u_view_pan_snap_timer;

uniform mat4 u_model;
uniform mat4 u_modelView;
uniform mat3 u_normalMatrix;
uniform mat3 u_inverseNormalMatrix;

attribute vec4 a_position;
attribute vec4 a_shape;
attribute vec4 a_color;
attribute vec2 a_texcoord;
attribute vec2 a_offset;

uniform float u_point_type;

#ifdef TANGRAM_CURVED_LABEL
    attribute vec4 a_offsets;
    attribute vec4 a_pre_angles;
    attribute vec4 a_angles;
#endif

varying vec4 v_color;
varying vec2 v_texcoord;
varying vec4 v_world_position;
varying float v_alpha_factor;

#ifdef TANGRAM_HAS_SHADER_POINTS
    attribute float a_outline_edge;
    attribute vec4 a_outline_color;

    varying float v_outline_edge;
    varying vec4 v_outline_color;
    varying float v_aa_offset;
#endif

#ifdef TANGRAM_SHOW_HIDDEN_LABELS
    varying float v_label_hidden;
#endif

#define TANGRAM_PI 3.14159265359
#define TANGRAM_NORMAL vec3(0., 0., 1.)

#pragma tangram: attributes
#pragma tangram: camera
#pragma tangram: material
#pragma tangram: lighting
#pragma tangram: raster
#pragma tangram: global

vec2 rotate2D(vec2 _st, float _angle) {
    return mat2(cos(_angle),-sin(_angle),
                sin(_angle),cos(_angle)) * _st;
}

#ifdef TANGRAM_CURVED_LABEL
    // Assumes stops are [0, 0.33, 0.66, 0.99];
    float mix4linear(vec4 v, float x) {
        x = clamp(x, 0., 1.);
        return mix(mix(v[0], v[1], 3. * x),
                   mix(v[1],
                       mix(v[2], v[3], 3. * (max(x, .66) - .66)),
                       3. * (clamp(x, .33, .66) - .33)),
                   step(0.33, x)
                );
    }
#endif

void main() {
    // Initialize globals
    #pragma tangram: setup

    // discard hidden labels by collapsing into degenerate triangle
    #ifndef TANGRAM_SHOW_HIDDEN_LABELS
        if (a_shape.w == 0.) {
            gl_Position = vec4(0., 0., 0., 1.);
            return;
        }
    #else
        // highlight hidden label in fragment shader for debugging
        if (a_shape.w == 0.) {
            v_label_hidden = 1.; // label debug testing
        }
        else {
            v_label_hidden = 0.;
        }
    #endif

    v_alpha_factor = 1.0;
    v_color = a_color;
    v_texcoord = a_texcoord; // UV from vertex attribute

    #ifdef TANGRAM_HAS_SHADER_POINTS
        v_outline_color = a_outline_color;
        v_outline_edge = a_outline_edge;

        if (u_point_type == TANGRAM_POINT_TYPE_SHADER) { // shader point
            // use point dimensions for UVs instead (ignore attribute), add antialiasing info for fragment shader
            float _size = abs(a_shape.x / 128.); // radius in pixels
            v_texcoord = sign(a_shape.xy) * (_size + 1.) / _size;
            _size += 2.;
            v_aa_offset = 2. / _size;
        }
    #endif

    // Position
    vec4 position = u_modelView * vec4(a_position.xyz, 1.);

    // Apply positioning and scaling in screen space
    vec2 _shape = a_shape.xy / 256.;                 // values have an 8-bit fraction
    vec2 _offset = vec2(a_offset.x, -a_offset.y);    // flip y to make it point down
    float _theta = a_shape.z / 4096.;

    #ifdef TANGRAM_CURVED_LABEL
        //TODO: potential bug? null is passed in for non-curved labels, otherwise the first offset will be 0
        if (a_offsets[0] != 0.){
            vec4 _angles_scaled = (TANGRAM_PI / 16384.) * a_angles;
            vec4 _pre_angles_scaled = (TANGRAM_PI / 128.) * a_pre_angles;
            vec4 _offsets_scaled = (1. / 64.) * a_offsets;

            float _zoom = clamp(u_map_position.z - u_tile_origin.z, 0., 1.); //fract(u_map_position.z);
            float _pre_angle = mix4linear(_pre_angles_scaled, _zoom);
            float _angle = mix4linear(_angles_scaled, _zoom);
            float _offset_curve = mix4linear(_offsets_scaled, _zoom);

            _shape = rotate2D(_shape, _pre_angle); // rotate in place
            _shape.x += _offset_curve;            // offset for curved label segment
            _shape = rotate2D(_shape, _angle);     // rotate relative to curved label anchor
            _shape += rotate2D(_offset, _theta);   // offset if specified in the scene file
        }
        else {
            _shape = rotate2D(_shape + _offset, _theta);
        }
    #else
        _shape = rotate2D(_shape + _offset, _theta);
    #endif

    // Fade in (if requested) based on time mesh has been visible.
    // Value passed to fragment shader in the v_alpha_factor varying
    #ifdef TANGRAM_FADE_IN_RATE
        if (u_tile_fade_in) {
            v_alpha_factor *= clamp(u_visible_time * TANGRAM_FADE_IN_RATE, 0., 1.);
        }
    #endif

    // World coordinates for 3d procedural textures
    v_world_position = u_model * position;
    v_world_position.xy += _shape * u_meters_per_pixel;
    v_world_position = wrapWorldPosition(v_world_position);

    // Modify position before camera projection
    #pragma tangram: position

    cameraProjection(position);

    #ifdef TANGRAM_LAYER_ORDER
        // +1 is to keep all layers including proxies > 0
        applyLayerOrder(a_position.w + u_tile_proxy_order_offset + 1., position);
    #endif

    // Apply pixel offset in screen-space
    // Multiply by 2 is because screen is 2 units wide Normalized Device Coords (and u_resolution device pixels wide)
    // Device pixel ratio adjustment is because shape is in logical pixels
    position.xy += _shape * position.w * 2. * u_device_pixel_ratio / u_resolution;
    #ifdef TANGRAM_HAS_SHADER_POINTS
        if (u_point_type == TANGRAM_POINT_TYPE_SHADER) { // shader point
            // enlarge by 1px to catch missed MSAA fragments
            position.xy += sign(_shape) * position.w * u_device_pixel_ratio / u_resolution;
        }
    #endif

    // Snap to pixel grid
    // Only applied to fully upright sprites/labels (not shader-drawn points), while panning is not active
    #ifdef TANGRAM_HAS_SHADER_POINTS
    if (!u_view_panning && (abs(_theta) < TANGRAM_EPSILON) && u_point_type != TANGRAM_POINT_TYPE_SHADER) {
    #else
    if (!u_view_panning && (abs(_theta) < TANGRAM_EPSILON)) {
    #endif
        vec2 _position_fract = fract((((position.xy / position.w) + 1.) * .5) * u_resolution);
        vec2 _position_snap = position.xy + ((step(0.5, _position_fract) - _position_fract) * position.w * 2. / u_resolution);

        // Animate the snapping to smooth the transition and make it less noticeable
        #ifdef TANGRAM_VIEW_PAN_SNAP_RATE
            position.xy = mix(position.xy, _position_snap, clamp(u_view_pan_snap_timer * TANGRAM_VIEW_PAN_SNAP_RATE, 0., 1.));
        #else
            position.xy = _position_snap;
        #endif
    }

    gl_Position = position;
}
`;

var points_fs = `uniform vec2 u_resolution;
uniform float u_time;
uniform vec3 u_map_position;
uniform vec4 u_tile_origin;
uniform float u_meters_per_pixel;
uniform float u_device_pixel_ratio;
uniform float u_visible_time;

uniform mat3 u_normalMatrix;
uniform mat3 u_inverseNormalMatrix;

uniform sampler2D u_texture;
uniform float u_point_type;
uniform bool u_apply_color_blocks;

varying vec4 v_color;
varying vec2 v_texcoord;
varying vec4 v_world_position;
varying float v_alpha_factor;

#ifdef TANGRAM_HAS_SHADER_POINTS
    varying vec4 v_outline_color;
    varying float v_outline_edge;
    varying float v_aa_offset;
#endif

#ifdef TANGRAM_SHOW_HIDDEN_LABELS
    varying float v_label_hidden;
#endif

#define TANGRAM_NORMAL vec3(0., 0., 1.)

#pragma tangram: attributes
#pragma tangram: camera
#pragma tangram: material
#pragma tangram: lighting
#pragma tangram: raster
#pragma tangram: global

#ifdef TANGRAM_HAS_SHADER_POINTS
    //l is the distance from the center to the fragment, R is the radius of the drawn point
    float _tangram_antialias(float l, float R){
        float low  = R - v_aa_offset;
        float high = R + v_aa_offset;
        return 1. - smoothstep(low, high, l);
    }
#endif

void main (void) {
    // Initialize globals
    #pragma tangram: setup

    vec4 color = v_color;

    #ifdef TANGRAM_HAS_SHADER_POINTS
        // Only apply shader blocks to point, not to attached text (N.B.: for compatibility with ES)
        if (u_point_type == TANGRAM_POINT_TYPE_TEXTURE) { // sprite texture
            color *= texture2D(u_texture, v_texcoord);
        }
        else if (u_point_type == TANGRAM_POINT_TYPE_LABEL) { // label texture
            color = texture2D(u_texture, v_texcoord);
            color.rgb /= max(color.a, 0.001); // un-multiply canvas texture
        }
        else if (u_point_type == TANGRAM_POINT_TYPE_SHADER) { // shader point
            // Mask of outermost circle, either outline or point boundary
            float _d = length(v_texcoord); // distance to this fragment from the point center
            float _outer_alpha = _tangram_antialias(_d, 1.);
            float _fill_alpha = _tangram_antialias(_d, 1. - (v_outline_edge * 0.5)) * color.a;
            float _stroke_alpha = (_outer_alpha - _tangram_antialias(_d, 1. - v_outline_edge)) * v_outline_color.a;

            // Apply alpha compositing with stroke 'over' fill.
            #ifdef TANGRAM_BLEND_ADD
                color.a = _stroke_alpha + _fill_alpha;
                color.rgb = color.rgb * _fill_alpha + v_outline_color.rgb * _stroke_alpha;
            #else // TANGRAM_BLEND_OVERLAY (and fallback for not implemented blending modes)
                color.a = _stroke_alpha + _fill_alpha * (1. - _stroke_alpha);
                color.rgb = mix(color.rgb * _fill_alpha, v_outline_color.rgb, _stroke_alpha) / max(color.a, 0.001); // avoid divide by zero
            #endif
        }
    #else
        // If shader points not supported, assume label texture
        color = texture2D(u_texture, v_texcoord);
        color.rgb /= max(color.a, 0.001); // un-multiply canvas texture
    #endif

    // Shader blocks for color/filter are only applied for sprites, shader points, and standalone text,
    // NOT for text attached to a point (N.B.: for compatibility with ES)
    if (u_apply_color_blocks) {
        #pragma tangram: color
        #pragma tangram: filter
    }

    color.a *= v_alpha_factor;

    // highlight hidden label in fragment shader for debugging
    #ifdef TANGRAM_SHOW_HIDDEN_LABELS
        if (v_label_hidden > 0.) {
            color.a *= 0.5;
            color.rgb = vec3(1., 0., 0.);
        }
    #endif

    // Use alpha test as a lower-quality substitute
    // For opaque and translucent: avoid transparent pixels writing to depth buffer, obscuring geometry underneath
    // For multiply: avoid transparent pixels multiplying geometry underneath to zero/full black
    #if defined(TANGRAM_BLEND_OPAQUE) || defined(TANGRAM_BLEND_TRANSLUCENT) || defined(TANGRAM_BLEND_MULTIPLY)
        if (color.a < TANGRAM_ALPHA_TEST) {
            discard;
        }
    #endif

    // Make points more visible in wireframe debug mode
    #ifdef TANGRAM_WIREFRAME
        color = vec4(vec3(0.5), 1.); // use gray outline for textured points
        #ifdef TANGRAM_HAS_SHADER_POINTS
            if (u_point_type == TANGRAM_POINT_TYPE_SHADER) {
                color = vec4(v_color.rgb, 1.); // use original vertex color outline for shader points
            }
        #endif
    #endif

    gl_FragColor = color;
}
`;

var PLACEMENT = LabelPoint.PLACEMENT;
var Points = Object.create(Style);
var SHADER_POINT_VARIANT = '__shader_point';

// texture types
var TANGRAM_POINT_TYPE_TEXTURE = 1; // style texture/sprites (assigned by user)
var TANGRAM_POINT_TYPE_LABEL = 2; // labels (generated by rendering labels to canvas)
var TANGRAM_POINT_TYPE_SHADER = 3; // point (drawn in shader)

// default point size in pixels
var DEFAULT_POINT_SIZE = 16;

// Mixin text label methods
Object.assign(Points, TextLabels);
Object.assign(Points, {
  name: 'points',
  built_in: true,
  vertex_shader_src: points_vs,
  fragment_shader_src: points_fs,
  selection: true,
  // enable feature selection
  collision: true,
  // style includes a collision pass
  blend: 'overlay',
  // overlays drawn on top of all other styles, with blending
  init: function init() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Style.init.call(this, options);

    // Shader defines
    this.setupDefines();

    // Include code for SDF-drawn shader points
    this.defines.TANGRAM_HAS_SHADER_POINTS = true;

    // texture types
    this.defines.TANGRAM_POINT_TYPE_TEXTURE = TANGRAM_POINT_TYPE_TEXTURE;
    this.defines.TANGRAM_POINT_TYPE_LABEL = TANGRAM_POINT_TYPE_LABEL;
    this.defines.TANGRAM_POINT_TYPE_SHADER = TANGRAM_POINT_TYPE_SHADER;
    this.collision_group_points = this.name + '-points';
    this.collision_group_text = this.name + '-text';

    // Stenciling proxy tiles (to avoid compounding alpha artifacts) doesn't work well with
    // points/text labels, which have pure transparent pixels that interfere with the stencil buffer,
    // causing a "cut-out"/"x-ray" effect (preventing pixels that would usually be covered by proxy tiles
    // underneath from being rendered).
    this.stencil_proxy_tiles = false;
    this.reset();
  },
  // Setup defines common to points base and child (text) styles
  setupDefines: function setupDefines() {
    // If we're not rendering as overlay, we need a layer attribute
    if (this.blend !== 'overlay') {
      this.defines.TANGRAM_LAYER_ORDER = true;
    }

    // Fade in labels
    if (debugSettings$1.suppress_label_fade_in === true) {
      this.fade_in_time = 0;
      this.defines.TANGRAM_FADE_IN_RATE = null;
    } else {
      this.fade_in_time = 0.15; // time in seconds
      this.defines.TANGRAM_FADE_IN_RATE = 1 / this.fade_in_time;
    }

    // Snap points to pixel grid after panning stop
    if (debugSettings$1.suppress_label_snap_animation !== true) {
      this.defines.TANGRAM_VIEW_PAN_SNAP_RATE = 1 / VIEW_PAN_SNAP_TIME; // inverse time in seconds
    }

    // Show hidden labels for debugging
    if (debugSettings$1.show_hidden_labels === true) {
      this.defines.TANGRAM_SHOW_HIDDEN_LABELS = true;
    }

    // Enable wireframe for debugging
    if (debugSettings$1.wireframe === true) {
      this.defines.TANGRAM_WIREFRAME = true;
    }
  },
  reset: function reset() {
    this.queues = {};
    this.resetText();
    this.texture_missing_sprites = {}; // track which missing sprites we've found (reduce dupe log messages)
  },
  // Override to queue features instead of processing immediately
  addFeature: function addFeature(feature, draw, context) {
    var tile = context.tile;
    if (tile.generation !== this.generation) {
      return;
    }

    // Point styling
    var style = {};
    style.color = this.parseColor(draw.color, context);
    style.texture = draw.texture; // optional point texture, specified in `draw` or at style level
    style.label_texture = null; // assigned by labelling code if needed
    style.blend_order = draw.blend_order; // copy pre-computed blend order

    // require color or texture
    if (!style.color && !style.texture) {
      return;
    }
    style.alpha = StyleParser.evalCachedProperty(draw.alpha, context); // optional alpha override

    // optional sprite and texture
    var sprite_info;
    if (this.hasSprites(style)) {
      // populate sprite_info object with used sprites
      sprite_info = this.parseSprite(style, draw, context);
      if (sprite_info) {
        style.texcoords = sprite_info.texcoords;
      } else {
        // sprites are defined in the style's texture, but none are used in the current layer
        log({
          level: 'debug',
          once: true
        }, "Layer group '".concat(draw.layers.join(', '), "' ") + "uses a texture '".concat(style.texture, "', but doesn't specify which sprite to draw. ") + 'Features that match this layer group won\'t be drawn without specifying the sprite with the ' + '\'sprite\' or \'sprite_default\' properties. The merged draw parameters for this layer group are:', draw).then(function (logged) {
          if (logged) {
            log('debug', "Example feature for layer group '".concat(draw.layers.join(', '), "'"), feature);
          }
        });
        return;
      }
    } else if (draw.sprite) {
      // sprite specified in the draw layer but no sprites defined in the texture
      log({
        level: 'warn',
        once: true
      }, "Layer group '".concat(draw.layers.join(', '), "' ") + "specifies sprite '".concat(draw.sprite, "', but the texture '").concat(draw.texture, "' doesn't define any sprites. ") + 'Features that match this layer group won\'t be drawn. The merged draw parameters for this layer group are:', draw);
      return;
    }
    this.calcSize(draw, style, sprite_info, context);

    // incorporate outline into size
    if (draw.outline) {
      style.outline_width = StyleParser.evalCachedProperty(draw.outline.width, context) || StyleParser.defaults.outline.width;
      style.outline_color = this.parseColor(draw.outline.color, context);
    }
    style.outline_edge_pct = 0;
    if (style.outline_width && style.outline_color) {
      // adjust size and UVs for outline
      var outline_width = style.outline_width;
      style.size[0] += outline_width;
      style.size[1] += outline_width;
      style.outline_edge_pct = outline_width / Math.min(style.size[0], style.size[1]) * 2; // UV distance at which outline starts
      style.outline_alpha = StyleParser.evalCachedProperty(draw.outline.alpha, context); // optional alpha override
    }

    // size will be scaled to 16-bit signed int, so max allowed width + height of 256 pixels
    style.size[0] = Math.min(style.size[0], 256);
    style.size[1] = Math.min(style.size[1], 256);

    // Placement strategy
    style.placement = draw.placement;
    style.placement_min_length_ratio = StyleParser.evalCachedProperty(draw.placement_min_length_ratio, context);

    // Spacing parameter (in pixels) to equally space points along a line
    if (style.placement === PLACEMENT.SPACED && draw.placement_spacing) {
      style.placement_spacing = StyleParser.evalCachedProperty(draw.placement_spacing, context);
    }

    // Angle parameter (can be a number or the string "auto")
    style.angle = StyleParser.evalProperty(draw.angle, context) || 0;

    // points can be placed off the ground
    style.z = StyleParser.evalCachedDistanceProperty(draw.z, context) || StyleParser.defaults.z;
    style.tile_edges = draw.tile_edges; // usually activated for debugging, or rare visualization needs

    this.computeLayout(style, feature, draw, context, tile);

    // Text styling
    var tf = draw.text && draw.text.visible !== false &&
    // explicitly handle `visible` property for nested text
    this.parseTextFeature(feature, draw.text, context, tile);
    if (Array.isArray(tf)) {
      tf = null; // NB: boundary labels not supported for point label attachments, should log warning
      log({
        level: 'warn',
        once: true
      }, "Layer group '".concat(draw.layers.join(', '), "': ") + 'cannot use boundary labels (e.g. \'text_source: { left: ..., right: ... }\') for \'text\' labels attached to \'points\'; ' + "provided 'text_source' value was ".concat(JSON.stringify(draw.text.text_source)));
    }
    if (tf) {
      tf.layout.parent = style; // parent point will apply additional anchor/offset to text

      // Text labels have a default priority of 0.5 below their parent point (+0.5, priority is lower-is-better)
      // This can be overriden, as long as it is less than or equal to the default
      tf.layout.priority = draw.text.priority ? Math.max(tf.layout.priority, style.priority + 0.5) : style.priority + 0.5;
      Collision.addStyle(this.collision_group_text, tile.id);
    }
    this.queueFeature({
      feature: feature,
      draw: draw,
      context: context,
      style: style,
      text_feature: tf
    }, tile); // queue the feature for later processing

    // Register with collision manager
    Collision.addStyle(this.collision_group_points, tile.id);
  },
  // Calcuate the size for the current point feature
  calcSize: function calcSize(draw, style, sprite_info, context) {
    // point size defined explicitly, or defaults to sprite size, or generic fallback
    style.size = draw.size;
    if (!style.size) {
      // a 'size' property has not been set in the draw layer -
      // use the sprite size if it exists and a generic fallback if it doesn't
      style.size = sprite_info && sprite_info.css_size || [DEFAULT_POINT_SIZE, DEFAULT_POINT_SIZE];
    } else {
      // check for a cached size, passing the texture and any sprite references
      style.size = StyleParser.evalCachedPointSizeProperty(draw.size, sprite_info, Texture.textures[style.texture], context);
      if (style.size == null) {
        // the StyleParser couldn't evaluate a sprite size
        log({
          level: 'warn',
          once: true
        }, "Layer group '".concat(draw.layers.join(', '), "': ") + "'size' (".concat(JSON.stringify(draw.size.value), ") couldn't be interpreted, features that match ") + 'this layer group won\'t be drawn');
        return;
      } else if (typeof style.size === 'number') {
        style.size = [style.size, style.size]; // convert 1d size to 2d
      }
    }
  },
  hasSprites: function hasSprites(style) {
    return style.texture && Texture.textures[style.texture] && Texture.textures[style.texture].sprites;
  },
  // Generate a sprite_info object
  getSpriteInfo: function getSpriteInfo(style, sprite) {
    var info = Texture.textures[style.texture].sprites[sprite] && Texture.getSpriteInfo(style.texture, sprite);
    if (sprite && !info) {
      // track missing sprites (per texture)
      this.texture_missing_sprites[style.texture] = this.texture_missing_sprites[style.texture] || {};
      if (!this.texture_missing_sprites[style.texture][sprite]) {
        // only log each missing sprite once
        log('debug', "Style: in style '".concat(this.name, "', could not find sprite '").concat(sprite, "' for texture '").concat(style.texture, "'"));
        this.texture_missing_sprites[style.texture][sprite] = true;
      }
    } else if (info) {
      info.sprite = sprite;
    }
    return info;
  },
  // Check a sprite name against available sprites and return a sprite_info object
  parseSprite: function parseSprite(style, draw, context) {
    // check for functions
    var sprite = StyleParser.evalProperty(draw.sprite, context);
    var sprite_info = this.getSpriteInfo(style, sprite) || this.getSpriteInfo(style, draw.sprite_default);
    return sprite_info;
  },
  // Queue features for deferred processing (collect all features first so we can do collision on the whole group)
  queueFeature: function queueFeature(q, tile) {
    if (!this.tile_data[tile.id] || !this.queues[tile.id]) {
      this.startData(tile);
    }
    this.queues[tile.id] = this.queues[tile.id] || [];
    this.queues[tile.id].push(q);
  },
  // Override
  endData: function endData(tile) {
    return new Promise(function ($return, $error) {
      var _this, queue, text_objs, point_objs, _await$Promise$all, _await$Promise$all2, _await$Promise$all2$, labels, texts, textures, tile_data, _tile_data$textures;
      _this = this;
      if (tile.canceled) {
        log('trace', "Style ".concat(this.name, ": stop tile build because tile was canceled: ").concat(tile.key));
        return $return(null);
      }
      queue = this.queues[tile.id];
      delete this.queues[tile.id];

      // For each point feature, create one or more labels
      text_objs = [];
      point_objs = [];
      queue.forEach(function (q) {
        var style = q.style;
        var feature = q.feature;
        var geometry = feature.geometry;
        var feature_labels = _this.buildLabels(style.size, geometry, style);
        for (var i = 0; i < feature_labels.length; i++) {
          var label = feature_labels[i];
          var point_obj = {
            feature: feature,
            draw: q.draw,
            context: q.context,
            style: style,
            label: label
          };
          point_objs.push(point_obj);
          if (q.text_feature) {
            var text_obj = {
              feature: feature,
              draw: q.text_feature.draw,
              context: q.context,
              text: q.text_feature.text,
              text_settings_key: q.text_feature.text_settings_key,
              layout: q.text_feature.layout,
              point_label: label,
              linked: point_obj // link so text only renders when parent point is placed
            };
            text_objs.push(text_obj);

            // Unless text feature is optional, create a two-way link so that parent
            // point will only render when text is also placed
            if (!q.draw.text.optional) {
              point_obj.linked = text_obj; // two-way link
            }
          }
        }
      });

      // Collide both points and text, then build features
      return Promise.resolve(Promise.all([
      // Points
      Collision.collide(point_objs, this.collision_group_points, tile.id).then(function (point_objs) {
        point_objs.forEach(function (q) {
          _this.feature_style = q.style;
          _this.feature_style.label = q.label;
          _this.feature_style.linked = q.linked; // TODO: move linked into label to avoid extra prop tracking?
          Style.addFeature.call(_this, q.feature, q.draw, q.context);
        });
      }),
      // Labels
      this.collideAndRenderTextLabels(tile, this.collision_group_text, text_objs)])).then(function ($await_2) {
        try {
          _await$Promise$all = $await_2, _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2), _await$Promise$all2$ = _await$Promise$all2[1], labels = _await$Promise$all2$.labels, texts = _await$Promise$all2$.texts, textures = _await$Promise$all2$.textures;
          // Process labels
          if (labels && texts) {
            // Build queued features
            labels.forEach(function (q) {
              var text_settings_key = q.text_settings_key;
              var text_info = texts[text_settings_key] && texts[text_settings_key][q.text];

              // setup styling object expected by Style class
              var style = _this.feature_style;
              style.label = q.label;
              style.linked = q.linked; // TODO: move linked into label to avoid extra prop tracking?
              style.size = text_info.size.logical_size;
              style.texcoords = text_info.align[q.label.align].texcoords;
              style.label_texture = textures[text_info.align[q.label.align].texture_id];
              style.blend_order = q.draw.blend_order; // copy blend order from parent point

              Style.addFeature.call(_this, q.feature, q.draw, q.context);
            });
          }
          this.freeText(tile);

          // Finish tile mesh
          return Promise.resolve(Style.endData.call(this, tile)).then(function ($await_3) {
            try {
              tile_data = $await_3;
              // Attach tile-specific label atlas to mesh as a texture uniform
              if (tile_data && textures && textures.length) {
                tile_data.textures = tile_data.textures || [];
                (_tile_data$textures = tile_data.textures).push.apply(_tile_data$textures, _toConsumableArray(textures)); // assign texture ownership to tile
              }
              return $return(tile_data);
            } catch ($boundEx) {
              return $error($boundEx);
            }
          }, $error);
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }.bind(this), $error);
    }.bind(this));
  },
  _preprocess: function _preprocess(draw) {
    draw.color = StyleParser.createColorPropertyCache(draw.color);
    draw.alpha = StyleParser.createPropertyCache(draw.alpha);
    draw.texture = draw.texture !== undefined ? draw.texture : this.texture; // optional or default texture
    draw.blend_order = this.getBlendOrderForDraw(draw); // from draw block, or fall back on default style blend order

    if (draw.outline) {
      draw.outline.color = StyleParser.createColorPropertyCache(draw.outline.color);
      draw.outline.alpha = StyleParser.createPropertyCache(draw.outline.alpha);
      draw.outline.width = StyleParser.createPropertyCache(draw.outline.width, StyleParser.parsePositiveNumber);
    }
    draw.z = StyleParser.createPropertyCache(draw.z, StyleParser.parseUnits);

    // Size (1d value or 2d array)
    try {
      draw.size = StyleParser.createPointSizePropertyCache(draw.size, draw.texture);
    } catch (e) {
      log({
        level: 'warn',
        once: true
      }, "Layer group '".concat(draw.layers.join(', '), "': ") + "".concat(e, " (").concat(JSON.stringify(draw.size), "), features that match this layer group won't be drawn."));
      return null;
    }

    // Offset (2d array)
    draw.offset = StyleParser.createPropertyCache(draw.offset, function (v) {
      return Array.isArray(v) && v.map(StyleParser.parseNumber);
    });

    // Buffer (1d value or or 2d array) - must be >= 0
    draw.buffer = StyleParser.createPropertyCache(draw.buffer, function (v) {
      return (Array.isArray(v) ? v : [v, v]).map(StyleParser.parsePositiveNumber);
    });

    // Repeat rules - no repeat limitation for points by default
    draw.repeat_distance = StyleParser.createPropertyCache(draw.repeat_distance, StyleParser.parseNumber);

    // Placement strategies
    draw.placement = PLACEMENT[draw.placement && draw.placement.toUpperCase()];
    if (draw.placement == null) {
      draw.placement = PLACEMENT.VERTEX;
    }
    draw.placement_spacing = draw.placement_spacing != null ? draw.placement_spacing : 80; // default spacing
    draw.placement_spacing = StyleParser.createPropertyCache(draw.placement_spacing, StyleParser.parsePositiveNumber);
    draw.placement_min_length_ratio = draw.placement_min_length_ratio != null ? draw.placement_min_length_ratio : 1;
    draw.placement_min_length_ratio = StyleParser.createPropertyCache(draw.placement_min_length_ratio, StyleParser.parsePositiveNumber);
    if (typeof draw.angle === 'number') {
      draw.angle = draw.angle * Math.PI / 180; // convert static value to radians
    } else if (typeof draw.angle === 'function') {
      // convert function return value to radians
      var angle_func = draw.angle;
      draw.angle = function (context) {
        return angle_func(context) * Math.PI / 180;
      };
    } else {
      draw.angle = draw.angle || 0; // angle can be a string like "auto" (use angle of geometry)
    }

    // Optional text styling
    draw.text = this.preprocessText(draw.text); // will return null if valid text styling wasn't provided
    if (draw.text) {
      draw.text.key = draw.key; // inherits parent properties
      draw.text.group = draw.group;
      draw.text.layers = draw.layers;
      draw.text.order = draw.order;
      draw.text.blend_order = draw.blend_order;
      draw.text.repeat_group = draw.text.repeat_group != null ? draw.text.repeat_group : draw.repeat_group;
      draw.text.anchor = draw.text.anchor || this.default_anchor;
      draw.text.optional = typeof draw.text.optional === 'boolean' ? draw.text.optional : false; // default text to required
      draw.text.interactive = draw.text.interactive || draw.interactive; // inherits from point
    }
    return draw;
  },
  // Default to trying all anchor placements
  default_anchor: ['bottom', 'top', 'right', 'left'],
  // Compute label layout-related properties
  computeLayout: function computeLayout(target, feature, draw, context, tile) {
    var layout = target || {};
    layout.id = feature;
    layout.units_per_pixel = tile.units_per_pixel || 1;

    // collision flag
    layout.collide = draw.collide === false ? false : true;

    // label anchors (point labels only)
    // label position will be adjusted in the given direction, relative to its original point
    // one of: left, right, top, bottom, top-left, top-right, bottom-left, bottom-right
    layout.anchor = draw.anchor;

    // label offset and buffer in pixel (applied in screen space)
    layout.offset = StyleParser.evalCachedProperty(draw.offset, context) || StyleParser.zeroPair;
    layout.buffer = StyleParser.evalCachedProperty(draw.buffer, context) || StyleParser.zeroPair;

    // repeat rules
    layout.repeat_distance = StyleParser.evalCachedProperty(draw.repeat_distance, context);
    if (layout.repeat_distance) {
      layout.repeat_distance *= layout.units_per_pixel;
      layout.repeat_scale = 1; // initial repeat pass in tile with full scale

      if (typeof draw.repeat_group === 'function') {
        layout.repeat_group = draw.repeat_group(context); // dynamic repeat group
      } else {
        // default to top-level layer name
        // (e.g. all labels under `roads` layer, including sub-layers, are in one repeat group)
        layout.repeat_group = draw.repeat_group || context.layer;
      }
    }

    // label priority (lower is higher)
    var priority = draw.priority;
    if (priority != null) {
      if (typeof priority === 'function') {
        priority = priority(context);
      }
    } else {
      priority = -1 >>> 0; // default to max priority value if none set
    }
    layout.priority = priority;
    return layout;
  },
  // Implements label building for TextLabels mixin
  buildTextLabels: function buildTextLabels(tile, feature_queue) {
    var labels = [];
    for (var f = 0; f < feature_queue.length; f++) {
      var fq = feature_queue[f];
      var text_info = this.texts[tile.id][fq.text_settings_key][fq.text];
      var size = text_info.size.collision_size;
      fq.label = new LabelPoint(fq.point_label.position, size, fq.layout);
      labels.push(fq);
    }
    return labels;
  },
  // Builds one or more point labels for a geometry
  buildLabels: function buildLabels(size, geometry, layout) {
    var labels = [];
    if (geometry.type === 'Point') {
      labels.push(new LabelPoint(geometry.coordinates, size, layout, layout.angle));
    } else if (geometry.type === 'MultiPoint') {
      var points = geometry.coordinates;
      for (var i = 0; i < points.length; ++i) {
        var point = points[i];
        labels.push(new LabelPoint(point, size, layout, layout.angle));
      }
    } else if (geometry.type === 'LineString') {
      var line = geometry.coordinates;
      var point_labels = placePointsOnLine(line, size, layout);
      for (var _i = 0; _i < point_labels.length; ++_i) {
        labels.push(point_labels[_i]);
      }
    } else if (geometry.type === 'MultiLineString') {
      var lines = geometry.coordinates;
      for (var ln = 0; ln < lines.length; ln++) {
        var _line = lines[ln];
        var _point_labels = placePointsOnLine(_line, size, layout);
        for (var _i2 = 0; _i2 < _point_labels.length; ++_i2) {
          labels.push(_point_labels[_i2]);
        }
      }
    } else if (geometry.type === 'Polygon') {
      // Point at polygon centroid (of outer ring)
      if (layout.placement === PLACEMENT.CENTROID) {
        var centroid = Geo$1.centroid(geometry.coordinates);
        if (centroid) {
          // skip degenerate polygons
          labels.push(new LabelPoint(centroid, size, layout, layout.angle));
        }
      }
      // Point at each polygon vertex (all rings)
      else {
        var rings = geometry.coordinates;
        for (var _ln = 0; _ln < rings.length; _ln++) {
          var _point_labels2 = placePointsOnLine(rings[_ln], size, layout);
          for (var _i3 = 0; _i3 < _point_labels2.length; ++_i3) {
            labels.push(_point_labels2[_i3]);
          }
        }
      }
    } else if (geometry.type === 'MultiPolygon') {
      if (layout.placement === PLACEMENT.CENTROID) {
        var _centroid = Geo$1.multiCentroid(geometry.coordinates);
        if (_centroid) {
          // skip degenerate polygons
          labels.push(new LabelPoint(_centroid, size, layout, layout.angle));
        }
      } else {
        var polys = geometry.coordinates;
        for (var p = 0; p < polys.length; p++) {
          var _rings = polys[p];
          for (var _ln2 = 0; _ln2 < _rings.length; _ln2++) {
            var _point_labels3 = placePointsOnLine(_rings[_ln2], size, layout);
            for (var _i4 = 0; _i4 < _point_labels3.length; ++_i4) {
              labels.push(_point_labels3[_i4]);
            }
          }
        }
      }
    }
    return labels;
  },
  /**
   * A "template" that sets constant attibutes for each vertex, which is then modified per vertex or per feature.
   * A plain JS array matching the order of the vertex layout.
   */
  makeVertexTemplate: function makeVertexTemplate(style, mesh) {
    var add_custom_attribs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var i = 0;

    // a_position.xyz - vertex position
    // a_position.w - layer order
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = style.z || 0;
    this.vertex_template[i++] = this.scaleOrder(style.order);

    // a_shape.xy - size of point in pixels (scaling vector)
    // a_shape.z - angle of point
    // a_shape.w - show/hide flag
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = style.label.layout.collide ? 0 : 1; // set initial label hide/show state

    // a_texcoord.xy - texture coords
    if (!mesh.variant.shader_point) {
      this.vertex_template[i++] = 0;
      this.vertex_template[i++] = 0;
    }

    // a_offset.xy - offset of point from center, in pixels
    this.vertex_template[i++] = 0;
    this.vertex_template[i++] = 0;

    // a_color.rgba - feature color
    var color = style.color || StyleParser.defaults.color;
    this.vertex_template[i++] = color[0] * 255;
    this.vertex_template[i++] = color[1] * 255;
    this.vertex_template[i++] = color[2] * 255;
    this.vertex_template[i++] = (style.alpha != null ? style.alpha : color[3]) * 255;

    // a_selection_color.rgba - selection color
    if (mesh.variant.selection) {
      this.vertex_template[i++] = style.selection_color[0] * 255;
      this.vertex_template[i++] = style.selection_color[1] * 255;
      this.vertex_template[i++] = style.selection_color[2] * 255;
      this.vertex_template[i++] = style.selection_color[3] * 255;
    }

    // point outline
    if (mesh.variant.shader_point) {
      // a_outline_color.rgba - outline color
      var outline_color = style.outline_color || StyleParser.defaults.outline.color;
      this.vertex_template[i++] = outline_color[0] * 255;
      this.vertex_template[i++] = outline_color[1] * 255;
      this.vertex_template[i++] = outline_color[2] * 255;
      this.vertex_template[i++] = (style.outline_alpha != null ? style.outline_alpha : outline_color[3]) * 255;

      // a_outline_edge - point outline edge (as % of point size where outline begins)
      this.vertex_template[i++] = style.outline_edge_pct || StyleParser.defaults.outline.width;
    }
    if (add_custom_attribs) {
      this.addCustomAttributesToVertexTemplate(style, i);
    }
    return this.vertex_template;
  },
  buildQuad: function buildQuad(point, size, angle, angles, pre_angles, offset, offsets, texcoords, curve, vertex_data, vertex_template) {
    if (size[0] <= 0 || size[1] <= 0) {
      return 0; // size must be positive
    }
    return buildQuadForPoint(point, vertex_data, vertex_template, vertex_data.vertex_layout.index, size, offset, offsets, pre_angles, angle * 4096,
    // angle values have a 12-bit fraction
    angles, texcoords, curve);
  },
  // Build quad for point sprite
  build: function build(style, context) {
    var label = style.label;
    if (label.type === 'curved') {
      return this.buildCurvedLabel(label, style, context);
    } else {
      return this.buildStraightLabel(label, style, context);
    }
  },
  buildStraightLabel: function buildStraightLabel(label, style, context) {
    var mesh = this.getTileMesh(context.tile, this.meshVariantTypeForDraw(style));
    var vertex_template = this.makeVertexTemplate(style, mesh);
    var size, texcoords;
    if (label.type !== 'point') {
      size = style.size[label.type];
      texcoords = style.texcoords[label.type].texcoord;
    } else {
      size = style.size;
      texcoords = style.texcoords;
    }

    // setup style or label texture if applicable
    mesh.uniforms = mesh.uniforms || {};
    if (style.label_texture) {
      mesh.uniforms.u_texture = style.label_texture;
      mesh.uniforms.u_point_type = TANGRAM_POINT_TYPE_LABEL;
      mesh.uniforms.u_apply_color_blocks = false;
    } else if (style.texture) {
      mesh.uniforms.u_texture = style.texture;
      mesh.uniforms.u_point_type = TANGRAM_POINT_TYPE_TEXTURE;
      mesh.uniforms.u_apply_color_blocks = true;
    } else {
      mesh.uniforms.u_texture = Texture.default; // ensure a tetxure is always bound to avoid GL warnings ('no texture bound to unit' in Chrome)
      mesh.uniforms.u_point_type = TANGRAM_POINT_TYPE_SHADER;
      mesh.uniforms.u_apply_color_blocks = true;
    }
    var offset = label.offset;

    // TODO: instead of passing null, pass arrays with fingerprintable values
    // This value is checked in the shader to determine whether to apply curving logic
    var geom_count = this.buildQuad(label.position,
    // position
    size,
    // size in pixels
    label.angle,
    // angle in radians
    null,
    // placeholder for multiple angles
    null,
    // placeholder for multiple pre_angles
    offset,
    // offset from center in pixels
    null,
    // placeholder for multiple offsets
    texcoords,
    // texture UVs
    false,
    // if curved boolean
    mesh.vertex_data, vertex_template // VBO and data for current vertex
    );

    // track label mesh buffer data
    var linked = style.linked && style.linked.label.id;
    this.trackLabel(label, linked, mesh, geom_count, context);
    return geom_count;
  },
  buildCurvedLabel: function buildCurvedLabel(label, style, context) {
    var mesh, vertex_template;
    var geom_count = 0;

    // two passes for stroke and fill, where stroke needs to be drawn first (painter's algorithm)
    // this ensures strokes don't overlap on other fills

    // pass for stroke
    for (var i = 0; i < label.num_segments; i++) {
      var size = style.size[label.type][i];
      var texcoord_stroke = style.texcoords_stroke[i];

      // re-point to correct label texture
      style.label_texture = style.label_textures[i];
      mesh = this.getTileMesh(context.tile, this.meshVariantTypeForDraw(style));
      vertex_template = this.makeVertexTemplate(style, mesh);

      // add label texture uniform if needed
      mesh.uniforms = mesh.uniforms || {};
      mesh.uniforms.u_texture = style.label_texture;
      mesh.uniforms.u_point_type = TANGRAM_POINT_TYPE_LABEL;
      mesh.uniforms.u_apply_color_blocks = false;
      var offset = label.offset || [0, 0];
      var position = label.position;
      var angles = label.angles[i];
      var offsets = label.offsets[i];
      var pre_angles = label.pre_angles[i];
      var seg_count = this.buildQuad(position,
      // position
      size,
      // size in pixels
      label.angle,
      // angle in degrees
      angles,
      // angles per segment
      pre_angles,
      // pre_angle array (rotation applied before offseting)
      offset,
      // offset from center in pixels
      offsets,
      // offsets per segment
      texcoord_stroke,
      // texture UVs for stroked text
      true,
      // if curved
      mesh.vertex_data, vertex_template // VBO and data for current vertex
      );
      geom_count += seg_count;

      // track label mesh buffer data
      var linked = style.linked && style.linked.label.id;
      this.trackLabel(label, linked, mesh, seg_count, context);
    }

    // pass for fill
    for (var _i5 = 0; _i5 < label.num_segments; _i5++) {
      var _size = style.size[label.type][_i5];
      var texcoord = style.texcoords[label.type][_i5].texcoord;

      // re-point to correct label texture
      style.label_texture = style.label_textures[_i5];
      mesh = this.getTileMesh(context.tile, this.meshVariantTypeForDraw(style));
      vertex_template = this.makeVertexTemplate(style, mesh);

      // add label texture uniform if needed
      mesh.uniforms = mesh.uniforms || {};
      mesh.uniforms.u_texture = style.label_texture;
      mesh.uniforms.u_point_type = TANGRAM_POINT_TYPE_LABEL;
      mesh.uniforms.u_apply_color_blocks = false;
      var _offset = label.offset || [0, 0];
      var _position = label.position;
      var _angles = label.angles[_i5];
      var _offsets = label.offsets[_i5];
      var _pre_angles = label.pre_angles[_i5];
      var _seg_count = this.buildQuad(_position,
      // position
      _size,
      // size in pixels
      label.angle,
      // angle in degrees
      _angles,
      // angles per segment
      _pre_angles,
      // pre_angle array (rotation applied before offseting)
      _offset,
      // offset from center in pixels
      _offsets,
      // offsets per segment
      texcoord,
      // texture UVs for fill text
      true,
      // if curved
      mesh.vertex_data, vertex_template // VBO and data for current vertex
      );
      geom_count += _seg_count;

      // track label mesh buffer data
      var _linked = style.linked && style.linked.label.id;
      this.trackLabel(label, _linked, mesh, _seg_count, context);
    }
    return geom_count;
  },
  // track mesh data for label on main thread, for additional cross-tile collision/repeat passes
  trackLabel: function trackLabel(label, linked, mesh, geom_count /*, context*/) {
    // track if collision is enabled, or if the label is near enough to the tile edge to
    // necessitate further repeat checking
    if (label.layout.collide || label.may_repeat_across_tiles) {
      mesh.labels = mesh.labels || {};
      mesh.labels[label.id] = mesh.labels[label.id] || {
        container: {
          label: label.toJSON(),
          linked: linked
        },
        ranges: []
        // debug: { // uncomment and pass in context for debugging
        //     id: context.feature.properties.id,
        //     name: context.feature.properties.name,
        //     props: JSON.stringify(context.feature.properties),
        //     point_type: mesh.uniforms.u_point_type
        // }
      };

      // store byte ranges occupied by label in VBO, so they can be updated on main thread
      var vertex_count = geom_count * 2; // geom count is triangles: 2 triangles = 1 quad = 4 vertices
      var start = mesh.vertex_data.offset - mesh.vertex_data.stride * vertex_count; // start offset of byte range
      mesh.labels[label.id].ranges.push([start, vertex_count]);
    }
  },
  // Override to pass-through to generic point builder
  buildLines: function buildLines(lines, style, context) {
    return this.build(style, context);
  },
  buildPoints: function buildPoints(points, style, context) {
    return this.build(style, context);
  },
  buildPolygons: function buildPolygons(points, style, context) {
    return this.build(style, context);
  },
  // Override
  // Create or return desired vertex layout permutation based on flags
  vertexLayoutForMeshVariant: function vertexLayoutForMeshVariant(variant) {
    // Vertex layout only depends on shader point flag, so using it as layout key to avoid duplicate layouts
    if (this.vertex_layouts[variant.shader_point] == null) {
      // Attributes for this mesh variant
      // Optional attributes have placeholder values assigned with `static` parameter
      // TODO: could support optional attributes for selection and offset, but may not be worth it
      // since points generally don't consume much memory anyway
      var attribs = [{
        name: 'a_position',
        size: 4,
        type: gl$1.SHORT,
        normalized: false
      }, {
        name: 'a_shape',
        size: 4,
        type: gl$1.SHORT,
        normalized: false
      }, {
        name: 'a_texcoord',
        size: 2,
        type: gl$1.UNSIGNED_SHORT,
        normalized: true,
        static: variant.shader_point ? [0, 0] : null
      }, {
        name: 'a_offset',
        size: 2,
        type: gl$1.SHORT,
        normalized: false
      }, {
        name: 'a_color',
        size: 4,
        type: gl$1.UNSIGNED_BYTE,
        normalized: true
      }, {
        name: 'a_selection_color',
        size: 4,
        type: gl$1.UNSIGNED_BYTE,
        normalized: true,
        static: variant.selection ? null : [0, 0, 0, 0]
      }, {
        name: 'a_outline_color',
        size: 4,
        type: gl$1.UNSIGNED_BYTE,
        normalized: true,
        static: variant.shader_point ? null : [0, 0, 0, 0]
      }, {
        name: 'a_outline_edge',
        size: 1,
        type: gl$1.FLOAT,
        normalized: false,
        static: variant.shader_point ? null : 0
      }];
      this.addCustomAttributesToAttributeList(attribs);
      this.vertex_layouts[variant.shader_point] = new VertexLayout(attribs);
    }
    return this.vertex_layouts[variant.shader_point];
  },
  // Override
  meshVariantTypeForDraw: function meshVariantTypeForDraw(draw) {
    var texture = draw.label_texture || draw.texture || SHADER_POINT_VARIANT; // unique key by texture name
    var key = texture + '/' + draw.blend_order;
    if (this.variants[key] == null) {
      this.variants[key] = {
        key: key,
        selection: 1,
        // TODO: make this vary by draw params
        shader_point: texture === SHADER_POINT_VARIANT,
        // is shader point
        blend_order: draw.blend_order,
        mesh_order: draw.label_texture ? 1 : 0 // put text on top of points (e.g. for highway shields, etc.)
      };
    }
    return this.variants[key]; // return pre-calculated mesh variant
  },
  // Override
  makeMesh: function makeMesh(vertex_data, vertex_elements) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    // Add label fade time
    options = Object.assign({}, options, {
      fade_in_time: this.fade_in_time
    });
    return Style.makeMesh.call(this, vertex_data, vertex_elements, options);
  }
});

function _callSuper$4(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$4() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$4() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$4 = function _isNativeReflectConstruct() { return !!t; })(); }
var STOPS = [0, 0.33, 0.66, 0.99]; // zoom levels for curved label snapshot data (offsets and angles)
var LINE_EXCEED_STRAIGHT = 1.5; // minimal ratio for straight labels (label length) / (line length)
var LINE_EXCEED_STRAIGHT_NO_CURVE = 1.8; // minimal ratio for straight labels that have no curved option (like Arabic)
var LINE_EXCEED_STAIGHT_LOOSE = 2.3; // 2nd pass minimal ratio for straight labels
var STRAIGHT_ANGLE_TOLERANCE = 0.1; // multiple "almost straight" segments within this angle tolerance can be considered one straight segment (in radians)
var CURVE_MIN_TOTAL_COST = 1.3; // curved line total curvature tolerance (sum in radians)
var CURVE_MIN_AVG_COST = 0.4; // curved line average curvature tolerance (mean)
var CURVE_MAX_ANGLE = 1; // curved line singular curvature tolerance (value in radians)
var ORIENTED_LABEL_OFFSET_FACTOR = 1.2; // multiply offset by this amount to avoid linked label collision
var VERTICAL_ANGLE_TOLERANCE = 0.01; // nearly vertical lines considered vertical within this angle tolerance

var LabelLine = {
  // Given a label's bounding box size and size of broken up individual segments
  // return a label that fits along the line geometry that is either straight (preferred) or curved (if straight tolerances aren't met)
  create: function create(segment_sizes, total_size, line, layout) {
    // The passes done for fitting a label, and provided tolerances for each pass
    // First straight is chosen with a low tolerance. Then curved. Then straight with a higher tolerance.
    var passes = [{
      type: 'straight',
      tolerance: layout.no_curving ? LINE_EXCEED_STRAIGHT_NO_CURVE : LINE_EXCEED_STRAIGHT
    }, {
      type: 'curved'
    }, {
      type: 'straight',
      tolerance: LINE_EXCEED_STAIGHT_LOOSE
    }];

    // loop through passes. first label found wins.
    for (var i = 0; i < passes.length; i++) {
      var check = passes[i];
      var label = void 0;
      if (check.type === 'straight') {
        label = new LabelLineStraight(total_size, line, layout, check.tolerance);
      } else if (check.type === 'curved' && !layout.no_curving && line.length > 2) {
        label = new LabelLineCurved(segment_sizes, line, layout);
      }
      if (label && !label.throw_away) {
        return label;
      }
    }
    return false;
  }
};

// Base class for a labels.
var LabelLineBase = /*#__PURE__*/function () {
  function LabelLineBase(layout) {
    _classCallCheck(this, LabelLineBase);
    this.id = Label.nextLabelId();
    this.layout = layout;
    this.position = [];
    this.angle = 0;
    this.offset = layout.offset.slice();
    this.unit_scale = this.layout.units_per_pixel;
    this.obbs = [];
    this.aabbs = [];
    this.type = ''; // "curved" or "straight" to be set by child class
    this.throw_away = false; // boolean that determines if label should be discarded
  }

  // Minimal representation of label
  return _createClass(LabelLineBase, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        id: this.id,
        type: this.type,
        position: this.position,
        size: this.size,
        offset: this.offset,
        angle: this.angle,
        breach: this.breach,
        may_repeat_across_tiles: this.may_repeat_across_tiles,
        layout: textLayoutToJSON(this.layout)
      };
    }

    // Given a line, find the longest series of segments that maintains a constant orientation in the x-direction.
    // This assures us that the line has no orientation flip, so text would not appear upside-down.
    // If the line's orientation is reversed, the flip return value will be true, otherwise false
  }, {
    key: "discard",
    value:
    // Checks each segment to see if it should be discarded (via collision). If any segment fails this test, they all fail.
    function discard(bboxes) {
      var exclude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (this.throw_away) {
        return true;
      }
      for (var i = 0; i < this.obbs.length; i++) {
        var aabb = this.aabbs[i];
        var obb = this.obbs[i];
        var obj = {
          aabb: aabb,
          obb: obb
        };
        var shouldDiscard = Label.prototype.occluded.call(obj, bboxes, exclude);
        if (shouldDiscard) {
          return true;
        }
      }
      return false;
    }

    // Checks each segment to see if it is within the tile. If any segment fails this test, they all fail.
  }, {
    key: "inTileBounds",
    value: function inTileBounds() {
      for (var i = 0; i < this.aabbs.length; i++) {
        var aabb = this.aabbs[i];
        var obj = {
          aabb: aabb
        };
        var in_bounds = Label.prototype.inTileBounds.call(obj);
        if (!in_bounds) {
          return false;
        }
      }
      return true;
    }

    // Method to calculate oriented bounding box
    // "angle" is the angle of the text segment, "angle_offset" is the angle applied to the offset.
    // Offset angle is constant for the entire label, while segment angles are not.
  }], [{
    key: "splitLineByOrientation",
    value: function splitLineByOrientation(line) {
      var current_line = [line[0]];
      var current_length = 0;
      var max_length = 0;
      var orientation = 0;
      var longest_line = current_line;
      var flip = false;
      for (var i = 1; i < line.length; i++) {
        var pt = line[i];
        var prev_pt = line[i - 1];
        var length = Vector$1.length(Vector$1.sub(pt, prev_pt));
        if (pt[0] > prev_pt[0]) {
          // positive orientation
          if (orientation === 1) {
            current_line.push(pt);
            current_length += length;
            if (current_length > max_length) {
              longest_line = current_line;
              max_length = current_length;
              flip = false;
            }
          } else {
            current_line = [prev_pt, pt];
            current_length = length;
            if (current_length > max_length) {
              longest_line = current_line;
              max_length = current_length;
              flip = false;
            }
            orientation = 1;
          }
        } else if (pt[0] < prev_pt[0]) {
          // negative orientation
          if (orientation === -1) {
            current_line.unshift(pt);
            current_length += length;
            if (current_length > max_length) {
              longest_line = current_line;
              max_length = current_length;
              flip = true;
            }
          } else {
            // prepend points (reverse order)
            current_line = [pt, prev_pt];
            current_length = length;
            if (current_length > max_length) {
              longest_line = current_line;
              max_length = current_length;
              flip = true;
            }
            orientation = -1;
          }
        } else {
          // vertical line (doesn't change previous orientation)
          if (orientation === -1) {
            current_line.unshift(pt);
          } else {
            current_line.push(pt);
            orientation = 1;
          }
          current_length += length;
          if (current_length > max_length) {
            longest_line = current_line;
            max_length = current_length;
            flip = orientation === -1;
          }
        }
      }
      return [longest_line, flip];
    }
  }, {
    key: "createOBB",
    value: function createOBB(position, width, height, angle, angle_offset, offset, upp) {
      var p0 = position[0];
      var p1 = position[1];

      // apply offset, x positive, y pointing down
      if (offset && (offset[0] !== 0 || offset[1] !== 0)) {
        offset = Vector$1.rot(offset, angle_offset);
        p0 += offset[0] * upp;
        p1 -= offset[1] * upp;
      }

      // the angle of the obb is negative since it's the tile system y axis is pointing down
      return new OBB(p0, p1, -angle, width, height);
    }
  }]);
}();

// Class for straight labels.
// Extends base LabelLine class.
var LabelLineStraight = /*#__PURE__*/function (_LabelLineBase) {
  function LabelLineStraight(size, line, layout, tolerance) {
    var _this;
    _classCallCheck(this, LabelLineStraight);
    _this = _callSuper$4(this, LabelLineStraight, [layout]);
    _this.type = 'straight';
    _this.size = size;
    _this.throw_away = !_this.fit(size, line, layout, tolerance);
    return _this;
  }

  // Determine if the label can fit the geometry within provided tolerance
  // A straight label is generally placed at segment midpoints, but can "look ahead" to further segments
  // if they are within an angle bound given by STRAIGHT_ANGLE_TOLERANCE and place at the midpoint between non-consecutive segments
  _inherits(LabelLineStraight, _LabelLineBase);
  return _createClass(LabelLineStraight, [{
    key: "fit",
    value: function fit(size, line, layout, tolerance) {
      var upp = this.unit_scale;
      var flipped; // boolean indicating if orientation of line is changed

      // Make new copy of line, with consistent orientation
      // matches for "left" or "right" labels where the offset angle is dependent on the geometry
      var _LabelLineBase$splitL = LabelLineBase.splitLineByOrientation(line);
      var _LabelLineBase$splitL2 = _slicedToArray(_LabelLineBase$splitL, 2);
      line = _LabelLineBase$splitL2[0];
      flipped = _LabelLineBase$splitL2[1];
      if (typeof layout.orientation === 'number') {
        this.offset[1] += ORIENTED_LABEL_OFFSET_FACTOR * (size[1] - layout.vertical_buffer);

        // if line is flipped, or the orientation is "left" (-1), flip the offset's y-axis
        if (flipped) {
          this.offset[1] *= -1;
        }
        if (layout.orientation === -1) {
          this.offset[1] *= -1;
        }
      }
      var line_lengths = getLineLengths(line);
      var label_length = size[0] * upp;

      // loop through line looking for a placement for the label
      for (var i = 0; i < line.length - 1; i++) {
        var curr = line[i];
        var curve_tolerance = 0;
        var length = 0;
        var ahead_index = i + 1;
        var prev_angle = void 0;

        // look ahead to further line segments within an angle tolerance
        while (ahead_index < line.length) {
          var ahead_curr = line[ahead_index - 1];
          var ahead_next = line[ahead_index];
          var next_angle = getAngleForSegment(ahead_curr, ahead_next);
          if (ahead_index !== i + 1) {
            curve_tolerance += getAbsAngleDiff(next_angle, prev_angle);
          }

          // if curve tolerance is exceeded, break out of loop
          if (Math.abs(curve_tolerance) > STRAIGHT_ANGLE_TOLERANCE) {
            break;
          }
          length += line_lengths[ahead_index - 1];

          // check if label fits geometry
          if (calcFitness(length, label_length) < tolerance) {
            var curr_midpt = Vector$1.mult(Vector$1.add(curr, ahead_next), 0.5);

            // TODO: modify angle if line chosen within curve_angle_tolerance
            // Currently line angle is the same as the starting angle, perhaps it should average across segments?
            this.angle = -next_angle;

            // ensure that all vertical labels point up (not down) by snapping angles close to pi/2 to -pi/2
            if (Math.abs(this.angle - Math.PI / 2) < VERTICAL_ANGLE_TOLERANCE) {
              // flip angle and offset
              this.angle = -Math.PI / 2;
              if (typeof layout.orientation === 'number') {
                this.offset[1] *= -1;
              }
            }
            this.position = curr_midpt;
            this.updateBBoxes(this.position, size, this.angle, this.angle, this.offset);
            return true; // use this placement
          }
          prev_angle = next_angle;
          ahead_index++;
        }
      }
      return false;
    }

    // Calculate bounding boxes
  }, {
    key: "updateBBoxes",
    value: function updateBBoxes(position, size, angle, angle_offset, offset) {
      var upp = this.unit_scale;

      // reset bounding boxes
      this.obbs = [];
      this.aabbs = [];
      var width = (size[0] + 2 * this.layout.buffer[0]) * upp * Label.epsilon;
      var height = (size[1] + 2 * this.layout.buffer[1]) * upp * Label.epsilon;
      var obb = LabelLineBase.createOBB(position, width, height, angle, angle_offset, offset, upp);
      var aabb = obb.getExtent();
      this.obbs.push(obb);
      this.aabbs.push(aabb);
      if (this.inTileBounds) {
        this.breach = !this.inTileBounds();
      }
      if (this.mayRepeatAcrossTiles) {
        this.may_repeat_across_tiles = this.mayRepeatAcrossTiles();
      }
    }
  }]);
}(LabelLineBase);

// Class for curved labels
// Extends base LabelLine class to support angles, pre_angles, offsets as arrays for each segment
var LabelLineCurved = /*#__PURE__*/function (_LabelLineBase2) {
  function LabelLineCurved(segment_sizes, line, layout) {
    var _this2;
    _classCallCheck(this, LabelLineCurved);
    _this2 = _callSuper$4(this, LabelLineCurved, [layout]);
    _this2.type = 'curved';

    // extra data for curved labels
    _this2.angles = [];
    _this2.pre_angles = [];
    _this2.offsets = [];
    _this2.num_segments = segment_sizes.length;
    _this2.sizes = segment_sizes;
    _this2.throw_away = !_this2.fit(_this2.sizes, line, layout);
    return _this2;
  }

  // Minimal representation of label
  _inherits(LabelLineCurved, _LabelLineBase2);
  return _createClass(LabelLineCurved, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        id: this.id,
        type: this.type,
        obbs: this.obbs.map(function (o) {
          return o.toJSON();
        }),
        position: this.position,
        breach: this.breach,
        may_repeat_across_tiles: this.may_repeat_across_tiles,
        layout: textLayoutToJSON(this.layout)
      };
    }

    // Determine if the curved label can fit the geometry.
    // No tolerance is provided because the label must fit entirely within the line geometry.
  }, {
    key: "fit",
    value: function fit(size, line, layout) {
      var upp = this.unit_scale;
      var flipped; // boolean determining if the line orientation is reversed

      var height_px = Math.max.apply(Math, _toConsumableArray(size.map(function (s) {
        return s[1];
      }))); // use max segment height
      var height = height_px * upp;

      // Make new copy of line, with consistent orientation
      // matches for "left" or "right" labels where the offset angle is dependent on the geometry
      var _LabelLineBase$splitL3 = LabelLineBase.splitLineByOrientation(line);
      var _LabelLineBase$splitL4 = _slicedToArray(_LabelLineBase$splitL3, 2);
      line = _LabelLineBase$splitL4[0];
      flipped = _LabelLineBase$splitL4[1];
      if (typeof layout.orientation === 'number') {
        this.offset[1] += ORIENTED_LABEL_OFFSET_FACTOR * (height_px - layout.vertical_buffer);

        // if line is flipped, or the orientation is "left" (-1), flip the offset's y-axis
        if (flipped) {
          this.offset[1] *= -1;
        }
        if (layout.orientation === -1) {
          this.offset[1] *= -1;
        }
      }
      var line_lengths = getLineLengths(line);
      var label_lengths = size.map(function (size) {
        return size[0] * upp;
      });
      var total_line_length = line_lengths.reduce(function (prev, next) {
        return prev + next;
      }, 0);
      var total_label_length = label_lengths.reduce(function (prev, next) {
        return prev + next;
      }, 0);

      // if label displacement is longer than the line, no fit can be possible
      if (total_label_length > total_line_length) {
        return false;
      }

      // need two line segments for a curved label
      // NB: single segment lines should still be labeled if possible during straight label placement pass
      var start_index = 0,
        end_index = line.length - 1;
      if (end_index - start_index < 2) {
        return false;
      }

      // all positional offsets of the label are relative to the anchor
      var anchor_index = LabelLineCurved.curvaturePlacement(line, total_line_length, line_lengths, total_label_length, start_index, end_index);
      var anchor = line[anchor_index];

      // if anchor not found, or greater than the end_index, no fit possible
      if (anchor_index === -1 || end_index - anchor_index < 2) {
        return false;
      }

      // set start position at anchor position
      this.position = anchor;

      // Loop through labels at each zoom level stop
      // TODO: Can be made faster since we are computing every segment for every zoom stop
      // We can skip a segment's calculation once a segment's angle equals its fully zoomed angle
      for (var i = 0; i < label_lengths.length; i++) {
        this.offsets[i] = [];
        this.angles[i] = [];
        this.pre_angles[i] = [];

        // loop through stops (z = [0, .33, .66, .99] + base zoom)
        for (var j = 0; j < STOPS.length; j++) {
          var stop = STOPS[j];

          // scale the line geometry by the zoom magnification
          var _LabelLineCurved$scal = LabelLineCurved.scaleLine(stop, line),
            _LabelLineCurved$scal2 = _slicedToArray(_LabelLineCurved$scal, 2),
            new_line = _LabelLineCurved$scal2[0],
            _line_lengths = _LabelLineCurved$scal2[1];
          anchor = new_line[anchor_index];

          // calculate label data relative to anchor position
          var _LabelLineCurved$plac = LabelLineCurved.placeAtIndex(anchor_index, new_line, _line_lengths, label_lengths),
            positions = _LabelLineCurved$plac.positions,
            offsets = _LabelLineCurved$plac.offsets,
            angles = _LabelLineCurved$plac.angles,
            pre_angles = _LabelLineCurved$plac.pre_angles;

          // translate 2D offsets into "polar coordinates"" (1D distances with angles)
          var offsets1d = offsets.map(function (offset) {
            return Math.sqrt(offset[0] * offset[0] + offset[1] * offset[1]) / upp;
          });

          // Calculate everything that is independent of zoom level (angle for offset, bounding boxes, etc)
          if (stop === 0) {
            // use average angle for a global label offset (if offset is specified)
            this.angle = 1 / angles.length * angles.reduce(function (prev, next) {
              return prev + next;
            });

            // calculate bounding boxes for collision at zoom level 0
            for (var _i = 0; _i < positions.length; _i++) {
              var position = positions[_i];
              var pre_angle = pre_angles[_i];
              var width = label_lengths[_i];
              var angle_segment = pre_angle + angles[_i];
              var angle_offset = this.angle;
              var obb = LabelLineBase.createOBB(position, width, height, angle_segment, angle_offset, this.offset, upp);
              var aabb = obb.getExtent();
              this.obbs.push(obb);
              this.aabbs.push(aabb);
            }
          }

          // push offsets/angles/pre_angles for each zoom and for each label segment
          this.offsets[i].push(offsets1d[i]);
          this.angles[i].push(angles[i]);
          this.pre_angles[i].push(pre_angles[i]);
        }
      }
      return true;
    }

    // Find optimal starting segment for placing a curved label along a line within provided tolerances
    // This is determined by calculating the curvature at each interior vertex of a line
    // then construct a "window" whose breadth is the length of the label. Place this label at each vertex
    // and add the curvatures of each vertex within the window. The vertex mimimizing this value is the "best" placement.
    // Return -1 is no placement found.
  }], [{
    key: "curvaturePlacement",
    value: function curvaturePlacement(line, total_line_length, line_lengths, label_length, start_index, end_index) {
      start_index = start_index || 0;
      end_index = end_index || line.length - 1;
      var curvatures = []; // array of curvature values per line vertex

      // calculate curvature values
      for (var i = start_index + 1; i < end_index; i++) {
        var prev = line[i - 1];
        var curr = line[i];
        var next = line[i + 1];
        var norm_1 = Vector$1.perp(curr, prev);
        var norm_2 = Vector$1.perp(next, curr);
        var curvature = Vector$1.angleBetween(norm_1, norm_2);

        // If curvature at a vertex is greater than the tolerance, remove it from consideration
        // by giving it an infinite penalty
        if (curvature > CURVE_MAX_ANGLE) {
          curvature = Infinity;
        }
        curvatures.push(curvature);
      }
      curvatures.push(Infinity); // Infinite penalty for going off end of line

      // calculate curvature costs
      var total_costs = [];
      var avg_costs = [];
      var line_index = start_index;
      var position = 0;
      for (var _i2 = 0; _i2 < start_index; _i2++) {
        position += line_lengths[_i2];
      }

      // move window along line, starting at first vertex
      while (position + label_length < total_line_length) {
        // define window breadth
        var window_start = position;
        var window_end = window_start + label_length;
        var line_position = window_start;
        var ahead_index = line_index;
        var cost = 0;

        // iterate through points on line intersecting window
        while (ahead_index < end_index && line_position + line_lengths[ahead_index] < window_end) {
          cost += curvatures[ahead_index];
          if (cost === Infinity) {
            break; // no further progress can be made
          }
          line_position += line_lengths[ahead_index];
          ahead_index++;
        }

        // if optimal cost, break out
        if (cost === 0) {
          return line_index;
        }
        var avg_cost = cost / (ahead_index - line_index);
        total_costs.push(cost);
        avg_costs.push(avg_cost);
        position += line_lengths[line_index];
        line_index++;
      }
      if (total_costs.length === 0) {
        return -1;
      }

      // calculate min cost and avg cost to determine if label can fit within curvatures tolerances
      var min_total_cost = Math.min.apply(null, total_costs);
      var min_index = total_costs.indexOf(min_total_cost);
      var min_avg_cost = avg_costs[min_index];
      if (min_total_cost < CURVE_MIN_TOTAL_COST && min_avg_cost < CURVE_MIN_AVG_COST) {
        // return index with best placement (least curvature)
        return total_costs.indexOf(min_total_cost);
      } else {
        // if tolerances aren't satisfied, throw away tile
        return -1;
      }
    }

    // Scale the line by a scale factor (used for computing the angles and offsets at fractional zoom levels)
    // Return the new line positions and their lengths
  }, {
    key: "scaleLine",
    value: function scaleLine(scale, line) {
      var new_line = [line[0]];
      var line_lengths = [];
      line.forEach(function (pt, i) {
        if (i === line.length - 1) {
          return;
        }
        var v = Vector$1.sub(line[i + 1], line[i]);
        var delta = Vector$1.mult(v, 1 + scale);
        new_line.push(Vector$1.add(new_line[i], delta));
        line_lengths.push(Vector$1.length(delta));
      });
      return [new_line, line_lengths];
    }

    // Place a label at a given line index
  }, {
    key: "placeAtIndex",
    value: function placeAtIndex(anchor_index, line, line_lengths, label_lengths) {
      var anchor = line[anchor_index];

      // Use flat coordinates. Get nearest line vertex index, and offset from the vertex for all labels.
      var _LabelLineCurved$getI = LabelLineCurved.getIndicesAndOffsets(anchor_index, line_lengths, label_lengths),
        _LabelLineCurved$getI2 = _slicedToArray(_LabelLineCurved$getI, 2),
        indices = _LabelLineCurved$getI2[0],
        relative_offsets = _LabelLineCurved$getI2[1];

      // get 2D positions based on "flat" indices and offsets
      var positions = LabelLineCurved.getPositionsFromIndicesAndOffsets(line, indices, relative_offsets);

      // get 2d offsets, angles and pre_angles relative to anchor
      var _LabelLineCurved$getA = LabelLineCurved.getAnglesFromIndicesAndOffsets(anchor, indices, line, positions),
        _LabelLineCurved$getA2 = _slicedToArray(_LabelLineCurved$getA, 3),
        offsets = _LabelLineCurved$getA2[0],
        angles = _LabelLineCurved$getA2[1],
        pre_angles = _LabelLineCurved$getA2[2];
      return {
        positions: positions,
        offsets: offsets,
        angles: angles,
        pre_angles: pre_angles
      };
    }

    // Given label lengths to place along a line broken into several lengths, computer what indices and at which offsets
    // the labels will appear on the line. Assume the line is straight, as it is not necessary to consider angles.
    //
    // Label lengths:
    // |-----|----|-----|-----------------|-------------|
    //
    // Line Lengths;
    // |---------|---------|-------------|------------|----------|-------|
    //
    // Result: indices: [0,0,1,1,3,4]
  }, {
    key: "getIndicesAndOffsets",
    value: function getIndicesAndOffsets(line_index, line_lengths, label_lengths) {
      var num_labels = label_lengths.length;
      var indices = [];
      var offsets = [];
      var label_index = 0;
      var label_offset = 0;
      var line_offset = 0;

      // iterate along line
      while (label_index < num_labels) {
        var label_length = label_lengths[label_index];

        // iterate along labels within the line segment
        while (label_index < num_labels && label_offset + 0.5 * label_length <= line_offset + line_lengths[line_index]) {
          var offset = label_offset - line_offset + 0.5 * label_length;
          offsets.push(offset);
          indices.push(line_index);
          label_offset += label_length;
          label_index++;
          label_length = label_lengths[label_index];
        }
        line_offset += line_lengths[line_index];
        line_index++;
      }
      return [indices, offsets];
    }

    // Given indices and 1D offsets on a line, compute their 2D positions
  }, {
    key: "getPositionsFromIndicesAndOffsets",
    value: function getPositionsFromIndicesAndOffsets(line, indices, offsets) {
      var positions = [];
      for (var i = 0; i < indices.length; i++) {
        var index = indices[i];
        var offset = offsets[i];
        var angle = getAngleForSegment(line[index], line[index + 1]);
        var offset2d = Vector$1.rot([offset, 0], angle);
        var position = Vector$1.add(line[index], offset2d);
        positions.push(position);
      }
      return positions;
    }

    // Given indices and 1D offsets on a line, compute their angles and pre-angles from a reference anchor point
  }, {
    key: "getAnglesFromIndicesAndOffsets",
    value: function getAnglesFromIndicesAndOffsets(anchor, indices, line, positions) {
      var angles = [];
      var pre_angles = [];
      var offsets = [];
      for (var i = 0; i < positions.length; i++) {
        var position = positions[i];
        var index = indices[i];
        var offset = Vector$1.sub(position, anchor);
        var offset_angle = -Vector$1.angle(offset);
        var angle = getTextAngleForSegment(line[index], line[index + 1]);
        var pre_angle = angle - offset_angle;
        if (i > 0) {
          var prev_angle = angles[i - 1];
          var prev_pre_angle = pre_angles[i - 1];
          if (Math.abs(offset_angle - prev_angle) > Math.PI) {
            offset_angle += offset_angle > prev_angle ? -2 * Math.PI : 2 * Math.PI;
          }
          if (Math.abs(prev_pre_angle - pre_angle) > Math.PI) {
            pre_angle += pre_angle > prev_pre_angle ? -2 * Math.PI : 2 * Math.PI;
          }
        }
        angles.push(offset_angle);
        pre_angles.push(pre_angle);
        offsets.push(offset);
      }
      return [offsets, angles, pre_angles];
    }
  }]);
}(LabelLineBase); // Fitness function (label length / line length)
function calcFitness(line_length, label_length) {
  return label_length / line_length;
}
function getAngleForSegment(p, q) {
  var pq = Vector$1.sub(q, p);
  return Vector$1.angle(pq);
}
function getTextAngleForSegment(pt1, pt2) {
  return -getAngleForSegment(pt1, pt2);
}
function getLineLengths(line) {
  var lengths = [];
  for (var i = 0; i < line.length - 1; i++) {
    var p = line[i];
    var q = line[i + 1];
    var length = Math.hypot(p[0] - q[0], p[1] - q[1]);
    lengths.push(length);
  }
  return lengths;
}
function getAbsAngleDiff(angle1, angle2) {
  var small, big;
  if (angle1 > angle2) {
    small = angle2;
    big = angle1;
  } else {
    small = angle1;
    big = angle2;
  }
  while (big - small > Math.PI) {
    small += 2 * Math.PI;
  }
  return Math.abs(big - small);
}

var TextStyle = Object.create(Points);
Object.assign(TextStyle, {
  name: 'text',
  super: Points,
  built_in: true,
  init: function init() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Style.init.call(this, options);

    // Shader defines
    this.setupDefines();

    // Omit some code for SDF-drawn shader points
    this.defines.TANGRAM_HAS_SHADER_POINTS = false;

    // Indicate vertex shader should apply zoom-interpolated offsets and angles for curved labels
    this.defines.TANGRAM_CURVED_LABEL = true;
    this.reset();
  },
  /**
   * A "template" that sets constant attibutes for each vertex, which is then modified per vertex or per feature.
   * A plain JS array matching the order of the vertex layout.
   */
  makeVertexTemplate: function makeVertexTemplate(style, mesh) {
    this.super.makeVertexTemplate.call(this, style, mesh, /* add_custom_attribs */false);
    var vertex_layout = mesh.vertex_data.vertex_layout;
    var i = vertex_layout.index.a_pre_angles;

    // a_pre_angles.xyzw - rotation of entire curved label
    // a_angles.xyzw - angle of each curved label segment
    // a_offsets.xyzw - offset of each curved label segment
    for (var j = 0; j < 12; j++) {
      this.vertex_template[i++] = 0;
    }
    this.addCustomAttributesToVertexTemplate(style, i);
    return this.vertex_template;
  },
  reset: function reset() {
    this.queues = {};
    this.resetText();
  },
  // Override to queue features instead of processing immediately
  addFeature: function addFeature(feature, draw, context) {
    var _this = this;
    var tile = context.tile;
    if (tile.generation !== this.generation) {
      return;
    }
    var type = feature.geometry.type;
    draw.can_articulate = type === 'LineString' || type === 'MultiLineString';

    // supersample text rendering for angled labels, to improve clarity
    draw.supersample_text = type === 'LineString' || type === 'MultiLineString';
    var q = this.parseTextFeature(feature, draw, context, tile);
    if (!q) {
      return;
    }

    // text can be an array if a `left` or `right` orientation key is defined for the text source
    // in which case, push both text sources to the queue
    if (q instanceof Array) {
      q.forEach(function (q) {
        q.feature = feature;
        q.context = context;
        q.layout.vertex = false; // vertex placement option not applicable to standalone labels
        _this.queueFeature(q, tile); // queue the feature for later processing
      });
    } else {
      q.feature = feature;
      q.context = context;
      q.layout.vertex = false; // vertex placement option not applicable to standalone labels
      this.queueFeature(q, tile); // queue the feature for later processing
    }

    // Register with collision manager
    Collision.addStyle(this.name, tile.id);
  },
  // Override
  endData: function endData(tile) {
    return new Promise(function ($return, $error) {
      var _this2, queue, _await$this$collideAn, labels, texts, textures, tile_data, _tile_data$textures;
      _this2 = this;
      queue = this.queues[tile.id];
      delete this.queues[tile.id];
      return Promise.resolve(this.collideAndRenderTextLabels(tile, this.name, queue)).then(function ($await_1) {
        try {
          _await$this$collideAn = $await_1, labels = _await$this$collideAn.labels, texts = _await$this$collideAn.texts, textures = _await$this$collideAn.textures;
          if (labels && texts) {
            this.texts[tile.id] = texts;

            // Build queued features
            labels.forEach(function (q) {
              var text_settings_key = q.text_settings_key;
              var text_info = _this2.texts[tile.id][text_settings_key] && _this2.texts[tile.id][text_settings_key][q.text];

              // setup styling object expected by Style class
              var style = _this2.feature_style;
              style.label = q.label;
              if (text_info.text_settings.can_articulate) {
                // unpack logical sizes of each segment into an array for the style
                style.size = {};
                style.texcoords = {};
                if (q.label.type === 'straight') {
                  style.size.straight = text_info.size.logical_size;
                  style.texcoords.straight = text_info.texcoords.straight;
                  style.label_texture = textures[text_info.texcoords.straight.texture_id];
                } else {
                  style.size.curved = text_info.segment_sizes.map(function (size) {
                    return size.logical_size;
                  });
                  style.texcoords_stroke = text_info.texcoords_stroke;
                  style.texcoords.curved = text_info.texcoords.curved;
                  style.label_textures = text_info.texcoords.curved.map(function (t) {
                    return textures[t.texture_id];
                  });
                }
              } else {
                style.size = text_info.size.logical_size;
                style.texcoords = text_info.align[q.label.align].texcoords;
                style.label_texture = textures[text_info.align[q.label.align].texture_id];
              }
              style.blend_order = q.draw.blend_order; // copy pre-computed blend order
              Style.addFeature.call(_this2, q.feature, q.draw, q.context);
            });
          }
          this.freeText(tile);

          // Finish tile mesh
          return Promise.resolve(Style.endData.call(this, tile)).then(function ($await_2) {
            try {
              tile_data = $await_2;
              if (tile_data) {
                // Attach tile-specific label atlas to mesh as a texture uniform
                if (textures && textures.length) {
                  (_tile_data$textures = tile_data.textures).push.apply(_tile_data$textures, _toConsumableArray(textures)); // assign texture ownership to tile
                }

                // Always apply shader blocks to standalone text
                for (var m in tile_data.meshes) {
                  tile_data.meshes[m].uniforms.u_apply_color_blocks = true;
                }
              }
              return $return(tile_data);
            } catch ($boundEx) {
              return $error($boundEx);
            }
          }, $error);
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }.bind(this), $error);
    }.bind(this));
  },
  // Sets up caching for draw properties
  _preprocess: function _preprocess(draw) {
    draw.blend_order = this.getBlendOrderForDraw(draw); // from draw block, or fall back on default style blend order
    return this.preprocessText(draw);
  },
  // Implements label building for TextLabels mixin
  buildTextLabels: function buildTextLabels(tile, feature_queue) {
    var labels = [];
    for (var f = 0; f < feature_queue.length; f++) {
      var fq = feature_queue[f];
      var text_info = this.texts[tile.id][fq.text_settings_key][fq.text];
      var feature_labels = void 0;
      fq.layout.vertical_buffer = text_info.vertical_buffer;
      if (text_info.text_settings.can_articulate) {
        var sizes = text_info.segment_sizes.map(function (size) {
          return size.collision_size;
        });
        fq.layout.no_curving = text_info.no_curving;
        feature_labels = this.buildLabels(sizes, fq.feature.geometry, fq.layout, text_info.size.collision_size);
      } else {
        feature_labels = this.buildLabels(text_info.size.collision_size, fq.feature.geometry, fq.layout);
      }
      for (var i = 0; i < feature_labels.length; i++) {
        var fql = Object.create(fq);
        fql.label = feature_labels[i];
        labels.push(fql);
      }
    }
    return labels;
  },
  // Builds one or more labels for a geometry
  buildLabels: function buildLabels(size, geometry, layout, total_size) {
    var labels = [];
    if (geometry.type === 'LineString') {
      Array.prototype.push.apply(labels, this.buildLineLabels(geometry.coordinates, size, layout, total_size));
    } else if (geometry.type === 'MultiLineString') {
      var lines = geometry.coordinates;
      for (var i = 0; i < lines.length; ++i) {
        Array.prototype.push.apply(labels, this.buildLineLabels(lines[i], size, layout, total_size));
      }
    } else if (geometry.type === 'Point') {
      labels.push(new LabelPoint(geometry.coordinates, size, layout));
    } else if (geometry.type === 'MultiPoint') {
      var points = geometry.coordinates;
      for (var _i = 0; _i < points.length; ++_i) {
        labels.push(new LabelPoint(points[_i], size, layout));
      }
    } else if (geometry.type === 'Polygon') {
      var centroid = Geo$1.centroid(geometry.coordinates);
      if (centroid) {
        // skip degenerate polygons
        labels.push(new LabelPoint(centroid, size, layout));
      }
    } else if (geometry.type === 'MultiPolygon') {
      var _centroid = Geo$1.multiCentroid(geometry.coordinates);
      if (_centroid) {
        // skip degenerate polygons
        labels.push(new LabelPoint(_centroid, size, layout));
      }
    }
    return labels;
  },
  // Build one or more labels for a line geometry
  buildLineLabels: function buildLineLabels(line, size, layout, total_size) {
    var labels = [];
    var subdiv = Math.min(layout.subdiv, line.length - 1);
    if (subdiv > 1) {
      // Create multiple labels for line, with each allotted a range of segments
      // in which it will attempt to place
      var seg_per_div = (line.length - 1) / subdiv;
      for (var i = 0; i < subdiv; i++) {
        var start = Math.floor(i * seg_per_div);
        var end = Math.floor((i + 1) * seg_per_div) + 1;
        var line_segment = line.slice(start, end);
        var label = LabelLine.create(size, total_size, line_segment, layout);
        if (label) {
          labels.push(label);
        }
      }
    }

    // Consider full line for label placement if no subdivisions requested, or as last resort if not enough
    // labels placed (e.g. fewer than requested subdivisions)
    // TODO: refactor multiple label placements per line / move into label placement class for better effectiveness
    if (labels.length < subdiv) {
      var _label = LabelLine.create(size, total_size, line, layout);
      if (_label) {
        labels.push(_label);
      }
    }
    return labels;
  },
  // Override
  // Create or return vertex layout
  vertexLayoutForMeshVariant: function vertexLayoutForMeshVariant(variant) {
    // Vertex layout only depends on shader point flag, so using it as layout key to avoid duplicate layouts
    if (this.vertex_layouts[variant.shader_point] == null) {
      // TODO: could make selection, offset, and curved label attribs optional, but may not be worth it
      // since text points generally don't consume much memory anyway
      var attribs = [{
        name: 'a_position',
        size: 4,
        type: gl$1.SHORT,
        normalized: false
      }, {
        name: 'a_shape',
        size: 4,
        type: gl$1.SHORT,
        normalized: false
      }, {
        name: 'a_texcoord',
        size: 2,
        type: gl$1.UNSIGNED_SHORT,
        normalized: true
      }, {
        name: 'a_offset',
        size: 2,
        type: gl$1.SHORT,
        normalized: false
      }, {
        name: 'a_color',
        size: 4,
        type: gl$1.UNSIGNED_BYTE,
        normalized: true
      }, {
        name: 'a_selection_color',
        size: 4,
        type: gl$1.UNSIGNED_BYTE,
        normalized: true,
        static: variant.selection ? null : [0, 0, 0, 0]
      }, {
        name: 'a_pre_angles',
        size: 4,
        type: gl$1.BYTE,
        normalized: false
      }, {
        name: 'a_angles',
        size: 4,
        type: gl$1.SHORT,
        normalized: false
      }, {
        name: 'a_offsets',
        size: 4,
        type: gl$1.UNSIGNED_SHORT,
        normalized: false
      }];
      this.addCustomAttributesToAttributeList(attribs);
      this.vertex_layouts[variant.shader_point] = new VertexLayout(attribs);
    }
    return this.vertex_layouts[variant.shader_point];
  }
});
TextStyle.texture_id = 0; // namespaces per-tile label textures

// Raster tile rendering style

var RasterStyle = Object.create(Polygons);
Object.assign(RasterStyle, {
  name: 'raster',
  super: Polygons,
  built_in: true,
  init: function init() {
    // Required for raster tiles
    this.raster = this.raster || 'color';
    this.super.init.apply(this, arguments);
    this.selection = false; // raster styles can't support feature selection
  },
  _preprocess: function _preprocess(draw) {
    // Raster tiles default to white vertex color, as this color will tint the underlying texture
    draw.color = draw.color || StyleParser.defaults.color;
    return this.super._preprocess.apply(this, arguments);
  }
});

var style_globals_source = `#ifdef TANGRAM_VERTEX_SHADER

// Apply layer ordering to avoid z-fighting
void applyLayerOrder (float layer, inout vec4 position) {
    position.z -= layer * TANGRAM_LAYER_DELTA * position.w;
}

// Vertex position in model space: [0, 1] range over the local tile
// Note positions can be outside that range due to unclipped geometry, geometry higher than a unit cube, etc.
vec4 modelPosition() {
    return
        vec4(
            a_position.xyz / TANGRAM_TILE_SCALE         // scale coords to ~0-1 range
            * exp2(u_tile_origin.z - u_tile_origin.w),  // adjust for tile overzooming
        1.)
        + vec4(0., 1., 0., 0.);
        // NB: additional offset to account for unusual Tangram JS y coords,
        // should be refactored to remove
}

// Position in model space as above, but according to tile coordinate (as opposed to style) zoom
// e.g. unadjusted for tile overzooming
vec4 modelPositionBaseZoom() {
    return
        vec4(
            a_position.xyz / TANGRAM_TILE_SCALE,    // scale coords to ~0-1 range
        1.)
        + vec4(0., 1., 0., 0.); // see note on offset above
}

#endif

// Vertex position in world coordinates, useful for 3d procedural textures, etc.
vec4 worldPosition() {
    return v_world_position;
}

// Optionally wrap world coordinates (allows more precision at higher zooms)
// e.g. at wrap 1000, the world space will wrap every 1000 meters
#ifdef TANGRAM_VERTEX_SHADER

vec4 wrapWorldPosition(vec4 world_position) {
    #if defined(TANGRAM_WORLD_POSITION_WRAP)
    vec2 anchor = u_tile_origin.xy - mod(u_tile_origin.xy, TANGRAM_WORLD_POSITION_WRAP);
        world_position.xy -= anchor;
    #endif
    return world_position;
}

#endif

// Normal in world space
#if defined(TANGRAM_VERTEX_SHADER)

vec3 worldNormal() {
    return TANGRAM_NORMAL;
}

#elif defined(TANGRAM_FRAGMENT_SHADER)

vec3 worldNormal() {
    return u_inverseNormalMatrix * TANGRAM_NORMAL;
}

#endif
`;

var selection_globals_source = `// Vertex attribute + varying for feature selection
#if defined(TANGRAM_FEATURE_SELECTION) && defined(TANGRAM_VERTEX_SHADER)
    attribute vec4 a_selection_color;
    varying vec4 v_selection_color;
#endif
`;

var selection_vertex_source = `// Selection pass-specific rendering
#if defined(TANGRAM_FEATURE_SELECTION) && defined(TANGRAM_VERTEX_SHADER)
    if (a_selection_color.rgb == vec3(0.)) {
        // Discard by forcing invalid triangle if we're in the feature
        // selection pass but have no selection info
        // TODO: in some cases we may actually want non-selectable features to occlude selectable ones?
        gl_Position = vec4(0., 0., 0., 1.);
        return;
    }
    v_selection_color = a_selection_color;
#endif
`;

function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var StyleManager = /*#__PURE__*/function () {
  function StyleManager() {
    _classCallCheck(this, StyleManager);
    this.styles = {};
    this.base_styles = {};
    this.active_styles = [];
    this.active_blend_orders = [];

    // Add built-in rendering styles
    this.register(Object.create(Polygons));
    this.register(Object.create(Lines));
    this.register(Object.create(Points));
    this.register(Object.create(TextStyle));
    this.register(Object.create(RasterStyle));
  }

  // Global configuration for all styles
  return _createClass(StyleManager, [{
    key: "init",
    value: function init() {
      ShaderProgram.removeBlock('global');
      ShaderProgram.removeBlock('setup');

      // Model and world position accessors, layer re-ordering function
      ShaderProgram.addBlock('global', style_globals_source);

      // Feature selection global
      ShaderProgram.addBlock('global', selection_globals_source);

      // Feature selection vertex shader support
      ShaderProgram.replaceBlock('setup', selection_vertex_source);

      // Minimum value for float comparisons
      ShaderProgram.defines.TANGRAM_EPSILON = 0.00001;

      // Minimum depth buffer value separating each `order` unit
      // Assume min 16-bit depth buffer, in practice uses 14-bits, 1 extra bit to handle virtual half-layers
      // for outlines (inserted in between layers), another extra bit to prevent precision loss
      ShaderProgram.defines.TANGRAM_LAYER_DELTA = 1 / (1 << 14);

      // Internal tile scale
      ShaderProgram.defines.TANGRAM_TILE_SCALE = "vec3(".concat(Geo$1.tile_scale, "., ").concat(Geo$1.tile_scale, "., u_meters_per_pixel * ").concat(Geo$1.tile_size, ".)");

      // Increases precision for height values
      ShaderProgram.defines.TANGRAM_HEIGHT_SCALE = Geo$1.height_scale;

      // Alpha discard threshold (substitute for alpha blending)
      ShaderProgram.defines.TANGRAM_ALPHA_TEST = 0.5;
    }

    // Destroy all styles for a given GL context
  }, {
    key: "destroy",
    value: function destroy(gl) {
      var _this = this;
      Object.keys(this.styles).forEach(function (_name) {
        var style = _this.styles[_name];
        if (style.gl === gl) {
          log('trace', "StyleManager.destroy: destroying render style ".concat(style.name));
          if (style.base) {
            _this.remove(style.name);
          }
          style.destroy();
        }
      });
    }

    // Register a style
  }, {
    key: "register",
    value: function register(style) {
      this.styles[style.name] = style;
      this.base_styles[style.name] = style;
    }

    // Remove a style
  }, {
    key: "remove",
    value: function remove(name) {
      delete this.styles[name];
    }
  }, {
    key: "getActiveStyles",
    value: function getActiveStyles() {
      return this.active_styles;
    }

    // Get list of active styles based on a set of tiles
  }, {
    key: "updateActiveStyles",
    value: function updateActiveStyles(tiles) {
      this.active_styles = Object.keys(tiles.reduce(function (active, tile) {
        Object.keys(tile.meshes).forEach(function (s) {
          return active[s] = true;
        });
        return active;
      }, {}));
      return this.active_styles;
    }
  }, {
    key: "getActiveBlendOrders",
    value: function getActiveBlendOrders() {
      return this.active_blend_orders;
    }
  }, {
    key: "updateActiveBlendOrders",
    value: function updateActiveBlendOrders(tiles) {
      var orders = [];
      tiles.forEach(function (tile) {
        Object.entries(tile.meshes).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
            style = _ref2[0],
            style_meshes = _ref2[1];
          // for each tile's set of meshes, keyed by style name
          style_meshes.forEach(function (mesh) {
            // for each style's list of meshes
            // find entry for this mesh's blend order, insert if first entry
            var blend_order = mesh.variant.blend_order;
            var oi = orders.findIndex(function (x) {
              return x.blend_order === blend_order;
            });
            oi = oi > -1 ? oi : orders.push({
              blend_order: blend_order,
              styles: []
            }) - 1;

            // add style to list for this blend order
            if (orders[oi].styles.indexOf(style) === -1) {
              orders[oi].styles.push(style);
            }
          });
        });
      });

      // sort ascending by blend order
      this.active_blend_orders = orders.sort(function (a, b) {
        return a.blend_order - b.blend_order;
      });
    }
  }, {
    key: "mix",
    value: function mix(style, styles) {
      // Exit early if we have already applied mixins to this style
      if (style.mixed) {
        return style;
      }
      style.mixed = {};

      // Mixin sources, in order
      var sources = [];
      if (style.mix) {
        if (Array.isArray(style.mix)) {
          var _sources;
          (_sources = sources).push.apply(_sources, _toConsumableArray(style.mix));
        } else {
          sources.push(style.mix);
        }
        sources = sources.map(function (x) {
          return styles[x];
        }).filter(function (x) {
          return x && x !== style;
        }); // TODO: warning on trying to mix into self

        // Track which styles were mixed into this one
        sources.forEach(function (s) {
          return style.mixed[s.name] = true;
        });
      }
      sources.push(style);

      // Flags - OR'd, true if any style has it set
      style.animated = sources.some(function (x) {
        return x && x.animated;
      });
      style.texcoords = sources.some(function (x) {
        return x && x.texcoords;
      });

      // Overwrites - last definition wins
      style.base = sources.map(function (x) {
        return x.base;
      }).filter(function (x) {
        return x;
      }).pop();
      style.lighting = sources.map(function (x) {
        return x.lighting;
      }).filter(function (x) {
        return x != null;
      }).pop();
      style.texture = sources.map(function (x) {
        return x.texture;
      }).filter(function (x) {
        return x;
      }).pop();
      style.raster = sources.map(function (x) {
        return x.raster;
      }).filter(function (x) {
        return x != null;
      }).pop();
      style.dash = sources.map(function (x) {
        return x.dash;
      }).filter(function (x) {
        return x != null;
      }).pop();
      style.dash_background_color = sources.map(function (x) {
        return x.dash_background_color;
      }).filter(function (x) {
        return x != null;
      }).pop();
      if (sources.some(function (x) {
        return Object.prototype.hasOwnProperty.call(x, 'blend') && x.blend;
      })) {
        // only mix blend if explicitly set, otherwise let base style choose blending mode
        // hasOwnProperty check gives preference to base style prototype
        style.blend = sources.map(function (x) {
          return Object.prototype.hasOwnProperty.call(x, 'blend') && x.blend;
        }).filter(function (x) {
          return x;
        }).pop();
      }
      style.blend_order = sources.map(function (x) {
        return x.blend_order;
      }).filter(function (x) {
        return x != null;
      }).pop();

      // Merges - property-specific rules for merging values
      style.defines = Object.assign.apply(Object, [{}].concat(_toConsumableArray(sources.map(function (x) {
        return x.defines;
      }).filter(function (x) {
        return x;
      })))); // internal defines (not user-defined)
      style.material = Object.assign.apply(Object, [{}].concat(_toConsumableArray(sources.map(function (x) {
        return x.material;
      }).filter(function (x) {
        return x;
      }))));
      var draws = sources.map(function (x) {
        return x.draw;
      }).filter(function (x) {
        return x;
      }); // draw defaults
      if (draws.length > 0) {
        style.draw = mergeObjects.apply(void 0, [{}].concat(_toConsumableArray(draws)));
      }

      // Mix shader properties
      this.mixShaders(style, styles, sources);
      return style;
    }

    // Mix the propertes in the "shaders" block
  }, {
    key: "mixShaders",
    value: function mixShaders(style, styles, sources) {
      var shaders = {}; // newly mixed shaders properties
      var shader_merges = sources.map(function (x) {
        return x.shaders;
      }).filter(function (x) {
        return x;
      }); // just the source styles with shader properties

      // Defines
      shaders.defines = Object.assign.apply(Object, [{}].concat(_toConsumableArray(shader_merges.map(function (x) {
        return x.defines;
      }).filter(function (x) {
        return x;
      }))));

      // Attributes
      shaders.attributes = Object.assign.apply(Object, [{}].concat(_toConsumableArray(shader_merges.map(function (x) {
        return x.attributes;
      }).filter(function (x) {
        return x;
      }))));

      // Uniforms
      shaders.uniforms = {}; // uniforms for this style, both explicitly defined, and mixed from other styles
      shaders._uniforms = style.shaders && style.shaders.uniforms || {}; // uniforms explicitly defined by *this* style
      shaders._uniform_scopes = {}; // tracks which style each uniform originated from (this one, or ancestor)

      // Mix in uniforms from ancestors, providing means to access
      sources.filter(function (x) {
        return x.shaders && x.shaders.uniforms;
      }).forEach(function (x) {
        var _loop = function _loop(u) {
          shaders._uniform_scopes[u] = x.name;

          // Define getter and setter for this uniform
          // Getter returns value for this style if present, otherwise asks appropriate ancestor for it
          // Setter sets the value for this style (whether previously present in this style or not)
          // Mimics JS prototype/hasOwnProperty behavior, but with multiple ancestors (via mixins)
          Object.defineProperty(shaders.uniforms, u, {
            enumerable: true,
            configurable: true,
            get: function get() {
              // Uniform is explicitly defined on this style
              if (shaders._uniforms[u] !== undefined) {
                return shaders._uniforms[u];
              }
              // Uniform was mixed from another style, forward request there
              // Identity check is needed to prevent infinite recursion if a previously defined uniform
              // is set to undefined
              else if (styles[shaders._uniform_scopes[u]].shaders.uniforms !== shaders.uniforms) {
                return styles[shaders._uniform_scopes[u]].shaders.uniforms[u];
              }
              return undefined;
            },
            set: function set(v) {
              shaders._uniforms[u] = v;
            }
          });
        };
        for (var u in x.shaders.uniforms) {
          _loop(u);
        }
      });

      // Extensions: build a list of unique extensions
      shaders.extensions = Object.keys(shader_merges.map(function (x) {
        return x.extensions;
      }).filter(function (x) {
        return x;
      }).reduce(function (prev, cur) {
        // single extension
        if (typeof cur === 'string') {
          prev[cur] = true;
        }
        // array of extensions
        else {
          cur.forEach(function (x) {
            return prev[x] = true;
          });
        }
        return prev;
      }, {}) || {});

      // Shader blocks
      // Mark all shader blocks for the target style as originating with its own name
      if (style.shaders && style.shaders.blocks) {
        style.shaders.block_scopes = style.shaders.block_scopes || {};
        for (var k in style.shaders.blocks) {
          var block = style.shaders.blocks[k];
          style.shaders.block_scopes[k] = style.shaders.block_scopes[k] || [];
          if (Array.isArray(block)) {
            var _style$shaders$block_;
            (_style$shaders$block_ = style.shaders.block_scopes[k]).push.apply(_style$shaders$block_, _toConsumableArray(block.map(function () {
              return style.name;
            })));
          } else {
            style.shaders.block_scopes[k].push(style.name);
          }
        }
      }

      // Merge shader blocks, keeping track of which style each block originated from
      var mixed = {}; // all scopes mixed so far
      shader_merges.forEach(function (source) {
        if (!source.blocks) {
          return;
        }
        shaders.blocks = shaders.blocks || {};
        shaders.block_scopes = shaders.block_scopes || {};
        var mixed_source = {}; // scopes mixed for this source style

        for (var t in source.blocks) {
          var _block = source.blocks[t];
          var block_scope = source.block_scopes[t];
          shaders.blocks[t] = shaders.blocks[t] || [];
          shaders.block_scopes[t] = shaders.block_scopes[t] || [];

          // standardize on arrays (block can be single or multi-value)
          _block = Array.isArray(_block) ? _block : [_block];
          block_scope = Array.isArray(block_scope) ? block_scope : [block_scope];
          for (var b = 0; b < _block.length; b++) {
            // Skip blocks we've already mixed in from the same scope
            // Repeating scope indicates a diamond pattern where a style is being mixed multiple times
            if (mixed[block_scope[b]]) {
              continue;
            }
            mixed_source[block_scope[b]] = true;
            shaders.blocks[t].push(_block[b]);
            shaders.block_scopes[t].push(block_scope[b]);
          }
        }

        // Add styles mixed in from this source - they could be multi-level ancestors,
        // beyond the first-level "parents" defined in this style's `mix` list
        Object.assign(mixed, mixed_source);
      });
      Object.assign(style.mixed, mixed); // add all newly mixed styles

      style.shaders = shaders; // assign back to style
      return style;
    }

    // Create a new style
    // name: name of new style
    // config: properties of new style
    // styles: working set of styles being built (used for mixing in existing styles)
  }, {
    key: "create",
    value: function create(name, config) {
      var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var style = mergeObjects({}, config); // deep copy
      style.name = name;

      // Style mixins
      style = this.mix(style, styles);

      // Has base style?
      // Only renderable (instantiated) styles should be included for run-time use
      // Others are intermediary/abstract, used during style composition but not execution
      if (style.base && this.base_styles[style.base]) {
        this.styles[name] = style = Object.assign(Object.create(this.base_styles[style.base]), style);
      } else {
        style.base = null; // null out invalid base style
      }
      return style;
    }

    // Called to create and initialize styles
  }, {
    key: "build",
    value: function build(styles_defs) {
      var _this2 = this;
      var styles = _objectSpread$1({}, styles_defs); // copy to avoid modifying underlying object

      // Un-register existing styles from cross-thread communication
      if (this.styles) {
        Object.values(this.styles).forEach(function (s) {
          return WorkerBroker$1.removeTarget(s.main_thread_target);
        });
      }

      // Add default blend/base style pairs as needed
      var blends = ['opaque', 'add', 'multiply', 'overlay', 'inlay', 'translucent'];
      var bases = ['polygons', 'lines', 'points', 'text', 'raster'];
      for (var _i = 0, _blends = blends; _i < _blends.length; _i++) {
        var blend = _blends[_i];
        var _iterator = _createForOfIteratorHelper(bases),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var base = _step.value;
            var style = blend + '_' + base;
            if (styles[style] == null) {
              styles[style] = {
                base: base,
                blend: blend
              };
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      // Sort styles by dependency, then build them
      var style_deps = Object.keys(styles).sort(function (a, b) {
        return _this2.inheritanceDepth(a, styles) - _this2.inheritanceDepth(b, styles);
      });

      // Only keep built-in base styles
      for (var sname in this.styles) {
        if (!this.base_styles[sname]) {
          delete this.styles[sname];
        } else {
          this.styles[sname].reset();
        }
      }

      // Working set of styles being built
      var ws = {};
      style_deps.forEach(function (sname) {
        ws[sname] = _this2.create(sname, styles[sname], ws);
      });
      return this.styles;
    }

    // Initialize all styles
  }, {
    key: "initStyles",
    value: function initStyles() {
      var scene = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // Initialize all
      for (var sname in this.styles) {
        this.styles[sname].init(scene);
      }
    }

    // Given a style key in a set of styles to add, count the length of the inheritance chain
  }, {
    key: "inheritanceDepth",
    value: function inheritanceDepth(key, styles) {
      var _this3 = this;
      var parents = 0;
      for (;;) {
        var style = styles[key];
        if (!style) {
          // this is a scene def error, trying to extend a style that doesn't exist
          break;
        }

        // Dependency chain ends when this style isn't mixing in any others
        if (!style.mix) {
          break;
        }

        // Traverse next parent style
        parents++;
        if (Array.isArray(style.mix)) {
          // If multiple mixins, find the deepest one
          parents += Math.max.apply(Math, _toConsumableArray(style.mix.map(function (s) {
            // Trying to mix into itself!
            if (key === s) {
              return;
            }
            return _this3.inheritanceDepth(s, styles);
          })));
          break;
        } else {
          // Trying to mix into itself!
          if (key === style.mix) {
            break;
          }

          // If single mixin, continue loop up the tree
          key = style.mix;
        }
      }
      return parents;
    }
  }]);
}();

function notNull(x) {
  return x != null;
}
function wrap$1(x) {
  return '(' + x + ')';
}
function maybeQuote(value) {
  if (typeof value === 'string') {
    return '"' + value + '"';
  }
  return value;
}
function lookUp(key) {
  if (key[0] === '$') {
    // keys prefixed with $ are special properties in the context object (not feature properties)
    return 'context[\'' + key.substring(1) + '\']';
  } else if (key.indexOf('.') > -1) {
    if (key.indexOf('\\.') === -1) {
      // no escaped dot notation
      // un-escaped dot notation indicates a nested feature property
      return "context.feature.properties".concat(key.split('.').map(function (k) {
        return '[\'' + k + '\']';
      }).join(''));
    } else {
      // mixed escaped/unescaped dot notation
      // escaped dot notation will be interpreted as a single-level feature property with dots in the name
      // this splits on unescaped dots, which requires a temporary swap of escaped and unescaped dots
      var keys = key.replace(/\\\./g, '__TANGRAM_DELIMITER__').split('.').map(function (s) {
        return s.replace(/__TANGRAM_DELIMITER__/g, '.');
      });
      return "context.feature.properties".concat(keys.map(function (k) {
        return '[\'' + k + '\']';
      }).join(''));
    }
  }
  // single-level feature property
  return 'context.feature.properties[\'' + key + '\']';
}
function nullValue(/*key, value*/
) {
  return ' true ';
}
function propertyEqual(key, value) {
  return wrap$1(maybeQuote(value) + ' === ' + lookUp(key));
}
function propertyOr(key, values) {
  var arr = '[' + values.map(maybeQuote).join(',') + ']';
  return wrap$1("".concat(arr, ".indexOf(").concat(lookUp(key), ") > -1"));
}
function printNested(values, joiner) {
  return wrap$1(values.filter(notNull).map(function (x) {
    return wrap$1(x.join(' && '));
  }).join(' ' + joiner + ' '));
}
function any(_, values, options) {
  return values && values.length > 0 ? printNested(values.map(function (v) {
    return parseFilter(v, options);
  }), '||') : 'true';
}
function all(_, values, options) {
  return values && values.length > 0 ? printNested(values.map(function (v) {
    return parseFilter(v, options);
  }), '&&') : 'true';
}
function not(key, value, options) {
  return '!' + wrap$1(parseFilter(value, options).join(' && '));
}
function none(key, values, options) {
  return '!' + wrap$1(any(null, values, options));
}
function propertyMatchesBoolean(key, value) {
  return wrap$1(lookUp(key) + (value ? ' != ' : ' == ') + 'null');
}
function rangeMatch(key, value, options) {
  var expressions = [];
  var transform = options && typeof options.rangeTransform === 'function' && options.rangeTransform;
  if (value.max) {
    var max = transform ? transform(value.max) : value.max;
    expressions.push('' + lookUp(key) + ' < ' + max);
  }
  if (value.min) {
    var min = transform ? min = transform(value.min) : value.min;
    expressions.push('' + lookUp(key) + ' >= ' + min);
  }
  return wrap$1(expressions.join(' && '));
}
function includesMatch(key, value) {
  var expressions = [];

  // the array includes ONE OE MORE of the provided values (a single value is converted to an array)
  if (value.includes_any) {
    var vals = Array.isArray(value.includes_any) ? value.includes_any : [value.includes_any];
    var arr = '[' + vals.map(maybeQuote).join(',') + ']';
    expressions.push("".concat(lookUp(key), " != null && ").concat(arr, ".some(function(v) { return ").concat(lookUp(key), ".indexOf(v) > -1 })"));
  }

  // the array includes ALL of the provided values (a single value is converted to an array)
  if (value.includes_all) {
    var _vals = Array.isArray(value.includes_all) ? value.includes_all : [value.includes_all];
    var _arr = '[' + _vals.map(maybeQuote).join(',') + ']';
    expressions.push("".concat(lookUp(key), " != null && ").concat(_arr, ".every(function(v) { return ").concat(lookUp(key), ".indexOf(v) > -1 })"));
  }
  return wrap$1(expressions.join(' && '));
}
function parseFilter(filter, options) {
  var filterAST = [];

  // Function filter
  if (typeof filter === 'function') {
    return [wrap$1(filter.toString() + '(context)')];
  }
  // Array filter, implicit 'any'
  else if (Array.isArray(filter)) {
    return [any(null, filter, options)];
  }
  // Null filter object
  else if (filter == null) {
    return ['true'];
  }

  // Object filter, e.g. implicit 'all'
  var keys = Object.keys(filter);
  for (var k = 0; k < keys.length; k++) {
    var key = keys[k];
    var value = filter[key],
      type = _typeof(value);
    if (type === 'string' || type === 'number') {
      filterAST.push(propertyEqual(key, value));
    } else if (type === 'boolean') {
      filterAST.push(propertyMatchesBoolean(key, value));
    } else if (key === 'not') {
      filterAST.push(not(key, value, options));
    } else if (key === 'any') {
      filterAST.push(any(key, value, options));
    } else if (key === 'all') {
      filterAST.push(all(key, value, options));
    } else if (key === 'none') {
      filterAST.push(none(key, value, options));
    } else if (Array.isArray(value)) {
      filterAST.push(propertyOr(key, value));
    } else if (type === 'object' && value != null) {
      if (value.max || value.min) {
        filterAST.push(rangeMatch(key, value, options));
      } else if (value.includes_any || value.includes_all) {
        filterAST.push(includesMatch(key, value));
      }
    } else if (value == null) {
      filterAST.push(nullValue());
    } else {
      throw new Error('Unknown Query syntax: ' + value);
    }
  }
  return keys.length === 0 ? ['true'] : filterAST;
}
function filterToString(filterAST) {
  return wrap$1(filterAST.join(' && '));
}
function buildFilter(filter, options) {
  if (filter == null) {
    return function () {
      return true;
    };
  }
  // jshint evil: true
  return new Function('context', 'return ' + filterToString(parseFilter(filter, options)) + ';');
}

function _callSuper$3(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$3() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$3() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$3 = function _isNativeReflectConstruct() { return !!t; })(); }

// N.B.: 'visible' is legacy compatibility for 'enabled'
var reserved = ['filter', 'draw', 'visible', 'enabled', 'data', 'exclusive', 'priority'];
var layer_cache = {};
function layerCache() {
  return layer_cache;
}
function cacheKey(layers) {
  if (layers.length > 1) {
    var k = layers[0];
    for (var i = 1; i < layers.length; i++) {
      k += '/' + layers[i];
    }
    return k;
  }
  return layers[0];
}

// Merge matching layer trees into a final draw group
function mergeTrees(matchingTrees, group) {
  var draws,
    treeDepth = 0;

  // Find deepest tree
  for (var t = 0; t < matchingTrees.length; t++) {
    if (matchingTrees[t].length > treeDepth) {
      treeDepth = matchingTrees[t].length;
    }
  }

  // No layers to parse
  if (treeDepth === 0) {
    return null;
  }

  // Merged draw group object
  var draw = {
    visible: true // visible by default
  };

  // Iterate trees in parallel
  var _loop = function _loop(x) {
    // Pull out the requested draw group, for each tree, at this depth (avoiding duplicates at the same level in tree)
    draws = [];
    matchingTrees.forEach(function (tree) {
      if (tree[x] && tree[x][group] && draws.indexOf(tree[x][group]) === -1) {
        draws.push(tree[x][group]);
      }
    });
    if (draws.length === 0) {
      return 1; // continue
    }

    // Merge draw objects
    mergeObjects.apply(void 0, [draw].concat(_toConsumableArray(draws)));
  };
  for (var x = 0; x < treeDepth; x++) {
    if (_loop(x)) continue;
  }

  // Short-circuit if not visible
  if (draw.visible === false) {
    return null;
  }
  return draw;
}
var blacklist = ['any', 'all', 'not', 'none'];
var Layer = /*#__PURE__*/function () {
  function Layer(_ref) {
    var layer = _ref.layer,
      name = _ref.name,
      parent = _ref.parent,
      draw = _ref.draw,
      visible = _ref.visible,
      enabled = _ref.enabled,
      filter = _ref.filter,
      exclusive = _ref.exclusive,
      priority = _ref.priority,
      styles = _ref.styles;
    _classCallCheck(this, Layer);
    this.id = Layer.id++;
    this.config_data = layer.data;
    this.parent = parent;
    this.name = name;
    this.full_name = this.parent ? this.parent.full_name + ':' + this.name : this.name;
    this.draw = draw;
    this.filter = filter;
    this.exclusive = exclusive === true;
    this.priority = priority != null ? priority : Number.MAX_SAFE_INTEGER;
    this.styles = styles;
    this.is_built = false;
    enabled = enabled === undefined ? visible : enabled; // `visible` property is backwards compatible for `enabled`
    this.enabled = enabled !== false; // layer is enabled unless explicitly set to disabled

    // Denormalize layer name to draw groups
    if (this.draw) {
      for (var group in this.draw) {
        this.draw[group] = this.draw[group] == null ? {} : this.draw[group];
        if (_typeof(this.draw[group]) !== 'object') {
          // Invalid draw group
          var msg = "Draw group '".concat(group, "' for layer ").concat(this.full_name, " is invalid, must be an object, ");
          msg += "but was set to `".concat(group, ": ").concat(this.draw[group], "` instead");
          log('warn', msg); // TODO: fire external event that clients to subscribe to

          delete this.draw[group];
        }
      }
    }
  }
  return _createClass(Layer, [{
    key: "build",
    value: function build() {
      log('trace', "Building layer '".concat(this.full_name, "'"));
      this.buildFilter();
      this.buildDraw();
      this.is_built = true;
    }
  }, {
    key: "buildDraw",
    value: function buildDraw() {
      this.draw = compileFunctionStrings(this.draw, StyleParser.wrapFunction);
      this.calculatedDraw = calculateDraw(this);
    }
  }, {
    key: "buildFilter",
    value: function buildFilter$1() {
      this.filter_original = this.filter;
      this.filter = compileFunctionStrings(this.filter, StyleParser.wrapFunction);
      var type = _typeof(this.filter);
      if (this.filter != null && type !== 'object' && type !== 'function') {
        // Invalid filter
        var msg = "Filter for layer ".concat(this.full_name, " is invalid, filter value must be an object or function, ");
        msg += "but was set to `filter: ".concat(this.filter, "` instead");
        log('warn', msg); // TODO: fire external event that clients to subscribe to
        return;
      }
      try {
        this.buildZooms();
        this.buildPropMatches();
        if (this.filter != null && (typeof this.filter === 'function' || Object.keys(this.filter).length > 0)) {
          this.filter = buildFilter(this.filter, FilterOptions);
        } else {
          this.filter = null;
        }
      } catch (e) {
        // Invalid filter
        var _msg = "Filter for layer ".concat(this.full_name, " is invalid, `filter: ").concat(JSON.stringify(this.filter), "` ");
        _msg += "failed with error '".concat(e.message, "', stack trace: ").concat(e.stack);
        log('warn', _msg); // TODO: fire external event that clients to subscribe to
      }
    }

    // Zooms often cull large swaths of the layer tree, so they get special treatment and are checked first
  }, {
    key: "buildZooms",
    value: function buildZooms() {
      var zoom = this.filter && this.filter.$zoom; // has an explicit zoom filter
      var ztype = _typeof(zoom);
      if (zoom != null) {
        this.zooms = {};
        if (ztype === 'number') {
          this.zooms[zoom] = true;
        } else if (Array.isArray(zoom)) {
          for (var z = 0; z < zoom.length; z++) {
            this.zooms[zoom[z]] = true;
          }
        } else if (ztype === 'object' && (zoom.min != null || zoom.max != null)) {
          var zmin = zoom.min || 0;
          var zmax = zoom.max || Geo$1.max_style_zoom;
          for (var _z = zmin; _z < zmax; _z++) {
            this.zooms[_z] = true;
          }
        }
        delete this.filter.$zoom; // don't process zoom through usual generic filter logic
      }
    }
  }, {
    key: "buildPropMatches",
    value: function buildPropMatches() {
      var _this = this;
      if (!this.filter || Array.isArray(this.filter) || typeof this.filter === 'function') {
        return;
      }
      Object.keys(this.filter).forEach(function (key) {
        if (blacklist.indexOf(key) === -1) {
          var val = _this.filter[key];
          var type = _typeof(val);
          var array = Array.isArray(val);
          if (!(array || type === 'string' || type === 'number')) {
            return;
          }
          if (key[0] === '$') {
            // Context property
            _this.context_prop_matches = _this.context_prop_matches || [];
            _this.context_prop_matches.push([key.substring(1), array ? val : [val]]);
            delete _this.filter[key];
          } else if (key.indexOf('.') === -1) {
            // exclude nested feature properties
            // Single-level feature property
            _this.feature_prop_matches = _this.feature_prop_matches || [];
            _this.feature_prop_matches.push([key, array ? val : [val]]);
            delete _this.filter[key];
          }
        }
      });
    }
  }, {
    key: "doPropMatches",
    value: function doPropMatches(context) {
      if (this.feature_prop_matches) {
        for (var r = 0; r < this.feature_prop_matches.length; r++) {
          var match = this.feature_prop_matches[r];
          var val = context.feature.properties[match[0]];
          if (val == null || match[1].indexOf(val) === -1) {
            return false;
          }
        }
      }
      if (this.context_prop_matches) {
        for (var _r = 0; _r < this.context_prop_matches.length; _r++) {
          var _match = this.context_prop_matches[_r];
          var _val = context[_match[0]];
          if (_val == null || _match[1].indexOf(_val) === -1) {
            return false;
          }
        }
      }
      return true;
    }
  }, {
    key: "doesMatch",
    value: function doesMatch(context) {
      if (!this.enabled) {
        return false;
      }
      if (!this.is_built) {
        this.build();
      }

      // zoom pre-filter: skip rest of filter if out of layer zoom range
      if (this.zooms != null && !this.zooms[context.zoom]) {
        return false;
      }

      // direct feature property matches
      if (!this.doPropMatches(context)) {
        return false;
      }

      // any remaining filter (more complex matches or dynamic function)
      var match;
      if (this.filter instanceof Function) {
        try {
          match = this.filter(context);
        } catch (error) {
          // Filter function error
          var msg = "Filter for this ".concat(this.full_name, ": `filter: ").concat(this.filter_original, "` ");
          msg += "failed with error '".concat(error.message, "', stack trace: ").concat(error.stack);
          log('error', msg, context.feature);
        }
      } else {
        match = this.filter == null;
      }
      if (match) {
        if (this.children_to_parse) {
          parseLayerChildren(this, this.children_to_parse, this.styles);
          delete this.children_to_parse;
        }
        return true;
      }
      return false;
    }
  }]);
}();
Layer.id = 0;
var LayerLeaf = /*#__PURE__*/function (_Layer) {
  function LayerLeaf(config) {
    var _this2;
    _classCallCheck(this, LayerLeaf);
    _this2 = _callSuper$3(this, LayerLeaf, [config]);
    _this2.is_leaf = true;
    return _this2;
  }
  _inherits(LayerLeaf, _Layer);
  return _createClass(LayerLeaf);
}(Layer);
var LayerTree = /*#__PURE__*/function (_Layer2) {
  function LayerTree(config) {
    var _this3;
    _classCallCheck(this, LayerTree);
    _this3 = _callSuper$3(this, LayerTree, [config]);
    _this3.is_tree = true;
    _this3.layers = config.layers || [];
    return _this3;
  }
  _inherits(LayerTree, _Layer2);
  return _createClass(LayerTree, [{
    key: "addLayer",
    value: function addLayer(layer) {
      this.layers.push(layer);
    }
  }, {
    key: "buildDrawGroups",
    value: function buildDrawGroups(context) {
      var layers = [],
        layer_ids = [];
      matchFeature(context, [this], layers, layer_ids);
      if (layers.length > 0) {
        var cache_key = cacheKey(layer_ids);

        // Only evaluate each layer combination once (undefined means not yet evaluated,
        // null means evaluated with no draw object)
        if (layer_cache[cache_key] === undefined) {
          // Find all the unique visible draw blocks for this layer tree
          var draw_groups = layers.map(function (x) {
            return x && x.visible !== false && x.calculatedDraw;
          });
          var draw_keys = {};
          for (var r = 0; r < draw_groups.length; r++) {
            var stack = draw_groups[r];
            if (!stack) {
              continue;
            }
            for (var g = 0; g < stack.length; g++) {
              var group = stack[g];
              for (var key in group) {
                draw_keys[key] = true;
              }
            }
          }

          // Calculate each draw group
          for (var draw_key in draw_keys) {
            layer_cache[cache_key] = layer_cache[cache_key] || {};
            layer_cache[cache_key][draw_key] = mergeTrees(draw_groups, draw_key);

            // Only save the ones that weren't null
            if (!layer_cache[cache_key][draw_key]) {
              delete layer_cache[cache_key][draw_key];
            } else {
              layer_cache[cache_key][draw_key].key = cache_key + '/' + draw_key;
              layer_cache[cache_key][draw_key].layers = layers.map(function (x) {
                return x && x.full_name;
              });
              layer_cache[cache_key][draw_key].group = draw_key;
            }
          }

          // No layers evaluated
          if (layer_cache[cache_key] && Object.keys(layer_cache[cache_key]).length === 0) {
            layer_cache[cache_key] = null;
          }
        }
        return layer_cache[cache_key];
      }
    }
  }]);
}(Layer);
var FilterOptions = {
  // Handle unit conversions on filter ranges
  rangeTransform: function rangeTransform(val) {
    if (typeof val === 'string' && val.trim().slice(-3) === 'px2') {
      return "".concat(parseFloat(val), " * context.meters_per_pixel_sq");
    }
    return val;
  }
};
function isReserved(key) {
  return reserved.indexOf(key) > -1;
}
function isEmpty(obj) {
  return Object.keys(obj).length === 0;
}
function groupProps(obj) {
  var reserved = {},
    children = {};
  for (var key in obj) {
    if (isReserved(key)) {
      reserved[key] = obj[key];
    } else {
      children[key] = obj[key];
    }
  }
  return [reserved, children];
}
function calculateDraw(layer) {
  var draw = [];
  if (layer.parent) {
    var cs = layer.parent.calculatedDraw || [];
    draw.push.apply(draw, _toConsumableArray(cs));
  }
  draw.push(layer.draw);
  return draw;
}
function parseLayerNode(name, layer, parent, styles) {
  layer = layer == null ? {} : layer;
  var properties = {
    name: name,
    layer: layer,
    parent: parent,
    styles: styles
  };
  var _groupProps = groupProps(layer),
    _groupProps2 = _slicedToArray(_groupProps, 2),
    reserved = _groupProps2[0],
    children = _groupProps2[1];
  var empty = isEmpty(children);
  var Create;
  if (empty && parent != null) {
    Create = LayerLeaf;
  } else {
    Create = LayerTree;
  }
  var r = new Create(Object.assign(properties, reserved));

  // only process child layers if this layer is enabled
  if (r.enabled) {
    if (parent) {
      parent.addLayer(r);
    }
    r.children_to_parse = empty ? null : children;
  }
  return r;
}
function parseLayerChildren(parent, children, styles) {
  for (var key in children) {
    var child = children[key];
    if (_typeof(child) === 'object' && !Array.isArray(child)) {
      parseLayerNode(key, child, parent, styles);
    } else {
      // Invalid layer
      var msg = "Layer value must be an object: cannot create layer '".concat(key, ": ").concat(JSON.stringify(child), "'");
      msg += ", under parent layer '".concat(parent.full_name, "'.");

      // If the parent is a style name, this may be an incorrectly nested layer
      if (styles[parent.name]) {
        msg += " The parent name '".concat(parent.name, "' is also the name of a style, did you mean to create a 'draw' group");
        if (parent.parent) {
          msg += " under '".concat(parent.parent.name, "'");
        }
        msg += ' instead?';
      }
      log('warn', msg); // TODO: fire external event that clients to subscribe to
    }
  }

  // Sort sub-layers so they are applied deterministically when multiple layers modify the same properties
  // Sort order is: exclusive layers first, then by explicit layer priority, then by layer name
  parent.layers.sort(function (a, b) {
    // Exclusive layers come first
    // If an exclusive layer matches, no further sibling layers are matched
    if (a.exclusive < b.exclusive) return 1;else if (a.exclusive > b.exclusive) return -1;

    // When sub-sorting exclusive layers, sort the higher priority layers first, since only one exlcusive layer
    // can match and the first one that matches should be the highest priority.
    // When sub-sorting non-exclusive layers, sort the lower priority layers first, since multiple layers may
    // match, and when they are merged in order, the later layers will overwrite the earlier ones -- so we want
    // the higher priority ones to match last so that they "win".
    var direction = a.exclusive ? 1 : -1;

    // Sub-sort by explicit priority
    if (a.priority > b.priority) return direction;else if (a.priority < b.priority) return -direction;

    // Sub-sort by layer name as last resort
    if (a.full_name < b.full_name) return direction;else if (a.full_name > b.full_name) return -direction;
  });
}
function parseLayers(layers, styles) {
  layer_cache = {}; // clear layer cache
  var layer_trees = {};
  for (var key in layers) {
    var layer = layers[key];
    if (layer) {
      layer_trees[key] = parseLayerNode(key, layer, null, styles);
    }
  }
  return layer_trees;
}
function matchFeature(context, layers, collected_layers, collected_layers_ids) {
  var matched = false;
  var child_matched = false;
  if (layers.length === 0) {
    return;
  }
  for (var r = 0; r < layers.length; r++) {
    var current = layers[r];
    if (current.is_leaf) {
      if (current.doesMatch(context)) {
        matched = true;
        collected_layers.push(current);
        collected_layers_ids.push(current.id);
        if (current.exclusive) {
          break; // only one exclusive layer can match, stop matching further sibling layers
        }
      }
    } else if (current.is_tree) {
      if (current.doesMatch(context)) {
        matched = true;
        child_matched = matchFeature(context, current.layers, collected_layers, collected_layers_ids);
        if (!child_matched) {
          collected_layers.push(current);
          collected_layers_ids.push(current.id);
        }
        if (current.exclusive) {
          break; // only one exclusive layer can match, stop matching further sibling layers
        }
      }
    }
  }
  return matched;
}

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var id = 0; // unique tile id
var build_id = 0; // id tracking order in which tiles were build
var Tile = /*#__PURE__*/function () {
  /**
      Tile
      @constructor
      Required properties:
      coords: object with {x, y, z} properties identifying tile coordinate location
      worker: web worker to handle tile construction
  */
  function Tile(_ref) {
    var coords = _ref.coords,
      style_z = _ref.style_z,
      source = _ref.source,
      workers = _ref.workers,
      view = _ref.view;
    _classCallCheck(this, Tile);
    this.id = id++;
    this.view = view;
    this.source = source;
    this.generation = null;
    this.valid = true;
    this.visible = false;
    this.proxy_for = null;
    this.proxied_as = null;
    this.proxy_level = 0;
    this.proxy_order_offset = 0;
    this.fade_in = true;
    this.loading = false;
    this.loaded = false;
    this.built = false;
    this.labeled = false;
    this.error = null;
    this.debug = {};
    this.style_z = style_z; // zoom level to be used for styling
    this.coords = TileID.normalizedCoord(coords, this.source);
    this.key = TileID.key(this.coords, this.source, this.style_z);
    this.overzoom = Math.max(this.style_z - this.coords.z, 0); // number of levels of overzooming
    this.overzoom2 = Math.pow(2, this.overzoom);
    this.min = Geo$1.metersForTile(this.coords);
    this.max = Geo$1.metersForTile({
      x: this.coords.x + 1,
      y: this.coords.y + 1,
      z: this.coords.z
    }), this.span = {
      x: this.max.x - this.min.x,
      y: -(this.max.y - this.min.y)
    };
    this.bounds = {
      sw: {
        x: this.min.x,
        y: this.max.y
      },
      ne: {
        x: this.max.x,
        y: this.min.y
      }
    };
    this.meters_per_pixel = Geo$1.metersPerPixel(this.style_z);
    this.meters_per_pixel_sq = this.meters_per_pixel * this.meters_per_pixel;
    this.units_per_pixel = Geo$1.units_per_pixel / this.overzoom2; // adjusted for overzoom
    this.units_per_meter_overzoom = Geo$1.unitsPerMeter(this.coords.z) * this.overzoom2; // adjusted for overzoom
    this.preserve_tiles_within_zoom = this.source.preserve_tiles_within_zoom; // source-specific tile retention policy

    this.meshes = {}; // renderable VBO meshes keyed by style
    this.new_mesh_styles = []; // meshes that have been built so far in current build generation
    this.pending_label_meshes = null; // meshes that are pending collision (shouldn't be displayed yet)

    this.setWorker(workers);
  }

  // Free resources owned by tile
  return _createClass(Tile, [{
    key: "freeResources",
    value: function freeResources() {
      for (var m in this.meshes) {
        this.meshes[m].forEach(function (m) {
          return m.destroy();
        });
      }
      this.meshes = {};
      if (this.pending_label_meshes) {
        for (var _m in this.pending_label_meshes) {
          this.pending_label_meshes[_m].forEach(function (m) {
            return m.destroy();
          });
        }
      }
      this.pending_label_meshes = null;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      Task.removeForTile(this.id);
      this.workerMessage('self.removeTile', this.key);
      this.freeResources();
      this.worker = null;
      this.valid = false;
    }
  }, {
    key: "buildAsMessage",
    value: function buildAsMessage() {
      return {
        id: this.id,
        key: this.key,
        source: this.source.name,
        coords: this.coords,
        min: this.min,
        max: this.max,
        units_per_pixel: this.units_per_pixel,
        meters_per_pixel: this.meters_per_pixel,
        meters_per_pixel_sq: this.meters_per_pixel_sq,
        units_per_meter_overzoom: this.units_per_meter_overzoom,
        style_z: this.style_z,
        overzoom: this.overzoom,
        overzoom2: this.overzoom2,
        generation: this.generation,
        debug: this.debug
      };
    }

    // Find the appropriate worker thread for this tile
  }, {
    key: "setWorker",
    value: function setWorker(workers) {
      if (this.source.tiled) {
        // Pin tile to a worker thread based on its coordinates
        this.worker_id = Math.abs(this.coords.x + this.coords.y + this.coords.z) % workers.length;
      } else {
        // Pin all tiles from each non-tiled source to a single worker
        // Prevents data for these sources from being loaded more than once
        this.worker_id = this.source.id % workers.length;
      }
      this.worker = workers[this.worker_id];
    }
  }, {
    key: "workerMessage",
    value: function workerMessage() {
      for (var _len = arguments.length, message = new Array(_len), _key = 0; _key < _len; _key++) {
        message[_key] = arguments[_key];
      }
      return WorkerBroker$1.postMessage.apply(WorkerBroker$1, [this.worker].concat(message));
    }
  }, {
    key: "build",
    value: function build(generation) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$fade_in = _ref2.fade_in,
        fade_in = _ref2$fade_in === void 0 ? true : _ref2$fade_in;
      this.generation = generation;
      this.fade_in = fade_in;
      if (!this.loaded) {
        this.loading = true;
        this.built = false;
        this.labeled = false;
      }
      return this.workerMessage('self.buildTile', {
        tile: this.buildAsMessage()
      }).catch(function (e) {
        throw e;
      });
    }

    /**
        Called on worker to cancel loading
        Static method because the worker only has object representations of tile data, there is no
        tile instance created yet.
    */
  }, {
    key: "buildMeshes",
    value:
    /**
       Called on main thread when a web worker completes processing
       for a single tile.
    */
    function buildMeshes(styles, progress) {
      if (this.error) {
        return;
      }
      this.build_id = build_id++; // record order in which tile was built

      // Debug
      if (progress.start) {
        this.debug.geometry_count = 0;
        this.debug.buffer_size = 0;
      }

      // Create VBOs
      var meshes = {}; // new data to be added to tile
      var mesh_data = this.mesh_data;
      if (mesh_data) {
        for (var s in mesh_data) {
          for (var variant in mesh_data[s].meshes) {
            var mesh_variant = mesh_data[s].meshes[variant];
            if (mesh_variant.vertex_data) {
              if (!styles[s]) {
                log('warn', "Could not create mesh because style '".concat(s, "' not found, for tile ").concat(this.key, ", aborting tile"));
                break;
              }

              // first add style-level uniforms, then add any mesh-specific ones
              var mesh_options = Object.assign({}, mesh_data[s]);
              mesh_options.uniforms = Object.assign({}, mesh_options.uniforms, mesh_variant.uniforms);
              mesh_options.variant = mesh_variant.variant;

              // for labels, keep buffer data on CPU so they can be modified later
              if (mesh_variant.labels) {
                mesh_options.retain = true;
              }
              var mesh = styles[s].makeMesh(mesh_variant.vertex_data, mesh_variant.vertex_elements, mesh_options);
              mesh.variant = mesh_options.variant;
              mesh.labels = mesh_variant.labels;
              meshes[s] = meshes[s] || [];
              meshes[s].push(mesh);
              if (mesh.variant.mesh_order == null) {
                mesh.variant.mesh_order = meshes[s].length - 1; // assign default variant render order
              }
              this.debug.buffer_size += mesh.buffer_size;
              this.debug.geometry_count += mesh.geometry_count;
            }
          }

          // Sort mesh variants by explicit render order (if present)
          if (meshes[s]) {
            meshes[s].sort(function (a, b) {
              // Sort variant order ascending if present, then all null values (where order is unspecified)
              var ao = a.variant.mesh_order,
                bo = b.variant.mesh_order;
              return ao == null ? 1 : bo == null ? -1 : ao < bo ? -1 : 1;
            });
          }
        }
      }
      delete this.mesh_data;

      // New meshes
      for (var m in meshes) {
        // swap in non-collision meshes right away
        if (!styles[m].collision) {
          if (this.meshes[m]) {
            this.meshes[m].forEach(function (m) {
              return m.destroy();
            }); // free old meshes
          }
          this.meshes[m] = meshes[m]; // set new mesh
          this.new_mesh_styles.push(m);
        }
        // keep label meshes out of view until collision is complete
        else {
          this.pending_label_meshes = this.pending_label_meshes || {};
          this.pending_label_meshes[m] = meshes[m];
        }
      }
      if (progress.done) {
        // Release un-replaced meshes (existing in previous generation, but weren't built for this one)
        for (var _m2 in this.meshes) {
          if (this.new_mesh_styles.indexOf(_m2) === -1 && (!this.pending_label_meshes || this.pending_label_meshes[_m2] == null)) {
            this.meshes[_m2].forEach(function (m) {
              return m.destroy();
            });
            delete this.meshes[_m2];
          }
        }
        this.new_mesh_styles = [];
        this.debug.geometry_ratio = (this.debug.geometry_count / this.debug.feature_count).toFixed(1);
      }
      this.printDebug(progress);
    }

    // How many styles are currently pending label collision
  }, {
    key: "pendingLabelStyleCount",
    value: function pendingLabelStyleCount() {
      return this.pending_label_meshes ? Object.keys(this.pending_label_meshes).length : 0;
    }

    // Swap label style meshes after collision is complete
  }, {
    key: "swapPendingLabels",
    value: function swapPendingLabels() {
      this.labeled = true; // mark as labeled

      if (this.pending_label_meshes) {
        for (var m in this.pending_label_meshes) {
          if (this.meshes[m]) {
            this.meshes[m].forEach(function (m) {
              return m.destroy();
            }); // free old meshes
          }
          this.meshes[m] = this.pending_label_meshes[m]; // set new mesh
        }
        this.pending_label_meshes = null;
      }
    }

    /**
        Called on main thread when web worker completes processing, but tile has since been discarded
        Frees resources that would have been transferred to the tile object.
        Static method because the tile object no longer exists (the tile data returned by the worker is passed instead).
    */
  }, {
    key: "setProxyFor",
    value:
    // Set as a proxy tile for another tile
    function setProxyFor(tile) {
      if (tile) {
        this.visible = true;
        this.proxy_for = this.proxy_for || [];
        this.proxy_for.push(tile);
        this.proxy_order_offset = 1; // draw proxies a half-layer back (order is scaled 2x to avoid integer truncation)
        tile.proxied_as = tile.style_z > this.style_z ? 'child' : 'parent';
        this.proxy_level = Math.abs(tile.style_z - this.style_z); // # of zoom levels proxy is above/below target tile
      } else {
        this.proxy_for = null;
        this.proxy_order_offset = 0;
        this.proxy_level = 0;
      }
    }
  }, {
    key: "isProxy",
    value: function isProxy() {
      return this.proxy_for != null;
    }

    // Proxy tiles only need to render a specific style if any of the tiles they are proxying *for*
    // haven't finished loading that style yet. If all proxied tiles *have* data for that style, then it's
    // safe to hide the proxy tile's version.
  }, {
    key: "shouldProxyForStyle",
    value: function shouldProxyForStyle(style) {
      return !this.proxy_for || this.proxy_for.some(function (t) {
        return t.meshes[style] == null;
      });
    }

    // Update model matrix and tile uniforms
  }, {
    key: "setupProgram",
    value: function setupProgram(_ref3, program) {
      var model = _ref3.model,
        model32 = _ref3.model32;
      // Tile origin
      program.uniform('4fv', 'u_tile_origin', [this.min.x, this.min.y, this.style_z, this.coords.z]);
      program.uniform('1f', 'u_tile_proxy_order_offset', this.proxy_order_offset);

      // Model - transform tile space into world space (meters, absolute mercator position)
      mat4.identity(model);
      mat4.translate(model, model, vec3.fromValues(this.min.x, this.min.y, 0));
      mat4.scale(model, model, vec3.fromValues(this.span.x / Geo$1.tile_scale, this.span.y / Geo$1.tile_scale, 1)); // scale tile local coords to meters
      mat4.copy(model32, model);
      program.uniform('Matrix4fv', 'u_model', model32);

      // Fade in labels according to proxy status, avoiding "flickering" where
      // labels quickly go from invisible back to visible
      program.uniform('1i', 'u_tile_fade_in', this.fade_in && this.proxied_as !== 'child');
    }

    // Slice a subset of keys out of a tile
    // Includes a minimum set of pre-defined keys for load state, debug. etc.
    // We use this to send a subset of the tile back to the main thread, to minimize unnecessary data transfer
    // (e.g. very large items like feature geometry are not needed on the main thread)
  }, {
    key: "merge",
    value: function merge(other) {
      this.loading = other.loading;
      this.loaded = other.loaded;
      this.generation = other.generation;
      this.error = other.error;
      this.mesh_data = other.mesh_data;
      this.debug = mergeObjects(this.debug, other.debug);
      return this;
    }
  }, {
    key: "printDebug",
    value: function printDebug(progress) {
      var exclude = ['layers'];
      var copy = {};
      for (var key in this.debug) {
        if (exclude.indexOf(key) === -1) {
          copy[key] = this.debug[key];
        }
      }
      log('debug', "Tile ".concat(progress.done ? '(done)' : '', ": debug for ").concat(this.key, ": [  ").concat(JSON.stringify(copy), " ]"));
    }
  }], [{
    key: "cancel",
    value: function cancel(tile) {
      if (tile) {
        tile.canceled = true;
        if (tile.source_data && tile.source_data.request_id) {
          Utils.cancelRequest(tile.source_data.request_id); // cancel pending tile network request
          tile.source_data.request_id = null;
        }
        Tile.abortBuild(tile);
      }
    }

    // Process geometry for tile - called by web worker
    // Returns a set of tile keys that should be sent to the main thread (so that we can minimize data exchange between worker and main thread)
  }, {
    key: "buildGeometry",
    value: function buildGeometry(tile, _ref4) {
      var scene_id = _ref4.scene_id,
        layers = _ref4.layers,
        styles = _ref4.styles,
        global = _ref4.global;
      var data = tile.source_data;
      tile.debug.building = +new Date();
      tile.debug.feature_count = 0;
      tile.debug.layers = null;
      Collision.startTile(tile.id, {
        apply_repeat_groups: true
      });

      // Process each top-level layer
      for (var layer_name in layers) {
        var layer = layers[layer_name];
        // Skip layers with no data source defined
        if (!layer || !layer.config_data) {
          log('warn', "Layer ".concat(layer_name, " was defined without a geometry data source and will not be rendered."));
          continue;
        }

        // Source names don't match
        if (layer.config_data.source !== tile.source) {
          continue;
        }

        // Get data for one or more layers from source
        var source_layers = Tile.getDataForSource(data, layer.config_data, layer_name);

        // Build features in layer
        for (var s = 0; s < source_layers.length; s++) {
          var source_layer = source_layers[s];
          var geom = source_layer.geom;
          if (!geom) {
            continue;
          }
          for (var f = 0; f < geom.features.length; f++) {
            var feature = geom.features[f];
            if (feature.geometry == null) {
              continue; // skip features w/o geometry (valid GeoJSON)
            }
            var context = StyleParser.getFeatureParseContext(feature, tile, global);
            context.winding = tile.default_winding;
            context.source = tile.source; // add data source name
            context.layer = source_layer.layer; // add data source layer name

            // Get draw groups for this feature
            var draw_groups = layer.buildDrawGroups(context, true);
            if (!draw_groups) {
              continue;
            }

            // Build draw groups
            for (var group_name in draw_groups) {
              var group = draw_groups[group_name];

              // Add to style
              var style_name = group.style || group_name;
              var style = styles[style_name];
              if (!style) {
                log('warn', "Style '".concat(style_name, "' not found, skipping layer '").concat(layer_name, "':"), group, feature);
                continue;
              }
              group = style.preprocess(group);
              if (group == null || group.visible === false) {
                continue;
              }
              context.layers = group.layers; // add matching draw layers

              style.addFeature(feature, group, context);
            }
            tile.debug.feature_count++;
          }
        }
      }
      tile.debug.building = +new Date() - tile.debug.building;

      // Send styles back to main thread as they finish building, in two groups: collision vs. non-collision
      var tile_styles = this.stylesForTile(tile, styles).map(function (s) {
        return styles[s];
      });
      Tile.buildStyleGroups(tile, tile_styles, scene_id, function (style) {
        return style.collision ? 'collision' : 'non-collision';
      });
      // Tile.buildStyleGroups(tile, tile_styles, scene_id, style => style.name); // call for each style
      // Tile.buildStyleGroups(tile, tile_styles, scene_id, style => 'styles'); // all styles in single call (previous behavior)
    }
  }, {
    key: "stylesForTile",
    value: function stylesForTile(tile, styles) {
      var tile_styles = [];
      for (var s in styles) {
        if (styles[s].hasDataForTile(tile)) {
          tile_styles.push(s);
        }
      }
      return tile_styles;
    }

    // Build styles (grouped by the provided function) and send back to main thread as they finish building
  }, {
    key: "buildStyleGroups",
    value: function buildStyleGroups(tile, styles, scene_id, group_by) {
      // Group the styles; each group will be sent to the main thread when the styles in the group finish building.
      var groups = styles.reduce(function (groups, style) {
        var group = group_by(style);
        groups[group] = groups[group] || [];
        groups[group].push(style);
        return groups;
      }, {});

      // If nothing to build, return empty tile to main thread
      if (Object.keys(groups).length === 0) {
        WorkerBroker$1.postMessage("TileManager_".concat(scene_id, ".buildTileStylesCompleted"), WorkerBroker$1.withTransferables({
          tile: Tile.slice(tile),
          progress: {
            start: true,
            done: true
          }
        }));
        Collision.resetTile(tile.id); // clear collision if we're done with the tile
        return;
      }

      // Build each group of styles
      var progress = {};
      for (var group_name in groups) {
        Tile.buildStyleGroup({
          group_name: group_name,
          groups: groups,
          tile: tile,
          progress: progress,
          scene_id: scene_id
        });
      }
    }

    // Build a single group of styles
  }, {
    key: "buildStyleGroup",
    value: function buildStyleGroup(_ref5) {
      return new Promise(function ($return, $error) {
        var group_name, groups, tile, progress, scene_id, group, mesh_data;
        group_name = _ref5.group_name, groups = _ref5.groups, tile = _ref5.tile, progress = _ref5.progress, scene_id = _ref5.scene_id;
        group = groups[group_name];
        mesh_data = {};
        var $Try_1_Post = function () {
          try {
            return $return();
          } catch ($boundEx) {
            return $error($boundEx);
          }
        };
        var $Try_1_Catch = function (e) {
          try {
            log('error', "Error for style group '".concat(group_name, "' for tile ").concat(tile.key), e && e.stack || e);
            return $Try_1_Post();
          } catch ($boundEx) {
            return $error($boundEx);
          }
        };
        try {
          return Promise.resolve(Promise.all(group.map(function (style) {
            return new Promise(function ($return, $error) {
              var style_data;
              return Promise.resolve(style.endData(tile)).then(function ($await_2) {
                try {
                  style_data = $await_2;
                  if (style_data) {
                    mesh_data[style.name] = style_data;
                  }
                  return $return();
                } catch ($boundEx) {
                  return $error($boundEx);
                }
              }, $error);
            });
          }))).then(function ($await_3) {
            try {
              // Mark the group as done, and check if all groups have finished
              log('trace', "Finished style group '".concat(group_name, "' for tile ").concat(tile.key));
              groups[group_name] = null;
              if (Object.keys(groups).every(function (g) {
                return groups[g] == null;
              })) {
                progress.done = true;
              }

              // Send meshes to main thread
              WorkerBroker$1.postMessage("TileManager_".concat(scene_id, ".buildTileStylesCompleted"), WorkerBroker$1.withTransferables({
                tile: _objectSpread(_objectSpread({}, Tile.slice(tile)), {}, {
                  mesh_data: mesh_data
                }),
                progress: progress
              }));
              if (progress.done) {
                Collision.resetTile(tile.id); // clear collision if we're done with the tile
              }
              return $Try_1_Post();
            } catch ($boundEx) {
              return $Try_1_Catch($boundEx);
            }
          }, $Try_1_Catch);
        } catch (e) {
          $Try_1_Catch(e);
        }
      });
    }

    /**
        Retrieves geometry from a tile according to a data source definition
        Returns an array of objects with:
            layer: source layer name
            geom: GeoJSON FeatureCollection
    */
  }, {
    key: "getDataForSource",
    value: function getDataForSource(source_data, source_config, scene_layer_name) {
      var layers = [];
      if (source_config != null && source_data != null && source_data.layers != null) {
        // If source wildcard is specified, combine all source layers
        if (source_config.all_layers === true) {
          // Wildcard takes precedence over explicit source layer(s)
          if (source_config.layer != null) {
            var msg = "Layer ".concat(scene_layer_name, " includes both 'all_layers: true' and an explicit ") + '\'layer\' keyword in its \'data\' block. \'all_layers: true\' takes precedence, \'layer\' ' + 'will be ignored.';
            log({
              level: 'warn',
              once: true
            }, msg);
          }
          for (var layer in source_data.layers) {
            layers.push({
              layer: layer,
              geom: source_data.layers[layer]
            });
          }
        }
        // If no source layer specified, and a default data source layer exists
        else if (!source_config.layer && source_data.layers._default) {
          layers.push({
            geom: source_data.layers._default
          });
        }
        // If no source layer is specified, and a layer for the scene layer name exists
        else if (!source_config.layer && scene_layer_name) {
          layers.push({
            layer: scene_layer_name,
            geom: source_data.layers[scene_layer_name]
          });
        }
        // If a source layer is specified by name, use it
        else if (typeof source_config.layer === 'string') {
          layers.push({
            layer: source_config.layer,
            geom: source_data.layers[source_config.layer]
          });
        }
        // If multiple source layers are specified by name, combine them
        else if (Array.isArray(source_config.layer)) {
          source_config.layer.forEach(function (layer) {
            layers.push({
              layer: layer,
              geom: source_data.layers[layer]
            });
          });
        }
      }
      return layers;
    }
  }, {
    key: "abortBuild",
    value: function abortBuild(tile) {
      Task.removeForTile(tile.id);
      Collision.abortTile(tile.id);

      // Releases meshes
      if (tile.mesh_data) {
        for (var s in tile.mesh_data) {
          var textures = tile.mesh_data[s].textures;
          if (textures) {
            textures.forEach(function (t) {
              var texture = Texture.textures[t];
              if (texture) {
                log('trace', "releasing texture ".concat(t, " for tile ").concat(tile.key));
                texture.release();
              }
            });
          }
        }
      }
    }
  }, {
    key: "slice",
    value: function slice(tile, keys) {
      var keep = ['id', 'key', 'loading', 'loaded', 'generation', 'error', 'debug'];
      if (Array.isArray(keys)) {
        keep.push.apply(keep, _toConsumableArray(keys));
      }

      // Build the tile subset
      var tile_subset = {};
      for (var k = 0; k < keep.length; k++) {
        var key = keep[k];
        tile_subset[key] = tile[key];
      }
      return tile_subset;
    }
  }]);
}();
Tile.coord_children = {}; // only allocate children coordinates once per coordinate

// Sum up layer feature/geometry stats from a set of tiles
function debugSumLayerStats(tiles) {
  var list = {},
    tree = {};
  tiles.filter(function (tile) {
    return tile.debug.layers;
  }).forEach(function (tile) {
    // layer list
    Object.keys(tile.debug.layers.list).forEach(function (layer) {
      var counts = tile.debug.layers.list[layer];
      addLayerDebugEntry(list, layer, counts.features, counts.geoms, counts.styles, counts.base);
    });

    // layer tree
    addDebugLayers(tile.debug.layers.tree, tree);
  });
  return {
    list: list,
    tree: tree
  };
}

// build debug stats layer tree
function addDebugLayers(node, tree) {
  for (var layer in node) {
    var counts = node[layer];
    addLayerDebugEntry(tree, layer, counts.features, counts.geoms, counts.styles, counts.base);
    if (counts.layers) {
      tree[layer].layers = tree[layer].layers || {};
      addDebugLayers(counts.layers, tree[layer].layers); // process child layers
    }
  }
}

var ieee754 = {};

var hasRequiredIeee754;

function requireIeee754 () {
	if (hasRequiredIeee754) return ieee754;
	hasRequiredIeee754 = 1;
	ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	};

	ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	};
	return ieee754;
}

var pbf;
var hasRequiredPbf;

function requirePbf () {
	if (hasRequiredPbf) return pbf;
	hasRequiredPbf = 1;

	pbf = Pbf;

	var ieee754 = requireIeee754();

	function Pbf(buf) {
	    this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
	    this.pos = 0;
	    this.type = 0;
	    this.length = this.buf.length;
	}

	Pbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
	Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
	Pbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
	Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

	var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
	    SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

	Pbf.prototype = {

	    destroy: function() {
	        this.buf = null;
	    },

	    // === READING =================================================================

	    readFields: function(readField, result, end) {
	        end = end || this.length;

	        while (this.pos < end) {
	            var val = this.readVarint(),
	                tag = val >> 3,
	                startPos = this.pos;

	            this.type = val & 0x7;
	            readField(tag, result, this);

	            if (this.pos === startPos) this.skip(val);
	        }
	        return result;
	    },

	    readMessage: function(readField, result) {
	        return this.readFields(readField, result, this.readVarint() + this.pos);
	    },

	    readFixed32: function() {
	        var val = readUInt32(this.buf, this.pos);
	        this.pos += 4;
	        return val;
	    },

	    readSFixed32: function() {
	        var val = readInt32(this.buf, this.pos);
	        this.pos += 4;
	        return val;
	    },

	    // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

	    readFixed64: function() {
	        var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
	        this.pos += 8;
	        return val;
	    },

	    readSFixed64: function() {
	        var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
	        this.pos += 8;
	        return val;
	    },

	    readFloat: function() {
	        var val = ieee754.read(this.buf, this.pos, true, 23, 4);
	        this.pos += 4;
	        return val;
	    },

	    readDouble: function() {
	        var val = ieee754.read(this.buf, this.pos, true, 52, 8);
	        this.pos += 8;
	        return val;
	    },

	    readVarint: function(isSigned) {
	        var buf = this.buf,
	            val, b;

	        b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
	        b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
	        b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
	        b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
	        b = buf[this.pos];   val |= (b & 0x0f) << 28;

	        return readVarintRemainder(val, isSigned, this);
	    },

	    readVarint64: function() { // for compatibility with v2.0.1
	        return this.readVarint(true);
	    },

	    readSVarint: function() {
	        var num = this.readVarint();
	        return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
	    },

	    readBoolean: function() {
	        return Boolean(this.readVarint());
	    },

	    readString: function() {
	        var end = this.readVarint() + this.pos,
	            str = readUtf8(this.buf, this.pos, end);
	        this.pos = end;
	        return str;
	    },

	    readBytes: function() {
	        var end = this.readVarint() + this.pos,
	            buffer = this.buf.subarray(this.pos, end);
	        this.pos = end;
	        return buffer;
	    },

	    // verbose for performance reasons; doesn't affect gzipped size

	    readPackedVarint: function(arr, isSigned) {
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readVarint(isSigned));
	        return arr;
	    },
	    readPackedSVarint: function(arr) {
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readSVarint());
	        return arr;
	    },
	    readPackedBoolean: function(arr) {
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readBoolean());
	        return arr;
	    },
	    readPackedFloat: function(arr) {
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readFloat());
	        return arr;
	    },
	    readPackedDouble: function(arr) {
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readDouble());
	        return arr;
	    },
	    readPackedFixed32: function(arr) {
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readFixed32());
	        return arr;
	    },
	    readPackedSFixed32: function(arr) {
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readSFixed32());
	        return arr;
	    },
	    readPackedFixed64: function(arr) {
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readFixed64());
	        return arr;
	    },
	    readPackedSFixed64: function(arr) {
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readSFixed64());
	        return arr;
	    },

	    skip: function(val) {
	        var type = val & 0x7;
	        if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}
	        else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;
	        else if (type === Pbf.Fixed32) this.pos += 4;
	        else if (type === Pbf.Fixed64) this.pos += 8;
	        else throw new Error('Unimplemented type: ' + type);
	    },

	    // === WRITING =================================================================

	    writeTag: function(tag, type) {
	        this.writeVarint((tag << 3) | type);
	    },

	    realloc: function(min) {
	        var length = this.length || 16;

	        while (length < this.pos + min) length *= 2;

	        if (length !== this.length) {
	            var buf = new Uint8Array(length);
	            buf.set(this.buf);
	            this.buf = buf;
	            this.length = length;
	        }
	    },

	    finish: function() {
	        this.length = this.pos;
	        this.pos = 0;
	        return this.buf.subarray(0, this.length);
	    },

	    writeFixed32: function(val) {
	        this.realloc(4);
	        writeInt32(this.buf, val, this.pos);
	        this.pos += 4;
	    },

	    writeSFixed32: function(val) {
	        this.realloc(4);
	        writeInt32(this.buf, val, this.pos);
	        this.pos += 4;
	    },

	    writeFixed64: function(val) {
	        this.realloc(8);
	        writeInt32(this.buf, val & -1, this.pos);
	        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
	        this.pos += 8;
	    },

	    writeSFixed64: function(val) {
	        this.realloc(8);
	        writeInt32(this.buf, val & -1, this.pos);
	        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
	        this.pos += 8;
	    },

	    writeVarint: function(val) {
	        val = +val || 0;

	        if (val > 0xfffffff || val < 0) {
	            writeBigVarint(val, this);
	            return;
	        }

	        this.realloc(4);

	        this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
	        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
	        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
	        this.buf[this.pos++] =   (val >>> 7) & 0x7f;
	    },

	    writeSVarint: function(val) {
	        this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
	    },

	    writeBoolean: function(val) {
	        this.writeVarint(Boolean(val));
	    },

	    writeString: function(str) {
	        str = String(str);
	        this.realloc(str.length * 4);

	        this.pos++; // reserve 1 byte for short string length

	        var startPos = this.pos;
	        // write the string directly to the buffer and see how much was written
	        this.pos = writeUtf8(this.buf, str, this.pos);
	        var len = this.pos - startPos;

	        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

	        // finally, write the message length in the reserved place and restore the position
	        this.pos = startPos - 1;
	        this.writeVarint(len);
	        this.pos += len;
	    },

	    writeFloat: function(val) {
	        this.realloc(4);
	        ieee754.write(this.buf, val, this.pos, true, 23, 4);
	        this.pos += 4;
	    },

	    writeDouble: function(val) {
	        this.realloc(8);
	        ieee754.write(this.buf, val, this.pos, true, 52, 8);
	        this.pos += 8;
	    },

	    writeBytes: function(buffer) {
	        var len = buffer.length;
	        this.writeVarint(len);
	        this.realloc(len);
	        for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
	    },

	    writeRawMessage: function(fn, obj) {
	        this.pos++; // reserve 1 byte for short message length

	        // write the message directly to the buffer and see how much was written
	        var startPos = this.pos;
	        fn(obj, this);
	        var len = this.pos - startPos;

	        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

	        // finally, write the message length in the reserved place and restore the position
	        this.pos = startPos - 1;
	        this.writeVarint(len);
	        this.pos += len;
	    },

	    writeMessage: function(tag, fn, obj) {
	        this.writeTag(tag, Pbf.Bytes);
	        this.writeRawMessage(fn, obj);
	    },

	    writePackedVarint:   function(tag, arr) { this.writeMessage(tag, writePackedVarint, arr);   },
	    writePackedSVarint:  function(tag, arr) { this.writeMessage(tag, writePackedSVarint, arr);  },
	    writePackedBoolean:  function(tag, arr) { this.writeMessage(tag, writePackedBoolean, arr);  },
	    writePackedFloat:    function(tag, arr) { this.writeMessage(tag, writePackedFloat, arr);    },
	    writePackedDouble:   function(tag, arr) { this.writeMessage(tag, writePackedDouble, arr);   },
	    writePackedFixed32:  function(tag, arr) { this.writeMessage(tag, writePackedFixed32, arr);  },
	    writePackedSFixed32: function(tag, arr) { this.writeMessage(tag, writePackedSFixed32, arr); },
	    writePackedFixed64:  function(tag, arr) { this.writeMessage(tag, writePackedFixed64, arr);  },
	    writePackedSFixed64: function(tag, arr) { this.writeMessage(tag, writePackedSFixed64, arr); },

	    writeBytesField: function(tag, buffer) {
	        this.writeTag(tag, Pbf.Bytes);
	        this.writeBytes(buffer);
	    },
	    writeFixed32Field: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed32);
	        this.writeFixed32(val);
	    },
	    writeSFixed32Field: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed32);
	        this.writeSFixed32(val);
	    },
	    writeFixed64Field: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed64);
	        this.writeFixed64(val);
	    },
	    writeSFixed64Field: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed64);
	        this.writeSFixed64(val);
	    },
	    writeVarintField: function(tag, val) {
	        this.writeTag(tag, Pbf.Varint);
	        this.writeVarint(val);
	    },
	    writeSVarintField: function(tag, val) {
	        this.writeTag(tag, Pbf.Varint);
	        this.writeSVarint(val);
	    },
	    writeStringField: function(tag, str) {
	        this.writeTag(tag, Pbf.Bytes);
	        this.writeString(str);
	    },
	    writeFloatField: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed32);
	        this.writeFloat(val);
	    },
	    writeDoubleField: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed64);
	        this.writeDouble(val);
	    },
	    writeBooleanField: function(tag, val) {
	        this.writeVarintField(tag, Boolean(val));
	    }
	};

	function readVarintRemainder(l, s, p) {
	    var buf = p.buf,
	        h, b;

	    b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
	    b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
	    b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
	    b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
	    b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
	    b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

	    throw new Error('Expected varint not more than 10 bytes');
	}

	function readPackedEnd(pbf) {
	    return pbf.type === Pbf.Bytes ?
	        pbf.readVarint() + pbf.pos : pbf.pos + 1;
	}

	function toNum(low, high, isSigned) {
	    if (isSigned) {
	        return high * 0x100000000 + (low >>> 0);
	    }

	    return ((high >>> 0) * 0x100000000) + (low >>> 0);
	}

	function writeBigVarint(val, pbf) {
	    var low, high;

	    if (val >= 0) {
	        low  = (val % 0x100000000) | 0;
	        high = (val / 0x100000000) | 0;
	    } else {
	        low  = ~(-val % 0x100000000);
	        high = ~(-val / 0x100000000);

	        if (low ^ 0xffffffff) {
	            low = (low + 1) | 0;
	        } else {
	            low = 0;
	            high = (high + 1) | 0;
	        }
	    }

	    if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
	        throw new Error('Given varint doesn\'t fit into 10 bytes');
	    }

	    pbf.realloc(10);

	    writeBigVarintLow(low, high, pbf);
	    writeBigVarintHigh(high, pbf);
	}

	function writeBigVarintLow(low, high, pbf) {
	    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
	    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
	    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
	    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
	    pbf.buf[pbf.pos]   = low & 0x7f;
	}

	function writeBigVarintHigh(high, pbf) {
	    var lsb = (high & 0x07) << 4;

	    pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
	    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
	    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
	    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
	    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
	    pbf.buf[pbf.pos++]  = high & 0x7f;
	}

	function makeRoomForExtraLength(startPos, len, pbf) {
	    var extraLen =
	        len <= 0x3fff ? 1 :
	        len <= 0x1fffff ? 2 :
	        len <= 0xfffffff ? 3 : Math.ceil(Math.log(len) / (Math.LN2 * 7));

	    // if 1 byte isn't enough for encoding message length, shift the data to the right
	    pbf.realloc(extraLen);
	    for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
	}

	function writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }
	function writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }
	function writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }
	function writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }
	function writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }
	function writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }
	function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }
	function writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }
	function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }

	// Buffer code below from https://github.com/feross/buffer, MIT-licensed

	function readUInt32(buf, pos) {
	    return ((buf[pos]) |
	        (buf[pos + 1] << 8) |
	        (buf[pos + 2] << 16)) +
	        (buf[pos + 3] * 0x1000000);
	}

	function writeInt32(buf, val, pos) {
	    buf[pos] = val;
	    buf[pos + 1] = (val >>> 8);
	    buf[pos + 2] = (val >>> 16);
	    buf[pos + 3] = (val >>> 24);
	}

	function readInt32(buf, pos) {
	    return ((buf[pos]) |
	        (buf[pos + 1] << 8) |
	        (buf[pos + 2] << 16)) +
	        (buf[pos + 3] << 24);
	}

	function readUtf8(buf, pos, end) {
	    var str = '';
	    var i = pos;

	    while (i < end) {
	        var b0 = buf[i];
	        var c = null; // codepoint
	        var bytesPerSequence =
	            b0 > 0xEF ? 4 :
	            b0 > 0xDF ? 3 :
	            b0 > 0xBF ? 2 : 1;

	        if (i + bytesPerSequence > end) break;

	        var b1, b2, b3;

	        if (bytesPerSequence === 1) {
	            if (b0 < 0x80) {
	                c = b0;
	            }
	        } else if (bytesPerSequence === 2) {
	            b1 = buf[i + 1];
	            if ((b1 & 0xC0) === 0x80) {
	                c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
	                if (c <= 0x7F) {
	                    c = null;
	                }
	            }
	        } else if (bytesPerSequence === 3) {
	            b1 = buf[i + 1];
	            b2 = buf[i + 2];
	            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
	                c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
	                if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
	                    c = null;
	                }
	            }
	        } else if (bytesPerSequence === 4) {
	            b1 = buf[i + 1];
	            b2 = buf[i + 2];
	            b3 = buf[i + 3];
	            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
	                c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
	                if (c <= 0xFFFF || c >= 0x110000) {
	                    c = null;
	                }
	            }
	        }

	        if (c === null) {
	            c = 0xFFFD;
	            bytesPerSequence = 1;

	        } else if (c > 0xFFFF) {
	            c -= 0x10000;
	            str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
	            c = 0xDC00 | c & 0x3FF;
	        }

	        str += String.fromCharCode(c);
	        i += bytesPerSequence;
	    }

	    return str;
	}

	function writeUtf8(buf, str, pos) {
	    for (var i = 0, c, lead; i < str.length; i++) {
	        c = str.charCodeAt(i); // code point

	        if (c > 0xD7FF && c < 0xE000) {
	            if (lead) {
	                if (c < 0xDC00) {
	                    buf[pos++] = 0xEF;
	                    buf[pos++] = 0xBF;
	                    buf[pos++] = 0xBD;
	                    lead = c;
	                    continue;
	                } else {
	                    c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
	                    lead = null;
	                }
	            } else {
	                if (c > 0xDBFF || (i + 1 === str.length)) {
	                    buf[pos++] = 0xEF;
	                    buf[pos++] = 0xBF;
	                    buf[pos++] = 0xBD;
	                } else {
	                    lead = c;
	                }
	                continue;
	            }
	        } else if (lead) {
	            buf[pos++] = 0xEF;
	            buf[pos++] = 0xBF;
	            buf[pos++] = 0xBD;
	            lead = null;
	        }

	        if (c < 0x80) {
	            buf[pos++] = c;
	        } else {
	            if (c < 0x800) {
	                buf[pos++] = c >> 0x6 | 0xC0;
	            } else {
	                if (c < 0x10000) {
	                    buf[pos++] = c >> 0xC | 0xE0;
	                } else {
	                    buf[pos++] = c >> 0x12 | 0xF0;
	                    buf[pos++] = c >> 0xC & 0x3F | 0x80;
	                }
	                buf[pos++] = c >> 0x6 & 0x3F | 0x80;
	            }
	            buf[pos++] = c & 0x3F | 0x80;
	        }
	    }
	    return pos;
	}
	return pbf;
}

var pbfExports = requirePbf();
var Pbf = /*@__PURE__*/getDefaultExportFromCjs(pbfExports);

var vectorTile = {};

var pointGeometry;
var hasRequiredPointGeometry;

function requirePointGeometry () {
	if (hasRequiredPointGeometry) return pointGeometry;
	hasRequiredPointGeometry = 1;

	pointGeometry = Point;

	/**
	 * A standalone point geometry with useful accessor, comparison, and
	 * modification methods.
	 *
	 * @class Point
	 * @param {Number} x the x-coordinate. this could be longitude or screen
	 * pixels, or any other sort of unit.
	 * @param {Number} y the y-coordinate. this could be latitude or screen
	 * pixels, or any other sort of unit.
	 * @example
	 * var point = new Point(-77, 38);
	 */
	function Point(x, y) {
	    this.x = x;
	    this.y = y;
	}

	Point.prototype = {

	    /**
	     * Clone this point, returning a new point that can be modified
	     * without affecting the old one.
	     * @return {Point} the clone
	     */
	    clone: function() { return new Point(this.x, this.y); },

	    /**
	     * Add this point's x & y coordinates to another point,
	     * yielding a new point.
	     * @param {Point} p the other point
	     * @return {Point} output point
	     */
	    add:     function(p) { return this.clone()._add(p); },

	    /**
	     * Subtract this point's x & y coordinates to from point,
	     * yielding a new point.
	     * @param {Point} p the other point
	     * @return {Point} output point
	     */
	    sub:     function(p) { return this.clone()._sub(p); },

	    /**
	     * Multiply this point's x & y coordinates by point,
	     * yielding a new point.
	     * @param {Point} p the other point
	     * @return {Point} output point
	     */
	    multByPoint:    function(p) { return this.clone()._multByPoint(p); },

	    /**
	     * Divide this point's x & y coordinates by point,
	     * yielding a new point.
	     * @param {Point} p the other point
	     * @return {Point} output point
	     */
	    divByPoint:     function(p) { return this.clone()._divByPoint(p); },

	    /**
	     * Multiply this point's x & y coordinates by a factor,
	     * yielding a new point.
	     * @param {Point} k factor
	     * @return {Point} output point
	     */
	    mult:    function(k) { return this.clone()._mult(k); },

	    /**
	     * Divide this point's x & y coordinates by a factor,
	     * yielding a new point.
	     * @param {Point} k factor
	     * @return {Point} output point
	     */
	    div:     function(k) { return this.clone()._div(k); },

	    /**
	     * Rotate this point around the 0, 0 origin by an angle a,
	     * given in radians
	     * @param {Number} a angle to rotate around, in radians
	     * @return {Point} output point
	     */
	    rotate:  function(a) { return this.clone()._rotate(a); },

	    /**
	     * Rotate this point around p point by an angle a,
	     * given in radians
	     * @param {Number} a angle to rotate around, in radians
	     * @param {Point} p Point to rotate around
	     * @return {Point} output point
	     */
	    rotateAround:  function(a,p) { return this.clone()._rotateAround(a,p); },

	    /**
	     * Multiply this point by a 4x1 transformation matrix
	     * @param {Array<Number>} m transformation matrix
	     * @return {Point} output point
	     */
	    matMult: function(m) { return this.clone()._matMult(m); },

	    /**
	     * Calculate this point but as a unit vector from 0, 0, meaning
	     * that the distance from the resulting point to the 0, 0
	     * coordinate will be equal to 1 and the angle from the resulting
	     * point to the 0, 0 coordinate will be the same as before.
	     * @return {Point} unit vector point
	     */
	    unit:    function() { return this.clone()._unit(); },

	    /**
	     * Compute a perpendicular point, where the new y coordinate
	     * is the old x coordinate and the new x coordinate is the old y
	     * coordinate multiplied by -1
	     * @return {Point} perpendicular point
	     */
	    perp:    function() { return this.clone()._perp(); },

	    /**
	     * Return a version of this point with the x & y coordinates
	     * rounded to integers.
	     * @return {Point} rounded point
	     */
	    round:   function() { return this.clone()._round(); },

	    /**
	     * Return the magitude of this point: this is the Euclidean
	     * distance from the 0, 0 coordinate to this point's x and y
	     * coordinates.
	     * @return {Number} magnitude
	     */
	    mag: function() {
	        return Math.sqrt(this.x * this.x + this.y * this.y);
	    },

	    /**
	     * Judge whether this point is equal to another point, returning
	     * true or false.
	     * @param {Point} other the other point
	     * @return {boolean} whether the points are equal
	     */
	    equals: function(other) {
	        return this.x === other.x &&
	               this.y === other.y;
	    },

	    /**
	     * Calculate the distance from this point to another point
	     * @param {Point} p the other point
	     * @return {Number} distance
	     */
	    dist: function(p) {
	        return Math.sqrt(this.distSqr(p));
	    },

	    /**
	     * Calculate the distance from this point to another point,
	     * without the square root step. Useful if you're comparing
	     * relative distances.
	     * @param {Point} p the other point
	     * @return {Number} distance
	     */
	    distSqr: function(p) {
	        var dx = p.x - this.x,
	            dy = p.y - this.y;
	        return dx * dx + dy * dy;
	    },

	    /**
	     * Get the angle from the 0, 0 coordinate to this point, in radians
	     * coordinates.
	     * @return {Number} angle
	     */
	    angle: function() {
	        return Math.atan2(this.y, this.x);
	    },

	    /**
	     * Get the angle from this point to another point, in radians
	     * @param {Point} b the other point
	     * @return {Number} angle
	     */
	    angleTo: function(b) {
	        return Math.atan2(this.y - b.y, this.x - b.x);
	    },

	    /**
	     * Get the angle between this point and another point, in radians
	     * @param {Point} b the other point
	     * @return {Number} angle
	     */
	    angleWith: function(b) {
	        return this.angleWithSep(b.x, b.y);
	    },

	    /*
	     * Find the angle of the two vectors, solving the formula for
	     * the cross product a x b = |a||b|sin(θ) for θ.
	     * @param {Number} x the x-coordinate
	     * @param {Number} y the y-coordinate
	     * @return {Number} the angle in radians
	     */
	    angleWithSep: function(x, y) {
	        return Math.atan2(
	            this.x * y - this.y * x,
	            this.x * x + this.y * y);
	    },

	    _matMult: function(m) {
	        var x = m[0] * this.x + m[1] * this.y,
	            y = m[2] * this.x + m[3] * this.y;
	        this.x = x;
	        this.y = y;
	        return this;
	    },

	    _add: function(p) {
	        this.x += p.x;
	        this.y += p.y;
	        return this;
	    },

	    _sub: function(p) {
	        this.x -= p.x;
	        this.y -= p.y;
	        return this;
	    },

	    _mult: function(k) {
	        this.x *= k;
	        this.y *= k;
	        return this;
	    },

	    _div: function(k) {
	        this.x /= k;
	        this.y /= k;
	        return this;
	    },

	    _multByPoint: function(p) {
	        this.x *= p.x;
	        this.y *= p.y;
	        return this;
	    },

	    _divByPoint: function(p) {
	        this.x /= p.x;
	        this.y /= p.y;
	        return this;
	    },

	    _unit: function() {
	        this._div(this.mag());
	        return this;
	    },

	    _perp: function() {
	        var y = this.y;
	        this.y = this.x;
	        this.x = -y;
	        return this;
	    },

	    _rotate: function(angle) {
	        var cos = Math.cos(angle),
	            sin = Math.sin(angle),
	            x = cos * this.x - sin * this.y,
	            y = sin * this.x + cos * this.y;
	        this.x = x;
	        this.y = y;
	        return this;
	    },

	    _rotateAround: function(angle, p) {
	        var cos = Math.cos(angle),
	            sin = Math.sin(angle),
	            x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y),
	            y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);
	        this.x = x;
	        this.y = y;
	        return this;
	    },

	    _round: function() {
	        this.x = Math.round(this.x);
	        this.y = Math.round(this.y);
	        return this;
	    }
	};

	/**
	 * Construct a point from an array if necessary, otherwise if the input
	 * is already a Point, or an unknown type, return it unchanged
	 * @param {Array<Number>|Point|*} a any kind of input value
	 * @return {Point} constructed point, or passed-through value.
	 * @example
	 * // this
	 * var point = Point.convert([0, 1]);
	 * // is equivalent to
	 * var point = new Point(0, 1);
	 */
	Point.convert = function (a) {
	    if (a instanceof Point) {
	        return a;
	    }
	    if (Array.isArray(a)) {
	        return new Point(a[0], a[1]);
	    }
	    return a;
	};
	return pointGeometry;
}

var vectortilefeature;
var hasRequiredVectortilefeature;

function requireVectortilefeature () {
	if (hasRequiredVectortilefeature) return vectortilefeature;
	hasRequiredVectortilefeature = 1;

	var Point = requirePointGeometry();

	vectortilefeature = VectorTileFeature;

	function VectorTileFeature(pbf, end, extent, keys, values) {
	    // Public
	    this.properties = {};
	    this.extent = extent;
	    this.type = 0;

	    // Private
	    this._pbf = pbf;
	    this._geometry = -1;
	    this._keys = keys;
	    this._values = values;

	    pbf.readFields(readFeature, this, end);
	}

	function readFeature(tag, feature, pbf) {
	    if (tag == 1) feature.id = pbf.readVarint();
	    else if (tag == 2) readTag(pbf, feature);
	    else if (tag == 3) feature.type = pbf.readVarint();
	    else if (tag == 4) feature._geometry = pbf.pos;
	}

	function readTag(pbf, feature) {
	    var end = pbf.readVarint() + pbf.pos;

	    while (pbf.pos < end) {
	        var key = feature._keys[pbf.readVarint()],
	            value = feature._values[pbf.readVarint()];
	        feature.properties[key] = value;
	    }
	}

	VectorTileFeature.types = ['Unknown', 'Point', 'LineString', 'Polygon'];

	VectorTileFeature.prototype.loadGeometry = function() {
	    var pbf = this._pbf;
	    pbf.pos = this._geometry;

	    var end = pbf.readVarint() + pbf.pos,
	        cmd = 1,
	        length = 0,
	        x = 0,
	        y = 0,
	        lines = [],
	        line;

	    while (pbf.pos < end) {
	        if (!length) {
	            var cmdLen = pbf.readVarint();
	            cmd = cmdLen & 0x7;
	            length = cmdLen >> 3;
	        }

	        length--;

	        if (cmd === 1 || cmd === 2) {
	            x += pbf.readSVarint();
	            y += pbf.readSVarint();

	            if (cmd === 1) { // moveTo
	                if (line) lines.push(line);
	                line = [];
	            }

	            line.push(new Point(x, y));

	        } else if (cmd === 7) {

	            // Workaround for https://github.com/mapbox/mapnik-vector-tile/issues/90
	            if (line) {
	                line.push(line[0].clone()); // closePolygon
	            }

	        } else {
	            throw new Error('unknown command ' + cmd);
	        }
	    }

	    if (line) lines.push(line);

	    return lines;
	};

	VectorTileFeature.prototype.bbox = function() {
	    var pbf = this._pbf;
	    pbf.pos = this._geometry;

	    var end = pbf.readVarint() + pbf.pos,
	        cmd = 1,
	        length = 0,
	        x = 0,
	        y = 0,
	        x1 = Infinity,
	        x2 = -Infinity,
	        y1 = Infinity,
	        y2 = -Infinity;

	    while (pbf.pos < end) {
	        if (!length) {
	            var cmdLen = pbf.readVarint();
	            cmd = cmdLen & 0x7;
	            length = cmdLen >> 3;
	        }

	        length--;

	        if (cmd === 1 || cmd === 2) {
	            x += pbf.readSVarint();
	            y += pbf.readSVarint();
	            if (x < x1) x1 = x;
	            if (x > x2) x2 = x;
	            if (y < y1) y1 = y;
	            if (y > y2) y2 = y;

	        } else if (cmd !== 7) {
	            throw new Error('unknown command ' + cmd);
	        }
	    }

	    return [x1, y1, x2, y2];
	};

	VectorTileFeature.prototype.toGeoJSON = function(x, y, z) {
	    var size = this.extent * Math.pow(2, z),
	        x0 = this.extent * x,
	        y0 = this.extent * y,
	        coords = this.loadGeometry(),
	        type = VectorTileFeature.types[this.type],
	        i, j;

	    function project(line) {
	        for (var j = 0; j < line.length; j++) {
	            var p = line[j], y2 = 180 - (p.y + y0) * 360 / size;
	            line[j] = [
	                (p.x + x0) * 360 / size - 180,
	                360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90
	            ];
	        }
	    }

	    switch (this.type) {
	    case 1:
	        var points = [];
	        for (i = 0; i < coords.length; i++) {
	            points[i] = coords[i][0];
	        }
	        coords = points;
	        project(coords);
	        break;

	    case 2:
	        for (i = 0; i < coords.length; i++) {
	            project(coords[i]);
	        }
	        break;

	    case 3:
	        coords = classifyRings(coords);
	        for (i = 0; i < coords.length; i++) {
	            for (j = 0; j < coords[i].length; j++) {
	                project(coords[i][j]);
	            }
	        }
	        break;
	    }

	    if (coords.length === 1) {
	        coords = coords[0];
	    } else {
	        type = 'Multi' + type;
	    }

	    var result = {
	        type: "Feature",
	        geometry: {
	            type: type,
	            coordinates: coords
	        },
	        properties: this.properties
	    };

	    if ('id' in this) {
	        result.id = this.id;
	    }

	    return result;
	};

	// classifies an array of rings into polygons with outer rings and holes

	function classifyRings(rings) {
	    var len = rings.length;

	    if (len <= 1) return [rings];

	    var polygons = [],
	        polygon,
	        ccw;

	    for (var i = 0; i < len; i++) {
	        var area = signedArea(rings[i]);
	        if (area === 0) continue;

	        if (ccw === undefined) ccw = area < 0;

	        if (ccw === area < 0) {
	            if (polygon) polygons.push(polygon);
	            polygon = [rings[i]];

	        } else {
	            polygon.push(rings[i]);
	        }
	    }
	    if (polygon) polygons.push(polygon);

	    return polygons;
	}

	function signedArea(ring) {
	    var sum = 0;
	    for (var i = 0, len = ring.length, j = len - 1, p1, p2; i < len; j = i++) {
	        p1 = ring[i];
	        p2 = ring[j];
	        sum += (p2.x - p1.x) * (p1.y + p2.y);
	    }
	    return sum;
	}
	return vectortilefeature;
}

var vectortilelayer;
var hasRequiredVectortilelayer;

function requireVectortilelayer () {
	if (hasRequiredVectortilelayer) return vectortilelayer;
	hasRequiredVectortilelayer = 1;

	var VectorTileFeature = requireVectortilefeature();

	vectortilelayer = VectorTileLayer;

	function VectorTileLayer(pbf, end) {
	    // Public
	    this.version = 1;
	    this.name = null;
	    this.extent = 4096;
	    this.length = 0;

	    // Private
	    this._pbf = pbf;
	    this._keys = [];
	    this._values = [];
	    this._features = [];

	    pbf.readFields(readLayer, this, end);

	    this.length = this._features.length;
	}

	function readLayer(tag, layer, pbf) {
	    if (tag === 15) layer.version = pbf.readVarint();
	    else if (tag === 1) layer.name = pbf.readString();
	    else if (tag === 5) layer.extent = pbf.readVarint();
	    else if (tag === 2) layer._features.push(pbf.pos);
	    else if (tag === 3) layer._keys.push(pbf.readString());
	    else if (tag === 4) layer._values.push(readValueMessage(pbf));
	}

	function readValueMessage(pbf) {
	    var value = null,
	        end = pbf.readVarint() + pbf.pos;

	    while (pbf.pos < end) {
	        var tag = pbf.readVarint() >> 3;

	        value = tag === 1 ? pbf.readString() :
	            tag === 2 ? pbf.readFloat() :
	            tag === 3 ? pbf.readDouble() :
	            tag === 4 ? pbf.readVarint64() :
	            tag === 5 ? pbf.readVarint() :
	            tag === 6 ? pbf.readSVarint() :
	            tag === 7 ? pbf.readBoolean() : null;
	    }

	    return value;
	}

	// return feature `i` from this layer as a `VectorTileFeature`
	VectorTileLayer.prototype.feature = function(i) {
	    if (i < 0 || i >= this._features.length) throw new Error('feature index out of bounds');

	    this._pbf.pos = this._features[i];

	    var end = this._pbf.readVarint() + this._pbf.pos;
	    return new VectorTileFeature(this._pbf, end, this.extent, this._keys, this._values);
	};
	return vectortilelayer;
}

var vectortile;
var hasRequiredVectortile;

function requireVectortile () {
	if (hasRequiredVectortile) return vectortile;
	hasRequiredVectortile = 1;

	var VectorTileLayer = requireVectortilelayer();

	vectortile = VectorTile;

	function VectorTile(pbf, end) {
	    this.layers = pbf.readFields(readTile, {}, end);
	}

	function readTile(tag, layers, pbf) {
	    if (tag === 3) {
	        var layer = new VectorTileLayer(pbf, pbf.readVarint() + pbf.pos);
	        if (layer.length) layers[layer.name] = layer;
	    }
	}
	return vectortile;
}

var hasRequiredVectorTile;

function requireVectorTile () {
	if (hasRequiredVectorTile) return vectorTile;
	hasRequiredVectorTile = 1;
	vectorTile.VectorTile = requireVectortile();
	vectorTile.VectorTileFeature = requireVectortilefeature();
	vectorTile.VectorTileLayer = requireVectortilelayer();
	return vectorTile;
}

var vectorTileExports = requireVectorTile();

function _callSuper$2(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$2() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct() { return !!t; })(); }
var PARSE_JSON_TYPE = {
  NONE: 0,
  ALL: 1,
  SOME: 2
};
var PARSE_JSON_TEST = ['{', '[']; // one-time allocated array/strings

/**
 Mapbox Vector Tile format
 @class MVTSource
*/
var MVTSource = /*#__PURE__*/function (_NetworkTileSource) {
  function MVTSource(source, sources) {
    var _this;
    _classCallCheck(this, MVTSource);
    _this = _callSuper$2(this, MVTSource, [source, sources]);
    _this.response_type = 'arraybuffer'; // binary data

    // Optionally parse some or all properties from JSON strings
    if (source.parse_json === true) {
      // try to parse all properties (least efficient)
      _this.parse_json_type = PARSE_JSON_TYPE.ALL;
    } else if (Array.isArray(source.parse_json)) {
      // try to parse a specific list of property names (more efficient)
      _this.parse_json_type = PARSE_JSON_TYPE.SOME;
      _this.parse_json_prop_list = source.parse_json;
    } else {
      if (source.parse_json != null) {
        var msg = "Data source '".concat(_this.name, "': 'parse_json' parameter should be 'true', or an array of ") + "property names (was '".concat(JSON.stringify(source.parse_json), "')");
        log({
          level: 'warn',
          once: true
        }, msg);
      }

      // skip parsing entirely (default behavior)
      _this.parse_json_type = PARSE_JSON_TYPE.NONE;
    }
    return _this;
  }
  _inherits(MVTSource, _NetworkTileSource);
  return _createClass(MVTSource, [{
    key: "parseSourceData",
    value: function parseSourceData(tile, source, response) {
      // Convert Mapbox vector tile to GeoJSON
      var data = new Uint8Array(response);
      var buffer = new Pbf(data);
      source.data = new vectorTileExports.VectorTile(buffer);
      source.layers = this.toGeoJSON(source.data);

      // Apply optional data transform
      if (typeof this.transform === 'function') {
        var tile_data = {
          min: Object.assign({}, tile.min),
          max: Object.assign({}, tile.max),
          coords: Object.assign({}, tile.coords)
        };
        source.layers = this.transform(source.layers, this.extra_data, tile_data);
      }
      delete source.data; // comment out to save raw data for debugging
    }

    // Loop through layers/features using Mapbox lib API, convert to GeoJSON features
    // Returns an object with keys for each layer, e.g. { layer: geojson }
  }, {
    key: "toGeoJSON",
    value: function toGeoJSON(tile) {
      var layers = {};
      for (var l in tile.layers) {
        var layer = tile.layers[l];
        var scale = Geo$1.tile_scale / layer.extent;
        var layer_geojson = {
          type: 'FeatureCollection',
          features: []
        };
        for (var f = 0; f < layer.length; f++) {
          var feature = layer.feature(f);
          var feature_geojson = {
            type: 'Feature',
            geometry: {},
            id: feature.id,
            properties: feature.properties
          };
          this.parseJSONProperties(feature_geojson);
          var geometry = feature_geojson.geometry;
          var coordinates = feature.loadGeometry();
          for (var r = 0; r < coordinates.length; r++) {
            var ring = coordinates[r];
            for (var c = 0; c < ring.length; c++) {
              ring[c] = [ring[c].x * scale, ring[c].y * scale];
            }
          }
          geometry.coordinates = coordinates;
          if (vectorTileExports.VectorTileFeature.types[feature.type] === 'Point') {
            if (coordinates.length === 1) {
              geometry.type = 'Point';
              geometry.coordinates = geometry.coordinates[0][0];
            } else {
              geometry.type = 'MultiPoint';
              geometry.coordinates = geometry.coordinates[0];
            }
          } else if (vectorTileExports.VectorTileFeature.types[feature.type] === 'LineString') {
            if (coordinates.length === 1) {
              geometry.type = 'LineString';
              geometry.coordinates = geometry.coordinates[0];
            } else {
              geometry.type = 'MultiLineString';
            }
          } else if (vectorTileExports.VectorTileFeature.types[feature.type] === 'Polygon') {
            geometry = decodeMultiPolygon(geometry); // un-flatten rings
          }
          layer_geojson.features.push(feature_geojson);
        }
        layers[l] = layer_geojson;
      }
      return layers;
    }

    // Optionally parse some or all feature properties from JSON strings
  }, {
    key: "parseJSONProperties",
    value: function parseJSONProperties(feature) {
      if (this.parse_json_type !== PARSE_JSON_TYPE.NONE) {
        var props = feature.properties;

        // if specified, check list of explicit properties to parse
        if (this.parse_json_type === PARSE_JSON_TYPE.SOME) {
          this.parse_json_prop_list.forEach(function (p) {
            try {
              props[p] = JSON.parse(props[p]);
            } catch (e) {
              // continue with original value if couldn't parse as JSON
            }
          });
        }
        // otherwise try to parse all properties
        else {
          for (var p in props) {
            // check if this property looks like JSON, and parse if so
            if (PARSE_JSON_TEST.indexOf(props[p][0]) > -1) {
              try {
                props[p] = JSON.parse(props[p]);
              } catch (e) {
                // continue with original value if couldn't parse as JSON
              }
            }
          }
        }
      }
    }
  }]);
}(NetworkTileSource);

// Decode multipolygons, which are encoded as a single set of rings
// Winding order of first ring is assumed to indicate exterior ring,
// the opposite winding order indicates the start of a new polygon.
function decodeMultiPolygon(geom) {
  var polys = [];
  var poly = [];
  var outer_winding;
  for (var r = 0; r < geom.coordinates.length; r++) {
    var ring = geom.coordinates[r];
    var winding = Geo$1.ringWinding(ring);
    if (winding == null) {
      continue; // skip zero-area rings
    }
    outer_winding = outer_winding || winding; // assume first ring indicates outer ring winding

    if (winding === outer_winding && poly.length > 0) {
      polys.push(poly);
      poly = [];
    }
    poly.push(ring);
  }
  if (poly.length > 0) {
    polys.push(poly);
  }

  // Single or multi?
  if (polys.length === 1) {
    geom.type = 'Polygon';
    geom.coordinates = polys[0];
  } else if (polys.length > 1) {
    geom.type = 'MultiPolygon';
    geom.coordinates = polys;
  } else {
    geom = null;
  }
  return geom;
}
DataSource.register('MVT', function () {
  return MVTSource;
});

// calculate simplification data using optimized Douglas-Peucker algorithm

function simplify(coords, first, last, sqTolerance) {
    var maxSqDist = sqTolerance;
    var mid = (last - first) >> 1;
    var minPosToMid = last - first;
    var index;

    var ax = coords[first];
    var ay = coords[first + 1];
    var bx = coords[last];
    var by = coords[last + 1];

    for (var i = first + 3; i < last; i += 3) {
        var d = getSqSegDist(coords[i], coords[i + 1], ax, ay, bx, by);

        if (d > maxSqDist) {
            index = i;
            maxSqDist = d;

        } else if (d === maxSqDist) {
            // a workaround to ensure we choose a pivot close to the middle of the list,
            // reducing recursion depth, for certain degenerate inputs
            // https://github.com/mapbox/geojson-vt/issues/104
            var posToMid = Math.abs(i - mid);
            if (posToMid < minPosToMid) {
                index = i;
                minPosToMid = posToMid;
            }
        }
    }

    if (maxSqDist > sqTolerance) {
        if (index - first > 3) simplify(coords, first, index, sqTolerance);
        coords[index + 2] = maxSqDist;
        if (last - index > 3) simplify(coords, index, last, sqTolerance);
    }
}

// square distance from a point to a segment
function getSqSegDist(px, py, x, y, bx, by) {

    var dx = bx - x;
    var dy = by - y;

    if (dx !== 0 || dy !== 0) {

        var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);

        if (t > 1) {
            x = bx;
            y = by;

        } else if (t > 0) {
            x += dx * t;
            y += dy * t;
        }
    }

    dx = px - x;
    dy = py - y;

    return dx * dx + dy * dy;
}

function createFeature(id, type, geom, tags) {
    var feature = {
        id: typeof id === 'undefined' ? null : id,
        type: type,
        geometry: geom,
        tags: tags,
        minX: Infinity,
        minY: Infinity,
        maxX: -Infinity,
        maxY: -Infinity
    };
    calcBBox(feature);
    return feature;
}

function calcBBox(feature) {
    var geom = feature.geometry;
    var type = feature.type;

    if (type === 'Point' || type === 'MultiPoint' || type === 'LineString') {
        calcLineBBox(feature, geom);

    } else if (type === 'Polygon' || type === 'MultiLineString') {
        for (var i = 0; i < geom.length; i++) {
            calcLineBBox(feature, geom[i]);
        }

    } else if (type === 'MultiPolygon') {
        for (i = 0; i < geom.length; i++) {
            for (var j = 0; j < geom[i].length; j++) {
                calcLineBBox(feature, geom[i][j]);
            }
        }
    }
}

function calcLineBBox(feature, geom) {
    for (var i = 0; i < geom.length; i += 3) {
        feature.minX = Math.min(feature.minX, geom[i]);
        feature.minY = Math.min(feature.minY, geom[i + 1]);
        feature.maxX = Math.max(feature.maxX, geom[i]);
        feature.maxY = Math.max(feature.maxY, geom[i + 1]);
    }
}

// converts GeoJSON feature into an intermediate projected JSON vector format with simplification data

function convert(data, options) {
    var features = [];
    if (data.type === 'FeatureCollection') {
        for (var i = 0; i < data.features.length; i++) {
            convertFeature(features, data.features[i], options, i);
        }

    } else if (data.type === 'Feature') {
        convertFeature(features, data, options);

    } else {
        // single geometry or a geometry collection
        convertFeature(features, {geometry: data}, options);
    }

    return features;
}

function convertFeature(features, geojson, options, index) {
    if (!geojson.geometry) return;

    var coords = geojson.geometry.coordinates;
    var type = geojson.geometry.type;
    var tolerance = Math.pow(options.tolerance / ((1 << options.maxZoom) * options.extent), 2);
    var geometry = [];
    var id = geojson.id;
    if (options.promoteId) {
        id = geojson.properties[options.promoteId];
    } else if (options.generateId) {
        id = index || 0;
    }
    if (type === 'Point') {
        convertPoint(coords, geometry);

    } else if (type === 'MultiPoint') {
        for (var i = 0; i < coords.length; i++) {
            convertPoint(coords[i], geometry);
        }

    } else if (type === 'LineString') {
        convertLine(coords, geometry, tolerance, false);

    } else if (type === 'MultiLineString') {
        if (options.lineMetrics) {
            // explode into linestrings to be able to track metrics
            for (i = 0; i < coords.length; i++) {
                geometry = [];
                convertLine(coords[i], geometry, tolerance, false);
                features.push(createFeature(id, 'LineString', geometry, geojson.properties));
            }
            return;
        } else {
            convertLines(coords, geometry, tolerance, false);
        }

    } else if (type === 'Polygon') {
        convertLines(coords, geometry, tolerance, true);

    } else if (type === 'MultiPolygon') {
        for (i = 0; i < coords.length; i++) {
            var polygon = [];
            convertLines(coords[i], polygon, tolerance, true);
            geometry.push(polygon);
        }
    } else if (type === 'GeometryCollection') {
        for (i = 0; i < geojson.geometry.geometries.length; i++) {
            convertFeature(features, {
                id: id,
                geometry: geojson.geometry.geometries[i],
                properties: geojson.properties
            }, options, index);
        }
        return;
    } else {
        throw new Error('Input data is not a valid GeoJSON object.');
    }

    features.push(createFeature(id, type, geometry, geojson.properties));
}

function convertPoint(coords, out) {
    out.push(projectX(coords[0]));
    out.push(projectY(coords[1]));
    out.push(0);
}

function convertLine(ring, out, tolerance, isPolygon) {
    var x0, y0;
    var size = 0;

    for (var j = 0; j < ring.length; j++) {
        var x = projectX(ring[j][0]);
        var y = projectY(ring[j][1]);

        out.push(x);
        out.push(y);
        out.push(0);

        if (j > 0) {
            if (isPolygon) {
                size += (x0 * y - x * y0) / 2; // area
            } else {
                size += Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)); // length
            }
        }
        x0 = x;
        y0 = y;
    }

    var last = out.length - 3;
    out[2] = 1;
    simplify(out, 0, last, tolerance);
    out[last + 2] = 1;

    out.size = Math.abs(size);
    out.start = 0;
    out.end = out.size;
}

function convertLines(rings, out, tolerance, isPolygon) {
    for (var i = 0; i < rings.length; i++) {
        var geom = [];
        convertLine(rings[i], geom, tolerance, isPolygon);
        out.push(geom);
    }
}

function projectX(x) {
    return x / 360 + 0.5;
}

function projectY(y) {
    var sin = Math.sin(y * Math.PI / 180);
    var y2 = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;
    return y2 < 0 ? 0 : y2 > 1 ? 1 : y2;
}

/* clip features between two axis-parallel lines:
 *     |        |
 *  ___|___     |     /
 * /   |   \____|____/
 *     |        |
 */

function clip(features, scale, k1, k2, axis, minAll, maxAll, options) {

    k1 /= scale;
    k2 /= scale;

    if (minAll >= k1 && maxAll < k2) return features; // trivial accept
    else if (maxAll < k1 || minAll >= k2) return null; // trivial reject

    var clipped = [];

    for (var i = 0; i < features.length; i++) {

        var feature = features[i];
        var geometry = feature.geometry;
        var type = feature.type;

        var min = axis === 0 ? feature.minX : feature.minY;
        var max = axis === 0 ? feature.maxX : feature.maxY;

        if (min >= k1 && max < k2) { // trivial accept
            clipped.push(feature);
            continue;
        } else if (max < k1 || min >= k2) { // trivial reject
            continue;
        }

        var newGeometry = [];

        if (type === 'Point' || type === 'MultiPoint') {
            clipPoints(geometry, newGeometry, k1, k2, axis);

        } else if (type === 'LineString') {
            clipLine(geometry, newGeometry, k1, k2, axis, false, options.lineMetrics);

        } else if (type === 'MultiLineString') {
            clipLines(geometry, newGeometry, k1, k2, axis, false);

        } else if (type === 'Polygon') {
            clipLines(geometry, newGeometry, k1, k2, axis, true);

        } else if (type === 'MultiPolygon') {
            for (var j = 0; j < geometry.length; j++) {
                var polygon = [];
                clipLines(geometry[j], polygon, k1, k2, axis, true);
                if (polygon.length) {
                    newGeometry.push(polygon);
                }
            }
        }

        if (newGeometry.length) {
            if (options.lineMetrics && type === 'LineString') {
                for (j = 0; j < newGeometry.length; j++) {
                    clipped.push(createFeature(feature.id, type, newGeometry[j], feature.tags));
                }
                continue;
            }

            if (type === 'LineString' || type === 'MultiLineString') {
                if (newGeometry.length === 1) {
                    type = 'LineString';
                    newGeometry = newGeometry[0];
                } else {
                    type = 'MultiLineString';
                }
            }
            if (type === 'Point' || type === 'MultiPoint') {
                type = newGeometry.length === 3 ? 'Point' : 'MultiPoint';
            }

            clipped.push(createFeature(feature.id, type, newGeometry, feature.tags));
        }
    }

    return clipped.length ? clipped : null;
}

function clipPoints(geom, newGeom, k1, k2, axis) {
    for (var i = 0; i < geom.length; i += 3) {
        var a = geom[i + axis];

        if (a >= k1 && a <= k2) {
            newGeom.push(geom[i]);
            newGeom.push(geom[i + 1]);
            newGeom.push(geom[i + 2]);
        }
    }
}

function clipLine(geom, newGeom, k1, k2, axis, isPolygon, trackMetrics) {

    var slice = newSlice(geom);
    var intersect = axis === 0 ? intersectX : intersectY;
    var len = geom.start;
    var segLen, t;

    for (var i = 0; i < geom.length - 3; i += 3) {
        var ax = geom[i];
        var ay = geom[i + 1];
        var az = geom[i + 2];
        var bx = geom[i + 3];
        var by = geom[i + 4];
        var a = axis === 0 ? ax : ay;
        var b = axis === 0 ? bx : by;
        var exited = false;

        if (trackMetrics) segLen = Math.sqrt(Math.pow(ax - bx, 2) + Math.pow(ay - by, 2));

        if (a < k1) {
            // ---|-->  | (line enters the clip region from the left)
            if (b > k1) {
                t = intersect(slice, ax, ay, bx, by, k1);
                if (trackMetrics) slice.start = len + segLen * t;
            }
        } else if (a > k2) {
            // |  <--|--- (line enters the clip region from the right)
            if (b < k2) {
                t = intersect(slice, ax, ay, bx, by, k2);
                if (trackMetrics) slice.start = len + segLen * t;
            }
        } else {
            addPoint(slice, ax, ay, az);
        }
        if (b < k1 && a >= k1) {
            // <--|---  | or <--|-----|--- (line exits the clip region on the left)
            t = intersect(slice, ax, ay, bx, by, k1);
            exited = true;
        }
        if (b > k2 && a <= k2) {
            // |  ---|--> or ---|-----|--> (line exits the clip region on the right)
            t = intersect(slice, ax, ay, bx, by, k2);
            exited = true;
        }

        if (!isPolygon && exited) {
            if (trackMetrics) slice.end = len + segLen * t;
            newGeom.push(slice);
            slice = newSlice(geom);
        }

        if (trackMetrics) len += segLen;
    }

    // add the last point
    var last = geom.length - 3;
    ax = geom[last];
    ay = geom[last + 1];
    az = geom[last + 2];
    a = axis === 0 ? ax : ay;
    if (a >= k1 && a <= k2) addPoint(slice, ax, ay, az);

    // close the polygon if its endpoints are not the same after clipping
    last = slice.length - 3;
    if (isPolygon && last >= 3 && (slice[last] !== slice[0] || slice[last + 1] !== slice[1])) {
        addPoint(slice, slice[0], slice[1], slice[2]);
    }

    // add the final slice
    if (slice.length) {
        newGeom.push(slice);
    }
}

function newSlice(line) {
    var slice = [];
    slice.size = line.size;
    slice.start = line.start;
    slice.end = line.end;
    return slice;
}

function clipLines(geom, newGeom, k1, k2, axis, isPolygon) {
    for (var i = 0; i < geom.length; i++) {
        clipLine(geom[i], newGeom, k1, k2, axis, isPolygon, false);
    }
}

function addPoint(out, x, y, z) {
    out.push(x);
    out.push(y);
    out.push(z);
}

function intersectX(out, ax, ay, bx, by, x) {
    var t = (x - ax) / (bx - ax);
    out.push(x);
    out.push(ay + (by - ay) * t);
    out.push(1);
    return t;
}

function intersectY(out, ax, ay, bx, by, y) {
    var t = (y - ay) / (by - ay);
    out.push(ax + (bx - ax) * t);
    out.push(y);
    out.push(1);
    return t;
}

function wrap(features, options) {
    var buffer = options.buffer / options.extent;
    var merged = features;
    var left  = clip(features, 1, -1 - buffer, buffer,     0, -1, 2, options); // left world copy
    var right = clip(features, 1,  1 - buffer, 2 + buffer, 0, -1, 2, options); // right world copy

    if (left || right) {
        merged = clip(features, 1, -buffer, 1 + buffer, 0, -1, 2, options) || []; // center world copy

        if (left) merged = shiftFeatureCoords(left, 1).concat(merged); // merge left into center
        if (right) merged = merged.concat(shiftFeatureCoords(right, -1)); // merge right into center
    }

    return merged;
}

function shiftFeatureCoords(features, offset) {
    var newFeatures = [];

    for (var i = 0; i < features.length; i++) {
        var feature = features[i],
            type = feature.type;

        var newGeometry;

        if (type === 'Point' || type === 'MultiPoint' || type === 'LineString') {
            newGeometry = shiftCoords(feature.geometry, offset);

        } else if (type === 'MultiLineString' || type === 'Polygon') {
            newGeometry = [];
            for (var j = 0; j < feature.geometry.length; j++) {
                newGeometry.push(shiftCoords(feature.geometry[j], offset));
            }
        } else if (type === 'MultiPolygon') {
            newGeometry = [];
            for (j = 0; j < feature.geometry.length; j++) {
                var newPolygon = [];
                for (var k = 0; k < feature.geometry[j].length; k++) {
                    newPolygon.push(shiftCoords(feature.geometry[j][k], offset));
                }
                newGeometry.push(newPolygon);
            }
        }

        newFeatures.push(createFeature(feature.id, type, newGeometry, feature.tags));
    }

    return newFeatures;
}

function shiftCoords(points, offset) {
    var newPoints = [];
    newPoints.size = points.size;

    if (points.start !== undefined) {
        newPoints.start = points.start;
        newPoints.end = points.end;
    }

    for (var i = 0; i < points.length; i += 3) {
        newPoints.push(points[i] + offset, points[i + 1], points[i + 2]);
    }
    return newPoints;
}

// Transforms the coordinates of each feature in the given tile from
// mercator-projected space into (extent x extent) tile space.
function transformTile(tile, extent) {
    if (tile.transformed) return tile;

    var z2 = 1 << tile.z,
        tx = tile.x,
        ty = tile.y,
        i, j, k;

    for (i = 0; i < tile.features.length; i++) {
        var feature = tile.features[i],
            geom = feature.geometry,
            type = feature.type;

        feature.geometry = [];

        if (type === 1) {
            for (j = 0; j < geom.length; j += 2) {
                feature.geometry.push(transformPoint(geom[j], geom[j + 1], extent, z2, tx, ty));
            }
        } else {
            for (j = 0; j < geom.length; j++) {
                var ring = [];
                for (k = 0; k < geom[j].length; k += 2) {
                    ring.push(transformPoint(geom[j][k], geom[j][k + 1], extent, z2, tx, ty));
                }
                feature.geometry.push(ring);
            }
        }
    }

    tile.transformed = true;

    return tile;
}

function transformPoint(x, y, extent, z2, tx, ty) {
    return [
        Math.round(extent * (x * z2 - tx)),
        Math.round(extent * (y * z2 - ty))];
}

function createTile(features, z, tx, ty, options) {
    var tolerance = z === options.maxZoom ? 0 : options.tolerance / ((1 << z) * options.extent);
    var tile = {
        features: [],
        numPoints: 0,
        numSimplified: 0,
        numFeatures: 0,
        source: null,
        x: tx,
        y: ty,
        z: z,
        transformed: false,
        minX: 2,
        minY: 1,
        maxX: -1,
        maxY: 0
    };
    for (var i = 0; i < features.length; i++) {
        tile.numFeatures++;
        addFeature(tile, features[i], tolerance, options);

        var minX = features[i].minX;
        var minY = features[i].minY;
        var maxX = features[i].maxX;
        var maxY = features[i].maxY;

        if (minX < tile.minX) tile.minX = minX;
        if (minY < tile.minY) tile.minY = minY;
        if (maxX > tile.maxX) tile.maxX = maxX;
        if (maxY > tile.maxY) tile.maxY = maxY;
    }
    return tile;
}

function addFeature(tile, feature, tolerance, options) {

    var geom = feature.geometry,
        type = feature.type,
        simplified = [];

    if (type === 'Point' || type === 'MultiPoint') {
        for (var i = 0; i < geom.length; i += 3) {
            simplified.push(geom[i]);
            simplified.push(geom[i + 1]);
            tile.numPoints++;
            tile.numSimplified++;
        }

    } else if (type === 'LineString') {
        addLine(simplified, geom, tile, tolerance, false, false);

    } else if (type === 'MultiLineString' || type === 'Polygon') {
        for (i = 0; i < geom.length; i++) {
            addLine(simplified, geom[i], tile, tolerance, type === 'Polygon', i === 0);
        }

    } else if (type === 'MultiPolygon') {

        for (var k = 0; k < geom.length; k++) {
            var polygon = geom[k];
            for (i = 0; i < polygon.length; i++) {
                addLine(simplified, polygon[i], tile, tolerance, true, i === 0);
            }
        }
    }

    if (simplified.length) {
        var tags = feature.tags || null;
        if (type === 'LineString' && options.lineMetrics) {
            tags = {};
            for (var key in feature.tags) tags[key] = feature.tags[key];
            tags['mapbox_clip_start'] = geom.start / geom.size;
            tags['mapbox_clip_end'] = geom.end / geom.size;
        }
        var tileFeature = {
            geometry: simplified,
            type: type === 'Polygon' || type === 'MultiPolygon' ? 3 :
                type === 'LineString' || type === 'MultiLineString' ? 2 : 1,
            tags: tags
        };
        if (feature.id !== null) {
            tileFeature.id = feature.id;
        }
        tile.features.push(tileFeature);
    }
}

function addLine(result, geom, tile, tolerance, isPolygon, isOuter) {
    var sqTolerance = tolerance * tolerance;

    if (tolerance > 0 && (geom.size < (isPolygon ? sqTolerance : tolerance))) {
        tile.numPoints += geom.length / 3;
        return;
    }

    var ring = [];

    for (var i = 0; i < geom.length; i += 3) {
        if (tolerance === 0 || geom[i + 2] > sqTolerance) {
            tile.numSimplified++;
            ring.push(geom[i]);
            ring.push(geom[i + 1]);
        }
        tile.numPoints++;
    }

    if (isPolygon) rewind(ring, isOuter);

    result.push(ring);
}

function rewind(ring, clockwise) {
    var area = 0;
    for (var i = 0, len = ring.length, j = len - 2; i < len; j = i, i += 2) {
        area += (ring[i] - ring[j]) * (ring[i + 1] + ring[j + 1]);
    }
    if (area > 0 === clockwise) {
        for (i = 0, len = ring.length; i < len / 2; i += 2) {
            var x = ring[i];
            var y = ring[i + 1];
            ring[i] = ring[len - 2 - i];
            ring[i + 1] = ring[len - 1 - i];
            ring[len - 2 - i] = x;
            ring[len - 1 - i] = y;
        }
    }
}

function geojsonvt(data, options) {
    return new GeoJSONVT(data, options);
}

function GeoJSONVT(data, options) {
    options = this.options = extend(Object.create(this.options), options);

    var debug = options.debug;

    if (debug) console.time('preprocess data');

    if (options.maxZoom < 0 || options.maxZoom > 24) throw new Error('maxZoom should be in the 0-24 range');
    if (options.promoteId && options.generateId) throw new Error('promoteId and generateId cannot be used together.');

    var features = convert(data, options);

    this.tiles = {};
    this.tileCoords = [];

    if (debug) {
        console.timeEnd('preprocess data');
        console.log('index: maxZoom: %d, maxPoints: %d', options.indexMaxZoom, options.indexMaxPoints);
        console.time('generate tiles');
        this.stats = {};
        this.total = 0;
    }

    features = wrap(features, options);

    // start slicing from the top tile down
    if (features.length) this.splitTile(features, 0, 0, 0);

    if (debug) {
        if (features.length) console.log('features: %d, points: %d', this.tiles[0].numFeatures, this.tiles[0].numPoints);
        console.timeEnd('generate tiles');
        console.log('tiles generated:', this.total, JSON.stringify(this.stats));
    }
}

GeoJSONVT.prototype.options = {
    maxZoom: 14,            // max zoom to preserve detail on
    indexMaxZoom: 5,        // max zoom in the tile index
    indexMaxPoints: 100000, // max number of points per tile in the tile index
    tolerance: 3,           // simplification tolerance (higher means simpler)
    extent: 4096,           // tile extent
    buffer: 64,             // tile buffer on each side
    lineMetrics: false,     // whether to calculate line metrics
    promoteId: null,        // name of a feature property to be promoted to feature.id
    generateId: false,      // whether to generate feature ids. Cannot be used with promoteId
    debug: 0                // logging level (0, 1 or 2)
};

GeoJSONVT.prototype.splitTile = function (features, z, x, y, cz, cx, cy) {

    var stack = [features, z, x, y],
        options = this.options,
        debug = options.debug;

    // avoid recursion by using a processing queue
    while (stack.length) {
        y = stack.pop();
        x = stack.pop();
        z = stack.pop();
        features = stack.pop();

        var z2 = 1 << z,
            id = toID(z, x, y),
            tile = this.tiles[id];

        if (!tile) {
            if (debug > 1) console.time('creation');

            tile = this.tiles[id] = createTile(features, z, x, y, options);
            this.tileCoords.push({z: z, x: x, y: y});

            if (debug) {
                if (debug > 1) {
                    console.log('tile z%d-%d-%d (features: %d, points: %d, simplified: %d)',
                        z, x, y, tile.numFeatures, tile.numPoints, tile.numSimplified);
                    console.timeEnd('creation');
                }
                var key = 'z' + z;
                this.stats[key] = (this.stats[key] || 0) + 1;
                this.total++;
            }
        }

        // save reference to original geometry in tile so that we can drill down later if we stop now
        tile.source = features;

        // if it's the first-pass tiling
        if (!cz) {
            // stop tiling if we reached max zoom, or if the tile is too simple
            if (z === options.indexMaxZoom || tile.numPoints <= options.indexMaxPoints) continue;

        // if a drilldown to a specific tile
        } else {
            // stop tiling if we reached base zoom or our target tile zoom
            if (z === options.maxZoom || z === cz) continue;

            // stop tiling if it's not an ancestor of the target tile
            var m = 1 << (cz - z);
            if (x !== Math.floor(cx / m) || y !== Math.floor(cy / m)) continue;
        }

        // if we slice further down, no need to keep source geometry
        tile.source = null;

        if (features.length === 0) continue;

        if (debug > 1) console.time('clipping');

        // values we'll use for clipping
        var k1 = 0.5 * options.buffer / options.extent,
            k2 = 0.5 - k1,
            k3 = 0.5 + k1,
            k4 = 1 + k1,
            tl, bl, tr, br, left, right;

        tl = bl = tr = br = null;

        left  = clip(features, z2, x - k1, x + k3, 0, tile.minX, tile.maxX, options);
        right = clip(features, z2, x + k2, x + k4, 0, tile.minX, tile.maxX, options);
        features = null;

        if (left) {
            tl = clip(left, z2, y - k1, y + k3, 1, tile.minY, tile.maxY, options);
            bl = clip(left, z2, y + k2, y + k4, 1, tile.minY, tile.maxY, options);
            left = null;
        }

        if (right) {
            tr = clip(right, z2, y - k1, y + k3, 1, tile.minY, tile.maxY, options);
            br = clip(right, z2, y + k2, y + k4, 1, tile.minY, tile.maxY, options);
            right = null;
        }

        if (debug > 1) console.timeEnd('clipping');

        stack.push(tl || [], z + 1, x * 2,     y * 2);
        stack.push(bl || [], z + 1, x * 2,     y * 2 + 1);
        stack.push(tr || [], z + 1, x * 2 + 1, y * 2);
        stack.push(br || [], z + 1, x * 2 + 1, y * 2 + 1);
    }
};

GeoJSONVT.prototype.getTile = function (z, x, y) {
    var options = this.options,
        extent = options.extent,
        debug = options.debug;

    if (z < 0 || z > 24) return null;

    var z2 = 1 << z;
    x = ((x % z2) + z2) % z2; // wrap tile x coordinate

    var id = toID(z, x, y);
    if (this.tiles[id]) return transformTile(this.tiles[id], extent);

    if (debug > 1) console.log('drilling down to z%d-%d-%d', z, x, y);

    var z0 = z,
        x0 = x,
        y0 = y,
        parent;

    while (!parent && z0 > 0) {
        z0--;
        x0 = Math.floor(x0 / 2);
        y0 = Math.floor(y0 / 2);
        parent = this.tiles[toID(z0, x0, y0)];
    }

    if (!parent || !parent.source) return null;

    // if we found a parent tile containing the original geometry, we can drill down from it
    if (debug > 1) console.log('found parent tile z%d-%d-%d', z0, x0, y0);

    if (debug > 1) console.time('drilling down');
    this.splitTile(parent.source, z0, x0, y0, z, x, y);
    if (debug > 1) console.timeEnd('drilling down');

    return this.tiles[id] ? transformTile(this.tiles[id], extent) : null;
};

function toID(z, x, y) {
    return (((1 << z) * y + x) * 32) + z;
}

function extend(dest, src) {
    for (var i in src) dest[i] = src[i];
    return dest;
}

function _callSuper$1(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct$1() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet$1(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }

/**
 GeoJSON standalone (non-tiled) source
 Uses geojson-vt split into tiles client-side
*/

var GeoJSONSource = /*#__PURE__*/function (_NetworkSource) {
  function GeoJSONSource(source, sources) {
    var _this;
    _classCallCheck(this, GeoJSONSource);
    _this = _callSuper$1(this, GeoJSONSource, [source, sources]);
    _this.load_data = null;
    _this.tile_indexes = {}; // geojson-vt tile indices, by layer name
    _this.setTileSize(512); // auto-tile to 512px tiles for fewer internal tiles
    _this.pad_scale = 0; // we don't want padding on auto-tiled sources
    return _this;
  }
  _inherits(GeoJSONSource, _NetworkSource);
  return _createClass(GeoJSONSource, [{
    key: "_load",
    value: function _load(dest) {
      var _this2 = this;
      if (!this.load_data) {
        this.load_data = _superPropGet$1(GeoJSONSource, "_load", this, 3)([{
          source_data: {
            layers: {}
          }
        }]).then(function (data) {
          // Warn and continue on data source error
          if (data.source_data.error) {
            log('warn', "data source load error(s) for source '".concat(_this2.name, "', URL '").concat(_this2.url, "': ").concat(data.source_data.error));
          }
          var layers = data.source_data.layers;
          for (var layer_name in layers) {
            _this2.tile_indexes[layer_name] = geojsonvt(layers[layer_name], {
              maxZoom: _this2.max_zoom,
              // max zoom to preserve detail on
              tolerance: 1.5,
              // simplification tolerance (higher means simpler) NB: half the default to accomodate 512px tiles
              extent: Geo$1.tile_scale,
              // tile extent (both width and height)
              buffer: 0.0001 // tile buffer on each side
            });
          }
          _this2.loaded = true;
          return data;
        });
      }
      return this.load_data.then(function () {
        for (var layer_name in _this2.tile_indexes) {
          dest.source_data.layers[layer_name] = _this2.getTileFeatures(dest, layer_name);
        }
        return dest;
      });
    }
  }, {
    key: "getTileFeatures",
    value: function getTileFeatures(tile, layer_name) {
      var coords = Geo$1.wrapTile(tile.coords, {
        x: true
      });

      // request a particular tile
      var t = this.tile_indexes[layer_name].getTile(coords.z, coords.x, coords.y);

      // Convert from MVT-style JSON struct to GeoJSON
      var collection;
      if (t && t.features) {
        collection = {
          type: 'FeatureCollection',
          features: []
        };
        for (var i = 0; i < t.features.length; i++) {
          var feature = t.features[i];

          // GeoJSON feature
          var f = {
            type: 'Feature',
            geometry: {},
            id: feature.id,
            properties: feature.tags
          };
          if (feature.type === 1) {
            f.geometry.coordinates = feature.geometry.map(function (coord) {
              return [coord[0], coord[1]];
            });
            f.geometry.type = 'MultiPoint';
          } else if (feature.type === 2 || feature.type === 3) {
            f.geometry.coordinates = feature.geometry.map(function (ring) {
              return ring.map(function (coord) {
                return [coord[0], coord[1]];
              });
            });
            if (feature.type === 2) {
              f.geometry.type = 'MultiLineString';
            } else {
              f.geometry = decodeMultiPolygon(f.geometry); // un-flatten rings
              if (f.geometry == null) {
                // skip polys that couldn't be decoded (e.g. degenerate)
                continue;
              }
            }
          } else {
            continue;
          }
          collection.features.push(f);
        }
      }
      return collection;
    }
  }, {
    key: "formatURL",
    value: function formatURL() {
      return this.url;
    }
  }, {
    key: "parseSourceData",
    value: function parseSourceData(tile, source, response) {
      var data = typeof response === 'string' ? JSON.parse(response) : response;
      var layers = this.getLayers(data);
      source.layers = this.preprocessLayers(layers, tile);
    }
  }, {
    key: "preprocessLayers",
    value: function preprocessLayers(layers, tile) {
      for (var key in layers) {
        var layer = layers[key];
        layer.features = this.preprocessFeatures(layer.features);
      }

      // Apply optional data transform
      if (typeof this.transform === 'function') {
        var tile_data = {
          min: Object.assign({}, tile.min),
          max: Object.assign({}, tile.max),
          coords: Object.assign({}, tile.coords)
        };
        if (Object.keys(layers).length === 1 && layers._default) {
          layers._default = this.transform(layers._default, this.extra_data, tile_data); // single-layer
        } else {
          layers = this.transform(layers, this.extra_data, tile_data); // multiple layers
        }
      }
      return layers;
    }

    // Preprocess features. Currently used to add a new "centroid" feature for polygon labeling
  }, {
    key: "preprocessFeatures",
    value: function preprocessFeatures(features) {
      // Remove features without geometry (which is valid GeoJSON)
      features = features.filter(function (f) {
        return f.geometry != null;
      });

      // Define centroids for polygons for centroid label placement
      // Avoids redundant label placement for each generated tile at higher zoom levels
      if (this.config.generate_label_centroids) {
        var features_centroid = [];
        var centroid_properties = {
          'label_placement': true
        };
        features.forEach(function (feature) {
          var coordinates, centroid_feature;
          if (feature.geometry.type === 'Polygon') {
            coordinates = feature.geometry.coordinates;
            centroid_feature = getCentroidFeatureForPolygon(coordinates, feature.id, feature.properties, centroid_properties);
            features_centroid.push(centroid_feature);
          } else if (feature.geometry.type === 'MultiPolygon') {
            // Add centroid feature for largest polygon
            coordinates = feature.geometry.coordinates;
            var max_area = -Infinity;
            var max_area_index = 0;
            for (var index = 0; index < coordinates.length; index++) {
              var area = Geo$1.polygonArea(coordinates[index]);
              if (area > max_area) {
                max_area = area;
                max_area_index = index;
              }
            }
            centroid_feature = getCentroidFeatureForPolygon(coordinates[max_area_index], feature.id, feature.properties, centroid_properties);
            features_centroid.push(centroid_feature);
          }
        });

        // append centroid features to features array
        features_centroid = features_centroid.filter(function (x) {
          return x;
        }); // remove null features
        Array.prototype.push.apply(features, features_centroid);
      }
      return features;
    }

    // Detect single or multiple layers in returned data
  }, {
    key: "getLayers",
    value: function getLayers(data) {
      if (data.type === 'Feature') {
        return {
          _default: {
            type: 'FeatureCollection',
            features: [data]
          }
        };
      } else if (data.type === 'FeatureCollection') {
        return {
          _default: data
        };
      } else {
        return data;
      }
    }
  }]);
}(NetworkSource);

/**
 GeoJSON vector tiles
 @class GeoJSONTileSource
*/
var GeoJSONTileSource = /*#__PURE__*/function (_NetworkTileSource) {
  function GeoJSONTileSource(source, sources) {
    _classCallCheck(this, GeoJSONTileSource);
    return _callSuper$1(this, GeoJSONTileSource, [source, sources]);
  }
  _inherits(GeoJSONTileSource, _NetworkTileSource);
  return _createClass(GeoJSONTileSource, [{
    key: "parseSourceData",
    value: function parseSourceData(tile, source, response) {
      var data = typeof response === 'string' ? JSON.parse(response) : response;
      this.prepareGeoJSON(data, tile, source);
    }
  }, {
    key: "prepareGeoJSON",
    value: function prepareGeoJSON(data, tile, source) {
      // Apply optional data transform
      if (typeof this.transform === 'function') {
        var tile_data = {
          min: Object.assign({}, tile.min),
          max: Object.assign({}, tile.max),
          coords: Object.assign({}, tile.coords)
        };
        data = this.transform(data, this.extra_data, tile_data);
      }
      source.layers = GeoJSONSource.prototype.getLayers(data);

      // A "synthetic" tile that adjusts the tile min anchor to account for tile longitude wrapping
      var anchor = {
        coords: tile.coords,
        min: Geo$1.metersForTile(Geo$1.wrapTile(tile.coords, {
          x: true
        }))
      };
      DataSource.projectData(source); // mercator projection
      DataSource.scaleData(source, anchor); // re-scale from meters to local tile coords
    }
  }]);
}(NetworkTileSource);

// Check for URL tile pattern, if not found, treat as standalone GeoJSON/TopoJSON object
DataSource.register('GeoJSON', function (source) {
  return GeoJSONTileSource.urlHasTilePattern(source.url) ? GeoJSONTileSource : GeoJSONSource;
});

// Helper function to create centroid point feature from polygon coordinates and provided feature meta-data
function getCentroidFeatureForPolygon(coordinates, id, properties, newProperties) {
  var centroid = Geo$1.centroid(coordinates);
  if (!centroid) {
    return;
  }

  // clone properties and mixix newProperties
  var centroid_properties = {};
  Object.assign(centroid_properties, properties, newProperties);
  return {
    type: 'Feature',
    id: id,
    properties: centroid_properties,
    geometry: {
      type: 'Point',
      coordinates: centroid
    }
  };
}

function reverse(array, n) {
  var t, j = array.length, i = j - n;
  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
}

function identity(x) {
  return x;
}

function transform(topology) {
  if ((transform = topology.transform) == null) return identity;
  var transform,
      x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function(point, i) {
    if (!i) x0 = y0 = 0;
    point[0] = (x0 += point[0]) * kx + dx;
    point[1] = (y0 += point[1]) * ky + dy;
    return point;
  };
}

function feature$1(topology, o) {
  return o.type === "GeometryCollection"
      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature$2(topology, o); })}
      : feature$2(topology, o);
}

function feature$2(topology, o) {
  var id = o.id,
      bbox = o.bbox,
      properties = o.properties == null ? {} : o.properties,
      geometry = object(topology, o);
  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}
      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}
      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};
}

function object(topology, o) {
  var transformPoint = transform(topology),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();
    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
      points.push(transformPoint(a[k].slice(), k));
    }
    if (i < 0) reverse(points, n);
  }

  function point(p) {
    return transformPoint(p.slice());
  }

  function line(arcs) {
    var points = [];
    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
    if (points.length < 2) points.push(points[0].slice());
    return points;
  }

  function ring(arcs) {
    var points = line(arcs);
    while (points.length < 4) points.push(points[0].slice());
    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var type = o.type, coordinates;
    switch (type) {
      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};
      case "Point": coordinates = point(o.coordinates); break;
      case "MultiPoint": coordinates = o.coordinates.map(point); break;
      case "LineString": coordinates = line(o.arcs); break;
      case "MultiLineString": coordinates = o.arcs.map(line); break;
      case "Polygon": coordinates = polygon(o.arcs); break;
      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;
      default: return null;
    }
    return {type: type, coordinates: coordinates};
  }

  return geometry(o);
}

function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(t.prototype ), o, e); return "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }

/**
 TopoJSON standalone (non-tiled) source
 Uses geojson-vt split into tiles client-side
*/

var TopoJSONSource = /*#__PURE__*/function (_GeoJSONSource) {
  function TopoJSONSource() {
    _classCallCheck(this, TopoJSONSource);
    return _callSuper(this, TopoJSONSource, arguments);
  }
  _inherits(TopoJSONSource, _GeoJSONSource);
  return _createClass(TopoJSONSource, [{
    key: "parseSourceData",
    value: function parseSourceData(tile, source, response) {
      var data = typeof response === 'string' ? JSON.parse(response) : response;
      data = this.toGeoJSON(data);
      var layers = this.getLayers(data);
      _superPropGet(TopoJSONSource, "preprocessLayers", this)([layers, tile]);
      source.layers = layers;
    }
  }, {
    key: "toGeoJSON",
    value: function toGeoJSON(data) {
      // Single layer
      if (data.objects && Object.keys(data.objects).length === 1) {
        var layer = Object.keys(data.objects)[0];
        data = getTopoJSONFeature(data, data.objects[layer]);
      }
      // Multiple layers
      else {
        var layers = {};
        for (var key in data.objects) {
          layers[key] = getTopoJSONFeature(data, data.objects[key]);
        }
        data = layers;
      }
      return data;
    }
  }]);
}(GeoJSONSource);
function getTopoJSONFeature(topology, object) {
  var feature = feature$1(topology, object);

  // Convert single feature to a feature collection
  if (feature.type === 'Feature') {
    feature = {
      type: 'FeatureCollection',
      features: [feature]
    };
  }
  return feature;
}

/**
 TopoJSON vector tiles
 @class TopoJSONTileSource
*/
var TopoJSONTileSource = /*#__PURE__*/function (_GeoJSONTileSource) {
  function TopoJSONTileSource(source, sources) {
    _classCallCheck(this, TopoJSONTileSource);
    return _callSuper(this, TopoJSONTileSource, [source, sources]);
  }
  _inherits(TopoJSONTileSource, _GeoJSONTileSource);
  return _createClass(TopoJSONTileSource, [{
    key: "parseSourceData",
    value: function parseSourceData(tile, source, response) {
      var data = typeof response === 'string' ? JSON.parse(response) : response;
      data = TopoJSONSource.prototype.toGeoJSON(data);
      this.prepareGeoJSON(data, tile, source);
    }
  }]);
}(GeoJSONTileSource);

// Check for URL tile pattern, if not found, treat as standalone GeoJSON/TopoJSON object
DataSource.register('TopoJSON', function (source) {
  return TopoJSONTileSource.urlHasTilePattern(source.url) ? TopoJSONTileSource : TopoJSONSource;
});

exports.Collision = Collision;
exports.DataSource = DataSource;
exports.FeatureSelection = FeatureSelection;
exports.FilterOptions = FilterOptions;
exports.FontManager = FontManager;
exports.GLSL = GLSL;
exports.Geo = Geo$1;
exports.Label = Label;
exports.LabelLineStraight = LabelLineStraight;
exports.LabelPoint = LabelPoint;
exports.Light = Light;
exports.Material = Material;
exports.OBB = OBB;
exports.ShaderProgram = ShaderProgram;
exports.Style = Style;
exports.StyleManager = StyleManager;
exports.StyleParser = StyleParser;
exports.Task = Task;
exports.TextCanvas = TextCanvas;
exports.Texture = Texture;
exports.Thread = Thread;
exports.Tile = Tile;
exports.TileID = TileID;
exports.Utils = Utils;
exports.Vector = Vector$1;
exports.VertexArrayObject = VertexArrayObject;
exports.VertexData = VertexData;
exports.VertexElements = VertexElements;
exports.View = View;
exports.WorkerBroker = WorkerBroker$1;
exports._classCallCheck = _classCallCheck;
exports._createClass = _createClass;
exports._defineProperty = _defineProperty;
exports._get = _get;
exports._getPrototypeOf = _getPrototypeOf;
exports._inherits = _inherits;
exports._possibleConstructorReturn = _possibleConstructorReturn;
exports._slicedToArray = _slicedToArray;
exports._toConsumableArray = _toConsumableArray;
exports._typeof = _typeof;
exports.addBaseURL = addBaseURL;
exports.buildFilter = buildFilter;
exports.cache = cache;
exports.clearFunctionStringCache = clearFunctionStringCache;
exports.compileFunctionStrings = compileFunctionStrings;
exports.createObjectURL = createObjectURL;
exports.debugSettings = debugSettings$1;
exports.debugSumLayerStats = debugSumLayerStats;
exports.extensionForURL = extensionForURL;
exports.flattenRelativeURL = flattenRelativeURL;
exports.getAugmentedNamespace = getAugmentedNamespace;
exports.getDefaultExportFromCjs = getDefaultExportFromCjs;
exports.isLocalURL = isLocalURL;
exports.isRelativeURL = isRelativeURL;
exports.isReserved = isReserved;
exports.layerCache = layerCache;
exports.log = log;
exports.mergeDebugSettings = mergeDebugSettings;
exports.mergeObjects = mergeObjects;
exports.parseLayers = parseLayers;
exports.pathForURL = pathForURL;
exports.sliceObject = sliceObject;
exports.subscribeMixin = subscribeMixin;
exports.version = version;

}));

define(['./shared'], (function (topojson) { 'use strict';

var SceneWorker = Object.assign(self, {
  FeatureSelection: topojson.FeatureSelection,
  sources: {},
  styles: {},
  layers: {},
  tiles: {},
  // Initialize worker
  init: function init(scene_id, worker_id, num_workers, log_level, device_pixel_ratio, has_element_index_unit, external_scripts) {
    this.scene_id = scene_id;
    this._worker_id = worker_id;
    this.num_workers = num_workers;
    topojson.log.setLevel(log_level);
    topojson.Utils.device_pixel_ratio = device_pixel_ratio;
    topojson.VertexElements.setElementIndexUint(has_element_index_unit);
    topojson.FeatureSelection.setPrefix(this._worker_id);
    this.style_manager = new topojson.StyleManager();
    this.importExternalScripts(external_scripts);
    topojson.Label.id_prefix = worker_id;
    topojson.Label.id_multiplier = num_workers;
    return worker_id;
  },
  // Import custom external scripts
  importExternalScripts: function importExternalScripts(scripts) {
    var _this = this;
    if (scripts.length === 0) {
      return;
    }
    topojson.log('debug', 'loading custom data source scripts in worker:', scripts);

    // `window` is already shimmed to allow compatibility with some other libraries (e.g. FontFaceObserver)
    // So there's an extra dance here to look for any additional `window` properties added by these script imports,
    // then add them to the worker `self` scope.
    var prev_names = Object.getOwnPropertyNames(window);
    importScripts.apply(void 0, topojson._toConsumableArray(scripts));
    Object.getOwnPropertyNames(window).forEach(function (prop) {
      if (prev_names.indexOf(prop) === -1) {
        _this[prop] = window[prop]; // new property added to window, also add it to self
      }
    });
  },
  // Starts a config refresh
  updateConfig: function updateConfig(_ref, debug) {
    var config = _ref.config,
      generation = _ref.generation,
      introspection = _ref.introspection;
    config = JSON.parse(config);
    topojson.mergeDebugSettings(debug);
    this.generation = generation;
    this.introspection = introspection;

    // Expand global properties
    this.global = topojson.compileFunctionStrings(config.global);

    // Create data sources
    this.createDataSources(config);

    // Expand styles
    config.styles = topojson.compileFunctionStrings(config.styles, topojson.StyleParser.wrapFunction);
    this.styles = this.style_manager.build(config.styles);
    this.style_manager.initStyles({
      generation: this.generation,
      styles: this.styles,
      sources: this.sources,
      introspection: this.introspection
    });

    // Parse each top-level layer as a separate tree
    this.layers = topojson.parseLayers(config.layers, this.style_manager.styles);

    // Sync tetxure info from main thread
    this.syncing_textures = this.syncTextures(config.textures);

    // Return promise for when config refresh finishes
    this.configuring = this.syncing_textures.then(function () {
      topojson.log('debug', 'updated config');
    });
    return this.configuring;
  },
  // Create data sources and clear tile cache if necessary
  createDataSources: function createDataSources(config) {
    var _this2 = this;
    // Save and compare previous sources
    this.last_config_sources = this.config_sources || {};
    this.config_sources = topojson.mergeObjects({}, config.sources); // deep copy the serialized config for the later existence comparison
    var last_sources = this.sources;
    var changed = [];

    // Parse new sources
    this.sources = {}; // clear previous sources
    for (var name in config.sources) {
      if (JSON.stringify(this.last_config_sources[name]) === JSON.stringify(config.sources[name])) {
        this.sources[name] = last_sources[name];
        continue;
      }

      // compile any user-defined JS functions
      config.sources[name] = topojson.compileFunctionStrings(config.sources[name]);
      var source = void 0;
      try {
        source = topojson.DataSource.create(Object.assign({}, config.sources[name], {
          name: name
        }), this.sources);
      } catch (e) {
        continue;
      }
      if (!source) {
        continue;
      }
      this.sources[name] = source;
      changed.push(name);
    }

    // Clear tile cache for data sources that changed
    changed.forEach(function (source) {
      for (var t in _this2.tiles) {
        if (_this2.tiles[t].source === source) {
          delete _this2.tiles[t];
        }
      }
    });
  },
  // Returns a promise that fulfills when config refresh is finished
  awaitConfiguration: function awaitConfiguration() {
    return this.configuring;
  },
  // Build a tile: load from tile source if building for first time, otherwise rebuild with existing data
  buildTile: function buildTile(_ref2) {
    var _this3 = this;
    var tile = _ref2.tile;
    // Tile cached?
    if (this.getTile(tile.key) != null) {
      // Already loading?
      if (this.getTile(tile.key).loading === true) {
        return;
      }
    }

    // Update tile cache
    tile = this.tiles[tile.key] = Object.assign(this.getTile(tile.key) || {}, tile);

    // Update config (styles, etc.), then build tile
    return this.awaitConfiguration().then(function () {
      // First time building the tile
      if (tile.loaded !== true) {
        tile.loading = true;
        tile.loaded = false;
        tile.error = null;
        _this3.loadTileSourceData(tile).then(function () {
          if (!_this3.getTile(tile.key)) {
            topojson.log('trace', "stop tile build after data source load because tile was removed: ".concat(tile.key));
            return;
          }

          // Warn and continue on data source error
          if (tile.source_data.error) {
            topojson.log('warn', "tile load error(s) for ".concat(tile.key, ": ").concat(tile.source_data.error));
          }
          tile.loading = false;
          tile.loaded = true;
          topojson.Tile.buildGeometry(tile, _this3);
        }).catch(function (error) {
          tile.loading = false;
          tile.loaded = false;
          tile.error = error.stack;
          topojson.log('error', "tile load error for ".concat(tile.key, ": ").concat(tile.error));

          // Send error to main thread
          topojson.WorkerBroker.postMessage("TileManager_".concat(_this3.scene_id, ".buildTileError"), topojson.Tile.slice(tile));
        });
      }
      // Tile already loaded, just rebuild
      else {
        topojson.log('trace', "used worker cache for tile ".concat(tile.key));

        // Build geometry
        try {
          topojson.Tile.buildGeometry(tile, _this3);
        } catch (error) {
          // Send error to main thread
          tile.error = error.toString();
          topojson.WorkerBroker.postMessage("TileManager_".concat(_this3.scene_id, ".buildTileError"), topojson.Tile.slice(tile));
        }
      }
    });
  },
  // Load this tile's data source, or copy from an existing tile's data
  loadTileSourceData: function loadTileSourceData(tile) {
    var source = this.sources[tile.source];
    if (source) {
      // Search existing tiles to see if we can reuse existing source data for this coordinate
      for (var t in this.tiles) {
        var ref = this.tiles[t];
        if (ref.source === tile.source && ref.coords.key === tile.coords.key && ref.loaded) {
          return Promise.resolve(source.copyTileData(ref, tile));
        }
      }

      // Load new tile data (no existing data found)
      return source.load(tile);
    } else {
      tile.source_data = {};
      return Promise.resolve(tile);
    }
  },
  getTile: function getTile(key) {
    return this.tiles[key];
  },
  // Remove tile
  removeTile: function removeTile(key) {
    var tile = this.tiles[key];
    if (tile != null) {
      // Cancel if loading
      if (tile.loading === true) {
        topojson.log('trace', "cancel tile load for ".concat(key));
        tile.loading = false;
        topojson.Tile.cancel(tile);
      }

      // Remove from cache
      topojson.FeatureSelection.clearTile(key);
      delete this.tiles[key];
      topojson.log('trace', "remove tile from cache for ".concat(key));
    }
  },
  // Query features within visible tiles, with optional filter conditions
  queryFeatures: function queryFeatures(_ref3) {
    var _this4 = this;
    var filter = _ref3.filter,
      visible = _ref3.visible,
      geometry = _ref3.geometry,
      tile_keys = _ref3.tile_keys;
    var features = [];
    var tiles = tile_keys.map(function (t) {
      return _this4.tiles[t];
    }).filter(function (t) {
      return t && t.loaded;
    });

    // Compile feature filter
    if (filter != null) {
      filter = ['{', '['].indexOf(filter[0]) > -1 ? JSON.parse(filter) : filter; // de-serialize if looks like an object
      filter = topojson.compileFunctionStrings(filter, topojson.StyleParser.wrapFunction);
    }
    filter = topojson.buildFilter(filter, topojson.FilterOptions);
    tiles.forEach(function (tile) {
      var _loop = function _loop(layer) {
          var data = tile.source_data.layers[layer];
          if (data == null) {
            return {
              v: void 0
            };
          }
          data.features.forEach(function (feature) {
            // Optionally check if feature is visible (e.g. was rendered for current generation)
            var feature_visible = feature.generation === _this4.generation;
            if (visible === true && !feature_visible || visible === false && feature_visible) {
              return;
            }

            // Apply feature filter
            var context = topojson.StyleParser.getFeatureParseContext(feature, tile, _this4.global);
            context.source = tile.source; // add data source name
            context.layer = layer; // add data source layer name
            context.id = feature.id; // add feature id

            if (!filter(context)) {
              return;
            }

            // Info to return with each feature
            var subset = {
              type: feature.type,
              id: feature.id,
              properties: Object.assign({}, feature.properties, {
                $source: context.source,
                $layer: context.layer,
                $geometry: context.geometry,
                $visible: feature_visible
              })
            };

            // Optionally include geometry in response
            if (geometry === true) {
              // Transform back to lat lng (copy geometry to avoid local modification)
              subset.geometry = topojson.Geo.copyGeometry(feature.geometry);
              topojson.Geo.tileSpaceToLatlng(subset.geometry, tile.coords.z, tile.min);
            }
            features.push(subset);
          });
        },
        _ret;
      for (var layer in tile.source_data.layers) {
        _ret = _loop(layer);
        if (_ret) return _ret.v;
      }
    });
    return features;
  },
  // Get a feature from the selection map
  getFeatureSelection: function getFeatureSelection() {
    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      id = _ref4.id,
      key = _ref4.key;
    var selection = topojson.FeatureSelection.map[key];
    return {
      id: id,
      feature: selection && selection.feature
    };
  },
  // Resets the feature selection state
  resetFeatureSelection: function resetFeatureSelection() {
    var sources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    topojson.FeatureSelection.reset(sources);
  },
  // Selection map size for this worker
  getFeatureSelectionMapSize: function getFeatureSelectionMapSize() {
    return topojson.FeatureSelection.getMapSize();
  },
  // Texture info needs to be synced from main thread, e.g. width/height, which we only know after the texture loads
  syncTextures: function syncTextures(tex_config) {
    var textures = [];
    if (tex_config) {
      textures.push.apply(textures, topojson._toConsumableArray(Object.keys(tex_config)));
    }
    topojson.log('trace', 'sync textures to worker:', textures);
    if (textures.length > 0) {
      return topojson.Texture.syncTexturesToWorker(textures);
    }
    return Promise.resolve();
  },
  // Sync device pixel ratio from main thread
  updateDevicePixelRatio: function updateDevicePixelRatio(device_pixel_ratio) {
    topojson.Utils.device_pixel_ratio = device_pixel_ratio;
  },
  clearFunctionStringCache: function clearFunctionStringCache() {
    topojson.clearFunctionStringCache();
  },
  // Profiling helpers
  profile: function profile(name) {
    console.profile("worker ".concat(this._worker_id, ": ").concat(name)); // eslint-disable-line no-console
  },
  profileEnd: function profileEnd(name) {
    console.profileEnd("worker ".concat(this._worker_id, ": ").concat(name)); // eslint-disable-line no-console
  },
  debug: {
    debugSettings: topojson.debugSettings,
    layerCache: topojson.layerCache,
    functionStringCache: topojson.cache
  }
});
topojson.WorkerBroker.addTarget('self', SceneWorker);

}));

define(['./shared'], (function (topojson) { 'use strict';

// WebGL context wrapper

var Context;
var Context$1 = Context = {};
var context_id = 0;

// Setup a WebGL context
// If no canvas element is provided, one is created and added to the document body
Context.getContext = function getContext(canvas, options) {
  var fullscreen = false;
  if (canvas == null) {
    canvas = document.createElement('canvas');
    canvas.style.position = 'absolute';
    canvas.style.top = 0;
    canvas.style.left = 0;
    canvas.style.zIndex = -1;
    document.body.appendChild(canvas);
    fullscreen = true;
  }

  // powerPreference context option spec requires listeners for context loss/restore,
  // though it's not clear these are required in practice.
  // https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2.1
  canvas.addEventListener('webglcontextlost', function () {});
  canvas.addEventListener('webglcontextrestored', function () {});
  var gl = canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options);
  if (!gl) {
    throw new Error('Couldn\'t create WebGL context.');
  }
  gl._tangram_id = context_id++;
  if (!fullscreen) {
    Context.resize(gl, parseFloat(canvas.style.width), parseFloat(canvas.style.height), options.device_pixel_ratio);
  } else {
    Context.resize(gl, window.innerWidth, window.innerHeight, options.device_pixel_ratio);
    window.addEventListener('resize', function () {
      Context.resize(gl, window.innerWidth, window.innerHeight, options.device_pixel_ratio);
    });
  }
  return gl;
};
Context.resize = function (gl, width, height, device_pixel_ratio) {
  device_pixel_ratio = device_pixel_ratio || window.devicePixelRatio || 1;
  gl.canvas.style.width = width + 'px';
  gl.canvas.style.height = height + 'px';
  gl.canvas.width = Math.round(width * device_pixel_ratio);
  gl.canvas.height = Math.round(height * device_pixel_ratio);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
};

// Get a value for a nested property with path provided as an array (`a.b.c` => ['a', 'b', 'c'])
function getPropertyPath(object, path) {
  var _getPropertyPathTarge;
  var prop = path[path.length - 1];
  return (_getPropertyPathTarge = getPropertyPathTarget(object, path)) === null || _getPropertyPathTarge === void 0 ? void 0 : _getPropertyPathTarge[prop];
}

// Set a value for a nested property with path provided as an array (`a.b.c` => ['a', 'b', 'c'])
function setPropertyPath(object, path, value) {
  var prop = path[path.length - 1];
  var target = getPropertyPathTarget(object, path);
  if (target) {
    target[prop] = value;
  }
}

// Get the immediate parent object for a property path name provided as an array
// e.g. for a single-depth path, this is just `object`, for path ['a', 'b'], this is `object[a]`
function getPropertyPathTarget(object, path) {
  if (path.length === 0) {
    return;
  }
  var target = object;
  for (var i = 0; i < path.length - 1; i++) {
    var prop = path[i];
    target = target[prop];
    if (target == null) {
      return;
    }
  }
  return target;
}

// prefix used to identify global property references
var GLOBAL_PREFIX = 'global.';
var GLOBAL_PREFIX_LENGTH = GLOBAL_PREFIX.length;

// name of 'hidden' (non-enumerable) property used to track global property references on an object
var GLOBAL_REGISTRY = '__global_prop';

// Property name references a global property?
function isGlobalReference(val) {
  return (val === null || val === void 0 ? void 0 : val.slice(0, GLOBAL_PREFIX_LENGTH)) === GLOBAL_PREFIX;
}

// Has object property been substitued with a value from a global reference?
// Property provided as a single-depth string name, or nested path array (`a.b.c` => ['a', 'b', 'c'])
function isGlobalSubstitution(object, prop_or_path) {
  var _target$GLOBAL_REGIST;
  var path = Array.isArray(prop_or_path) ? prop_or_path : [prop_or_path];
  var target = getPropertyPathTarget(object, path);
  var prop = path[path.length - 1];
  return (target === null || target === void 0 || (_target$GLOBAL_REGIST = target[GLOBAL_REGISTRY]) === null || _target$GLOBAL_REGIST === void 0 ? void 0 : _target$GLOBAL_REGIST[prop]) !== undefined;
}

// Flatten nested global properties for simpler string look-ups
function flattenGlobalProperties(obj) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var globals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  prefix = prefix ? prefix + '.' : GLOBAL_PREFIX;
  for (var p in obj) {
    var key = prefix + p;
    var val = obj[p];
    globals[key] = val;
    if (topojson._typeof(val) === 'object' && !Array.isArray(val)) {
      flattenGlobalProperties(val, key, globals);
    }
  }
  return globals;
}

// Find and apply new global properties (and re-apply old ones)
function applyGlobalProperties(globals, obj, target, key) {
  var _target$GLOBAL_REGIST2;
  var prop;

  // Check for previously applied global substitution
  if (target !== null && target !== void 0 && (_target$GLOBAL_REGIST2 = target[GLOBAL_REGISTRY]) !== null && _target$GLOBAL_REGIST2 !== void 0 && _target$GLOBAL_REGIST2[key]) {
    prop = target[GLOBAL_REGISTRY][key];
  }
  // Check string for new global substitution
  else if (typeof obj === 'string' && obj.slice(0, GLOBAL_PREFIX_LENGTH) === GLOBAL_PREFIX) {
    prop = obj;
  }

  // Found global property to substitute
  if (prop) {
    // Mark property as global substitution
    if (target[GLOBAL_REGISTRY] == null) {
      Object.defineProperty(target, GLOBAL_REGISTRY, {
        value: {}
      });
    }
    target[GLOBAL_REGISTRY][key] = prop;

    // Get current global value
    var val = globals[prop];
    var stack;
    while (typeof val === 'string' && val.slice(0, GLOBAL_PREFIX_LENGTH) === GLOBAL_PREFIX) {
      // handle globals that refer to other globals, detecting any cyclical references
      stack = stack || [prop];
      if (stack.indexOf(val) > -1) {
        topojson.log({
          level: 'warn',
          once: true
        }, 'Global properties: cyclical reference detected', stack);
        val = null;
        break;
      }
      stack.push(val);
      val = globals[val];
    }

    // Create getter/setter
    Object.defineProperty(target, key, {
      enumerable: true,
      get: function get() {
        return val; // return substituted value
      },
      set: function set(v) {
        // clear the global substitution and remove the getter/setter
        delete target[GLOBAL_REGISTRY][key];
        delete target[key];
        target[key] = v; // save the new value
      }
    });
  }
  // Loop through object keys or array indices
  else if (Array.isArray(obj)) {
    for (var p = 0; p < obj.length; p++) {
      applyGlobalProperties(globals, obj[p], obj, p);
    }
  } else if (topojson._typeof(obj) === 'object') {
    for (var _p in obj) {
      applyGlobalProperties(globals, obj[_p], obj, _p);
    }
  }
  return obj;
}

var global$1 = (typeof global !== "undefined" ? global :
            typeof self !== "undefined" ? self :
            typeof window !== "undefined" ? window : {});

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;
function init () {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}

function toByteArray (b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = (tmp >> 16) & 0xFF;
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
    arr[L++] = (tmp >> 8) & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
    output.push(tripletToBase64(tmp));
  }
  return output.join('')
}

function fromByteArray (uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[(tmp << 4) & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
    output += lookup[tmp >> 10];
    output += lookup[(tmp >> 4) & 0x3F];
    output += lookup[(tmp << 2) & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('')
}

function read (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? (nBytes - 1) : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

function write (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  var i = isLE ? 0 : (nBytes - 1);
  var d = isLE ? 1 : -1;
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
}

var toString = {}.toString;

var isArray = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

var INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
  ? global$1.TYPED_ARRAY_SUPPORT
  : true;

/*
 * Export kMaxLength after typed array support is determined.
 */
var _kMaxLength = kMaxLength();

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr
};

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) ;
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
};

function allocUnsafe (that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
};

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that
}

function fromObject (that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len);
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length)
}
Buffer.isBuffer = isBuffer;
function internalIsBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
};

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer
};

function byteLength (string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString (encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap (b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this
};

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this
};

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this
};

Buffer.prototype.toString = function toString () {
  var length = this.length | 0;
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
};

Buffer.prototype.equals = function equals (b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
};

Buffer.prototype.inspect = function inspect () {
  var str = '';
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>'
};

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset;  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1);
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
};

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
};

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
};

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed;
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
};

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf)
  } else {
    return fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val
};

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val
};

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset]
};

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | (this[offset + 1] << 8)
};

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return (this[offset] << 8) | this[offset + 1]
};

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
};

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
};

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
};

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | (this[offset + 1] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | (this[offset] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
};

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
};

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4)
};

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4)
};

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8)
};

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8)
};

function checkInt (buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = (value & 0xff);
  return offset + 1
};

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24);
    this[offset + 2] = (value >>> 16);
    this[offset + 1] = (value >>> 8);
    this[offset] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2
};

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8);
    this[offset + 1] = (value & 0xff);
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2
};

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff);
    this[offset + 1] = (value >>> 8);
    this[offset + 2] = (value >>> 16);
    this[offset + 3] = (value >>> 24);
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4
};

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24);
    this[offset + 1] = (value >>> 16);
    this[offset + 2] = (value >>> 8);
    this[offset + 3] = (value & 0xff);
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4
};

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
};

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
};

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    );
  }

  return len
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        }

        // valid lead
        leadSurrogate = codePoint;

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray
}


function base64ToBytes (str) {
  return toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i];
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}


// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
}

function isFastBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
}

var bufferEs6 = /*#__PURE__*/Object.freeze({
__proto__: null,
Buffer: Buffer,
INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
SlowBuffer: SlowBuffer,
isBuffer: isBuffer,
kMaxLength: _kMaxLength
});

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$1.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
}
if (typeof global$1.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
}

function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
function nextTick(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
}
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance = global$1.performance || {};
performance.now        ||
  performance.mozNow     ||
  performance.msNow      ||
  performance.oNow       ||
  performance.webkitNow  ||
  function(){ return (new Date()).getTime() };

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var jszip_min = {exports: {}};

var hasRequiredJszip_min;

function requireJszip_min () {
	if (hasRequiredJszip_min) return jszip_min.exports;
	hasRequiredJszip_min = 1;
	(function (module, exports) {
		!function(e){module.exports=e();}(function(){return function s(a,o,h){function u(r,e){if(!o[r]){if(!a[r]){var t="function"==typeof commonjsRequire&&commonjsRequire;if(!e&&t)return t(r,!0);if(l)return l(r,!0);var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return u(t||e)},i,i.exports,s,a,o,h);}return o[r].exports}for(var l="function"==typeof commonjsRequire&&commonjsRequire,e=0;e<h.length;e++)u(h[e]);return u}({1:[function(e,t,r){var d=e("./utils"),c=e("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,n,i,s,a,o,h=[],u=0,l=e.length,f=l,c="string"!==d.getTypeOf(e);u<e.length;)f=l-u,n=c?(t=e[u++],r=u<l?e[u++]:0,u<l?e[u++]:0):(t=e.charCodeAt(u++),r=u<l?e.charCodeAt(u++):0,u<l?e.charCodeAt(u++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<f?(15&r)<<2|n>>6:64,o=2<f?63&n:64,h.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join("")},r.decode=function(e){var t,r,n,i,s,a,o=0,h=0,u="data:";if(e.substr(0,u.length)===u)throw new Error("Invalid base64 input, it looks like a data url.");var l,f=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=c.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),l[h++]=t,64!==s&&(l[h++]=r),64!==a&&(l[h++]=n);return l};},{"./support":30,"./utils":32}],2:[function(e,t,r){var n=e("./external"),i=e("./stream/DataWorker"),s=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i;}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=o;},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate");},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){var n=e("./utils");var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e;}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return -1^e}(0|t,e,e.length,0):function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t.charCodeAt(a))];return -1^e}(0|t,e,e.length,0):0};},{"./utils":32}],5:[function(e,t,r){r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null;},{}],6:[function(e,t,r){var n=null;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n};},{lie:37}],7:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),s=e("./utils"),a=e("./stream/GenericWorker"),o=n?"uint8array":"array";function h(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={};}r.magic="\b\0",s.inherits(h,a),h.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1);},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0);},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null;},h.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta});};},r.compressWorker=function(e){return new h("Deflate",e)},r.uncompressWorker=function(){return new h("Inflate",{})};},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){function A(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function n(e,t,r,n,i,s){var a,o,h=e.file,u=e.compression,l=s!==O.utf8encode,f=I.transformTo("string",s(h.name)),c=I.transformTo("string",O.utf8encode(h.name)),d=h.comment,p=I.transformTo("string",s(d)),m=I.transformTo("string",O.utf8encode(d)),_=c.length!==h.name.length,g=m.length!==d.length,b="",v="",y="",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),"UNIX"===i?(C=798,z|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(e){return 63&(e||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+c,b+="up"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+="uc"+A(y.length,2)+y);var E="";return E+="\n\0",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+"\0\0\0\0"+A(z,4)+A(n,4)+f+b+p}}var I=e("../utils"),i=e("../stream/GenericWorker"),O=e("../utf8"),B=e("../crc32"),R=e("../signature");function s(e,t,r,n){i.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[];}I.inherits(s,i),s.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}));},s.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=n(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}});}else this.accumulate=!0;},s.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=n(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return R.DATA_DESCRIPTOR+A(e.crc32,4)+A(e.compressedSize,4)+A(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null;},s.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,n=function(e,t,r,n,i){var s=I.transformTo("string",i(n));return R.CENTRAL_DIRECTORY_END+"\0\0\0\0"+A(e,2)+A(e,2)+A(t,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:n,meta:{percent:100}});},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume();},s.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",function(e){t.processChunk(e);}),e.on("end",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end();}),e.on("error",function(e){t.error(e);}),this},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return !1;for(var r=0;r<t.length;r++)try{t[r].error(e);}catch(e){}return !0},s.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock();},t.exports=s;},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){var u=e("../compressions"),n=e("./ZipFileWorker");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),h=0;try{e.forEach(function(e,t){h++;var r=function(e,t){var r=e||t,n=u[r];if(!n)throw new Error(r+" is not a valid compression method !");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo("file",{name:e,dir:i,date:s,comment:t.comment||"",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o);}),o.entriesCount=h;}catch(e){o.error(e);}return o};},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e};}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.10.1",n.loadAsync=function(e,t){return (new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n;},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){var u=e("./utils"),i=e("./external"),n=e("./utf8"),s=e("./zipEntries"),a=e("./stream/Crc32Probe"),l=e("./nodejsUtils");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new a);r.on("error",function(e){t(e);}).on("end",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error("Corrupted zip : CRC32 mismatch")):e();}).resume();})}t.exports=function(e,o){var h=this;return o=u.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):u.prepareContent("the loaded zip file",e,!0,o.optimizedBinaryString,o.base64).then(function(e){var t=new s(o);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(o.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n],s=i.fileNameStr,a=u.resolve(i.fileNameStr);h.file(a,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:o.createFolders}),i.dir||(h.file(a).unsafeOriginalName=s);}return t.zipComment.length&&(h.comment=t.zipComment),h})};},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){var n=e("../utils"),i=e("../stream/GenericWorker");function s(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t);}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",function(e){t.push({data:e,meta:{percent:0}});}).on("error",function(e){t.isPaused?this.generatedError=e:t.error(e);}).on("end",function(){t.isPaused?t._upstreamEnded=!0:t.end();});},s.prototype.pause=function(){return !!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s;},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){var i=e("readable-stream").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on("data",function(e,t){n.push(e)||n._helper.pause(),r&&r(t);}).on("error",function(e){n.emit("error",e);}).on("end",function(){n.push(null);});}e("../utils").inherits(n,i),n.prototype._read=function(){this._helper.resume();},t.exports=n;},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}};},{}],15:[function(e,t,r){function s(e,t,r){var n,i=u.getTypeOf(t),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=g(e)),s.createFolders&&(n=_(e))&&b.call(this,n,!0);var a="string"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t="",s.compression="STORE",i="string");var o=null;o=t instanceof c||t instanceof l?t:p.isNode&&p.isStream(t)?new m(e,t):u.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var h=new d(e,o,s);this.files[e]=h;}var i=e("./utf8"),u=e("./utils"),l=e("./stream/GenericWorker"),a=e("./stream/StreamHelper"),f=e("./defaults"),c=e("./compressedObject"),d=e("./zipObject"),o=e("./generate"),p=e("./nodejsUtils"),m=e("./nodejs/NodejsStreamInputAdapter"),_=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},g=function(e){return "/"!==e.slice(-1)&&(e+="/"),e},b=function(e,t){return t=void 0!==t?t:f.createFolders,e=g(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function h(e){return "[object RegExp]"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n);},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t);}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(h(e)){var n=e;return this.filter(function(e,t){return !t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=b.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||("/"!==r.slice(-1)&&(r+="/"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=u.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");u.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=o.generateWorker(this,r,n);}catch(e){(t=new l("error")).error(e);}return new a(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return (e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n;},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){t.exports=e("stream");},{stream:void 0}],17:[function(e,t,r){var n=e("./DataReader");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t];}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return -1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return [];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){var n=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0;}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e);},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e;},skip:function(e){this.setIndex(this.index+e);},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i;},{"../utils":32}],19:[function(e,t,r){var n=e("./Uint8ArrayReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){var n=e("./DataReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){var n=e("./ArrayReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){var n=e("../utils"),i=e("../support"),s=e("./ArrayReader"),a=e("./StringReader"),o=e("./NodeBufferReader"),h=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new o(e):i.uint8array?new h(n.transformTo("uint8array",e)):new s(n.transformTo("array",e)):new a(e)};},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b";},{}],24:[function(e,t,r){var n=e("./GenericWorker"),i=e("../utils");function s(e){n.call(this,"ConvertWorker to "+e),this.destType=e;}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta});},t.exports=s;},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){var n=e("./GenericWorker"),i=e("../crc32");function s(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0);}e("../utils").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e);},t.exports=s;},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0);}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length;}i.prototype.processChunk.call(this,e);},t.exports=s;},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat();},function(e){t.error(e);});}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null;},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0));},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return !1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t);}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s;},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null;}n.prototype={push:function(e){this.emit("data",e);},end:function(){if(this.isFinished)return !1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0;}catch(e){this.emit("error",e);}return !0},error:function(e){return !this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[];},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t);},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",function(e){t.processChunk(e);}),e.on("end",function(){t.end();}),e.on("error",function(e){t.error(e);}),this},pause:function(){return !this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return !1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e);},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e]);},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock();},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n;},{}],29:[function(e,t,r){var h=e("../utils"),i=e("./ConvertWorker"),s=e("./GenericWorker"),u=e("../base64"),n=e("../support"),a=e("../external"),o=null;if(n.nodestream)try{o=e("../nodejs/NodejsStreamOutputAdapter");}catch(e){}function l(e,o){return new a.Promise(function(t,r){var n=[],i=e._internalType,s=e._outputType,a=e._mimeType;e.on("data",function(e,t){n.push(e),o&&o(t);}).on("error",function(e){n=[],r(e);}).on("end",function(){try{var e=function(e,t,r){switch(e){case"blob":return h.newBlob(h.transformTo("arraybuffer",t),r);case"base64":return u.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(i,n),a);t(e);}catch(e){r(e);}n=[];}).resume();})}function f(e,t,r){var n=t;switch(t){case"blob":case"arraybuffer":n="uint8array";break;case"base64":n="string";}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock();}catch(e){this._worker=new s("error"),this._worker.error(e);}}f.prototype={accumulate:function(e){return l(this,e)},on:function(e,t){var r=this;return "data"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta);}):this._worker.on(e,function(){h.delay(t,arguments,r);}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new o(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=f;},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else {var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size;}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size;}catch(e){r.blob=!1;}}}try{r.nodestream=!!e("readable-stream").Readable;}catch(e){r.nodestream=!1;}},{"readable-stream":16}],31:[function(e,t,s){for(var o=e("./utils"),h=e("./support"),r=e("./nodejsUtils"),n=e("./stream/GenericWorker"),u=new Array(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;u[254]=u[254]=1;function a(){n.call(this,"utf-8 decode"),this.leftOver=null;}function l(){n.call(this,"utf-8 encode");}s.utf8encode=function(e){return h.nodebuffer?r.newBufferFrom(e,"utf-8"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=h.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return h.nodebuffer?o.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=u[n]))a[r++]=65533,t+=i-1;else {for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n);}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(h.uint8array?"uint8array":"array",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(h.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length);}else t=this.leftOver.concat(t);this.leftOver=null;}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}(t),i=t;n!==t.length&&(h.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta});},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null);},s.Utf8DecodeWorker=a,o.inherits(l,n),l.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta});},s.Utf8EncodeWorker=l;},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,a){var o=e("./support"),h=e("./base64"),r=e("./nodejsUtils"),u=e("./external");function n(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e("setimmediate"),a.newBlob=function(t,r){a.checkSupport("blob");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var i={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return !1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return !1}}()}};function s(e){var t=65536,r=a.getTypeOf(e),n=!0;if("uint8array"===r?n=i.applyCanBeUsed.uint8array:"nodebuffer"===r&&(n=i.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return i.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2);}return i.stringifyByChar(e)}function f(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}a.applyFromCharCode=s;var c={};c.string={string:n,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:s,array:n,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return s(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:n,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:n,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:n},a.transformTo=function(e,t){if(t=t||"",!e)return t;a.checkSupport(e);var r=a.getTypeOf(t);return c[r][e](t)},a.resolve=function(e){for(var t=e.split("/"),r=[],n=0;n<t.length;n++){var i=t[n];"."===i||""===i&&0!==n&&n!==t.length-1||(".."===i?r.pop():r.push(i));}return r.join("/")},a.getTypeOf=function(e){return "string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":o.nodebuffer&&r.isBuffer(e)?"nodebuffer":o.uint8array&&e instanceof Uint8Array?"uint8array":o.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},a.checkSupport=function(e){if(!o[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},a.delay=function(e,t,r){setImmediate(function(){e.apply(r||null,t||[]);});},a.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r;},a.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},a.prepareContent=function(r,e,n,i,s){return u.Promise.resolve(e).then(function(n){return o.blob&&(n instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(n)))&&"undefined"!=typeof FileReader?new u.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result);},e.onerror=function(e){r(e.target.error);},e.readAsArrayBuffer(n);}):n}).then(function(e){var t=a.getTypeOf(e);return t?("arraybuffer"===t?e=a.transformTo("uint8array",e):"string"===t&&(s?e=h.decode(e):n&&!0!==i&&(e=function(e){return l(e,o.uint8array?new Uint8Array(e.length):new Array(e.length))}(e))),e):u.Promise.reject(new Error("Can't read the data of '"+r+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})};},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,r){var n=e("./reader/readerFor"),i=e("./utils"),s=e("./signature"),a=e("./zipEntry"),o=e("./support");function h(e){this.files=[],this.loadOptions=e;}h.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?"uint8array":"array",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r);},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r};},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes();},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw !this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip: can't find end of central directory");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral();}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e);},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles();}},t.exports=h;},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){var n=e("./reader/readerFor"),s=e("./utils"),i=e("./compressedObject"),a=e("./crc32"),o=e("./utf8"),h=e("./compressions"),u=e("./support");function l(e,t){this.options=e,this.loadOptions=t;}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in h)if(Object.prototype.hasOwnProperty.call(h,t)&&h[t].magic===e)return h[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize));},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength);},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0);},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4));}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i);},handleUTF8:function(){var e=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else {var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else {var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r);}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else {var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i);}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=l;},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions};}var s=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),a=e("./utf8"),o=e("./compressedObject"),h=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker));}catch(e){(t=new h("error")).error(e);}return new s(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new i(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<u.length;f++)n.prototype[u[f]]=l;t.exports=n;},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,l,t){(function(t){var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(u),a=t.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2;};}else if(t.setImmediate||void 0===t.MessageChannel)r="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null;},t.document.documentElement.appendChild(e);}:function(){setTimeout(u,0);};else {var o=new t.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0);};}var h=[];function u(){var e,t;n=!0;for(var r=h.length;r;){for(t=h,h=[],e=-1;++e<r;)t[e]();r=h.length;}n=!1;}l.exports=function(e){1!==h.push(e)||n||r();};}).call(this,"undefined"!=typeof global$1?global$1:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],37:[function(e,t,r){var i=e("immediate");function u(){}var l={},s=["REJECTED"],a=["FULFILLED"],n=["PENDING"];function o(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=n,this.queue=[],this.outcome=void 0,e!==u&&d(this,e);}function h(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected);}function f(t,r,n){i(function(){var e;try{e=r(n);}catch(e){return l.reject(t,e)}e===t?l.reject(t,new TypeError("Cannot resolve promise with itself")):l.resolve(t,e);});}function c(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments);}}function d(t,e){var r=!1;function n(e){r||(r=!0,l.reject(t,e));}function i(e){r||(r=!0,l.resolve(t,e));}var s=p(function(){e(i,n);});"error"===s.status&&n(s.value);}function p(e,t){var r={};try{r.value=e(t),r.status="success";}catch(e){r.status="error",r.value=e;}return r}(t.exports=o).prototype.finally=function(t){if("function"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var r=new this.constructor(u);this.state!==n?f(r,this.state===a?e:t,this.outcome):this.queue.push(new h(r,e,t));return r},h.prototype.callFulfilled=function(e){l.resolve(this.promise,e);},h.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e);},h.prototype.callRejected=function(e){l.reject(this.promise,e);},h.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e);},l.resolve=function(e,t){var r=p(c,t);if("error"===r.status)return l.reject(e,r.value);var n=r.value;if(n)d(e,n);else {e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t);}return e},l.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){if(e instanceof this)return e;return l.resolve(new this(u),e)},o.reject=function(e){var t=new this(u);return l.reject(t,e)},o.all=function(e){var r=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,i=!1;if(!n)return this.resolve([]);var s=new Array(n),a=0,t=-1,o=new this(u);for(;++t<n;)h(e[t],t);return o;function h(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,l.resolve(o,s));},function(e){i||(i=!0,l.reject(o,e));});}},o.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);var i=-1,s=new this(u);for(;++i<r;)a=e[i],t.resolve(a).then(function(e){n||(n=!0,l.resolve(s,e));},function(e){n||(n=!0,l.reject(s,e));});var a;return s};},{immediate:36}],38:[function(e,t,r){var n={};(0, e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n;},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){var a=e("./zlib/deflate"),o=e("./utils/common"),h=e("./utils/strings"),i=e("./zlib/messages"),s=e("./zlib/zstream"),u=Object.prototype.toString,l=0,f=-1,c=0,d=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:f,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==l)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n="string"==typeof t.dictionary?h.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==l)throw new Error(i[r]);this._dict_set=!0;}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return !1;n=t===~~t?t:!0===t?4:0,"string"==typeof e?i.input=h.string2buf(e):"[object ArrayBuffer]"===u.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||("string"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)));}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==n||(this.onEnd(l),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e);},p.prototype.onEnd=function(e){e===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg;},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return (t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return (t=t||{}).gzip=!0,n(e,t)};},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){var c=e("./zlib/inflate"),d=e("./utils/common"),p=e("./utils/strings"),m=e("./zlib/constants"),n=e("./zlib/messages"),i=e("./zlib/zstream"),s=e("./zlib/gzheader"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=d.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=c.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,c.inflateGetHeader(this.strm,this.header);}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return !1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof e?h.input=p.binstring2buf(e):"[object ArrayBuffer]"===_.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new d.Buf8(u),h.next_out=0,h.avail_out=u),(r=c.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o="string"==typeof l?p.string2buf(l):"[object ArrayBuffer]"===_.call(l)?new Uint8Array(l):l,r=c.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(i=p.utf8border(h.output,h.next_out),s=h.next_out-i,a=p.buf2string(h.output,i),h.next_out=s,h.avail_out=u-s,s&&d.arraySet(h.output,h.output,i,s,0),this.onData(a)):this.onData(d.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0);}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=c.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e);},a.prototype.onEnd=function(e){e===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=d.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg;},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return (t=t||{}).raw=!0,o(e,t)},r.ungzip=o;},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n]);}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s];},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s];},flattenChunks:function(e){return [].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s));},r.setTyped(n);},{}],42:[function(e,t,r){var h=e("./common"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0]);}catch(e){i=!1;}try{String.fromCharCode.apply(null,new Uint8Array(1));}catch(e){s=!1;}for(var u=new h.Buf8(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,h.shrinkBuf(e,t));for(var r="",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}u[254]=u[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new h.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new h.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=u[i]))o[n++]=65533,r+=s-1;else {for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i);}return l(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t};},{"./common":41}],43:[function(e,t,r){t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521;}return i|s<<16|0};},{}],44:[function(e,t,r){t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};},{}],45:[function(e,t,r){var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e;}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return -1^e};},{}],46:[function(e,t,r){var h,c=e("../utils/common"),u=e("./trees"),d=e("./adler32"),p=e("./crc32"),n=e("./messages"),l=0,f=4,m=0,_=-2,g=-1,b=4,i=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(e,t){return e.msg=n[t],t}function T(e){return (e<<1)-(4<e?9:0)}function D(e){for(var t=e.length;0<=--t;)e[t]=0;}function F(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(c.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0));}function N(e,t){u._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,F(e.strm);}function U(e,t){e.pending_buf[e.pending++]=t;}function P(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t;}function L(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,h=e.strstart>e.w_size-z?e.strstart-(e.w_size-z):0,u=e.window,l=e.w_mask,f=e.prev,c=e.strstart+S,d=u[s+a-1],p=u[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(u[(r=t)+a]===p&&u[r+a-1]===d&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<c);if(n=S-(c-s),s=c-S,a<n){if(e.match_start=t,o<=(a=n))break;d=u[s+a-1],p=u[s+a];}}}while((t=f[t&l])>h&&0!=--i);return a<=e.lookahead?a:e.lookahead}function j(e){var t,r,n,i,s,a,o,h,u,l,f=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-z)){for(c.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);i+=f;}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,h=e.strstart+e.lookahead,u=i,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,c.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=d(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),e.lookahead+=r,e.lookahead+e.insert>=x)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+x-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<x)););}while(e.lookahead<z&&0!==e.strm.avail_in)}function Z(e,t){for(var r,n;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r)),e.match_length>=x)if(n=u._tr_tally(e,e.strstart-e.match_start,e.match_length-x),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=x){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++;}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function W(e,t){for(var r,n,i;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=x-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===x&&4096<e.strstart-e.match_start)&&(e.match_length=x-1)),e.prev_length>=x&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-x,n=u._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-x),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=x-1,e.strstart++,n&&(N(e,!1),0===e.strm.avail_out))return A}else if(e.match_available){if((n=u._tr_tally(e,0,e.window[e.strstart-1]))&&N(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return A}else e.match_available=1,e.strstart++,e.lookahead--;}return e.match_available&&(n=u._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function M(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i;}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new c.Buf16(2*w),this.dyn_dtree=new c.Buf16(2*(2*a+1)),this.bl_tree=new c.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new c.Buf16(k+1),this.heap=new c.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new c.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0;}function G(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?C:E,e.adler=2===t.wrap?0:1,t.last_flush=l,u._tr_init(t),m):R(e,_)}function K(e){var t=G(e);return t===m&&function(e){e.window_size=2*e.w_size,D(e.head),e.max_lazy_match=h[e.level].max_lazy,e.good_match=h[e.level].good_length,e.nice_match=h[e.level].nice_length,e.max_chain_length=h[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=x-1,e.match_available=0,e.ins_h=0;}(e.state),t}function Y(e,t,r,n,i,s){if(!e)return _;var a=1;if(t===g&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||y<i||r!==v||n<8||15<n||t<0||9<t||s<0||b<s)return R(e,_);8===n&&(n=9);var o=new H;return (e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new c.Buf8(2*o.w_size),o.head=new c.Buf16(o.hash_size),o.prev=new c.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new c.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,K(e)}h=[new M(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(j(e),0===e.lookahead&&t===l)return A;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,N(e,!1),0===e.strm.avail_out))return A;if(e.strstart-e.block_start>=e.w_size-z&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):(e.strstart>e.block_start&&(N(e,!1),e.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(e,t){return Y(e,t,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?_:(e.state.gzhead=t,m):_},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?R(e,_):_;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&t!==f)return R(e,0===e.avail_out?-5:_);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===C)if(2===n.wrap)e.adler=0,U(n,31),U(n,139),U(n,8),n.gzhead?(U(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),U(n,255&n.gzhead.time),U(n,n.gzhead.time>>8&255),U(n,n.gzhead.time>>16&255),U(n,n.gzhead.time>>24&255),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(U(n,255&n.gzhead.extra.length),U(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(U(n,0),U(n,0),U(n,0),U(n,0),U(n,0),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,3),n.status=E);else {var a=v+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=E,P(n,a),0!==n.strstart&&(P(n,e.adler>>>16),P(n,65535&e.adler)),e.adler=1;}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending!==n.pending_buf_size));)U(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73);}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,U(n,s);}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91);}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,U(n,s);}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103);}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&F(e),n.pending+2<=n.pending_buf_size&&(U(n,255&e.adler),U(n,e.adler>>8&255),e.adler=0,n.status=E)):n.status=E),0!==n.pending){if(F(e),0===e.avail_out)return n.last_flush=-1,m}else if(0===e.avail_in&&T(t)<=T(r)&&t!==f)return R(e,-5);if(666===n.status&&0!==e.avail_in)return R(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==l&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(j(e),0===e.lookahead)){if(t===l)return A;break}if(e.match_length=0,r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=S){if(j(e),e.lookahead<=S&&t===l)return A;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=x&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+S;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=S-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead);}if(e.match_length>=x?(r=u._tr_tally(e,1,e.match_length-x),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):h[n.level].func(n,t);if(o!==O&&o!==B||(n.status=666),o===A||o===O)return 0===e.avail_out&&(n.last_flush=-1),m;if(o===I&&(1===t?u._tr_align(n):5!==t&&(u._tr_stored_block(n,0,0,!1),3===t&&(D(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),F(e),0===e.avail_out))return n.last_flush=-1,m}return t!==f?m:n.wrap<=0?1:(2===n.wrap?(U(n,255&e.adler),U(n,e.adler>>8&255),U(n,e.adler>>16&255),U(n,e.adler>>24&255),U(n,255&e.total_in),U(n,e.total_in>>8&255),U(n,e.total_in>>16&255),U(n,e.total_in>>24&255)):(P(n,e.adler>>>16),P(n,65535&e.adler)),F(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?m:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==C&&69!==t&&73!==t&&91!==t&&103!==t&&t!==E&&666!==t?R(e,_):(e.state=null,t===E?R(e,-3):m):_},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,h,u,l=t.length;if(!e||!e.state)return _;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(e.adler=d(e.adler,t,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new c.Buf8(r.w_size),c.arraySet(u,t,l-r.w_size,r.w_size,0),t=u,l=r.w_size),a=e.avail_in,o=e.next_in,h=e.input,e.avail_in=l,e.next_in=0,e.input=t,j(r);r.lookahead>=x;){for(n=r.strstart,i=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+x-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=x-1,j(r);}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,e.next_in=o,e.input=h,e.avail_in=a,r.wrap=s,m},r.deflateInfo="pako deflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1;};},{}],48:[function(e,t,r){t.exports=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,C=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,c=r.window,d=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=m[d&g];t:for(;;){if(d>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else {if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}w=65535&v,(y&=15)&&(p<y&&(d+=z[n++]<<p,p+=8),w+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=_[d&b];r:for(;;){if(d>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(d&(1<<y)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(k=65535&v,p<(y&=15)&&(d+=z[n++]<<p,(p+=8)<y&&(d+=z[n++]<<p,p+=8)),h<(k+=d&(1<<y)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(d>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(S=c,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C;}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=c[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=c[x++],--y;);x=s-k,S=C;}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C;}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]));}else {for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]));}break}}break}}while(n<i&&s<o);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=d,r.bits=p;};},{}],49:[function(e,t,r){var I=e("../utils/common"),O=e("./adler32"),B=e("./crc32"),R=e("./inffast"),T=e("./inftrees"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return (e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0;}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function h(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function u(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=h(e,t))!==N&&(e.state=null),r):U}var l,f,c=!0;function j(e){if(c){var t;for(l=new I.Buf32(512),f=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(T(D,e.lens,0,288,l,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;T(F,e.lens,0,32,f,0,e.work,{bits:5}),c=!1;}e.lencode=l,e.lenbits=9,e.distcode=f,e.distbits=5;}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(e){return u(e,15)},r.inflateInit2=u,r.inflate=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,f=o,c=h,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&u)){e.msg="unknown compression method",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(r.flags=u,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0;}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(d=r.length)&&(d=o),d&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,d,k)),512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(u!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}l=u=0;}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}e.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;u>>>=2,l-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30;}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if((65535&u)!=(u>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(o<d&&(d=o),h<d&&(d=h),0===d)break e;I.arraySet(i,n,s,d,a),o-=d,s+=d,h-=d,a+=d,r.length-=d;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3;}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else {if(16===b){for(z=_+2;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(u>>>=_,l-=_,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],d=3+(3&u),u>>>=2,l-=2;}else if(17===b){for(z=_+3;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}l-=_,k=0,d=3+(7&(u>>>=_)),u>>>=3,l-=3;}else {for(z=_+7;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}l-=_,k=0,d=11+(127&(u>>>=_)),u>>>=7,l-=7;}if(r.have+d>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;d--;)r.lens[r.have++]=k;}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=h){e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,R(e,c),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}u>>>=v,l-=v,r.back+=v;}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra;}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}u>>>=v,l-=v,r.back+=v;}if(u>>>=_,l-=_,r.back+=_,64&g){e.msg="invalid distance code",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra;}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===h)break e;if(d=c-h,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}p=d>r.wnext?(d-=r.wnext,r.wsize-d):r.wnext-d,d>r.length&&(d=r.length),m=r.window;}else m=i,p=a-r.offset,d=r.length;for(h<d&&(d=h),h-=d,r.length-=d;i[a++]=m[p++],--d;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break e;i[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break e;o--,u|=n[s++]<<l,l+=8;}if(c-=h,e.total_out+=c,r.total+=c,c&&(e.adler=r.check=r.flags?B(r.check,i,c,a-c):O(r.check,i,c,a-c)),c=h,(r.flags?u:L(u))!==r.check){e.msg="incorrect data check",r.mode=30;break}l=u=0;}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(u!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}l=u=0;}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return -4;case 32:default:return U}return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,(r.wsize||c!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,c-e.avail_out)?(r.mode=31,-4):(f-=e.avail_in,c-=e.avail_out,e.total_in+=f,e.total_out+=c,r.total+=c,r.wrap&&c&&(e.adler=r.check=r.flags?B(r.check,i,c,e.next_out-c):O(r.check,i,c,e.next_out-c)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===c||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){var D=e("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var h,u,l,f,c,d,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<n;v++)O[t[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return -1;if(0<z&&(0===e||1!==w))return -1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<n;v++)0!==t[r+v]&&(a[B[t[r+v]]++]=v);if(d=0===e?(A=R=a,19):1===e?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,c=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===e&&852<C||2===e&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<d?(m=0,a[v]):a[v]>d?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;i[c+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=t[r+a[v]];}if(k<b&&(E&f)!==l){for(0===S&&(S=k),c+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===e&&852<C||2===e&&592<C)return 1;i[l=E&f]=k<<24|x<<16|c-s|0;}}return 0!==E&&(i[c+E]=b-S<<24|64<<16|0),o.bits=k,0};},{"../utils/common":41}],51:[function(e,t,r){t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};},{}],52:[function(e,t,r){var i=e("../utils/common"),o=0,h=1;function n(e){for(var t=e.length;0<=--t;)e[t]=0;}var s=0,a=29,u=256,l=u+1+a,f=30,c=19,_=2*l+1,g=15,d=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));n(z);var C=new Array(2*f);n(C);var E=new Array(512);n(E);var A=new Array(256);n(A);var I=new Array(a);n(I);var O,B,R,T=new Array(f);function D(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length;}function F(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t;}function N(e){return e<256?E[e]:E[256+(e>>>7)]}function U(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255;}function P(e,t,r){e.bi_valid>d-r?(e.bi_buf|=t<<e.bi_valid&65535,U(e,e.bi_buf),e.bi_buf=t>>d-e.bi_valid,e.bi_valid+=r-d):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r);}function L(e,t,r){P(e,r[2*t],r[2*t+1]);}function j(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function Z(e,t,r){var n,i,s=new Array(g+1),a=0;for(n=1;n<=g;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=j(s[o]++,o));}}function W(e){var t;for(t=0;t<l;t++)e.dyn_ltree[2*t]=0;for(t=0;t<f;t++)e.dyn_dtree[2*t]=0;for(t=0;t<c;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*m]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0;}function M(e){8<e.bi_valid?U(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0;}function H(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function G(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&H(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!H(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n;}function K(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?L(e,i,t):(L(e,(s=A[i])+u+1,t),0!==(a=w[s])&&P(e,i-=I[s],a),L(e,s=N(--n),r),0!==(a=k[s])&&P(e,n-=T[s],a)),o<e.last_lit;);L(e,m,t);}function Y(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,h=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)G(e,s,r);for(i=h;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],G(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,G(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,h=t.dyn_tree,u=t.max_code,l=t.stat_desc.static_tree,f=t.stat_desc.has_stree,c=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=g;s++)e.bl_count[s]=0;for(h[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<_;r++)p<(s=h[2*h[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),h[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,d<=n&&(a=c[n-d]),o=h[2*n],e.opt_len+=o*(s+a),f&&(e.static_len+=o*(l[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2;}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(h[2*i+1]!==s&&(e.opt_len+=(s-h[2*i+1])*h[2*i],h[2*i+1]=s),n--);}}(e,t),Z(s,u,e.bl_count);}function X(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<h&&i===a||(o<u?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[2*b]++):o<=10?e.bl_tree[2*v]++:e.bl_tree[2*y]++,s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4));}function V(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<h&&i===a)){if(o<u)for(;L(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(L(e,i,e.bl_tree),o--),L(e,b,e.bl_tree),P(e,o-3,2)):o<=10?(L(e,v,e.bl_tree),P(e,o-3,3)):(L(e,y,e.bl_tree),P(e,o-11,7));s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4);}}n(T);var q=!1;function J(e,t,r,n){P(e,(s<<1)+(n?1:0),3),function(e,t,r,n){M(e),(U(e,r),U(e,~r)),i.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r;}(e,t,r);}r._tr_init=function(e){q||(function(){var e,t,r,n,i,s=new Array(g+1);for(n=r=0;n<a-1;n++)for(I[n]=r,e=0;e<1<<w[n];e++)A[r++]=n;for(A[r-1]=n,n=i=0;n<16;n++)for(T[n]=i,e=0;e<1<<k[n];e++)E[i++]=n;for(i>>=7;n<f;n++)for(T[n]=i<<7,e=0;e<1<<k[n]-7;e++)E[256+i++]=n;for(t=0;t<=g;t++)s[t]=0;for(e=0;e<=143;)z[2*e+1]=8,e++,s[8]++;for(;e<=255;)z[2*e+1]=9,e++,s[9]++;for(;e<=279;)z[2*e+1]=7,e++,s[7]++;for(;e<=287;)z[2*e+1]=8,e++,s[8]++;for(Z(z,l+1,s),e=0;e<f;e++)C[2*e+1]=5,C[2*e]=j(e,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,c,p);}(),q=!0),e.l_desc=new F(e.dyn_ltree,O),e.d_desc=new F(e.dyn_dtree,B),e.bl_desc=new F(e.bl_tree,R),e.bi_buf=0,e.bi_valid=0,W(e);},r._tr_stored_block=J,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return o;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return h;for(t=32;t<u;t++)if(0!==e.dyn_ltree[2*t])return h;return o}(e)),Y(e,e.l_desc),Y(e,e.d_desc),a=function(e){var t;for(X(e,e.dyn_ltree,e.l_desc.max_code),X(e,e.dyn_dtree,e.d_desc.max_code),Y(e,e.bl_desc),t=c-1;3<=t&&0===e.bl_tree[2*S[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?J(e,t,r,n):4===e.strategy||s===i?(P(e,2+(n?1:0),3),K(e,z,C)):(P(e,4+(n?1:0),3),function(e,t,r,n){var i;for(P(e,t-257,5),P(e,r-1,5),P(e,n-4,4),i=0;i<n;i++)P(e,e.bl_tree[2*S[i]+1],3);V(e,e.dyn_ltree,t-1),V(e,e.dyn_dtree,r-1);}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),K(e,e.dyn_ltree,e.dyn_dtree)),W(e),n&&M(e);},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(A[r]+u+1)]++,e.dyn_dtree[2*N(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){P(e,2,3),L(e,m,z),function(e){16===e.bi_valid?(U(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8);}(e);};},{"../utils/common":41}],53:[function(e,t,r){t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0;};},{}],54:[function(e,t,r){(function(e){!function(r,n){if(!r.setImmediate){var i,s,t,a,o=1,h={},u=!1,l=r.document,e=Object.getPrototypeOf&&Object.getPrototypeOf(r);e=e&&e.setTimeout?e:r,i="[object process]"==={}.toString.call(r.process)?function(e){nextTick(function(){c(e);});}:function(){if(r.postMessage&&!r.importScripts){var e=!0,t=r.onmessage;return r.onmessage=function(){e=!1;},r.postMessage("","*"),r.onmessage=t,e}}()?(a="setImmediate$"+Math.random()+"$",r.addEventListener?r.addEventListener("message",d,!1):r.attachEvent("onmessage",d),function(e){r.postMessage(a+e,"*");}):r.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){c(e.data);},function(e){t.port2.postMessage(e);}):l&&"onreadystatechange"in l.createElement("script")?(s=l.documentElement,function(e){var t=l.createElement("script");t.onreadystatechange=function(){c(e),t.onreadystatechange=null,s.removeChild(t),t=null;},s.appendChild(t);}):function(e){setTimeout(c,0,e);},e.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var n={callback:e,args:t};return h[o]=n,i(o),o++},e.clearImmediate=f;}function f(e){delete h[e];}function c(e){if(u)setTimeout(c,0,e);else {var t=h[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r);}}(t);}finally{f(e),u=!1;}}}}function d(e){e.source===r&&"string"==typeof e.data&&0===e.data.indexOf(a)&&c(+e.data.slice(a.length));}}("undefined"==typeof self?void 0===e?this:e:self);}).call(this,"undefined"!=typeof global$1?global$1:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[10])(10)}); 
	} (jszip_min));
	return jszip_min.exports;
}

var jszip_minExports = requireJszip_min();
var JSZip = /*@__PURE__*/topojson.getDefaultExportFromCjs(jszip_minExports);

var jsYaml$1 = {};

var loader = {};

var common = {};

var hasRequiredCommon;

function requireCommon () {
	if (hasRequiredCommon) return common;
	hasRequiredCommon = 1;


	function isNothing(subject) {
	  return (typeof subject === 'undefined') || (subject === null);
	}


	function isObject(subject) {
	  return (typeof subject === 'object') && (subject !== null);
	}


	function toArray(sequence) {
	  if (Array.isArray(sequence)) return sequence;
	  else if (isNothing(sequence)) return [];

	  return [ sequence ];
	}


	function extend(target, source) {
	  var index, length, key, sourceKeys;

	  if (source) {
	    sourceKeys = Object.keys(source);

	    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
	      key = sourceKeys[index];
	      target[key] = source[key];
	    }
	  }

	  return target;
	}


	function repeat(string, count) {
	  var result = '', cycle;

	  for (cycle = 0; cycle < count; cycle += 1) {
	    result += string;
	  }

	  return result;
	}


	function isNegativeZero(number) {
	  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);
	}


	common.isNothing      = isNothing;
	common.isObject       = isObject;
	common.toArray        = toArray;
	common.repeat         = repeat;
	common.isNegativeZero = isNegativeZero;
	common.extend         = extend;
	return common;
}

var exception;
var hasRequiredException;

function requireException () {
	if (hasRequiredException) return exception;
	hasRequiredException = 1;

	function YAMLException(reason, mark) {
	  // Super constructor
	  Error.call(this);

	  // Include stack trace in error object
	  if (Error.captureStackTrace) {
	    // Chrome and NodeJS
	    Error.captureStackTrace(this, this.constructor);
	  } else {
	    // FF, IE 10+ and Safari 6+. Fallback for others
	    this.stack = (new Error()).stack || '';
	  }

	  this.name = 'YAMLException';
	  this.reason = reason;
	  this.mark = mark;
	  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : '');
	}


	// Inherit from Error
	YAMLException.prototype = Object.create(Error.prototype);
	YAMLException.prototype.constructor = YAMLException;


	YAMLException.prototype.toString = function toString(compact) {
	  var result = this.name + ': ';

	  result += this.reason || '(unknown reason)';

	  if (!compact && this.mark) {
	    result += ' ' + this.mark.toString();
	  }

	  return result;
	};


	exception = YAMLException;
	return exception;
}

var mark;
var hasRequiredMark;

function requireMark () {
	if (hasRequiredMark) return mark;
	hasRequiredMark = 1;


	var common = requireCommon();


	function Mark(name, buffer, position, line, column) {
	  this.name     = name;
	  this.buffer   = buffer;
	  this.position = position;
	  this.line     = line;
	  this.column   = column;
	}


	Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
	  var head, start, tail, end, snippet;

	  if (!this.buffer) return null;

	  indent = indent || 4;
	  maxLength = maxLength || 75;

	  head = '';
	  start = this.position;

	  while (start > 0 && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {
	    start -= 1;
	    if (this.position - start > (maxLength / 2 - 1)) {
	      head = ' ... ';
	      start += 5;
	      break;
	    }
	  }

	  tail = '';
	  end = this.position;

	  while (end < this.buffer.length && '\x00\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(end)) === -1) {
	    end += 1;
	    if (end - this.position > (maxLength / 2 - 1)) {
	      tail = ' ... ';
	      end -= 5;
	      break;
	    }
	  }

	  snippet = this.buffer.slice(start, end);

	  return common.repeat(' ', indent) + head + snippet + tail + '\n' +
	         common.repeat(' ', indent + this.position - start + head.length) + '^';
	};


	Mark.prototype.toString = function toString(compact) {
	  var snippet, where = '';

	  if (this.name) {
	    where += 'in "' + this.name + '" ';
	  }

	  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);

	  if (!compact) {
	    snippet = this.getSnippet();

	    if (snippet) {
	      where += ':\n' + snippet;
	    }
	  }

	  return where;
	};


	mark = Mark;
	return mark;
}

var type;
var hasRequiredType;

function requireType () {
	if (hasRequiredType) return type;
	hasRequiredType = 1;

	var YAMLException = requireException();

	var TYPE_CONSTRUCTOR_OPTIONS = [
	  'kind',
	  'resolve',
	  'construct',
	  'instanceOf',
	  'predicate',
	  'represent',
	  'defaultStyle',
	  'styleAliases'
	];

	var YAML_NODE_KINDS = [
	  'scalar',
	  'sequence',
	  'mapping'
	];

	function compileStyleAliases(map) {
	  var result = {};

	  if (map !== null) {
	    Object.keys(map).forEach(function (style) {
	      map[style].forEach(function (alias) {
	        result[String(alias)] = style;
	      });
	    });
	  }

	  return result;
	}

	function Type(tag, options) {
	  options = options || {};

	  Object.keys(options).forEach(function (name) {
	    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
	      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
	    }
	  });

	  // TODO: Add tag format check.
	  this.tag          = tag;
	  this.kind         = options['kind']         || null;
	  this.resolve      = options['resolve']      || function () { return true; };
	  this.construct    = options['construct']    || function (data) { return data; };
	  this.instanceOf   = options['instanceOf']   || null;
	  this.predicate    = options['predicate']    || null;
	  this.represent    = options['represent']    || null;
	  this.defaultStyle = options['defaultStyle'] || null;
	  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);

	  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
	    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
	  }
	}

	type = Type;
	return type;
}

var schema;
var hasRequiredSchema;

function requireSchema () {
	if (hasRequiredSchema) return schema;
	hasRequiredSchema = 1;

	/*eslint-disable max-len*/

	var common        = requireCommon();
	var YAMLException = requireException();
	var Type          = requireType();


	function compileList(schema, name, result) {
	  var exclude = [];

	  schema.include.forEach(function (includedSchema) {
	    result = compileList(includedSchema, name, result);
	  });

	  schema[name].forEach(function (currentType) {
	    result.forEach(function (previousType, previousIndex) {
	      if (previousType.tag === currentType.tag) {
	        exclude.push(previousIndex);
	      }
	    });

	    result.push(currentType);
	  });

	  return result.filter(function (type, index) {
	    return exclude.indexOf(index) === -1;
	  });
	}


	function compileMap(/* lists... */) {
	  var result = {}, index, length;

	  function collectType(type) {
	    result[type.tag] = type;
	  }

	  for (index = 0, length = arguments.length; index < length; index += 1) {
	    arguments[index].forEach(collectType);
	  }

	  return result;
	}


	function Schema(definition) {
	  this.include  = definition.include  || [];
	  this.implicit = definition.implicit || [];
	  this.explicit = definition.explicit || [];

	  this.implicit.forEach(function (type) {
	    if (type.loadKind && type.loadKind !== 'scalar') {
	      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
	    }
	  });

	  this.compiledImplicit = compileList(this, 'implicit', []);
	  this.compiledExplicit = compileList(this, 'explicit', []);
	  this.compiledTypeMap  = compileMap(this.compiledImplicit, this.compiledExplicit);
	}


	Schema.DEFAULT = null;


	Schema.create = function createSchema() {
	  var schemas, types;

	  switch (arguments.length) {
	    case 1:
	      schemas = Schema.DEFAULT;
	      types = arguments[0];
	      break;

	    case 2:
	      schemas = arguments[0];
	      types = arguments[1];
	      break;

	    default:
	      throw new YAMLException('Wrong number of arguments for Schema.create function');
	  }

	  schemas = common.toArray(schemas);
	  types = common.toArray(types);

	  if (!schemas.every(function (schema) { return schema instanceof Schema; })) {
	    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
	  }

	  if (!types.every(function (type) { return type instanceof Type; })) {
	    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
	  }

	  return new Schema({
	    include: schemas,
	    explicit: types
	  });
	};


	schema = Schema;
	return schema;
}

var str;
var hasRequiredStr;

function requireStr () {
	if (hasRequiredStr) return str;
	hasRequiredStr = 1;

	var Type = requireType();

	str = new Type('tag:yaml.org,2002:str', {
	  kind: 'scalar',
	  construct: function (data) { return data !== null ? data : ''; }
	});
	return str;
}

var seq;
var hasRequiredSeq;

function requireSeq () {
	if (hasRequiredSeq) return seq;
	hasRequiredSeq = 1;

	var Type = requireType();

	seq = new Type('tag:yaml.org,2002:seq', {
	  kind: 'sequence',
	  construct: function (data) { return data !== null ? data : []; }
	});
	return seq;
}

var map;
var hasRequiredMap;

function requireMap () {
	if (hasRequiredMap) return map;
	hasRequiredMap = 1;

	var Type = requireType();

	map = new Type('tag:yaml.org,2002:map', {
	  kind: 'mapping',
	  construct: function (data) { return data !== null ? data : {}; }
	});
	return map;
}

var failsafe;
var hasRequiredFailsafe;

function requireFailsafe () {
	if (hasRequiredFailsafe) return failsafe;
	hasRequiredFailsafe = 1;


	var Schema = requireSchema();


	failsafe = new Schema({
	  explicit: [
	    requireStr(),
	    requireSeq(),
	    requireMap()
	  ]
	});
	return failsafe;
}

var _null;
var hasRequired_null;

function require_null () {
	if (hasRequired_null) return _null;
	hasRequired_null = 1;

	var Type = requireType();

	function resolveYamlNull(data) {
	  if (data === null) return true;

	  var max = data.length;

	  return (max === 1 && data === '~') ||
	         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
	}

	function constructYamlNull() {
	  return null;
	}

	function isNull(object) {
	  return object === null;
	}

	_null = new Type('tag:yaml.org,2002:null', {
	  kind: 'scalar',
	  resolve: resolveYamlNull,
	  construct: constructYamlNull,
	  predicate: isNull,
	  represent: {
	    canonical: function () { return '~';    },
	    lowercase: function () { return 'null'; },
	    uppercase: function () { return 'NULL'; },
	    camelcase: function () { return 'Null'; }
	  },
	  defaultStyle: 'lowercase'
	});
	return _null;
}

var bool;
var hasRequiredBool;

function requireBool () {
	if (hasRequiredBool) return bool;
	hasRequiredBool = 1;

	var Type = requireType();

	function resolveYamlBoolean(data) {
	  if (data === null) return false;

	  var max = data.length;

	  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
	         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
	}

	function constructYamlBoolean(data) {
	  return data === 'true' ||
	         data === 'True' ||
	         data === 'TRUE';
	}

	function isBoolean(object) {
	  return Object.prototype.toString.call(object) === '[object Boolean]';
	}

	bool = new Type('tag:yaml.org,2002:bool', {
	  kind: 'scalar',
	  resolve: resolveYamlBoolean,
	  construct: constructYamlBoolean,
	  predicate: isBoolean,
	  represent: {
	    lowercase: function (object) { return object ? 'true' : 'false'; },
	    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
	    camelcase: function (object) { return object ? 'True' : 'False'; }
	  },
	  defaultStyle: 'lowercase'
	});
	return bool;
}

var int;
var hasRequiredInt;

function requireInt () {
	if (hasRequiredInt) return int;
	hasRequiredInt = 1;

	var common = requireCommon();
	var Type   = requireType();

	function isHexCode(c) {
	  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||
	         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||
	         ((0x61/* a */ <= c) && (c <= 0x66/* f */));
	}

	function isOctCode(c) {
	  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));
	}

	function isDecCode(c) {
	  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));
	}

	function resolveYamlInteger(data) {
	  if (data === null) return false;

	  var max = data.length,
	      index = 0,
	      hasDigits = false,
	      ch;

	  if (!max) return false;

	  ch = data[index];

	  // sign
	  if (ch === '-' || ch === '+') {
	    ch = data[++index];
	  }

	  if (ch === '0') {
	    // 0
	    if (index + 1 === max) return true;
	    ch = data[++index];

	    // base 2, base 8, base 16

	    if (ch === 'b') {
	      // base 2
	      index++;

	      for (; index < max; index++) {
	        ch = data[index];
	        if (ch === '_') continue;
	        if (ch !== '0' && ch !== '1') return false;
	        hasDigits = true;
	      }
	      return hasDigits;
	    }


	    if (ch === 'x') {
	      // base 16
	      index++;

	      for (; index < max; index++) {
	        ch = data[index];
	        if (ch === '_') continue;
	        if (!isHexCode(data.charCodeAt(index))) return false;
	        hasDigits = true;
	      }
	      return hasDigits;
	    }

	    // base 8
	    for (; index < max; index++) {
	      ch = data[index];
	      if (ch === '_') continue;
	      if (!isOctCode(data.charCodeAt(index))) return false;
	      hasDigits = true;
	    }
	    return hasDigits;
	  }

	  // base 10 (except 0) or base 60

	  for (; index < max; index++) {
	    ch = data[index];
	    if (ch === '_') continue;
	    if (ch === ':') break;
	    if (!isDecCode(data.charCodeAt(index))) {
	      return false;
	    }
	    hasDigits = true;
	  }

	  if (!hasDigits) return false;

	  // if !base60 - done;
	  if (ch !== ':') return true;

	  // base60 almost not used, no needs to optimize
	  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
	}

	function constructYamlInteger(data) {
	  var value = data, sign = 1, ch, base, digits = [];

	  if (value.indexOf('_') !== -1) {
	    value = value.replace(/_/g, '');
	  }

	  ch = value[0];

	  if (ch === '-' || ch === '+') {
	    if (ch === '-') sign = -1;
	    value = value.slice(1);
	    ch = value[0];
	  }

	  if (value === '0') return 0;

	  if (ch === '0') {
	    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
	    if (value[1] === 'x') return sign * parseInt(value, 16);
	    return sign * parseInt(value, 8);
	  }

	  if (value.indexOf(':') !== -1) {
	    value.split(':').forEach(function (v) {
	      digits.unshift(parseInt(v, 10));
	    });

	    value = 0;
	    base = 1;

	    digits.forEach(function (d) {
	      value += (d * base);
	      base *= 60;
	    });

	    return sign * value;

	  }

	  return sign * parseInt(value, 10);
	}

	function isInteger(object) {
	  return (Object.prototype.toString.call(object)) === '[object Number]' &&
	         (object % 1 === 0 && !common.isNegativeZero(object));
	}

	int = new Type('tag:yaml.org,2002:int', {
	  kind: 'scalar',
	  resolve: resolveYamlInteger,
	  construct: constructYamlInteger,
	  predicate: isInteger,
	  represent: {
	    binary:      function (object) { return '0b' + object.toString(2); },
	    octal:       function (object) { return '0'  + object.toString(8); },
	    decimal:     function (object) { return        object.toString(10); },
	    hexadecimal: function (object) { return '0x' + object.toString(16).toUpperCase(); }
	  },
	  defaultStyle: 'decimal',
	  styleAliases: {
	    binary:      [ 2,  'bin' ],
	    octal:       [ 8,  'oct' ],
	    decimal:     [ 10, 'dec' ],
	    hexadecimal: [ 16, 'hex' ]
	  }
	});
	return int;
}

var float;
var hasRequiredFloat;

function requireFloat () {
	if (hasRequiredFloat) return float;
	hasRequiredFloat = 1;

	var common = requireCommon();
	var Type   = requireType();

	var YAML_FLOAT_PATTERN = new RegExp(
	  '^(?:[-+]?(?:[0-9][0-9_]*)\\.[0-9_]*(?:[eE][-+][0-9]+)?' +
	  '|\\.[0-9_]+(?:[eE][-+][0-9]+)?' +
	  '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' +
	  '|[-+]?\\.(?:inf|Inf|INF)' +
	  '|\\.(?:nan|NaN|NAN))$');

	function resolveYamlFloat(data) {
	  if (data === null) return false;

	  if (!YAML_FLOAT_PATTERN.test(data)) return false;

	  return true;
	}

	function constructYamlFloat(data) {
	  var value, sign, base, digits;

	  value  = data.replace(/_/g, '').toLowerCase();
	  sign   = value[0] === '-' ? -1 : 1;
	  digits = [];

	  if ('+-'.indexOf(value[0]) >= 0) {
	    value = value.slice(1);
	  }

	  if (value === '.inf') {
	    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;

	  } else if (value === '.nan') {
	    return NaN;

	  } else if (value.indexOf(':') >= 0) {
	    value.split(':').forEach(function (v) {
	      digits.unshift(parseFloat(v, 10));
	    });

	    value = 0.0;
	    base = 1;

	    digits.forEach(function (d) {
	      value += d * base;
	      base *= 60;
	    });

	    return sign * value;

	  }
	  return sign * parseFloat(value, 10);
	}


	var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

	function representYamlFloat(object, style) {
	  var res;

	  if (isNaN(object)) {
	    switch (style) {
	      case 'lowercase': return '.nan';
	      case 'uppercase': return '.NAN';
	      case 'camelcase': return '.NaN';
	    }
	  } else if (Number.POSITIVE_INFINITY === object) {
	    switch (style) {
	      case 'lowercase': return '.inf';
	      case 'uppercase': return '.INF';
	      case 'camelcase': return '.Inf';
	    }
	  } else if (Number.NEGATIVE_INFINITY === object) {
	    switch (style) {
	      case 'lowercase': return '-.inf';
	      case 'uppercase': return '-.INF';
	      case 'camelcase': return '-.Inf';
	    }
	  } else if (common.isNegativeZero(object)) {
	    return '-0.0';
	  }

	  res = object.toString(10);

	  // JS stringifier can build scientific format without dots: 5e-100,
	  // while YAML requres dot: 5.e-100. Fix it with simple hack

	  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
	}

	function isFloat(object) {
	  return (Object.prototype.toString.call(object) === '[object Number]') &&
	         (object % 1 !== 0 || common.isNegativeZero(object));
	}

	float = new Type('tag:yaml.org,2002:float', {
	  kind: 'scalar',
	  resolve: resolveYamlFloat,
	  construct: constructYamlFloat,
	  predicate: isFloat,
	  represent: representYamlFloat,
	  defaultStyle: 'lowercase'
	});
	return float;
}

var json;
var hasRequiredJson;

function requireJson () {
	if (hasRequiredJson) return json;
	hasRequiredJson = 1;


	var Schema = requireSchema();


	json = new Schema({
	  include: [
	    requireFailsafe()
	  ],
	  implicit: [
	    require_null(),
	    requireBool(),
	    requireInt(),
	    requireFloat()
	  ]
	});
	return json;
}

var core;
var hasRequiredCore;

function requireCore () {
	if (hasRequiredCore) return core;
	hasRequiredCore = 1;


	var Schema = requireSchema();


	core = new Schema({
	  include: [
	    requireJson()
	  ]
	});
	return core;
}

var timestamp;
var hasRequiredTimestamp;

function requireTimestamp () {
	if (hasRequiredTimestamp) return timestamp;
	hasRequiredTimestamp = 1;

	var Type = requireType();

	var YAML_TIMESTAMP_REGEXP = new RegExp(
	  '^([0-9][0-9][0-9][0-9])'          + // [1] year
	  '-([0-9][0-9]?)'                   + // [2] month
	  '-([0-9][0-9]?)'                   + // [3] day
	  '(?:(?:[Tt]|[ \\t]+)'              + // ...
	  '([0-9][0-9]?)'                    + // [4] hour
	  ':([0-9][0-9])'                    + // [5] minute
	  ':([0-9][0-9])'                    + // [6] second
	  '(?:\\.([0-9]*))?'                 + // [7] fraction
	  '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
	  '(?::([0-9][0-9]))?))?)?$');         // [11] tz_minute

	function resolveYamlTimestamp(data) {
	  if (data === null) return false;
	  if (YAML_TIMESTAMP_REGEXP.exec(data) === null) return false;
	  return true;
	}

	function constructYamlTimestamp(data) {
	  var match, year, month, day, hour, minute, second, fraction = 0,
	      delta = null, tz_hour, tz_minute, date;

	  match = YAML_TIMESTAMP_REGEXP.exec(data);

	  if (match === null) throw new Error('Date resolve error');

	  // match: [1] year [2] month [3] day

	  year = +(match[1]);
	  month = +(match[2]) - 1; // JS month starts with 0
	  day = +(match[3]);

	  if (!match[4]) { // no hour
	    return new Date(Date.UTC(year, month, day));
	  }

	  // match: [4] hour [5] minute [6] second [7] fraction

	  hour = +(match[4]);
	  minute = +(match[5]);
	  second = +(match[6]);

	  if (match[7]) {
	    fraction = match[7].slice(0, 3);
	    while (fraction.length < 3) { // milli-seconds
	      fraction += '0';
	    }
	    fraction = +fraction;
	  }

	  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

	  if (match[9]) {
	    tz_hour = +(match[10]);
	    tz_minute = +(match[11] || 0);
	    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
	    if (match[9] === '-') delta = -delta;
	  }

	  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

	  if (delta) date.setTime(date.getTime() - delta);

	  return date;
	}

	function representYamlTimestamp(object /*, style*/) {
	  return object.toISOString();
	}

	timestamp = new Type('tag:yaml.org,2002:timestamp', {
	  kind: 'scalar',
	  resolve: resolveYamlTimestamp,
	  construct: constructYamlTimestamp,
	  instanceOf: Date,
	  represent: representYamlTimestamp
	});
	return timestamp;
}

var merge;
var hasRequiredMerge;

function requireMerge () {
	if (hasRequiredMerge) return merge;
	hasRequiredMerge = 1;

	var Type = requireType();

	function resolveYamlMerge(data) {
	  return data === '<<' || data === null;
	}

	merge = new Type('tag:yaml.org,2002:merge', {
	  kind: 'scalar',
	  resolve: resolveYamlMerge
	});
	return merge;
}

var require$$0 = /*@__PURE__*/topojson.getAugmentedNamespace(bufferEs6);

var binary;
var hasRequiredBinary;

function requireBinary () {
	if (hasRequiredBinary) return binary;
	hasRequiredBinary = 1;

	/*eslint-disable no-bitwise*/

	// A trick for browserified version.
	// Since we make browserifier to ignore `buffer` module, NodeBuffer will be undefined
	var NodeBuffer = require$$0.Buffer;
	var Type       = requireType();


	// [ 64, 65, 66 ] -> [ padding, CR, LF ]
	var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';


	function resolveYamlBinary(data) {
	  if (data === null) return false;

	  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;

	  // Convert one by one.
	  for (idx = 0; idx < max; idx++) {
	    code = map.indexOf(data.charAt(idx));

	    // Skip CR/LF
	    if (code > 64) continue;

	    // Fail on illegal characters
	    if (code < 0) return false;

	    bitlen += 6;
	  }

	  // If there are any bits left, source was corrupted
	  return (bitlen % 8) === 0;
	}

	function constructYamlBinary(data) {
	  var idx, tailbits,
	      input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
	      max = input.length,
	      map = BASE64_MAP,
	      bits = 0,
	      result = [];

	  // Collect by 6*4 bits (3 bytes)

	  for (idx = 0; idx < max; idx++) {
	    if ((idx % 4 === 0) && idx) {
	      result.push((bits >> 16) & 0xFF);
	      result.push((bits >> 8) & 0xFF);
	      result.push(bits & 0xFF);
	    }

	    bits = (bits << 6) | map.indexOf(input.charAt(idx));
	  }

	  // Dump tail

	  tailbits = (max % 4) * 6;

	  if (tailbits === 0) {
	    result.push((bits >> 16) & 0xFF);
	    result.push((bits >> 8) & 0xFF);
	    result.push(bits & 0xFF);
	  } else if (tailbits === 18) {
	    result.push((bits >> 10) & 0xFF);
	    result.push((bits >> 2) & 0xFF);
	  } else if (tailbits === 12) {
	    result.push((bits >> 4) & 0xFF);
	  }

	  // Wrap into Buffer for NodeJS and leave Array for browser
	  if (NodeBuffer) return new NodeBuffer(result);

	  return result;
	}

	function representYamlBinary(object /*, style*/) {
	  var result = '', bits = 0, idx, tail,
	      max = object.length,
	      map = BASE64_MAP;

	  // Convert every three bytes to 4 ASCII characters.

	  for (idx = 0; idx < max; idx++) {
	    if ((idx % 3 === 0) && idx) {
	      result += map[(bits >> 18) & 0x3F];
	      result += map[(bits >> 12) & 0x3F];
	      result += map[(bits >> 6) & 0x3F];
	      result += map[bits & 0x3F];
	    }

	    bits = (bits << 8) + object[idx];
	  }

	  // Dump tail

	  tail = max % 3;

	  if (tail === 0) {
	    result += map[(bits >> 18) & 0x3F];
	    result += map[(bits >> 12) & 0x3F];
	    result += map[(bits >> 6) & 0x3F];
	    result += map[bits & 0x3F];
	  } else if (tail === 2) {
	    result += map[(bits >> 10) & 0x3F];
	    result += map[(bits >> 4) & 0x3F];
	    result += map[(bits << 2) & 0x3F];
	    result += map[64];
	  } else if (tail === 1) {
	    result += map[(bits >> 2) & 0x3F];
	    result += map[(bits << 4) & 0x3F];
	    result += map[64];
	    result += map[64];
	  }

	  return result;
	}

	function isBinary(object) {
	  return NodeBuffer && NodeBuffer.isBuffer(object);
	}

	binary = new Type('tag:yaml.org,2002:binary', {
	  kind: 'scalar',
	  resolve: resolveYamlBinary,
	  construct: constructYamlBinary,
	  predicate: isBinary,
	  represent: representYamlBinary
	});
	return binary;
}

var omap;
var hasRequiredOmap;

function requireOmap () {
	if (hasRequiredOmap) return omap;
	hasRequiredOmap = 1;

	var Type = requireType();

	var _hasOwnProperty = Object.prototype.hasOwnProperty;
	var _toString       = Object.prototype.toString;

	function resolveYamlOmap(data) {
	  if (data === null) return true;

	  var objectKeys = [], index, length, pair, pairKey, pairHasKey,
	      object = data;

	  for (index = 0, length = object.length; index < length; index += 1) {
	    pair = object[index];
	    pairHasKey = false;

	    if (_toString.call(pair) !== '[object Object]') return false;

	    for (pairKey in pair) {
	      if (_hasOwnProperty.call(pair, pairKey)) {
	        if (!pairHasKey) pairHasKey = true;
	        else return false;
	      }
	    }

	    if (!pairHasKey) return false;

	    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
	    else return false;
	  }

	  return true;
	}

	function constructYamlOmap(data) {
	  return data !== null ? data : [];
	}

	omap = new Type('tag:yaml.org,2002:omap', {
	  kind: 'sequence',
	  resolve: resolveYamlOmap,
	  construct: constructYamlOmap
	});
	return omap;
}

var pairs;
var hasRequiredPairs;

function requirePairs () {
	if (hasRequiredPairs) return pairs;
	hasRequiredPairs = 1;

	var Type = requireType();

	var _toString = Object.prototype.toString;

	function resolveYamlPairs(data) {
	  if (data === null) return true;

	  var index, length, pair, keys, result,
	      object = data;

	  result = new Array(object.length);

	  for (index = 0, length = object.length; index < length; index += 1) {
	    pair = object[index];

	    if (_toString.call(pair) !== '[object Object]') return false;

	    keys = Object.keys(pair);

	    if (keys.length !== 1) return false;

	    result[index] = [ keys[0], pair[keys[0]] ];
	  }

	  return true;
	}

	function constructYamlPairs(data) {
	  if (data === null) return [];

	  var index, length, pair, keys, result,
	      object = data;

	  result = new Array(object.length);

	  for (index = 0, length = object.length; index < length; index += 1) {
	    pair = object[index];

	    keys = Object.keys(pair);

	    result[index] = [ keys[0], pair[keys[0]] ];
	  }

	  return result;
	}

	pairs = new Type('tag:yaml.org,2002:pairs', {
	  kind: 'sequence',
	  resolve: resolveYamlPairs,
	  construct: constructYamlPairs
	});
	return pairs;
}

var set;
var hasRequiredSet;

function requireSet () {
	if (hasRequiredSet) return set;
	hasRequiredSet = 1;

	var Type = requireType();

	var _hasOwnProperty = Object.prototype.hasOwnProperty;

	function resolveYamlSet(data) {
	  if (data === null) return true;

	  var key, object = data;

	  for (key in object) {
	    if (_hasOwnProperty.call(object, key)) {
	      if (object[key] !== null) return false;
	    }
	  }

	  return true;
	}

	function constructYamlSet(data) {
	  return data !== null ? data : {};
	}

	set = new Type('tag:yaml.org,2002:set', {
	  kind: 'mapping',
	  resolve: resolveYamlSet,
	  construct: constructYamlSet
	});
	return set;
}

var default_safe;
var hasRequiredDefault_safe;

function requireDefault_safe () {
	if (hasRequiredDefault_safe) return default_safe;
	hasRequiredDefault_safe = 1;


	var Schema = requireSchema();


	default_safe = new Schema({
	  include: [
	    requireCore()
	  ],
	  implicit: [
	    requireTimestamp(),
	    requireMerge()
	  ],
	  explicit: [
	    requireBinary(),
	    requireOmap(),
	    requirePairs(),
	    requireSet()
	  ]
	});
	return default_safe;
}

var _undefined;
var hasRequired_undefined;

function require_undefined () {
	if (hasRequired_undefined) return _undefined;
	hasRequired_undefined = 1;

	var Type = requireType();

	function resolveJavascriptUndefined() {
	  return true;
	}

	function constructJavascriptUndefined() {
	  /*eslint-disable no-undefined*/
	  return undefined;
	}

	function representJavascriptUndefined() {
	  return '';
	}

	function isUndefined(object) {
	  return typeof object === 'undefined';
	}

	_undefined = new Type('tag:yaml.org,2002:js/undefined', {
	  kind: 'scalar',
	  resolve: resolveJavascriptUndefined,
	  construct: constructJavascriptUndefined,
	  predicate: isUndefined,
	  represent: representJavascriptUndefined
	});
	return _undefined;
}

var regexp;
var hasRequiredRegexp;

function requireRegexp () {
	if (hasRequiredRegexp) return regexp;
	hasRequiredRegexp = 1;

	var Type = requireType();

	function resolveJavascriptRegExp(data) {
	  if (data === null) return false;
	  if (data.length === 0) return false;

	  var regexp = data,
	      tail   = /\/([gim]*)$/.exec(data),
	      modifiers = '';

	  // if regexp starts with '/' it can have modifiers and must be properly closed
	  // `/foo/gim` - modifiers tail can be maximum 3 chars
	  if (regexp[0] === '/') {
	    if (tail) modifiers = tail[1];

	    if (modifiers.length > 3) return false;
	    // if expression starts with /, is should be properly terminated
	    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;
	  }

	  return true;
	}

	function constructJavascriptRegExp(data) {
	  var regexp = data,
	      tail   = /\/([gim]*)$/.exec(data),
	      modifiers = '';

	  // `/foo/gim` - tail can be maximum 4 chars
	  if (regexp[0] === '/') {
	    if (tail) modifiers = tail[1];
	    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
	  }

	  return new RegExp(regexp, modifiers);
	}

	function representJavascriptRegExp(object /*, style*/) {
	  var result = '/' + object.source + '/';

	  if (object.global) result += 'g';
	  if (object.multiline) result += 'm';
	  if (object.ignoreCase) result += 'i';

	  return result;
	}

	function isRegExp(object) {
	  return Object.prototype.toString.call(object) === '[object RegExp]';
	}

	regexp = new Type('tag:yaml.org,2002:js/regexp', {
	  kind: 'scalar',
	  resolve: resolveJavascriptRegExp,
	  construct: constructJavascriptRegExp,
	  predicate: isRegExp,
	  represent: representJavascriptRegExp
	});
	return regexp;
}

var _function;
var hasRequired_function;

function require_function () {
	if (hasRequired_function) return _function;
	hasRequired_function = 1;

	var esprima;

	// Browserified version does not have esprima
	//
	// 1. For node.js just require module as deps
	// 2. For browser try to require mudule via external AMD system.
	//    If not found - try to fallback to window.esprima. If not
	//    found too - then fail to parse.
	//
	try {
	  // workaround to exclude package from browserify list.
	  var _require = commonjsRequire;
	  esprima = _require('esprima');
	} catch (_) {
	  /*global window */
	  if (typeof window !== 'undefined') esprima = window.esprima;
	}

	var Type = requireType();

	function resolveJavascriptFunction(data) {
	  if (data === null) return false;

	  try {
	    var source = '(' + data + ')',
	        ast    = esprima.parse(source, { range: true });

	    if (ast.type                    !== 'Program'             ||
	        ast.body.length             !== 1                     ||
	        ast.body[0].type            !== 'ExpressionStatement' ||
	        ast.body[0].expression.type !== 'FunctionExpression') {
	      return false;
	    }

	    return true;
	  } catch (err) {
	    return false;
	  }
	}

	function constructJavascriptFunction(data) {
	  /*jslint evil:true*/

	  var source = '(' + data + ')',
	      ast    = esprima.parse(source, { range: true }),
	      params = [],
	      body;

	  if (ast.type                    !== 'Program'             ||
	      ast.body.length             !== 1                     ||
	      ast.body[0].type            !== 'ExpressionStatement' ||
	      ast.body[0].expression.type !== 'FunctionExpression') {
	    throw new Error('Failed to resolve function');
	  }

	  ast.body[0].expression.params.forEach(function (param) {
	    params.push(param.name);
	  });

	  body = ast.body[0].expression.body.range;

	  // Esprima's ranges include the first '{' and the last '}' characters on
	  // function expressions. So cut them out.
	  /*eslint-disable no-new-func*/
	  return new Function(params, source.slice(body[0] + 1, body[1] - 1));
	}

	function representJavascriptFunction(object /*, style*/) {
	  return object.toString();
	}

	function isFunction(object) {
	  return Object.prototype.toString.call(object) === '[object Function]';
	}

	_function = new Type('tag:yaml.org,2002:js/function', {
	  kind: 'scalar',
	  resolve: resolveJavascriptFunction,
	  construct: constructJavascriptFunction,
	  predicate: isFunction,
	  represent: representJavascriptFunction
	});
	return _function;
}

var default_full;
var hasRequiredDefault_full;

function requireDefault_full () {
	if (hasRequiredDefault_full) return default_full;
	hasRequiredDefault_full = 1;


	var Schema = requireSchema();


	default_full = Schema.DEFAULT = new Schema({
	  include: [
	    requireDefault_safe()
	  ],
	  explicit: [
	    require_undefined(),
	    requireRegexp(),
	    require_function()
	  ]
	});
	return default_full;
}

var hasRequiredLoader;

function requireLoader () {
	if (hasRequiredLoader) return loader;
	hasRequiredLoader = 1;

	/*eslint-disable max-len,no-use-before-define*/

	var common              = requireCommon();
	var YAMLException       = requireException();
	var Mark                = requireMark();
	var DEFAULT_SAFE_SCHEMA = requireDefault_safe();
	var DEFAULT_FULL_SCHEMA = requireDefault_full();


	var _hasOwnProperty = Object.prototype.hasOwnProperty;


	var CONTEXT_FLOW_IN   = 1;
	var CONTEXT_FLOW_OUT  = 2;
	var CONTEXT_BLOCK_IN  = 3;
	var CONTEXT_BLOCK_OUT = 4;


	var CHOMPING_CLIP  = 1;
	var CHOMPING_STRIP = 2;
	var CHOMPING_KEEP  = 3;


	var PATTERN_NON_PRINTABLE         = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
	var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
	var PATTERN_FLOW_INDICATORS       = /[,\[\]\{\}]/;
	var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\-]+!)$/i;
	var PATTERN_TAG_URI               = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;


	function is_EOL(c) {
	  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);
	}

	function is_WHITE_SPACE(c) {
	  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);
	}

	function is_WS_OR_EOL(c) {
	  return (c === 0x09/* Tab */) ||
	         (c === 0x20/* Space */) ||
	         (c === 0x0A/* LF */) ||
	         (c === 0x0D/* CR */);
	}

	function is_FLOW_INDICATOR(c) {
	  return c === 0x2C/* , */ ||
	         c === 0x5B/* [ */ ||
	         c === 0x5D/* ] */ ||
	         c === 0x7B/* { */ ||
	         c === 0x7D/* } */;
	}

	function fromHexCode(c) {
	  var lc;

	  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
	    return c - 0x30;
	  }

	  /*eslint-disable no-bitwise*/
	  lc = c | 0x20;

	  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {
	    return lc - 0x61 + 10;
	  }

	  return -1;
	}

	function escapedHexLen(c) {
	  if (c === 0x78/* x */) { return 2; }
	  if (c === 0x75/* u */) { return 4; }
	  if (c === 0x55/* U */) { return 8; }
	  return 0;
	}

	function fromDecimalCode(c) {
	  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
	    return c - 0x30;
	  }

	  return -1;
	}

	function simpleEscapeSequence(c) {
	  return (c === 0x30/* 0 */) ? '\x00' :
	        (c === 0x61/* a */) ? '\x07' :
	        (c === 0x62/* b */) ? '\x08' :
	        (c === 0x74/* t */) ? '\x09' :
	        (c === 0x09/* Tab */) ? '\x09' :
	        (c === 0x6E/* n */) ? '\x0A' :
	        (c === 0x76/* v */) ? '\x0B' :
	        (c === 0x66/* f */) ? '\x0C' :
	        (c === 0x72/* r */) ? '\x0D' :
	        (c === 0x65/* e */) ? '\x1B' :
	        (c === 0x20/* Space */) ? ' ' :
	        (c === 0x22/* " */) ? '\x22' :
	        (c === 0x2F/* / */) ? '/' :
	        (c === 0x5C/* \ */) ? '\x5C' :
	        (c === 0x4E/* N */) ? '\x85' :
	        (c === 0x5F/* _ */) ? '\xA0' :
	        (c === 0x4C/* L */) ? '\u2028' :
	        (c === 0x50/* P */) ? '\u2029' : '';
	}

	function charFromCodepoint(c) {
	  if (c <= 0xFFFF) {
	    return String.fromCharCode(c);
	  }
	  // Encode UTF-16 surrogate pair
	  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
	  return String.fromCharCode(((c - 0x010000) >> 10) + 0xD800,
	                             ((c - 0x010000) & 0x03FF) + 0xDC00);
	}

	var simpleEscapeCheck = new Array(256); // integer, for fast access
	var simpleEscapeMap = new Array(256);
	for (var i = 0; i < 256; i++) {
	  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
	  simpleEscapeMap[i] = simpleEscapeSequence(i);
	}


	function State(input, options) {
	  this.input = input;

	  this.filename  = options['filename']  || null;
	  this.schema    = options['schema']    || DEFAULT_FULL_SCHEMA;
	  this.onWarning = options['onWarning'] || null;
	  this.legacy    = options['legacy']    || false;
	  this.json      = options['json']      || false;
	  this.listener  = options['listener']  || null;

	  this.implicitTypes = this.schema.compiledImplicit;
	  this.typeMap       = this.schema.compiledTypeMap;

	  this.length     = input.length;
	  this.position   = 0;
	  this.line       = 0;
	  this.lineStart  = 0;
	  this.lineIndent = 0;

	  this.documents = [];

	  /*
	  this.version;
	  this.checkLineBreaks;
	  this.tagMap;
	  this.anchorMap;
	  this.tag;
	  this.anchor;
	  this.kind;
	  this.result;*/

	}


	function generateError(state, message) {
	  return new YAMLException(
	    message,
	    new Mark(state.filename, state.input, state.position, state.line, (state.position - state.lineStart)));
	}

	function throwError(state, message) {
	  throw generateError(state, message);
	}

	function throwWarning(state, message) {
	  if (state.onWarning) {
	    state.onWarning.call(null, generateError(state, message));
	  }
	}


	var directiveHandlers = {

	  YAML: function handleYamlDirective(state, name, args) {

	    var match, major, minor;

	    if (state.version !== null) {
	      throwError(state, 'duplication of %YAML directive');
	    }

	    if (args.length !== 1) {
	      throwError(state, 'YAML directive accepts exactly one argument');
	    }

	    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

	    if (match === null) {
	      throwError(state, 'ill-formed argument of the YAML directive');
	    }

	    major = parseInt(match[1], 10);
	    minor = parseInt(match[2], 10);

	    if (major !== 1) {
	      throwError(state, 'unacceptable YAML version of the document');
	    }

	    state.version = args[0];
	    state.checkLineBreaks = (minor < 2);

	    if (minor !== 1 && minor !== 2) {
	      throwWarning(state, 'unsupported YAML version of the document');
	    }
	  },

	  TAG: function handleTagDirective(state, name, args) {

	    var handle, prefix;

	    if (args.length !== 2) {
	      throwError(state, 'TAG directive accepts exactly two arguments');
	    }

	    handle = args[0];
	    prefix = args[1];

	    if (!PATTERN_TAG_HANDLE.test(handle)) {
	      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
	    }

	    if (_hasOwnProperty.call(state.tagMap, handle)) {
	      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
	    }

	    if (!PATTERN_TAG_URI.test(prefix)) {
	      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
	    }

	    state.tagMap[handle] = prefix;
	  }
	};


	function captureSegment(state, start, end, checkJson) {
	  var _position, _length, _character, _result;

	  if (start < end) {
	    _result = state.input.slice(start, end);

	    if (checkJson) {
	      for (_position = 0, _length = _result.length;
	           _position < _length;
	           _position += 1) {
	        _character = _result.charCodeAt(_position);
	        if (!(_character === 0x09 ||
	              (0x20 <= _character && _character <= 0x10FFFF))) {
	          throwError(state, 'expected valid JSON character');
	        }
	      }
	    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
	      throwError(state, 'the stream contains non-printable characters');
	    }

	    state.result += _result;
	  }
	}

	function mergeMappings(state, destination, source, overridableKeys) {
	  var sourceKeys, key, index, quantity;

	  if (!common.isObject(source)) {
	    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
	  }

	  sourceKeys = Object.keys(source);

	  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
	    key = sourceKeys[index];

	    if (!_hasOwnProperty.call(destination, key)) {
	      destination[key] = source[key];
	      overridableKeys[key] = true;
	    }
	  }
	}

	function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode) {
	  var index, quantity;

	  keyNode = String(keyNode);

	  if (_result === null) {
	    _result = {};
	  }

	  if (keyTag === 'tag:yaml.org,2002:merge') {
	    if (Array.isArray(valueNode)) {
	      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
	        mergeMappings(state, _result, valueNode[index], overridableKeys);
	      }
	    } else {
	      mergeMappings(state, _result, valueNode, overridableKeys);
	    }
	  } else {
	    if (!state.json &&
	        !_hasOwnProperty.call(overridableKeys, keyNode) &&
	        _hasOwnProperty.call(_result, keyNode)) {
	      throwError(state, 'duplicated mapping key');
	    }
	    _result[keyNode] = valueNode;
	    delete overridableKeys[keyNode];
	  }

	  return _result;
	}

	function readLineBreak(state) {
	  var ch;

	  ch = state.input.charCodeAt(state.position);

	  if (ch === 0x0A/* LF */) {
	    state.position++;
	  } else if (ch === 0x0D/* CR */) {
	    state.position++;
	    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {
	      state.position++;
	    }
	  } else {
	    throwError(state, 'a line break is expected');
	  }

	  state.line += 1;
	  state.lineStart = state.position;
	}

	function skipSeparationSpace(state, allowComments, checkIndent) {
	  var lineBreaks = 0,
	      ch = state.input.charCodeAt(state.position);

	  while (ch !== 0) {
	    while (is_WHITE_SPACE(ch)) {
	      ch = state.input.charCodeAt(++state.position);
	    }

	    if (allowComments && ch === 0x23/* # */) {
	      do {
	        ch = state.input.charCodeAt(++state.position);
	      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);
	    }

	    if (is_EOL(ch)) {
	      readLineBreak(state);

	      ch = state.input.charCodeAt(state.position);
	      lineBreaks++;
	      state.lineIndent = 0;

	      while (ch === 0x20/* Space */) {
	        state.lineIndent++;
	        ch = state.input.charCodeAt(++state.position);
	      }
	    } else {
	      break;
	    }
	  }

	  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
	    throwWarning(state, 'deficient indentation');
	  }

	  return lineBreaks;
	}

	function testDocumentSeparator(state) {
	  var _position = state.position,
	      ch;

	  ch = state.input.charCodeAt(_position);

	  // Condition state.position === state.lineStart is tested
	  // in parent on each call, for efficiency. No needs to test here again.
	  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&
	      ch === state.input.charCodeAt(_position + 1) &&
	      ch === state.input.charCodeAt(_position + 2)) {

	    _position += 3;

	    ch = state.input.charCodeAt(_position);

	    if (ch === 0 || is_WS_OR_EOL(ch)) {
	      return true;
	    }
	  }

	  return false;
	}

	function writeFoldedLines(state, count) {
	  if (count === 1) {
	    state.result += ' ';
	  } else if (count > 1) {
	    state.result += common.repeat('\n', count - 1);
	  }
	}


	function readPlainScalar(state, nodeIndent, withinFlowCollection) {
	  var preceding,
	      following,
	      captureStart,
	      captureEnd,
	      hasPendingContent,
	      _line,
	      _lineStart,
	      _lineIndent,
	      _kind = state.kind,
	      _result = state.result,
	      ch;

	  ch = state.input.charCodeAt(state.position);

	  if (is_WS_OR_EOL(ch)      ||
	      is_FLOW_INDICATOR(ch) ||
	      ch === 0x23/* # */    ||
	      ch === 0x26/* & */    ||
	      ch === 0x2A/* * */    ||
	      ch === 0x21/* ! */    ||
	      ch === 0x7C/* | */    ||
	      ch === 0x3E/* > */    ||
	      ch === 0x27/* ' */    ||
	      ch === 0x22/* " */    ||
	      ch === 0x25/* % */    ||
	      ch === 0x40/* @ */    ||
	      ch === 0x60/* ` */) {
	    return false;
	  }

	  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {
	    following = state.input.charCodeAt(state.position + 1);

	    if (is_WS_OR_EOL(following) ||
	        withinFlowCollection && is_FLOW_INDICATOR(following)) {
	      return false;
	    }
	  }

	  state.kind = 'scalar';
	  state.result = '';
	  captureStart = captureEnd = state.position;
	  hasPendingContent = false;

	  while (ch !== 0) {
	    if (ch === 0x3A/* : */) {
	      following = state.input.charCodeAt(state.position + 1);

	      if (is_WS_OR_EOL(following) ||
	          withinFlowCollection && is_FLOW_INDICATOR(following)) {
	        break;
	      }

	    } else if (ch === 0x23/* # */) {
	      preceding = state.input.charCodeAt(state.position - 1);

	      if (is_WS_OR_EOL(preceding)) {
	        break;
	      }

	    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
	               withinFlowCollection && is_FLOW_INDICATOR(ch)) {
	      break;

	    } else if (is_EOL(ch)) {
	      _line = state.line;
	      _lineStart = state.lineStart;
	      _lineIndent = state.lineIndent;
	      skipSeparationSpace(state, false, -1);

	      if (state.lineIndent >= nodeIndent) {
	        hasPendingContent = true;
	        ch = state.input.charCodeAt(state.position);
	        continue;
	      } else {
	        state.position = captureEnd;
	        state.line = _line;
	        state.lineStart = _lineStart;
	        state.lineIndent = _lineIndent;
	        break;
	      }
	    }

	    if (hasPendingContent) {
	      captureSegment(state, captureStart, captureEnd, false);
	      writeFoldedLines(state, state.line - _line);
	      captureStart = captureEnd = state.position;
	      hasPendingContent = false;
	    }

	    if (!is_WHITE_SPACE(ch)) {
	      captureEnd = state.position + 1;
	    }

	    ch = state.input.charCodeAt(++state.position);
	  }

	  captureSegment(state, captureStart, captureEnd, false);

	  if (state.result) {
	    return true;
	  }

	  state.kind = _kind;
	  state.result = _result;
	  return false;
	}

	function readSingleQuotedScalar(state, nodeIndent) {
	  var ch,
	      captureStart, captureEnd;

	  ch = state.input.charCodeAt(state.position);

	  if (ch !== 0x27/* ' */) {
	    return false;
	  }

	  state.kind = 'scalar';
	  state.result = '';
	  state.position++;
	  captureStart = captureEnd = state.position;

	  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
	    if (ch === 0x27/* ' */) {
	      captureSegment(state, captureStart, state.position, true);
	      ch = state.input.charCodeAt(++state.position);

	      if (ch === 0x27/* ' */) {
	        captureStart = captureEnd = state.position;
	        state.position++;
	      } else {
	        return true;
	      }

	    } else if (is_EOL(ch)) {
	      captureSegment(state, captureStart, captureEnd, true);
	      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
	      captureStart = captureEnd = state.position;

	    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
	      throwError(state, 'unexpected end of the document within a single quoted scalar');

	    } else {
	      state.position++;
	      captureEnd = state.position;
	    }
	  }

	  throwError(state, 'unexpected end of the stream within a single quoted scalar');
	}

	function readDoubleQuotedScalar(state, nodeIndent) {
	  var captureStart,
	      captureEnd,
	      hexLength,
	      hexResult,
	      tmp,
	      ch;

	  ch = state.input.charCodeAt(state.position);

	  if (ch !== 0x22/* " */) {
	    return false;
	  }

	  state.kind = 'scalar';
	  state.result = '';
	  state.position++;
	  captureStart = captureEnd = state.position;

	  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
	    if (ch === 0x22/* " */) {
	      captureSegment(state, captureStart, state.position, true);
	      state.position++;
	      return true;

	    } else if (ch === 0x5C/* \ */) {
	      captureSegment(state, captureStart, state.position, true);
	      ch = state.input.charCodeAt(++state.position);

	      if (is_EOL(ch)) {
	        skipSeparationSpace(state, false, nodeIndent);

	        // TODO: rework to inline fn with no type cast?
	      } else if (ch < 256 && simpleEscapeCheck[ch]) {
	        state.result += simpleEscapeMap[ch];
	        state.position++;

	      } else if ((tmp = escapedHexLen(ch)) > 0) {
	        hexLength = tmp;
	        hexResult = 0;

	        for (; hexLength > 0; hexLength--) {
	          ch = state.input.charCodeAt(++state.position);

	          if ((tmp = fromHexCode(ch)) >= 0) {
	            hexResult = (hexResult << 4) + tmp;

	          } else {
	            throwError(state, 'expected hexadecimal character');
	          }
	        }

	        state.result += charFromCodepoint(hexResult);

	        state.position++;

	      } else {
	        throwError(state, 'unknown escape sequence');
	      }

	      captureStart = captureEnd = state.position;

	    } else if (is_EOL(ch)) {
	      captureSegment(state, captureStart, captureEnd, true);
	      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
	      captureStart = captureEnd = state.position;

	    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
	      throwError(state, 'unexpected end of the document within a double quoted scalar');

	    } else {
	      state.position++;
	      captureEnd = state.position;
	    }
	  }

	  throwError(state, 'unexpected end of the stream within a double quoted scalar');
	}

	function readFlowCollection(state, nodeIndent) {
	  var readNext = true,
	      _line,
	      _tag     = state.tag,
	      _result,
	      _anchor  = state.anchor,
	      following,
	      terminator,
	      isPair,
	      isExplicitPair,
	      isMapping,
	      overridableKeys = {},
	      keyNode,
	      keyTag,
	      valueNode,
	      ch;

	  ch = state.input.charCodeAt(state.position);

	  if (ch === 0x5B/* [ */) {
	    terminator = 0x5D;/* ] */
	    isMapping = false;
	    _result = [];
	  } else if (ch === 0x7B/* { */) {
	    terminator = 0x7D;/* } */
	    isMapping = true;
	    _result = {};
	  } else {
	    return false;
	  }

	  if (state.anchor !== null) {
	    state.anchorMap[state.anchor] = _result;
	  }

	  ch = state.input.charCodeAt(++state.position);

	  while (ch !== 0) {
	    skipSeparationSpace(state, true, nodeIndent);

	    ch = state.input.charCodeAt(state.position);

	    if (ch === terminator) {
	      state.position++;
	      state.tag = _tag;
	      state.anchor = _anchor;
	      state.kind = isMapping ? 'mapping' : 'sequence';
	      state.result = _result;
	      return true;
	    } else if (!readNext) {
	      throwError(state, 'missed comma between flow collection entries');
	    }

	    keyTag = keyNode = valueNode = null;
	    isPair = isExplicitPair = false;

	    if (ch === 0x3F/* ? */) {
	      following = state.input.charCodeAt(state.position + 1);

	      if (is_WS_OR_EOL(following)) {
	        isPair = isExplicitPair = true;
	        state.position++;
	        skipSeparationSpace(state, true, nodeIndent);
	      }
	    }

	    _line = state.line;
	    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
	    keyTag = state.tag;
	    keyNode = state.result;
	    skipSeparationSpace(state, true, nodeIndent);

	    ch = state.input.charCodeAt(state.position);

	    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {
	      isPair = true;
	      ch = state.input.charCodeAt(++state.position);
	      skipSeparationSpace(state, true, nodeIndent);
	      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
	      valueNode = state.result;
	    }

	    if (isMapping) {
	      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
	    } else if (isPair) {
	      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
	    } else {
	      _result.push(keyNode);
	    }

	    skipSeparationSpace(state, true, nodeIndent);

	    ch = state.input.charCodeAt(state.position);

	    if (ch === 0x2C/* , */) {
	      readNext = true;
	      ch = state.input.charCodeAt(++state.position);
	    } else {
	      readNext = false;
	    }
	  }

	  throwError(state, 'unexpected end of the stream within a flow collection');
	}

	function readBlockScalar(state, nodeIndent) {
	  var captureStart,
	      folding,
	      chomping       = CHOMPING_CLIP,
	      detectedIndent = false,
	      textIndent     = nodeIndent,
	      emptyLines     = 0,
	      atMoreIndented = false,
	      tmp,
	      ch;

	  ch = state.input.charCodeAt(state.position);

	  if (ch === 0x7C/* | */) {
	    folding = false;
	  } else if (ch === 0x3E/* > */) {
	    folding = true;
	  } else {
	    return false;
	  }

	  state.kind = 'scalar';
	  state.result = '';

	  while (ch !== 0) {
	    ch = state.input.charCodeAt(++state.position);

	    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
	      if (CHOMPING_CLIP === chomping) {
	        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;
	      } else {
	        throwError(state, 'repeat of a chomping mode identifier');
	      }

	    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
	      if (tmp === 0) {
	        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
	      } else if (!detectedIndent) {
	        textIndent = nodeIndent + tmp - 1;
	        detectedIndent = true;
	      } else {
	        throwError(state, 'repeat of an indentation width identifier');
	      }

	    } else {
	      break;
	    }
	  }

	  if (is_WHITE_SPACE(ch)) {
	    do { ch = state.input.charCodeAt(++state.position); }
	    while (is_WHITE_SPACE(ch));

	    if (ch === 0x23/* # */) {
	      do { ch = state.input.charCodeAt(++state.position); }
	      while (!is_EOL(ch) && (ch !== 0));
	    }
	  }

	  while (ch !== 0) {
	    readLineBreak(state);
	    state.lineIndent = 0;

	    ch = state.input.charCodeAt(state.position);

	    while ((!detectedIndent || state.lineIndent < textIndent) &&
	           (ch === 0x20/* Space */)) {
	      state.lineIndent++;
	      ch = state.input.charCodeAt(++state.position);
	    }

	    if (!detectedIndent && state.lineIndent > textIndent) {
	      textIndent = state.lineIndent;
	    }

	    if (is_EOL(ch)) {
	      emptyLines++;
	      continue;
	    }

	    // End of the scalar.
	    if (state.lineIndent < textIndent) {

	      // Perform the chomping.
	      if (chomping === CHOMPING_KEEP) {
	        state.result += common.repeat('\n', emptyLines);
	      } else if (chomping === CHOMPING_CLIP) {
	        if (detectedIndent) { // i.e. only if the scalar is not empty.
	          state.result += '\n';
	        }
	      }

	      // Break this `while` cycle and go to the funciton's epilogue.
	      break;
	    }

	    // Folded style: use fancy rules to handle line breaks.
	    if (folding) {

	      // Lines starting with white space characters (more-indented lines) are not folded.
	      if (is_WHITE_SPACE(ch)) {
	        atMoreIndented = true;
	        state.result += common.repeat('\n', emptyLines + 1);

	      // End of more-indented block.
	      } else if (atMoreIndented) {
	        atMoreIndented = false;
	        state.result += common.repeat('\n', emptyLines + 1);

	      // Just one line break - perceive as the same line.
	      } else if (emptyLines === 0) {
	        if (detectedIndent) { // i.e. only if we have already read some scalar content.
	          state.result += ' ';
	        }

	      // Several line breaks - perceive as different lines.
	      } else {
	        state.result += common.repeat('\n', emptyLines);
	      }

	    // Literal style: just add exact number of line breaks between content lines.
	    } else if (detectedIndent) {
	      // If current line isn't the first one - count line break from the last content line.
	      state.result += common.repeat('\n', emptyLines + 1);
	    } else {
	      // In case of the first content line - count only empty lines.
	      state.result += common.repeat('\n', emptyLines);
	    }

	    detectedIndent = true;
	    emptyLines = 0;
	    captureStart = state.position;

	    while (!is_EOL(ch) && (ch !== 0)) {
	      ch = state.input.charCodeAt(++state.position);
	    }

	    captureSegment(state, captureStart, state.position, false);
	  }

	  return true;
	}

	function readBlockSequence(state, nodeIndent) {
	  var _line,
	      _tag      = state.tag,
	      _anchor   = state.anchor,
	      _result   = [],
	      following,
	      detected  = false,
	      ch;

	  if (state.anchor !== null) {
	    state.anchorMap[state.anchor] = _result;
	  }

	  ch = state.input.charCodeAt(state.position);

	  while (ch !== 0) {

	    if (ch !== 0x2D/* - */) {
	      break;
	    }

	    following = state.input.charCodeAt(state.position + 1);

	    if (!is_WS_OR_EOL(following)) {
	      break;
	    }

	    detected = true;
	    state.position++;

	    if (skipSeparationSpace(state, true, -1)) {
	      if (state.lineIndent <= nodeIndent) {
	        _result.push(null);
	        ch = state.input.charCodeAt(state.position);
	        continue;
	      }
	    }

	    _line = state.line;
	    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
	    _result.push(state.result);
	    skipSeparationSpace(state, true, -1);

	    ch = state.input.charCodeAt(state.position);

	    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
	      throwError(state, 'bad indentation of a sequence entry');
	    } else if (state.lineIndent < nodeIndent) {
	      break;
	    }
	  }

	  if (detected) {
	    state.tag = _tag;
	    state.anchor = _anchor;
	    state.kind = 'sequence';
	    state.result = _result;
	    return true;
	  }
	  return false;
	}

	function readBlockMapping(state, nodeIndent, flowIndent) {
	  var following,
	      allowCompact,
	      _line,
	      _tag          = state.tag,
	      _anchor       = state.anchor,
	      _result       = {},
	      overridableKeys = {},
	      keyTag        = null,
	      keyNode       = null,
	      valueNode     = null,
	      atExplicitKey = false,
	      detected      = false,
	      ch;

	  if (state.anchor !== null) {
	    state.anchorMap[state.anchor] = _result;
	  }

	  ch = state.input.charCodeAt(state.position);

	  while (ch !== 0) {
	    following = state.input.charCodeAt(state.position + 1);
	    _line = state.line; // Save the current line.

	    //
	    // Explicit notation case. There are two separate blocks:
	    // first for the key (denoted by "?") and second for the value (denoted by ":")
	    //
	    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {

	      if (ch === 0x3F/* ? */) {
	        if (atExplicitKey) {
	          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
	          keyTag = keyNode = valueNode = null;
	        }

	        detected = true;
	        atExplicitKey = true;
	        allowCompact = true;

	      } else if (atExplicitKey) {
	        // i.e. 0x3A/* : */ === character after the explicit key.
	        atExplicitKey = false;
	        allowCompact = true;

	      } else {
	        throwError(state, 'incomplete explicit mapping pair; a key node is missed');
	      }

	      state.position += 1;
	      ch = following;

	    //
	    // Implicit notation case. Flow-style node as the key first, then ":", and the value.
	    //
	    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {

	      if (state.line === _line) {
	        ch = state.input.charCodeAt(state.position);

	        while (is_WHITE_SPACE(ch)) {
	          ch = state.input.charCodeAt(++state.position);
	        }

	        if (ch === 0x3A/* : */) {
	          ch = state.input.charCodeAt(++state.position);

	          if (!is_WS_OR_EOL(ch)) {
	            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
	          }

	          if (atExplicitKey) {
	            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
	            keyTag = keyNode = valueNode = null;
	          }

	          detected = true;
	          atExplicitKey = false;
	          allowCompact = false;
	          keyTag = state.tag;
	          keyNode = state.result;

	        } else if (detected) {
	          throwError(state, 'can not read an implicit mapping pair; a colon is missed');

	        } else {
	          state.tag = _tag;
	          state.anchor = _anchor;
	          return true; // Keep the result of `composeNode`.
	        }

	      } else if (detected) {
	        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');

	      } else {
	        state.tag = _tag;
	        state.anchor = _anchor;
	        return true; // Keep the result of `composeNode`.
	      }

	    } else {
	      break; // Reading is done. Go to the epilogue.
	    }

	    //
	    // Common reading code for both explicit and implicit notations.
	    //
	    if (state.line === _line || state.lineIndent > nodeIndent) {
	      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
	        if (atExplicitKey) {
	          keyNode = state.result;
	        } else {
	          valueNode = state.result;
	        }
	      }

	      if (!atExplicitKey) {
	        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
	        keyTag = keyNode = valueNode = null;
	      }

	      skipSeparationSpace(state, true, -1);
	      ch = state.input.charCodeAt(state.position);
	    }

	    if (state.lineIndent > nodeIndent && (ch !== 0)) {
	      throwError(state, 'bad indentation of a mapping entry');
	    } else if (state.lineIndent < nodeIndent) {
	      break;
	    }
	  }

	  //
	  // Epilogue.
	  //

	  // Special case: last mapping's node contains only the key in explicit notation.
	  if (atExplicitKey) {
	    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
	  }

	  // Expose the resulting mapping.
	  if (detected) {
	    state.tag = _tag;
	    state.anchor = _anchor;
	    state.kind = 'mapping';
	    state.result = _result;
	  }

	  return detected;
	}

	function readTagProperty(state) {
	  var _position,
	      isVerbatim = false,
	      isNamed    = false,
	      tagHandle,
	      tagName,
	      ch;

	  ch = state.input.charCodeAt(state.position);

	  if (ch !== 0x21/* ! */) return false;

	  if (state.tag !== null) {
	    throwError(state, 'duplication of a tag property');
	  }

	  ch = state.input.charCodeAt(++state.position);

	  if (ch === 0x3C/* < */) {
	    isVerbatim = true;
	    ch = state.input.charCodeAt(++state.position);

	  } else if (ch === 0x21/* ! */) {
	    isNamed = true;
	    tagHandle = '!!';
	    ch = state.input.charCodeAt(++state.position);

	  } else {
	    tagHandle = '!';
	  }

	  _position = state.position;

	  if (isVerbatim) {
	    do { ch = state.input.charCodeAt(++state.position); }
	    while (ch !== 0 && ch !== 0x3E/* > */);

	    if (state.position < state.length) {
	      tagName = state.input.slice(_position, state.position);
	      ch = state.input.charCodeAt(++state.position);
	    } else {
	      throwError(state, 'unexpected end of the stream within a verbatim tag');
	    }
	  } else {
	    while (ch !== 0 && !is_WS_OR_EOL(ch)) {

	      if (ch === 0x21/* ! */) {
	        if (!isNamed) {
	          tagHandle = state.input.slice(_position - 1, state.position + 1);

	          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
	            throwError(state, 'named tag handle cannot contain such characters');
	          }

	          isNamed = true;
	          _position = state.position + 1;
	        } else {
	          throwError(state, 'tag suffix cannot contain exclamation marks');
	        }
	      }

	      ch = state.input.charCodeAt(++state.position);
	    }

	    tagName = state.input.slice(_position, state.position);

	    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
	      throwError(state, 'tag suffix cannot contain flow indicator characters');
	    }
	  }

	  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
	    throwError(state, 'tag name cannot contain such characters: ' + tagName);
	  }

	  if (isVerbatim) {
	    state.tag = tagName;

	  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
	    state.tag = state.tagMap[tagHandle] + tagName;

	  } else if (tagHandle === '!') {
	    state.tag = '!' + tagName;

	  } else if (tagHandle === '!!') {
	    state.tag = 'tag:yaml.org,2002:' + tagName;

	  } else {
	    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
	  }

	  return true;
	}

	function readAnchorProperty(state) {
	  var _position,
	      ch;

	  ch = state.input.charCodeAt(state.position);

	  if (ch !== 0x26/* & */) return false;

	  if (state.anchor !== null) {
	    throwError(state, 'duplication of an anchor property');
	  }

	  ch = state.input.charCodeAt(++state.position);
	  _position = state.position;

	  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
	    ch = state.input.charCodeAt(++state.position);
	  }

	  if (state.position === _position) {
	    throwError(state, 'name of an anchor node must contain at least one character');
	  }

	  state.anchor = state.input.slice(_position, state.position);
	  return true;
	}

	function readAlias(state) {
	  var _position, alias,
	      ch;

	  ch = state.input.charCodeAt(state.position);

	  if (ch !== 0x2A/* * */) return false;

	  ch = state.input.charCodeAt(++state.position);
	  _position = state.position;

	  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
	    ch = state.input.charCodeAt(++state.position);
	  }

	  if (state.position === _position) {
	    throwError(state, 'name of an alias node must contain at least one character');
	  }

	  alias = state.input.slice(_position, state.position);

	  if (!state.anchorMap.hasOwnProperty(alias)) {
	    throwError(state, 'unidentified alias "' + alias + '"');
	  }

	  state.result = state.anchorMap[alias];
	  skipSeparationSpace(state, true, -1);
	  return true;
	}

	function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
	  var allowBlockStyles,
	      allowBlockScalars,
	      allowBlockCollections,
	      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
	      atNewLine  = false,
	      hasContent = false,
	      typeIndex,
	      typeQuantity,
	      type,
	      flowIndent,
	      blockIndent;

	  if (state.listener !== null) {
	    state.listener('open', state);
	  }

	  state.tag    = null;
	  state.anchor = null;
	  state.kind   = null;
	  state.result = null;

	  allowBlockStyles = allowBlockScalars = allowBlockCollections =
	    CONTEXT_BLOCK_OUT === nodeContext ||
	    CONTEXT_BLOCK_IN  === nodeContext;

	  if (allowToSeek) {
	    if (skipSeparationSpace(state, true, -1)) {
	      atNewLine = true;

	      if (state.lineIndent > parentIndent) {
	        indentStatus = 1;
	      } else if (state.lineIndent === parentIndent) {
	        indentStatus = 0;
	      } else if (state.lineIndent < parentIndent) {
	        indentStatus = -1;
	      }
	    }
	  }

	  if (indentStatus === 1) {
	    while (readTagProperty(state) || readAnchorProperty(state)) {
	      if (skipSeparationSpace(state, true, -1)) {
	        atNewLine = true;
	        allowBlockCollections = allowBlockStyles;

	        if (state.lineIndent > parentIndent) {
	          indentStatus = 1;
	        } else if (state.lineIndent === parentIndent) {
	          indentStatus = 0;
	        } else if (state.lineIndent < parentIndent) {
	          indentStatus = -1;
	        }
	      } else {
	        allowBlockCollections = false;
	      }
	    }
	  }

	  if (allowBlockCollections) {
	    allowBlockCollections = atNewLine || allowCompact;
	  }

	  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
	    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
	      flowIndent = parentIndent;
	    } else {
	      flowIndent = parentIndent + 1;
	    }

	    blockIndent = state.position - state.lineStart;

	    if (indentStatus === 1) {
	      if (allowBlockCollections &&
	          (readBlockSequence(state, blockIndent) ||
	           readBlockMapping(state, blockIndent, flowIndent)) ||
	          readFlowCollection(state, flowIndent)) {
	        hasContent = true;
	      } else {
	        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
	            readSingleQuotedScalar(state, flowIndent) ||
	            readDoubleQuotedScalar(state, flowIndent)) {
	          hasContent = true;

	        } else if (readAlias(state)) {
	          hasContent = true;

	          if (state.tag !== null || state.anchor !== null) {
	            throwError(state, 'alias node should not have any properties');
	          }

	        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
	          hasContent = true;

	          if (state.tag === null) {
	            state.tag = '?';
	          }
	        }

	        if (state.anchor !== null) {
	          state.anchorMap[state.anchor] = state.result;
	        }
	      }
	    } else if (indentStatus === 0) {
	      // Special case: block sequences are allowed to have same indentation level as the parent.
	      // http://www.yaml.org/spec/1.2/spec.html#id2799784
	      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
	    }
	  }

	  if (state.tag !== null && state.tag !== '!') {
	    if (state.tag === '?') {
	      for (typeIndex = 0, typeQuantity = state.implicitTypes.length;
	           typeIndex < typeQuantity;
	           typeIndex += 1) {
	        type = state.implicitTypes[typeIndex];

	        // Implicit resolving is not allowed for non-scalar types, and '?'
	        // non-specific tag is only assigned to plain scalars. So, it isn't
	        // needed to check for 'kind' conformity.

	        if (type.resolve(state.result)) { // `state.result` updated in resolver if matched
	          state.result = type.construct(state.result);
	          state.tag = type.tag;
	          if (state.anchor !== null) {
	            state.anchorMap[state.anchor] = state.result;
	          }
	          break;
	        }
	      }
	    } else if (_hasOwnProperty.call(state.typeMap, state.tag)) {
	      type = state.typeMap[state.tag];

	      if (state.result !== null && type.kind !== state.kind) {
	        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
	      }

	      if (!type.resolve(state.result)) { // `state.result` updated in resolver if matched
	        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
	      } else {
	        state.result = type.construct(state.result);
	        if (state.anchor !== null) {
	          state.anchorMap[state.anchor] = state.result;
	        }
	      }
	    } else {
	      throwError(state, 'unknown tag !<' + state.tag + '>');
	    }
	  }

	  if (state.listener !== null) {
	    state.listener('close', state);
	  }
	  return state.tag !== null ||  state.anchor !== null || hasContent;
	}

	function readDocument(state) {
	  var documentStart = state.position,
	      _position,
	      directiveName,
	      directiveArgs,
	      hasDirectives = false,
	      ch;

	  state.version = null;
	  state.checkLineBreaks = state.legacy;
	  state.tagMap = {};
	  state.anchorMap = {};

	  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
	    skipSeparationSpace(state, true, -1);

	    ch = state.input.charCodeAt(state.position);

	    if (state.lineIndent > 0 || ch !== 0x25/* % */) {
	      break;
	    }

	    hasDirectives = true;
	    ch = state.input.charCodeAt(++state.position);
	    _position = state.position;

	    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
	      ch = state.input.charCodeAt(++state.position);
	    }

	    directiveName = state.input.slice(_position, state.position);
	    directiveArgs = [];

	    if (directiveName.length < 1) {
	      throwError(state, 'directive name must not be less than one character in length');
	    }

	    while (ch !== 0) {
	      while (is_WHITE_SPACE(ch)) {
	        ch = state.input.charCodeAt(++state.position);
	      }

	      if (ch === 0x23/* # */) {
	        do { ch = state.input.charCodeAt(++state.position); }
	        while (ch !== 0 && !is_EOL(ch));
	        break;
	      }

	      if (is_EOL(ch)) break;

	      _position = state.position;

	      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
	        ch = state.input.charCodeAt(++state.position);
	      }

	      directiveArgs.push(state.input.slice(_position, state.position));
	    }

	    if (ch !== 0) readLineBreak(state);

	    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
	      directiveHandlers[directiveName](state, directiveName, directiveArgs);
	    } else {
	      throwWarning(state, 'unknown document directive "' + directiveName + '"');
	    }
	  }

	  skipSeparationSpace(state, true, -1);

	  if (state.lineIndent === 0 &&
	      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&
	      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&
	      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {
	    state.position += 3;
	    skipSeparationSpace(state, true, -1);

	  } else if (hasDirectives) {
	    throwError(state, 'directives end mark is expected');
	  }

	  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
	  skipSeparationSpace(state, true, -1);

	  if (state.checkLineBreaks &&
	      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
	    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
	  }

	  state.documents.push(state.result);

	  if (state.position === state.lineStart && testDocumentSeparator(state)) {

	    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {
	      state.position += 3;
	      skipSeparationSpace(state, true, -1);
	    }
	    return;
	  }

	  if (state.position < (state.length - 1)) {
	    throwError(state, 'end of the stream or a document separator is expected');
	  } else {
	    return;
	  }
	}


	function loadDocuments(input, options) {
	  input = String(input);
	  options = options || {};

	  if (input.length !== 0) {

	    // Add tailing `\n` if not exists
	    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&
	        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {
	      input += '\n';
	    }

	    // Strip BOM
	    if (input.charCodeAt(0) === 0xFEFF) {
	      input = input.slice(1);
	    }
	  }

	  var state = new State(input, options);

	  // Use 0 as string terminator. That significantly simplifies bounds check.
	  state.input += '\0';

	  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {
	    state.lineIndent += 1;
	    state.position += 1;
	  }

	  while (state.position < (state.length - 1)) {
	    readDocument(state);
	  }

	  return state.documents;
	}


	function loadAll(input, iterator, options) {
	  var documents = loadDocuments(input, options), index, length;

	  for (index = 0, length = documents.length; index < length; index += 1) {
	    iterator(documents[index]);
	  }
	}


	function load(input, options) {
	  var documents = loadDocuments(input, options);

	  if (documents.length === 0) {
	    /*eslint-disable no-undefined*/
	    return undefined;
	  } else if (documents.length === 1) {
	    return documents[0];
	  }
	  throw new YAMLException('expected a single document in the stream, but found more');
	}


	function safeLoadAll(input, output, options) {
	  loadAll(input, output, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
	}


	function safeLoad(input, options) {
	  return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
	}


	loader.loadAll     = loadAll;
	loader.load        = load;
	loader.safeLoadAll = safeLoadAll;
	loader.safeLoad    = safeLoad;
	return loader;
}

var hasRequiredJsYaml$1;

function requireJsYaml$1 () {
	if (hasRequiredJsYaml$1) return jsYaml$1;
	hasRequiredJsYaml$1 = 1;


	var loader = requireLoader();
	// var dumper = require('./js-yaml/dumper');


	function deprecated(name) {
	  return function () {
	    throw new Error('Function ' + name + ' is deprecated and cannot be used.');
	  };
	}


	jsYaml$1.Type                = requireType();
	jsYaml$1.Schema              = requireSchema();
	jsYaml$1.FAILSAFE_SCHEMA     = requireFailsafe();
	jsYaml$1.JSON_SCHEMA         = requireJson();
	jsYaml$1.CORE_SCHEMA         = requireCore();
	jsYaml$1.DEFAULT_SAFE_SCHEMA = requireDefault_safe();
	jsYaml$1.DEFAULT_FULL_SCHEMA = requireDefault_full();
	jsYaml$1.load                = loader.load;
	jsYaml$1.loadAll             = loader.loadAll;
	jsYaml$1.safeLoad            = loader.safeLoad;
	jsYaml$1.safeLoadAll         = loader.safeLoadAll;
	// module.exports.dump                = dumper.dump;
	// module.exports.safeDump            = dumper.safeDump;
	jsYaml$1.YAMLException       = requireException();

	// Deprecated schema names from JS-YAML 2.0.x
	jsYaml$1.MINIMAL_SCHEMA = requireFailsafe();
	jsYaml$1.SAFE_SCHEMA    = requireDefault_safe();
	jsYaml$1.DEFAULT_SCHEMA = requireDefault_full();

	// Deprecated functions from JS-YAML 1.x.x
	jsYaml$1.scan           = deprecated('scan');
	jsYaml$1.parse          = deprecated('parse');
	jsYaml$1.compose        = deprecated('compose');
	jsYaml$1.addConstructor = deprecated('addConstructor');
	return jsYaml$1;
}

var jsYaml;
var hasRequiredJsYaml;

function requireJsYaml () {
	if (hasRequiredJsYaml) return jsYaml;
	hasRequiredJsYaml = 1;


	var yaml = requireJsYaml$1();


	jsYaml = yaml;
	return jsYaml;
}

var jsYamlExports = requireJsYaml();
var yaml = /*@__PURE__*/topojson.getDefaultExportFromCjs(jsYamlExports);

function _callSuper(t, o, e) { return o = topojson._getPrototypeOf(o), topojson._possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], topojson._getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = topojson._get(topojson._getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var SceneBundle = /*#__PURE__*/function () {
  function SceneBundle(url, path) {
    var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    topojson._classCallCheck(this, SceneBundle);
    this.url = url;

    // If a base path was provided, use it for resolving local bundle resources only if
    // the base path is absolute, or this bundle's path is relative
    if (path && (!topojson.isRelativeURL(path) || topojson.isRelativeURL(this.url))) {
      this.path = path;
    } else {
      this.path = topojson.pathForURL(this.url);
    }
    this.path_for_parent = path || this.path; // for resolving paths relative to a parent bundle
    this.parent = parent;

    // An ancestor bundle may be a container (e.g. zip file) that needs to resolve relative paths
    // for any scenes it contains, e.g. `root.zip` has a `root.yaml` that includes a `folder/child.yaml`:
    // resources within `child.yaml` must be resolved through the bundle for `root.zip`
    this.container = null;
    if (this.parent) {
      if (this.parent.container) {
        this.container = this.parent.container;
      } else if (this.parent.isContainer()) {
        this.container = this.parent;
      }
    }
  }
  return topojson._createClass(SceneBundle, [{
    key: "load",
    value: function load() {
      return loadResource(this.url);
    }

    // Info for retrieving a specific resource from this bundle
    // url: fully qualified URL to retrieve the content of the resource (e.g. zips will transform this to blob URL)
    // path: original path of the resource within the bundle (for resolving paths up the bundle tree)
    // type: file extension (used for determining bundle type, `yaml` or `zip`)
  }, {
    key: "resourceFor",
    value: function resourceFor(url) {
      return {
        url: this.urlFor(url),
        path: this.pathFor(url),
        type: this.typeFor(url)
      };
    }
  }, {
    key: "urlFor",
    value: function urlFor(url) {
      if (isGlobalReference(url)) {
        return url;
      }
      if (topojson.isRelativeURL(url) && this.container) {
        return this.parent.urlFor(this.path_for_parent + url);
      }
      return topojson.addBaseURL(url, this.path);
    }
  }, {
    key: "pathFor",
    value: function pathFor(url) {
      return topojson.pathForURL(url);
    }
  }, {
    key: "typeFor",
    value: function typeFor(url) {
      return topojson.extensionForURL(url);
    }
  }, {
    key: "isContainer",
    value: function isContainer() {
      return false;
    }
  }]);
}();
var ZipSceneBundle = /*#__PURE__*/function (_SceneBundle) {
  function ZipSceneBundle(url, path, parent) {
    var _this;
    topojson._classCallCheck(this, ZipSceneBundle);
    _this = _callSuper(this, ZipSceneBundle, [url, path, parent]);
    _this.zip = null;
    _this.files = {};
    _this.root = null;
    _this.path = '';
    return _this;
  }
  topojson._inherits(ZipSceneBundle, _SceneBundle);
  return topojson._createClass(ZipSceneBundle, [{
    key: "isContainer",
    value: function isContainer() {
      return true;
    }
  }, {
    key: "load",
    value: function load() {
      return new Promise(function ($return, $error) {
        var _await$Utils$io, body;
        this.zip = new JSZip();
        if (typeof this.url === 'string') {
          return Promise.resolve(topojson.Utils.io(this.url, 60000, 'arraybuffer')).then(function ($await_4) {
            try {
              _await$Utils$io = $await_4, body = _await$Utils$io.body;
              return Promise.resolve(this.zip.loadAsync(body)).then(function ($await_5) {
                try {
                  return Promise.resolve(this.parseZipFiles()).then(function ($await_6) {
                    try {
                      return $return(this.loadRoot());
                    } catch ($boundEx) {
                      return $error($boundEx);
                    }
                  }.bind(this), $error);
                } catch ($boundEx) {
                  return $error($boundEx);
                }
              }.bind(this), $error);
            } catch ($boundEx) {
              return $error($boundEx);
            }
          }.bind(this), $error);
        } else {
          return $return(this);
        }
      }.bind(this));
    }
  }, {
    key: "urlFor",
    value: function urlFor(url) {
      if (isGlobalReference(url)) {
        return url;
      }
      if (topojson.isRelativeURL(url)) {
        return this.urlForZipFile(topojson.flattenRelativeURL(url));
      }
      return _superPropGet(ZipSceneBundle, "urlFor", this, 3)([url]);
    }
  }, {
    key: "typeFor",
    value: function typeFor(url) {
      if (topojson.isRelativeURL(url)) {
        return this.typeForZipFile(url);
      }
      return _superPropGet(ZipSceneBundle, "typeFor", this, 3)([url]);
    }
  }, {
    key: "loadRoot",
    value: function loadRoot() {
      this.findRoot();
      return loadResource(this.urlForZipFile(this.root));
    }
  }, {
    key: "findRoot",
    value: function findRoot() {
      var _this2 = this;
      // There must be a single YAML file at the top level of the zip
      var yamls = Object.keys(this.files).filter(function (path) {
        return _this2.files[path].depth === 0;
      }).filter(function (path) {
        return topojson.extensionForURL(path) === 'yaml';
      });
      if (yamls.length === 1) {
        this.root = yamls[0];
      }

      // No root found
      if (!this.root) {
        var msg = "Could not find root scene for bundle '".concat(this.url, "': ");
        msg += 'The zip archive\'s root level must contain a single scene file with the \'.yaml\' extension. ';
        if (yamls.length > 0) {
          msg += "Found multiple YAML files at the root level: ".concat(yamls.map(function (r) {
            return '\'' + r + '\'';
          }).join(', '), ".");
        } else {
          msg += 'Found NO YAML files at the root level.';
        }
        throw Error(msg);
      }
    }
  }, {
    key: "parseZipFiles",
    value: function parseZipFiles() {
      return new Promise(function ($return, $error) {
        var paths, queue, data, i, path, depth;
        paths = [];
        queue = [];
        this.zip.forEach(function (path, file) {
          if (!file.dir) {
            paths.push(path);
            queue.push(file.async('arraybuffer'));
          }
        });
        return Promise.resolve(Promise.all(queue)).then(function ($await_7) {
          try {
            data = $await_7;
            for (i = 0; i < data.length; i++) {
              path = paths[i];
              depth = path.split('/').length - 1;
              this.files[path] = {
                data: data[i],
                type: topojson.extensionForURL(path),
                depth: depth
              };
            }
            return $return();
          } catch ($boundEx) {
            return $error($boundEx);
          }
        }.bind(this), $error);
      }.bind(this));
    }
  }, {
    key: "urlForZipFile",
    value: function urlForZipFile(file) {
      if (this.files[file]) {
        if (!this.files[file].url) {
          this.files[file].url = topojson.createObjectURL(new Blob([this.files[file].data]));
        }
        return this.files[file].url;
      }
    }
  }, {
    key: "typeForZipFile",
    value: function typeForZipFile(file) {
      return this.files[file] && this.files[file].type;
    }
  }]);
}(SceneBundle);
function createSceneBundle(url, path, parent) {
  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  if (type != null && type === 'zip' || typeof url === 'string' && !topojson.isLocalURL(url) && topojson.extensionForURL(url) === 'zip') {
    return new ZipSceneBundle(url, path, parent);
  }
  return new SceneBundle(url, path, parent);
}
function parseResource(body) {
  // jsyaml 'json' option allows duplicate keys
  // Keeping this for backwards compatibility, but should consider migrating to requiring
  // unique keys, as this is YAML spec. But Tangram ES currently accepts dupe keys as well,
  // so should consider how best to unify.
  return yaml.safeLoad(body, {
    json: true
  });
}
function loadResource(source) {
  return new Promise(function (resolve, reject) {
    if (typeof source === 'string') {
      topojson.Utils.io(source).then(function (_ref) {
        var body = _ref.body;
        try {
          resolve(parseResource(body));
        } catch (e) {
          reject(e);
        }
      }, reject);
    } else {
      // shallow copy to avoid modifying provided object, allowing a single config object to be loaded multiple times
      // TODO: address possible modifications to nested properties (mostly harmless / due to data normalization)
      source = Object.assign({}, source);
      resolve(source);
    }
  });
}

function _createForOfIteratorHelper$1(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$1(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray$1(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray$1(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0; } }
function _arrayLikeToArray$1(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var SceneLoader = {
  // Load scenes definitions from URL & proprocess
  loadScene: function loadScene(url) {
    var $args = arguments;
    return new Promise(function ($return, $error) {
      var _this, _ref, path, type, errors, texture_nodes, scene, _this$finalize, config, bundle;
      _this = this;
      _ref = $args.length > 1 && $args[1] !== undefined ? $args[1] : {}, path = _ref.path, type = _ref.type;
      errors = [];
      texture_nodes = {};
      return Promise.resolve(this.loadSceneRecursive({
        url: url,
        path: path,
        type: type
      }, null, texture_nodes, errors)).then(function ($await_4) {
        try {
          scene = $await_4;
          _this$finalize = this.finalize(scene), config = _this$finalize.config, bundle = _this$finalize.bundle;
          if (!config) {
            // root scene failed to load, reject with first error
            return $error(errors[0]);
          } else if (errors.length > 0) {
            // scene loaded, but some imports had errors
            errors.forEach(function (error) {
              var message = "Failed to import scene: ".concat(error.url);
              topojson.log('error', message, error);
              _this.trigger('error', {
                type: 'scene_import',
                message: message,
                error: error,
                url: error.url
              });
            });
          }
          return $return({
            config: config,
            bundle: bundle,
            texture_nodes: texture_nodes
          });
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }.bind(this), $error);
    }.bind(this));
  },
  // Loads scene files from URL, recursively loading 'import' scenes
  // Optional *initial* path only (won't be passed to recursive 'import' calls)
  // Useful for loading resources in base scene file from a separate location
  // (e.g. in Tangram Play, when modified local scene should still refer to original resource URLs)
  loadSceneRecursive: function loadSceneRecursive(_ref2, parent) {
    var $args = arguments;
    return new Promise(function ($return, $error) {
      var _this2, url, path, type, texture_nodes, errors, bundle, config, imports, queue, configs;
      _this2 = this;
      url = _ref2.url, path = _ref2.path, type = _ref2.type;
      texture_nodes = $args.length > 2 && $args[2] !== undefined ? $args[2] : {};
      errors = $args.length > 3 && $args[3] !== undefined ? $args[3] : [];
      if (!url) {
        return $return({});
      }
      bundle = createSceneBundle(url, path, parent, type);
      var $Try_2_Catch = function (error) {
        try {
          // Collect scene load errors as we go
          error.url = url;
          errors.push(error);
          return $return({});
        } catch ($boundEx) {
          return $error($boundEx);
        }
      };
      try {
        return Promise.resolve(bundle.load()).then(function ($await_5) {
          try {
            config = $await_5;
            if (config.import == null) {
              this.normalize(config, bundle, texture_nodes);
              return $return({
                config: config,
                bundle: bundle
              });
            }

            // accept single entry or array
            if (!Array.isArray(config.import)) {
              config.import = [config.import]; // convert to array
            }

            // Collect URLs of scenes to import
            imports = [];
            config.import.forEach(function (url) {
              // Convert scene objects to URLs
              if (topojson._typeof(url) === 'object') {
                url = topojson.createObjectURL(new Blob([JSON.stringify(url)]));
              }
              imports.push(bundle.resourceFor(url));
            });
            delete config.import; // don't want to merge this property

            // load and normalize imports
            queue = imports.map(function (resource) {
              return _this2.loadSceneRecursive(resource, bundle, texture_nodes, errors);
            });
            return Promise.resolve(Promise.all(queue)).then(function ($await_6) {
              try {
                configs = $await_6.map(function (r) {
                  return _this2.normalize(r.config, r.bundle, texture_nodes);
                }).map(function (r) {
                  return r.config;
                });
                this.normalize(config, bundle, texture_nodes); // last normalize parent
                config = topojson.mergeObjects.apply(void 0, topojson._toConsumableArray(configs).concat([config]));
                return $return({
                  config: config,
                  bundle: bundle,
                  texture_nodes: texture_nodes
                });
              } catch ($boundEx) {
                return $Try_2_Catch($boundEx);
              }
            }.bind(this), $Try_2_Catch);
          } catch ($boundEx) {
            return $Try_2_Catch($boundEx);
          }
        }.bind(this), $Try_2_Catch);
      } catch (error) {
        $Try_2_Catch(error);
      }
    }.bind(this));
  },
  // Normalize properties that should be adjust within each local scene file (usually by path)
  normalize: function normalize(config, bundle) {
    var texture_nodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    this.normalizeDataSources(config, bundle);
    this.normalizeFonts(config, bundle);
    this.normalizeTextures(config, bundle);
    this.collectTextures(config, bundle, texture_nodes);
    return {
      config: config,
      bundle: bundle,
      texture_nodes: texture_nodes
    };
  },
  // Expand paths for data source
  normalizeDataSources: function normalizeDataSources(config, bundle) {
    config.sources = config.sources || {};
    for (var sn in config.sources) {
      this.normalizeDataSource(config.sources[sn], bundle);
    }
    return config;
  },
  normalizeDataSource: function normalizeDataSource(source, bundle) {
    source.url = bundle.urlFor(source.url);

    // composite untiled raster sources
    if (Array.isArray(source.composite)) {
      source.composite.forEach(function (c) {
        return c.url = bundle.urlFor(c.url);
      });
    }

    // custom scripts
    if (source.scripts) {
      // convert legacy array-style scripts to object format (script URL is used as both key and value)
      if (Array.isArray(source.scripts)) {
        source.scripts = source.scripts.reduce(function (val, cur) {
          val[cur] = cur;
          return val;
        }, {});
      }

      // resolve URLs for external scripts
      for (var s in source.scripts) {
        source.scripts[s] = bundle.urlFor(source.scripts[s]);
      }
    }
    return source;
  },
  // Expand paths for fonts
  normalizeFonts: function normalizeFonts(config, bundle) {
    config.fonts = config.fonts || {};

    // Add scene base path for URL-based fonts (skip "external" fonts referencing CSS-loaded resources)
    var fonts = Object.values(config.fonts).filter(function (face) {
      return face !== 'external';
    });
    var _iterator = _createForOfIteratorHelper$1(fonts),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var face = _step.value;
        var faces = Array.isArray(face) ? face : [face]; // can be single value or array
        faces.forEach(function (face) {
          return face.url = bundle.urlFor(face.url);
        });
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return config;
  },
  // Expand paths and centralize texture definitions for a scene object
  normalizeTextures: function normalizeTextures(config, bundle) {
    config.textures = config.textures || {};

    // Add current scene's base path to globally defined textures
    // Only adds path for textures with relative URLs, so textures in imported scenes get the base
    // path of their immediate scene file
    if (config.textures) {
      for (var tn in config.textures) {
        var texture = config.textures[tn];
        if (texture.url) {
          texture.url = bundle.urlFor(texture.url);
        }
      }
    }
  },
  // Move inline (URL string) textures to the scene's top-level set of textures (config.textures).
  // There are 4 such cases of textures:
  // - in a style's `texture` property
  // - in a style's `material` properties
  // - in a style's custom uniforms (`shaders.uniforms`)
  // - in a draw groups `texture` property
  collectTextures: function collectTextures(config, bundle, texture_nodes) {
    var _this3 = this;
    // Inline textures in styles
    if (config.styles) {
      var _loop = function _loop(sn) {
        var style = config.styles[sn];

        // Style `texture`
        var tex = style.texture;
        if (typeof tex === 'string' && !config.textures[tex]) {
          var path = ['styles', sn, 'texture'];
          _this3.addTextureNode(path, bundle, texture_nodes);
        }

        // Material
        if (style.material) {
          ['emission', 'ambient', 'diffuse', 'specular', 'normal'].forEach(function (prop) {
            // Material property has a texture
            var tex = style.material[prop] != null && style.material[prop].texture;
            if (typeof tex === 'string' && !config.textures[tex]) {
              var _path = ['styles', sn, 'material', prop, 'texture'];
              _this3.addTextureNode(_path, bundle, texture_nodes);
            }
          });
        }
      };
      for (var sn in config.styles) {
        _loop(sn);
      }
    }

    // Inline textures in shader uniforms
    if (config.styles) {
      var _loop2 = function _loop2(_sn) {
        var style = config.styles[_sn];
        if (style.shaders && style.shaders.uniforms) {
          topojson.GLSL.parseUniforms(style.shaders.uniforms).forEach(function (_ref3) {
            var type = _ref3.type,
              value = _ref3.value,
              path = _ref3.path;
            // Texture by URL (string-named texture not referencing existing texture definition)
            if (type === 'sampler2D' && typeof value === 'string' && !config.textures[value]) {
              var texture_path = ['styles', _sn, 'shaders', 'uniforms'].concat(topojson._toConsumableArray(path));
              _this3.addTextureNode(texture_path, bundle, texture_nodes);
            }
          });
        }
      };
      for (var _sn in config.styles) {
        _loop2(_sn);
      }
    }

    // Inline textures in draw blocks
    if (config.layers) {
      var stack = [config.layers];
      var path_stack = [['layers']];
      while (stack.length > 0) {
        var layer = stack.pop();
        var layer_path = path_stack.pop();

        // only recurse into objects
        if (topojson._typeof(layer) !== 'object' || Array.isArray(layer)) {
          continue;
        }
        for (var prop in layer) {
          if (prop === 'draw') {
            // process draw groups for current layer
            var draws = layer[prop];
            for (var group in draws) {
              if (draws[group].texture) {
                var tex = draws[group].texture;
                if (typeof tex === 'string' && !config.textures[tex]) {
                  var path = [].concat(topojson._toConsumableArray(layer_path), [prop, 'draw', group, 'texture']);
                  this.addTextureNode(path, bundle, texture_nodes);
                }
              }

              // special handling for outlines :(
              if (draws[group].outline && draws[group].outline.texture) {
                var _tex = draws[group].outline.texture;
                if (typeof _tex === 'string' && !config.textures[_tex]) {
                  var _path2 = [].concat(topojson._toConsumableArray(layer_path), [prop, 'draw', group, 'outline', 'texture']);
                  this.addTextureNode(_path2, bundle, texture_nodes);
                }
              }
            }
          } else if (topojson.isReserved(prop)) {
            continue; // skip reserved keyword
          } else {
            stack.push(layer[prop]); // traverse sublayer
            path_stack.push([].concat(topojson._toConsumableArray(layer_path), [prop]));
          }
        }
      }
    }
  },
  addTextureNode: function addTextureNode(path, bundle, texture_nodes) {
    var pathKey = JSON.stringify(path);
    texture_nodes[pathKey] = {
      path: path,
      bundle: bundle
    };
  },
  // Hoist any remaining inline texture nodes that don't have a corresponding named texture
  // base_bundle is the bundle for the root scene, for resolving textures from global properties
  hoistTextureNodes: function hoistTextureNodes(config, base_bundle) {
    var texture_nodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    for (var _i = 0, _Object$values = Object.values(texture_nodes); _i < _Object$values.length; _i++) {
      var _Object$values$_i = _Object$values[_i],
        path = _Object$values$_i.path,
        bundle = _Object$values$_i.bundle;
      var curValue = getPropertyPath(config, path);

      // Make sure current property values is a string to account for global property substitutions
      // e.g. shader uniforms are ambiguous, could be replaced with string value indicating texture,
      // but could also be a float, an array indicating vector, etc.
      if (typeof curValue === 'string' && config.textures[curValue] == null) {
        if (isGlobalSubstitution(config, path)) {
          // global substituions are resolved against the base scene path, not the import they came from
          var url = base_bundle.urlFor(curValue);
          config.textures[curValue] = {
            url: url
          };
        } else {
          // non-global textures are resolved against the import they came from
          var _url = bundle.urlFor(curValue);
          config.textures[_url] = {
            url: _url
          };
          setPropertyPath(config, path, _url);
        }
      }
    }
  },
  // Substitutes global scene properties (those defined in the `config.global` object) for any style values
  // of the form `global.`, for example `color: global.park_color` would be replaced with the value (if any)
  // defined for the `park_color` property in `config.global.park_color`.
  applyGlobalProperties: function applyGlobalProperties$1(config) {
    if (!config.global || Object.keys(config.global).length === 0) {
      return config; // no global properties to transform
    }
    var globals = flattenGlobalProperties(config.global); // flatten nested globals for simpler string look-ups
    return applyGlobalProperties(globals, config);
  },
  // Normalize some scene-wide settings that apply to the final, merged scene
  finalize: function finalize(_ref4) {
    var config = _ref4.config,
      bundle = _ref4.bundle;
    if (!config) {
      return {};
    }

    // Ensure top-level properties
    config.global = config.global || {};
    config.scene = config.scene || {};
    config.cameras = config.cameras || {};
    config.lights = config.lights || {};
    config.styles = config.styles || {};
    config.layers = config.layers || {};

    // If only one camera specified, set it as default
    if (config.camera) {
      config.cameras.default = config.camera;
    }

    // If no cameras specified, create one
    if (Object.keys(config.cameras).length === 0) {
      config.cameras.default = {};
    }

    // If no lights specified, create default
    if (Object.keys(config.lights).length === 0 || Object.keys(config.lights).every(function (i) {
      return config.lights[i].visible === false;
    })) {
      config.lights.default_light = {
        type: 'directional'
      };
    }
    return {
      config: config,
      bundle: bundle
    };
  }
};
topojson.subscribeMixin(SceneLoader);

var TilePyramid = /*#__PURE__*/function () {
  function TilePyramid() {
    topojson._classCallCheck(this, TilePyramid);
    this.tiles = {};
    this.max_proxy_descendant_depth = 6; // # of levels to search up/down for proxy tiles
    this.max_proxy_ancestor_depth = 7;
    this.children_cache = {}; // cache for children of coordinates
  }
  return topojson._createClass(TilePyramid, [{
    key: "addTile",
    value: function addTile(tile) {
      // Add target tile
      this.tiles[tile.key] = this.tiles[tile.key] || {
        descendants: 0
      };
      this.tiles[tile.key].tile = tile;

      // Add to parents
      while (tile.style_z >= 0) {
        tile = topojson.TileID.parent(tile);
        if (!tile) {
          return;
        }
        if (!this.tiles[tile.key]) {
          this.tiles[tile.key] = {
            descendants: 0
          };
        }
        this.tiles[tile.key].descendants++;
      }
    }
  }, {
    key: "removeTile",
    value: function removeTile(tile) {
      // Remove target tile
      if (this.tiles[tile.key]) {
        delete this.tiles[tile.key].tile;
        if (this.tiles[tile.key].descendants === 0) {
          delete this.tiles[tile.key]; // remove whole tile in tree
        }
      }

      // Decrement reference count up the tile pyramid
      while (tile.style_z >= 0) {
        tile = topojson.TileID.parent(tile);
        if (!tile) {
          return;
        }
        if (this.tiles[tile.key] && this.tiles[tile.key].descendants > 0) {
          this.tiles[tile.key].descendants--;
          if (this.tiles[tile.key].descendants === 0 && !this.tiles[tile.key].tile) {
            delete this.tiles[tile.key]; // remove whole tile in tree
          }
        }
      }
    }

    // Find the parent tile for a given tile and style zoom level
  }, {
    key: "getAncestor",
    value: function getAncestor(tile) {
      var level = 0;
      while (level < this.max_proxy_ancestor_depth) {
        tile = topojson.TileID.parent(tile);
        if (!tile) {
          return;
        }
        if (this.tiles[tile.key] && this.tiles[tile.key].tile && this.tiles[tile.key].tile.loaded) {
          return this.tiles[tile.key].tile;
        }
        level++;
      }
    }

    // Find the descendant tiles for a given tile and style zoom level
  }, {
    key: "getDescendants",
    value: function getDescendants(tile) {
      var _this = this;
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var descendants = [];
      if (level < this.max_proxy_descendant_depth) {
        var tiles = topojson.TileID.children(tile, this.children_cache);
        if (!tiles) {
          return;
        }
        tiles.forEach(function (t) {
          if (_this.tiles[t.key]) {
            if (_this.tiles[t.key].tile && _this.tiles[t.key].tile.loaded) {
              descendants.push(_this.tiles[t.key].tile);
            } else if (_this.tiles[t.key].descendants > 0) {
              // didn't find any children, try next level
              descendants.push.apply(descendants, topojson._toConsumableArray(_this.getDescendants(t, level + 1)));
            }
          }
        });
      }
      return descendants;
    }
  }]);
}();

var visible = {}; // currently visible labels
var prev_visible = {}; // previously visible labels (in last collision run)

function mainThreadLabelCollisionPass(tiles, view_zoom) {
  var $args = arguments;
  return new Promise(function ($return, $error) {
    var hide_breach, containers, max_tile_label_count, grid_divs, labels, meshes;
    hide_breach = $args.length > 2 && $args[2] !== undefined ? $args[2] : false;
    // Swap/reset visible label set
    prev_visible = visible; // save last visible label set
    visible = {}; // initialize new visible label set

    // Build label containers from tiles
    containers = buildLabels(tiles, view_zoom);
    // Collide all labels in a single group
    // TODO: maybe rename tile and style to group/subgroup?
    topojson.Collision.startTile('main', {
      apply_repeat_groups: true,
      return_hidden: true
    });
    topojson.Collision.addStyle('main', 'main');

    // Adaptive collision grid, using a heuristic based on the tile with the most labels
    max_tile_label_count = Math.max.apply(Math, [0].concat(topojson._toConsumableArray(Object.values(tiles).map(function (t) {
      return Object.values(t.meshes);
    }).flat().map(function (meshes) {
      return Math.max.apply(Math, [0].concat(topojson._toConsumableArray(meshes.map(function (mesh) {
        return mesh.labels ? Object.keys(mesh.labels).length : 0;
      }))));
    }))));
    grid_divs = Math.floor(max_tile_label_count / topojson.Geo.tile_size);
    // heuristic of label density to tile size
    if (grid_divs > 0) {
      topojson.Collision.initGrid({
        anchor: {
          x: Math.min.apply(Math, topojson._toConsumableArray(tiles.map(function (t) {
            return t.min.x;
          }))),
          y: Math.min.apply(Math, topojson._toConsumableArray(tiles.map(function (t) {
            return t.min.y;
          })))
        },
        span: tiles[0].span.x / grid_divs
      });
    } else {
      topojson.Collision.initGrid();
    }
    return Promise.resolve(topojson.Collision.collide(containers, 'main', 'main')).then(function ($await_1) {
      try {
        labels = $await_1;
        meshes = [];
        labels.forEach(function (container) {
          // Hide breach labels (those that cross tile boundaries) while tiles are loading, unless they
          // were previously visible (otherwise fully loaded/collided breach labels will flicker in and out
          // when new tiles load, even if they aren't adjacent)
          var show = 0;
          if (container.show === true && (!hide_breach || !container.label.breach || prev_visible[container.label.id])) {
            show = 1;
          }
          if (show) {
            visible[container.label.id] = true; // track visible labels
          }
          var changed = true; // check if label visibility changed on this collision pass

          container.ranges.forEach(function (r) {
            if (!changed) {
              return; // skip rest of label if state hasn't changed
            }
            var mesh = container.mesh;
            if (!mesh.valid) {
              return;
            }
            var off = mesh.vertex_layout.offset.a_shape; // byte offset (within each vertex) of attribute
            var stride = mesh.vertex_layout.stride; // byte stride per vertex

            for (var i = 0; i < r[1]; i++) {
              // NB: +6 is because attribute is a short int (2 bytes each), and we're skipping to 3rd element, 6=3*2
              if (mesh.vertex_data[r[0] + i * stride + off + 6] === show) {
                changed = false;
                return; // label hasn't changed states, skip further updates
              }
              mesh.vertex_data[r[0] + i * stride + off + 6] = show;
            }
            if (meshes.indexOf(mesh) === -1) {
              meshes.push(mesh);
            }
          });
        });

        // Upload updated meshes and make them visible
        meshes.forEach(function (mesh) {
          return mesh.upload();
        });
        tiles.forEach(function (t) {
          return t.swapPendingLabels();
        });
        return $return({
          labels: labels,
          containers: containers
        }); // currently returned for debugging
      } catch ($boundEx) {
        return $error($boundEx);
      }
    }, $error);
  });
}
function buildLabels(tiles, view_zoom) {
  var containers = {};

  // Collect labels from each tile and turn into new label instances
  tiles.forEach(function (tile) {
    var units_per_meter = topojson.Geo.unitsPerMeter(tile.coords.z); // scale from tile units to mercator meters
    var zoom_scale = Math.pow(2, view_zoom - tile.style_z); // adjust label size by view zoom
    var size_scale = units_per_meter * zoom_scale; // scale from tile units to zoom-adjusted meters
    var meters_per_pixel = topojson.Geo.metersPerPixel(view_zoom);

    // First pass: create label instances and centralize collision containers
    // Combine existing (previously collided) and pending (waiting to be collided for first time) meshes
    var tile_meshes = Object.assign({}, tile.meshes, tile.pending_label_meshes);
    for (var style in tile_meshes) {
      var meshes = tile_meshes[style];
      meshes.forEach(function (mesh) {
        if (mesh.labels) {
          for (var label_id in mesh.labels) {
            // For proxy tiles, only allow visible labels to be *hidden* by further collisions,
            // don't allow new ones to appear. Promotes label stability and prevents thrash
            // from different labels (often not thematically relevant given the different zoom level of
            // the proxy tile content, e.g. random POIs popping in/out when zooming out to city-wide view).
            if (tile.isProxy() && !prev_visible[label_id]) {
              continue;
            }
            var params = mesh.labels[label_id].container.label;
            var linked = mesh.labels[label_id].container.linked;
            var ranges = mesh.labels[label_id].ranges;
            // const debug = Object.assign({}, mesh.labels[label_id].debug, { tile, params, label_id });

            var label = {};
            label.discard = discard.bind(label);
            label.build_id = tile.build_id; // original order in which tiles were built

            Object.assign(label, params);
            label.layout = Object.assign({}, params.layout); // TODO: ideally remove need to copy props here
            label.layout.repeat_scale = 0.75; // looser second pass on repeat groups, to weed out repeats near tile edges
            label.layout.repeat_distance = label.layout.repeat_distance || 0;
            label.layout.repeat_distance /= size_scale; // TODO: where should this be scaled?
            label.position = [
            // don't overwrite referenced values
            label.position[0] / units_per_meter + tile.min.x, label.position[1] / units_per_meter + tile.min.y];
            label.unit_scale = meters_per_pixel;
            if (label.type === 'point') {
              // TODO: move to integer constants to avoid excess string copies
              topojson.LabelPoint.prototype.updateBBoxes.call(label);
            } else if (label.type === 'straight') {
              topojson.LabelLineStraight.prototype.updateBBoxes.call(label, label.position, label.size, label.angle, label.angle, label.offset);
            } else if (params.obbs) {
              // NB: this is a very rough approximation of curved label collision at intermediate zooms,
              // because the position/scale of each collision box isn't correctly updated; however,
              // it's good enough to provide some additional label coverage, with less overhead
              var obbs = params.obbs.map(function (o) {
                var x = o.x,
                  y = o.y,
                  a = o.a,
                  w = o.w,
                  h = o.h;
                x = x / units_per_meter + tile.min.x;
                y = y / units_per_meter + tile.min.y;
                w /= size_scale;
                h /= size_scale;
                return new topojson.OBB(x, y, a, w, h);
              });
              label.obbs = obbs;
              label.aabbs = obbs.map(function (o) {
                return o.getExtent();
              });
            }
            containers[label_id] = {
              label: label,
              linked: linked,
              ranges: ranges,
              mesh: mesh
              // debug
            };
          }
        }
      });
    }
  });

  // Resolve links between label containers
  for (var c in containers) {
    var container = containers[c];
    if (container.linked) {
      container.linked = containers[container.linked];
    }
    // NB: if linked label not found, it was discarded in initial tile collision pass
  }

  // Convert container map to array
  containers = Object.keys(containers).map(function (k) {
    return containers[k];
  });
  return containers;
}

// Generic discard function for labels, does simple occlusion with one or more bounding boxes
// (no additional logic to try alternate anchors or other layout options, etc.)
function discard(bboxes) {
  var exclude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  if (this.obb) {
    // single collision box
    return topojson.Label.prototype.occluded.call(this, bboxes, exclude);
  } else if (this.obbs) {
    // mutliple collision boxes
    for (var i = 0; i < this.obbs.length; i++) {
      var aabb = this.aabbs[i];
      var obb = this.obbs[i];
      var obj = {
        aabb: aabb,
        obb: obb
      };
      var should_discard = topojson.Label.prototype.occluded.call(obj, bboxes, exclude);
      if (should_discard) {
        return true;
      }
    }
  }
  return false;
}

var TileManager = /*#__PURE__*/function () {
  function TileManager(_ref) {
    var scene = _ref.scene;
    topojson._classCallCheck(this, TileManager);
    this.scene = scene;
    this.tiles = {};
    this.pyramid = new TilePyramid();
    this.visible_coords = {};
    this.queued_coords = [];
    this.building_tiles = null;
    this.renderable_tiles = [];
    this.collision = {
      tile_keys: null,
      mesh_set: null,
      zoom: null,
      zoom_steps: 3 // divisions per zoom at which labels are re-collided (e.g. 0, 0.33, 0.66)
    };

    // Provide a hook for this object to be called from worker threads
    this.main_thread_target = ['TileManager', this.scene.id].join('_');
    topojson.WorkerBroker.addTarget(this.main_thread_target, this);
  }
  return topojson._createClass(TileManager, [{
    key: "destroy",
    value: function destroy() {
      this.forEachTile(function (tile) {
        return tile.destroy();
      });
      this.tiles = {};
      this.pyramid = null;
      this.visible_coords = {};
      this.queued_coords = [];
      this.scene = null;
      topojson.WorkerBroker.removeTarget(this.main_thread_target);
    }
  }, {
    key: "view",
    get: function get() {
      return this.scene.view;
    }
  }, {
    key: "style_manager",
    get: function get() {
      return this.scene.style_manager;
    }
  }, {
    key: "keepTile",
    value: function keepTile(tile) {
      this.tiles[tile.key] = tile;
      this.pyramid.addTile(tile);
    }
  }, {
    key: "hasTile",
    value: function hasTile(key) {
      return this.tiles[key] !== undefined;
    }
  }, {
    key: "forgetTile",
    value: function forgetTile(key) {
      if (this.hasTile(key)) {
        var tile = this.tiles[key];
        this.pyramid.removeTile(tile);
      }
      delete this.tiles[key];
      this.tileBuildStop(key);
    }

    // Remove a single tile
  }, {
    key: "removeTile",
    value: function removeTile(key) {
      topojson.log('trace', "tile unload for ".concat(key));
      var tile = this.tiles[key];
      if (tile != null) {
        tile.destroy();
      }
      this.forgetTile(tile.key);
      this.scene.requestRedraw();
    }

    // Run a function on each tile
  }, {
    key: "forEachTile",
    value: function forEachTile(func) {
      for (var t in this.tiles) {
        func(this.tiles[t]);
      }
    }

    // Remove tiles that pass a filter condition
  }, {
    key: "removeTiles",
    value: function removeTiles(filter) {
      var remove_tiles = [];
      for (var t in this.tiles) {
        var tile = this.tiles[t];
        if (filter(tile)) {
          remove_tiles.push(t);
        }
      }
      for (var r = 0; r < remove_tiles.length; r++) {
        var key = remove_tiles[r];
        this.removeTile(key);
      }
    }
  }, {
    key: "updateTilesForView",
    value: function updateTilesForView() {
      // Find visible tiles and load new ones
      this.visible_coords = {};
      var tile_coords = this.view.findVisibleTileCoordinates();
      for (var c = 0; c < tile_coords.length; c++) {
        var coords = tile_coords[c];
        this.queueCoordinate(coords);
        this.visible_coords[coords.key] = coords;
      }
      this.updateTileStates();
    }
  }, {
    key: "updateTileStates",
    value: function updateTileStates() {
      var _this = this;
      this.forEachTile(function (tile) {
        _this.updateVisibility(tile);
      });
      this.loadQueuedCoordinates();
      this.updateProxyTiles();
      this.view.pruneTilesForView();
      this.updateRenderableTiles();
      this.style_manager.updateActiveStyles(this.renderable_tiles);
      this.style_manager.updateActiveBlendOrders(this.renderable_tiles);
      return this.updateLabels();
    }
  }, {
    key: "updateLabels",
    value: function updateLabels() {
      var _this2 = this;
      if (this.scene.building && !this.scene.building.initial) {
        // log('debug', `Skip label layout due to on-going scene rebuild`);
        return Promise.resolve({});
      }

      // get current visible tiles and sort by key for consistency collision order
      var tiles = this.renderable_tiles.filter(function (t) {
        return t.valid;
      }).filter(function (t) {
        return t.built;
      });
      if (tiles.length === 0) {
        return Promise.resolve({});
      }

      // Evaluate labels in order of tile build, to prevent previously visible labels
      // from disappearing, e.g. due to a newly loaded repeat label nearby
      tiles.sort(function (a, b) {
        return a.build_id < b.build_id ? -1 : a.build_id > b.build_id ? 1 : 0;
      });

      // check if tile set has changed (in ways that affect collision)
      // if not, bail so that the existing collision task can carry on
      // if so, carry on and start a new collision task
      if (
      // 1st: check if same zoom level (rounded to a configurable precision)
      this.collision.zoom === roundPrecision(this.view.zoom, this.collision.zoom_steps) &&
      // 2nd: check if same set of tiles
      this.collision.tile_keys === JSON.stringify(tiles.map(function (t) {
        return t.key;
      })) &&
      // 3rd: check if same set of meshes
      this.collision.mesh_set === meshSetString(tiles)) {
        // log('debug', `Skip label layout due to same tile/meshes (zoom ${this.view.zoom.toFixed(2)}, tiles ${this.collision.tile_keys})`);
        return Promise.resolve({});
      }

      // update collision if not already updating
      if (!this.collision.task) {
        this.collision.zoom = roundPrecision(this.view.zoom, this.collision.zoom_steps);
        this.collision.tile_keys = JSON.stringify(tiles.map(function (t) {
          return t.key;
        }));
        this.collision.mesh_set = meshSetString(tiles);
        // log('debug', `Update label collisions (zoom ${this.collision.zoom}, ${this.collision.tile_keys})`);

        // make a new collision task
        this.collision.task = {
          type: 'tileManagerUpdateLabels',
          run: function run(task) {
            return new Promise(function ($return, $error) {
              var results;
              return Promise.resolve(mainThreadLabelCollisionPass(tiles, _this2.collision.zoom, _this2.isLoadingVisibleTiles())).then(function ($await_1) {
                try {
                  results = $await_1;
                  _this2.scene.requestRedraw();

                  // Clear state to allow another collision pass to start
                  _this2.collision.task = null;
                  topojson.Task.finish(task, results);

                  // Check if tiles changed during previous collision pass - will start new pass if so
                  _this2.updateTileStates();
                  return $return();
                } catch ($boundEx) {
                  return $error($boundEx);
                }
              }, $error);
            });
          },
          immediate: true
        };
        topojson.Task.add(this.collision.task);
      }
      // else {
      //     log('debug', `Skip label layout due to on-going layout (zoom ${this.view.zoom.toFixed(2)}, tiles ${this.collision.tile_keys})`);
      // }
      return this.collision.task.promise;
    }
  }, {
    key: "updateProxyTiles",
    value: function updateProxyTiles() {
      var _this3 = this;
      if (this.view.zoom_direction === 0) {
        return;
      }

      // Clear previous proxies
      this.forEachTile(function (tile) {
        return tile.setProxyFor(null);
      });
      var proxy = false;
      this.forEachTile(function (tile) {
        if (tile.visible && !tile.labeled) {
          var parent = _this3.pyramid.getAncestor(tile);
          if (parent) {
            parent.setProxyFor(tile);
            proxy = true;
          } else {
            var descendants = _this3.pyramid.getDescendants(tile);
            for (var i = 0; i < descendants.length; i++) {
              descendants[i].setProxyFor(tile);
              proxy = true;
            }
          }
        }
      });
      if (!proxy) {
        this.view.zoom_direction = 0;
      }
    }
  }, {
    key: "updateVisibility",
    value: function updateVisibility(tile) {
      tile.visible = false;
      if (tile.style_z === this.view.tile_zoom) {
        if (this.visible_coords[tile.coords.key]) {
          tile.visible = true;
        } else {
          // brute force
          for (var key in this.visible_coords) {
            if (topojson.TileID.isDescendant(tile.coords, this.visible_coords[key])) {
              tile.visible = true;
              break;
            }
          }
        }
      }
    }

    // Remove tiles that aren't visible, and flag remaining visible ones to be updated (for loading, proxy, etc.)
  }, {
    key: "pruneToVisibleTiles",
    value: function pruneToVisibleTiles() {
      this.removeTiles(function (tile) {
        return !tile.visible;
      });
    }
  }, {
    key: "getRenderableTiles",
    value: function getRenderableTiles() {
      return this.renderable_tiles;
    }
  }, {
    key: "updateRenderableTiles",
    value: function updateRenderableTiles() {
      this.renderable_tiles = [];
      for (var t in this.tiles) {
        var tile = this.tiles[t];
        if (tile.visible && tile.loaded) {
          this.renderable_tiles.push(tile);
        }
      }
      return this.renderable_tiles;
    }
  }, {
    key: "isLoadingVisibleTiles",
    value: function isLoadingVisibleTiles() {
      var _this4 = this;
      return Object.keys(this.tiles).some(function (k) {
        return _this4.tiles[k].visible && !_this4.tiles[k].built;
      });
    }
  }, {
    key: "allVisibleTilesLabeled",
    value: function allVisibleTilesLabeled() {
      return this.renderable_tiles.every(function (t) {
        return t.labeled;
      });
    }

    // Queue a tile for load
  }, {
    key: "queueCoordinate",
    value: function queueCoordinate(coords) {
      this.queued_coords[this.queued_coords.length] = coords;
    }

    // Load all queued tiles
  }, {
    key: "loadQueuedCoordinates",
    value: function loadQueuedCoordinates() {
      var _this5 = this;
      if (this.queued_coords.length === 0) {
        return;
      }

      // Sort queued tiles from center tile
      this.queued_coords.sort(function (a, b) {
        var center = _this5.view.center.meters;
        var half_span = topojson.Geo.metersPerTile(a.z) / 2;
        var ac = topojson.Geo.metersForTile(a);
        ac.x += half_span;
        ac.y -= half_span;
        var bc = topojson.Geo.metersForTile(b);
        bc.x += half_span;
        bc.y -= half_span;
        var ad = Math.abs(center.x - ac.x) + Math.abs(center.y - ac.y);
        var bd = Math.abs(center.x - bc.x) + Math.abs(center.y - bc.y);
        a.center_dist = ad;
        b.center_dist = bd;
        return bd > ad ? -1 : bd === ad ? 0 : 1;
      });
      this.queued_coords.forEach(function (coords) {
        return _this5.loadCoordinate(coords);
      });
      this.queued_coords = [];
    }

    // Load all tiles to cover a given logical tile coordinate
  }, {
    key: "loadCoordinate",
    value: function loadCoordinate(coords) {
      // Skip if not at current scene zoom
      if (coords.z !== this.view.center.tile.z) {
        return;
      }

      // Determine necessary tiles for each source
      for (var s in this.scene.sources) {
        var source = this.scene.sources[s];
        // Check if data source should build this tile
        if (!source.builds_geometry_tiles || !source.includesTile(coords, this.view.tile_zoom)) {
          continue;
        }
        var key = topojson.TileID.normalizedKey(coords, source, this.view.tile_zoom);
        if (key && !this.hasTile(key)) {
          topojson.log('trace', "load tile ".concat(key, ", distance from view center: ").concat(coords.center_dist));
          var tile = new topojson.Tile({
            source: source,
            coords: coords,
            workers: this.scene.workers,
            style_z: this.view.baseZoom(coords.z),
            view: this.view
          });
          this.keepTile(tile);
          this.buildTile(tile);
        }
      }
    }

    // Start tile build process
  }, {
    key: "buildTile",
    value: function buildTile(tile, options) {
      this.tileBuildStart(tile.key);
      this.updateVisibility(tile);
      tile.build(this.scene.generation, options);
    }

    // Called on main thread when a web worker completes processing for a single tile (initial load, or rebuild)
  }, {
    key: "buildTileStylesCompleted",
    value: function buildTileStylesCompleted(_ref2) {
      var tile = _ref2.tile,
        progress = _ref2.progress;
      // Removed this tile during load?
      if (this.tiles[tile.key] == null) {
        topojson.log('trace', "discarded tile ".concat(tile.key, " in TileManager.buildTileStylesCompleted because previously removed"));
        topojson.Tile.abortBuild(tile);
        this.updateTileStates();
      }
      // Built with an outdated scene configuration?
      else if (tile.generation !== this.scene.generation) {
        topojson.log('trace', "discarded tile ".concat(tile.key, " in TileManager.buildTileStylesCompleted because built with ") + "scene config gen ".concat(tile.generation, ", current ").concat(this.scene.generation));
        topojson.Tile.abortBuild(tile);
        this.updateTileStates();
      } else {
        // Update tile with properties from worker
        if (this.tiles[tile.key]) {
          // Ignore if from a previously discarded tile
          if (tile.id < this.tiles[tile.key].id) {
            topojson.log('trace', "discarded tile ".concat(tile.key, " for id ").concat(tile.id, " in TileManager.buildTileStylesCompleted because built for discarded tile id"));
            topojson.Tile.abortBuild(tile);
            return;
          }
          tile = this.tiles[tile.key].merge(tile);
        }
        if (progress.done) {
          tile.built = true;
        }
        tile.buildMeshes(this.scene.styles, progress);
        this.updateTileStates();
        this.scene.requestRedraw();
      }
      if (progress.done) {
        this.tileBuildStop(tile.key);
      }
    }

    // Called on main thread when web worker encounters an error building a tile
  }, {
    key: "buildTileError",
    value: function buildTileError(tile) {
      topojson.log('error', "Error building tile ".concat(tile.key, ":"), tile.error);
      this.forgetTile(tile.key);
      topojson.Tile.abortBuild(tile);
    }

    // Track tile build state
  }, {
    key: "tileBuildStart",
    value: function tileBuildStart(key) {
      this.building_tiles = this.building_tiles || {};
      this.building_tiles[key] = true;
      topojson.log('trace', "tileBuildStart for ".concat(key, ": ").concat(Object.keys(this.building_tiles).length));
    }
  }, {
    key: "tileBuildStop",
    value: function tileBuildStop(key) {
      // Done building?
      if (this.building_tiles) {
        topojson.log('trace', "tileBuildStop for ".concat(key, ": ").concat(Object.keys(this.building_tiles).length));
        delete this.building_tiles[key];
        this.checkBuildQueue();
      }
    }

    // Check status of tile building queue and notify scene when we're done
  }, {
    key: "checkBuildQueue",
    value: function checkBuildQueue() {
      if (!this.building_tiles || Object.keys(this.building_tiles).length === 0) {
        this.building_tiles = null;
        this.scene.tileManagerBuildDone();
      }
    }

    // Get a debug property across tiles
  }, {
    key: "getDebugProp",
    value: function getDebugProp(prop, filter) {
      var vals = [];
      for (var t in this.tiles) {
        if (this.tiles[t].debug[prop] != null && (typeof filter !== 'function' || filter(this.tiles[t]) === true)) {
          vals.push(this.tiles[t].debug[prop]);
        }
      }
      return vals;
    }

    // Sum of a debug property across tiles
  }, {
    key: "getDebugSum",
    value: function getDebugSum(prop, filter) {
      var sum = 0;
      for (var t in this.tiles) {
        if (this.tiles[t].debug[prop] != null && (typeof filter !== 'function' || filter(this.tiles[t]) === true)) {
          sum += this.tiles[t].debug[prop];
        }
      }
      return sum;
    }

    // Average of a debug property across tiles
  }, {
    key: "getDebugAverage",
    value: function getDebugAverage(prop, filter) {
      return this.getDebugSum(prop, filter) / Object.keys(this.tiles).length;
    }
  }]);
}(); // Round a number to given number of decimal divisions
function roundPrecision(x, d) {
  var places = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
  return (Math.floor(x * d) / d).toFixed(places);
}

// Create a string representing the current set of meshes for a given set of tiles,
// based on their created timestamp. Used to determine when tiles should be re-collided.
function meshSetString(tiles) {
  return JSON.stringify(Object.entries(tiles).map(function (_ref3) {
    var _ref4 = topojson._slicedToArray(_ref3, 2),
      t = _ref4[1];
    return Object.entries(t.meshes).map(function (_ref5) {
      var _ref6 = topojson._slicedToArray(_ref5, 2),
        s = _ref6[1];
      return s.map(function (m) {
        return m.created_at;
      });
    });
  }));
}

var RenderState = /*#__PURE__*/function () {
  function RenderState(value, setup) {
    topojson._classCallCheck(this, RenderState);
    setup(value);
    this.value = value;
    this.setup = setup;
  }
  return topojson._createClass(RenderState, [{
    key: "set",
    value: function set(value) {
      // if the states are different, call the GL context for a state change
      if (JSON.stringify(this.value) !== JSON.stringify(value)) {
        this.setup(value);
        this.value = value;
      }
    }
  }]);
}();
var RenderStateManager = /*#__PURE__*/topojson._createClass(function RenderStateManager(gl) {
  topojson._classCallCheck(this, RenderStateManager);
  this.defaults = {};

  // Culling
  this.defaults.culling = true;
  this.defaults.culling_face = gl.BACK;

  // Blending
  this.defaults.blending = false;
  this.defaults.blending_src = gl.ONE_MINUS_SRC_ALPHA;
  this.defaults.blending_dst = gl.ONE_MINUS_SRC_ALPHA;
  this.defaults.blending_src_alpha = gl.ONE;
  this.defaults.blending_dst_alpha = gl.ONE_MINUS_SRC_ALPHA;

  // Depth test/write
  this.defaults.depth_write = true;
  this.defaults.depth_test = true;
  gl.depthFunc(gl.LESS); // depth function only needs to be set once

  // Culling
  this.culling = new RenderState({
    cull: this.defaults.culling,
    face: this.defaults.culling_face
  }, function (value) {
    if (value.cull) {
      gl.enable(gl.CULL_FACE);
      gl.cullFace(value.face);
    } else {
      gl.disable(gl.CULL_FACE);
    }
  });

  // Blending mode
  this.blending = new RenderState({
    blend: this.defaults.blending,
    src: this.defaults.blending_src,
    dst: this.defaults.blending_dst,
    src_alpha: this.defaults.blending_src_alpha,
    dst_alpha: this.defaults.blending_dst_alpha
  }, function (value) {
    if (value.blend) {
      gl.enable(gl.BLEND);
      if (value.src_alpha && value.dst_alpha) {
        gl.blendFuncSeparate(value.src, value.dst, value.src_alpha, value.dst_alpha);
      } else {
        gl.blendFunc(value.src, value.dst);
      }
    } else {
      gl.disable(gl.BLEND);
    }
  });

  // Depth write
  this.depth_write = new RenderState({
    depth_write: this.defaults.depth_write
  }, function (value) {
    gl.depthMask(value.depth_write);
  });

  // Depth test
  this.depth_test = new RenderState({
    depth_test: this.defaults.depth_test
  }, function (value) {
    if (value.depth_test) {
      gl.enable(gl.DEPTH_TEST);
    } else {
      gl.disable(gl.DEPTH_TEST);
    }
  });
});

var MediaCapture = /*#__PURE__*/function () {
  function MediaCapture() {
    topojson._classCallCheck(this, MediaCapture);
    this.canvas = null;
    this.gl = null;
    this.screenshot_canvas = null;
    this.screenshot_context = null;
    this.queue_screenshot = null;
    this.video_capture = null;
  }
  return topojson._createClass(MediaCapture, [{
    key: "setCanvas",
    value: function setCanvas(canvas, gl) {
      this.canvas = canvas;
      this.gl = gl;
    }

    // Take a screenshot, returns a promise that resolves with the screenshot data when available
    // `background`: optional background color to blend screenshot with
  }, {
    key: "screenshot",
    value: function screenshot() {
      var _this = this;
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        background = _ref.background;
      if (this.queue_screenshot != null) {
        return this.queue_screenshot.promise; // only capture one screenshot at a time
      }

      // Will resolve once rendering is complete and render buffer is captured
      this.queue_screenshot = {
        background: background
      };
      this.queue_screenshot.promise = new Promise(function (resolve, reject) {
        _this.queue_screenshot.resolve = resolve;
        _this.queue_screenshot.reject = reject;
      });
      return this.queue_screenshot.promise;
    }

    // Called after rendering, captures render buffer and resolves promise with the image data
  }, {
    key: "completeScreenshot",
    value: function completeScreenshot() {
      if (this.queue_screenshot != null) {
        // Firefox appears to have an issue where its alpha conversion overflows some channels when
        // the WebGL canvas content is captured. To get around this, we read pixels from the GL buffer
        // directly, then flip and unmulitply the alpha on each pixel to get the desired RGB values.
        // See https://github.com/tangrams/tangram/issues/551

        // Get raw pixels from GL
        var w = this.canvas.width;
        var h = this.canvas.height;
        var pixels = new Uint8Array(w * h * 4);
        this.gl.readPixels(0, 0, w, h, this.gl.RGBA, this.gl.UNSIGNED_BYTE, pixels);

        // Optional background to blend with (only RGB, alpha is ignored)
        var background = this.queue_screenshot.background;
        if (background && background !== 'transparent') {
          background = topojson.StyleParser.parseColor(background).slice(0, 3).map(function (c) {
            return c * 255;
          });
        } else {
          background = null; // skip blend if transparent
        }

        // Flip Y (GL buffer is upside down)
        var flip = new Uint8ClampedArray(w * h * 4); // canvas requires 'clamped' array type
        for (var y = 0; y < h; y++) {
          for (var x = 0; x < w; x++) {
            var s = ((h - y - 1) * w + x) * 4; // source offset
            var d = (y * w + x) * 4; // destination offset
            var a = pixels[s + 3]; // unmultiply alpha
            flip[d + 0] = pixels[s + 0] * 255 / a;
            flip[d + 1] = pixels[s + 1] * 255 / a;
            flip[d + 2] = pixels[s + 2] * 255 / a;
            flip[d + 3] = a;
            if (background) {
              a /= 255;
              flip[d + 0] = flip[d + 0] * a + background[0] * (1 - a);
              flip[d + 1] = flip[d + 1] * a + background[1] * (1 - a);
              flip[d + 2] = flip[d + 2] * a + background[2] * (1 - a);
              flip[d + 3] = 255;
            }
          }
        }

        // Draw flipped pixels to a canvas
        this.screenshot_canvas = this.screenshot_canvas || document.createElement('canvas');
        var canvas = this.screenshot_canvas;
        canvas.width = w;
        canvas.height = h;
        this.screenshot_context = this.screenshot_context || canvas.getContext('2d');
        var ctx = this.screenshot_context;
        var image = new ImageData(flip, w, h);
        ctx.putImageData(image, 0, 0);

        // Get data URL from canvas and convert to blob
        // Strip host/mimetype/etc., convert base64 to binary without UTF-8 mangling
        // Adapted from: https://gist.github.com/unconed/4370822
        var url = canvas.toDataURL('image/png');
        var data = atob(url.slice(22));
        var buffer = new Uint8Array(data.length);
        for (var i = 0; i < data.length; ++i) {
          buffer[i] = data.charCodeAt(i);
        }
        var blob = new Blob([buffer], {
          type: 'image/png'
        });

        // Resolve with screenshot data
        this.queue_screenshot.resolve({
          url: url,
          blob: blob,
          type: 'png'
        });
        this.queue_screenshot = null;
      }
    }

    // Starts capturing a video stream from the canvas
  }, {
    key: "startVideoCapture",
    value: function startVideoCapture() {
      var _this2 = this;
      if (typeof window.MediaRecorder !== 'function' || !this.canvas || typeof this.canvas.captureStream !== 'function') {
        topojson.log('warn', 'Video capture (Canvas.captureStream and/or MediaRecorder APIs) not supported by browser');
        return false;
      } else if (this.video_capture) {
        topojson.log('warn', 'Video capture already in progress, call Scene.stopVideoCapture() first');
        return false;
      }

      // Start a new capture
      try {
        var cap = this.video_capture = {};
        cap.chunks = [];
        cap.stream = this.canvas.captureStream();
        cap.options = {
          mimeType: 'video/webm'
        }; // TODO: support other format options
        cap.media_recorder = new MediaRecorder(cap.stream, cap.options);
        cap.media_recorder.ondataavailable = function (event) {
          if (event.data.size > 0) {
            cap.chunks.push(event.data);
          }

          // Stopped recording? Create the final capture file blob
          if (cap.resolve) {
            var blob = new Blob(cap.chunks, {
              type: cap.options.mimeType
            });
            var url = topojson.createObjectURL(blob);

            // Explicitly remove all stream tracks, and set objects to null
            if (cap.stream) {
              var tracks = cap.stream.getTracks() || [];
              tracks.forEach(function (track) {
                track.stop();
                cap.stream.removeTrack(track);
              });
            }
            cap.stream = null;
            cap.media_recorder = null;
            _this2.video_capture = null;
            cap.resolve({
              url: url,
              blob: blob,
              type: 'webm'
            });
          }
        };
        cap.media_recorder.start();
      } catch (e) {
        this.video_capture = null;
        topojson.log('error', 'Scene video capture failed', e);
        return false;
      }
      return true;
    }

    // Stops capturing a video stream from the canvas, returns a promise that resolves with the video when available
  }, {
    key: "stopVideoCapture",
    value: function stopVideoCapture() {
      var _this3 = this;
      if (!this.video_capture) {
        topojson.log('warn', 'No scene video capture in progress, call Scene.startVideoCapture() first');
        return Promise.resolve({});
      }

      // Promise that will resolve when final stream is available
      this.video_capture.promise = new Promise(function (resolve, reject) {
        _this3.video_capture.resolve = resolve;
        _this3.video_capture.reject = reject;
      });

      // Stop recording
      this.video_capture.media_recorder.stop();
      return this.video_capture.promise;
    }
  }]);
}();

// Debug config and functions
function setupSceneDebug(scene) {
  scene.debug = {
    // Profile helpers, issues a profile on main thread & all workers
    profile: function profile(name) {
      console.profile("main thread: ".concat(name)); // eslint-disable-line no-console
      topojson.WorkerBroker.postMessage(scene.workers, 'self.profile', name);
    },
    profileEnd: function profileEnd(name) {
      console.profileEnd("main thread: ".concat(name)); // eslint-disable-line no-console
      topojson.WorkerBroker.postMessage(scene.workers, 'self.profileEnd', name);
    },
    // Rebuild geometry a given # of times and print average, min, max timings
    timeRebuild: function timeRebuild() {
      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var times = [];
      var _cycle = function cycle() {
        var start = +new Date();
        scene.rebuild(options).then(function () {
          times.push(+new Date() - start);
          if (times.length < num) {
            _cycle();
          } else {
            var avg = ~~(times.reduce(function (a, b) {
              return a + b;
            }) / times.length);
            topojson.log('info', "Profiled rebuild ".concat(num, " times: ").concat(avg, " avg (").concat(Math.min.apply(Math, times), " min, ").concat(Math.max.apply(Math, times), " max)"));
          }
        });
      };
      _cycle();
    },
    // Return geometry counts of visible tiles, grouped by style name
    geometryCountByStyle: function geometryCountByStyle() {
      var counts = {};
      scene.tile_manager.getRenderableTiles().forEach(function (tile) {
        var _loop = function _loop(style) {
          counts[style] = counts[style] || 0;
          tile.meshes[style].forEach(function (mesh) {
            counts[style] += mesh.geometry_count;
          });
        };
        for (var style in tile.meshes) {
          _loop(style);
        }
      });
      return counts;
    },
    // Return geometry counts of visible tiles, grouped by base style name
    geometryCountByBaseStyle: function geometryCountByBaseStyle() {
      var style_counts = scene.debug.geometryCountByStyle();
      var counts = {};
      for (var style in style_counts) {
        var base = scene.styles[style].baseStyle();
        counts[base] = counts[base] || 0;
        counts[base] += style_counts[style];
      }
      return counts;
    },
    // Return sum of all geometry counts for visible tiles
    geometryCountTotal: function geometryCountTotal() {
      var styles = scene.debug.geometryCountByStyle();
      return Object.keys(styles).reduce(function (p, c) {
        return styles[c] + p;
      }, 0);
    },
    // Return geometry GL buffer sizes for visible tiles, grouped by style name
    geometrySizeByStyle: function geometrySizeByStyle() {
      var sizes = {};
      scene.tile_manager.getRenderableTiles().forEach(function (tile) {
        var _loop2 = function _loop2(style) {
          sizes[style] = sizes[style] || 0;
          tile.meshes[style].forEach(function (mesh) {
            sizes[style] += mesh.buffer_size;
          });
        };
        for (var style in tile.meshes) {
          _loop2(style);
        }
      });
      return sizes;
    },
    // Return geometry GL buffer sizes for visible tiles, grouped by base style name
    geometrySizeByBaseStyle: function geometrySizeByBaseStyle() {
      var style_sizes = scene.debug.geometrySizeByStyle();
      var sizes = {};
      for (var style in style_sizes) {
        var base = scene.styles[style].baseStyle();
        sizes[base] = sizes[base] || 0;
        sizes[base] += style_sizes[style];
      }
      return sizes;
    },
    // Return sum of all geometry GL buffer sizes for visible tiles
    geometrySizeTotal: function geometrySizeTotal() {
      var styles = scene.debug.geometrySizeByStyle();
      return Object.keys(styles).reduce(function (p, c) {
        return styles[c] + p;
      }, 0);
    },
    // Return sum of all texture memory usage
    textureSizeTotal: function textureSizeTotal() {
      return Object.values(topojson.Texture.textures).map(function (t) {
        return t.byteSize();
      }).reduce(function (p, c) {
        return p + c;
      });
    },
    layerStats: function layerStats() {
      if (topojson.debugSettings.layer_stats) {
        return topojson.debugSumLayerStats(scene.tile_manager.getRenderableTiles());
      } else {
        topojson.log('warn', 'Enable the \'layer_stats\' debug setting to collect layer stats');
        return {};
      }
    },
    renderableTilesCount: function renderableTilesCount() {
      return scene.tile_manager.getRenderableTiles().length;
    }
  };
}

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { topojson._defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }

// Load scene definition: pass an object directly, or a URL as string to load remotely
var Scene = /*#__PURE__*/function () {
  function Scene(config_source, options) {
    topojson._classCallCheck(this, Scene);
    options = options || {};
    topojson.subscribeMixin(this);
    this.id = Scene.id++;
    this.initialized = false;
    this.initializing = null; // will be a promise that resolves when scene is loaded
    this.sources = {};
    this.view = new topojson.View(this, options);
    this.tile_manager = new TileManager({
      scene: this
    });
    this.num_workers = options.numWorkers || 2;
    if (options.disableVertexArrayObjects === true) {
      topojson.VertexArrayObject.disabled = true;
    }
    topojson.Utils.use_high_density_display = options.highDensityDisplay !== undefined ? options.highDensityDisplay : true;
    topojson.Utils.updateDevicePixelRatio();
    this.config = null;
    this.config_source = config_source;
    this.config_bundle = null;
    this.last_valid_config_source = null;
    this.styles = null;
    this.style_manager = new topojson.StyleManager();
    this.building = null; // tracks current scene building state (tiles being built, etc.)
    this.dirty = true; // request a redraw

    if (options.preUpdate) {
      // optional pre-render loop hook
      this.subscribe({
        'pre_update': options.preUpdate
      });
    }
    if (options.postUpdate) {
      // optional post-render loop hook
      this.subscribe({
        'post_update': options.postUpdate
      });
    }
    this.render_loop = !options.disableRenderLoop; // disable render loop - app will have to manually call Scene.render() per frame
    this.render_loop_active = false;
    this.render_loop_stop = false;
    this.render_count = 0;
    this.last_render_count = 0;
    this.render_count_changed = false;
    this.frame = 0;
    this.last_main_render = -1; // frame counter for last main render pass
    this.last_selection_render = -1; // frame counter for last selection render pass
    this.media_capture = new MediaCapture();
    this.selection = null;
    this.selection_feature_count = 0;
    this.fetching_selection_map = null;
    this.prev_textures = null; // textures from previously loaded scene (used for cleanup)
    this.introspection = options.introspection === true ? true : false;
    this.times = {}; // internal time logs (mostly for dev/profiling)
    this.resetTime();
    this.container = options.container;
    this.canvas = null;
    this.contextOptions = options.webGLContextOptions;
    this.lights = null;
    this.background = null;
    this.createListeners();
    this.updating = 0;
    this.generation = Scene.generation; // an id that is incremented each time the scene config is invalidated
    this.last_complete_generation = Scene.generation; // last generation id with a complete view
    setupSceneDebug(this);
    this.log_level = options.logLevel || 'warn';
    topojson.log.setLevel(this.log_level);
    topojson.log.reset();
  }
  return topojson._createClass(Scene, [{
    key: "load",
    value:
    // Load scene (or reload existing scene if no new source specified)
    // Options:
    //   `base_path`: base URL against which scene resources should be resolved (useful for Play) (default nulll)
    //   `blocking`: should rendering block on scene load completion (default true)
    function load() {
      var _this = this;
      var config_source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (this.initializing) {
        return this.initializing;
      }
      topojson.log.reset();
      this.updating++;
      this.initialized = false;
      this.view_complete = false; // track if a view complete event has been triggered yet
      this.times.frame = null; // clear first frame time
      this.times.build = null; // clear first scene build time

      // Backwards compatibilty for passing `base_path` string as second argument
      // (since transitioned to using options argument to accept more parameters)
      options = typeof options === 'string' ? {
        base_path: options
      } : options;

      // Should rendering block on load (not desirable for initial load, often desired for live style-switching)
      options.blocking = options.blocking !== undefined ? options.blocking : true;
      if (this.render_loop !== false) {
        this.setupRenderLoop();
      }

      // Load scene definition (sources, styles, etc.), then create styles & workers
      this.createCanvas();
      this.prev_textures = this.config && Object.keys(this.config.textures); // save textures from last scene
      this.initializing = this.loadScene(config_source, options).then(function (_ref) {
        return new Promise(function ($return, $error) {
          var texture_nodes, serialize_funcs, updating;
          texture_nodes = _ref.texture_nodes;
          return Promise.resolve(_this.createWorkers()).then(function ($await_8) {
            try {
              // Clean up resources from prior scene
              _this.destroyFeatureSelection();
              topojson.WorkerBroker.postMessage(_this.workers, 'self.clearFunctionStringCache');

              // Scene loaded from a JS object, or modified by a `load` event, may contain compiled JS functions
              // which need to be serialized, while one loaded only from a URL does not.
              serialize_funcs = topojson._typeof(_this.config_source) === 'object' || _this.hasSubscribersFor('load');
              updating = _this.updateConfig({
                texture_nodes: texture_nodes,
                serialize_funcs: serialize_funcs,
                normalize: false,
                loading: true,
                fade_in: true
              });
              if (options.blocking === true) {
                return Promise.resolve(updating).then(function ($await_9) {
                  try {
                    return $If_7.call(this);
                  } catch ($boundEx) {
                    return $error($boundEx);
                  }
                }.bind(this), $error);
              }
              function $If_7() {
                _this.freePreviousTextures();
                _this.updating--;
                _this.initializing = null;
                _this.initialized = true;
                _this.last_valid_config_source = _this.config_source;
                _this.last_valid_options = {
                  base_path: options.base_path,
                  file_type: options.file_type
                };
                _this.requestRedraw();
                return $return();
              }
              return $If_7.call(this);
            } catch ($boundEx) {
              return $error($boundEx);
            }
          }.bind(this), $error);
        });
      }).catch(function (error) {
        _this.initializing = null;
        _this.updating = 0;

        // Report and revert to last valid config if available
        var type, message;
        if (error.name === 'YAMLException') {
          type = 'yaml';
          message = 'Error parsing scene YAML';
        } else {
          // TODO: more error types
          message = 'Error initializing scene';
        }
        _this.trigger('error', {
          type: type,
          message: message,
          error: error,
          url: _this.config_source
        });
        message = "Scene.load() failed to load ".concat(JSON.stringify(_this.config_source), ": ").concat(error.message);
        if (_this.last_valid_config_source) {
          topojson.log('warn', message, error);
          topojson.log('info', 'Scene.load() reverting to last valid configuration');
          return _this.load(_this.last_valid_config_source, _this.last_valid_base_path);
        }
        topojson.log('error', message, error);
        throw error;
      });
      return this.initializing;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.initialized = false;
      this.render_loop_stop = true; // schedule render loop to stop

      this.destroyListeners();
      this.destroyFeatureSelection();
      if (this.canvas && this.canvas.parentNode) {
        this.canvas.parentNode.removeChild(this.canvas);
        this.canvas = null;
      }
      this.container = null;
      if (this.gl) {
        topojson.Texture.destroy(this.gl);
        this.style_manager.destroy(this.gl);
        this.styles = {};
        topojson.ShaderProgram.reset();

        // Force context loss
        var ext = this.gl.getExtension('WEBGL_lose_context');
        if (ext) {
          ext.loseContext();
        }
        this.gl = null;
      }
      this.sources = {};
      this.destroyWorkers();
      this.tile_manager.destroy();
      this.tile_manager = null;
      topojson.log.reset();
    }
  }, {
    key: "createCanvas",
    value: function createCanvas() {
      if (this.canvas) {
        return;
      }
      this.container = this.container || document.body;
      this.canvas = document.createElement('canvas');
      this.canvas.style.position = 'absolute';
      this.canvas.style.top = 0;
      this.canvas.style.left = 0;

      // Force tangram canvas underneath all leaflet layers, and set background to transparent
      this.container.style.backgroundColor = 'transparent';
      this.container.appendChild(this.canvas);
      try {
        this.gl = Context$1.getContext(this.canvas, Object.assign({
          alpha: true,
          premultipliedAlpha: true,
          stencil: true,
          device_pixel_ratio: topojson.Utils.device_pixel_ratio,
          powerPreference: 'high-performance'
        }, this.contextOptions));
      } catch (e) {
        throw new Error('Couldn\'t create WebGL context. ' + 'Your browser may not support WebGL, or it\'s turned off? ' + 'Visit http://webglreport.com/ for more info.');
      }
      this.resizeMap(this.container.clientWidth, this.container.clientHeight);
      topojson.VertexArrayObject.init(this.gl);
      this.render_states = new RenderStateManager(this.gl);
      this.media_capture.setCanvas(this.canvas, this.gl);
    }

    // Update list of any custom scripts (either at scene-level or data-source-level)
  }, {
    key: "updateExternalScripts",
    value: function updateExternalScripts() {
      var prev_scripts = topojson._toConsumableArray(this.external_scripts || []); // save list of previously loaded scripts
      var scripts = [];

      // scene-level scripts
      if (this.config.scene.scripts) {
        for (var f in this.config.scene.scripts) {
          if (scripts.indexOf(this.config.scene.scripts[f]) === -1) {
            scripts.push(this.config.scene.scripts[f]);
          }
        }
      }

      // data-source-level scripts
      for (var s in this.config.sources) {
        var source = this.config.sources[s];
        if (source.scripts) {
          for (var _f in source.scripts) {
            if (scripts.indexOf(source.scripts[_f]) === -1) {
              scripts.push(source.scripts[_f]);
            }
          }
        }
      }
      this.external_scripts = scripts;

      // Scripts changed?
      return !(this.external_scripts.length === prev_scripts.length && this.external_scripts.every(function (v, i) {
        return v === prev_scripts[i];
      }));
    }

    // Web workers handle heavy duty tile construction: networking, geometry processing, etc.
  }, {
    key: "createWorkers",
    value: function createWorkers() {
      // Reset old workers (if any) if we need to re-instantiate with new external scripts
      if (this.updateExternalScripts()) {
        this.destroyWorkers();
      }
      if (!this.workers) {
        return this.makeWorkers();
      }
      return Promise.resolve();
    }

    // Instantiate workers from URL, init event handlers
  }, {
    key: "makeWorkers",
    value: function makeWorkers() {
      var _this2 = this;
      // Let VertexElements know if 32 bit indices for element arrays are available
      var has_element_index_uint = this.gl.getExtension('OES_element_index_uint') ? true : false;
      var queue = [];
      this.workers = [];
      var _loop = function _loop() {
        var worker = new Worker(Tangram.workerURL); // eslint-disable-line no-undef
        _this2.workers[id] = worker;
        topojson.WorkerBroker.addWorker(worker);
        topojson.log('debug', "Scene.makeWorkers: initializing worker ".concat(id));
        var _id = id;
        queue.push(topojson.WorkerBroker.postMessage(worker, 'self.init', _this2.id, id, _this2.num_workers, _this2.log_level, topojson.Utils.device_pixel_ratio, has_element_index_uint, _this2.external_scripts).then(function (id) {
          topojson.log('debug', "Scene.makeWorkers: initialized worker ".concat(id));
          return id;
        }, function (error) {
          topojson.log('error', "Scene.makeWorkers: failed to initialize worker ".concat(_id, ":"), error);
          return Promise.reject(error);
        }));
      };
      for (var id = 0; id < this.num_workers; id++) {
        _loop();
      }
      this.next_worker = 0;
      return Promise.all(queue).then(function () {
        topojson.log.setWorkers(_this2.workers);
      });
    }
  }, {
    key: "destroyWorkers",
    value: function destroyWorkers() {
      this.selection = null; // selection needs to be re-initialized when workers are
      if (Array.isArray(this.workers)) {
        topojson.log.setWorkers(null);
        this.workers.forEach(function (worker) {
          worker.terminate();
        });
        this.workers = null;
      }
    }

    // Scene is ready for rendering
  }, {
    key: "ready",
    value: function ready() {
      if (!this.view.ready() || Object.keys(this.sources).length === 0) {
        return false;
      }
      return true;
    }

    // Resize the map when device pixel ratio changes, e.g. when switching between displays
  }, {
    key: "updateDevicePixelRatio",
    value: function updateDevicePixelRatio() {
      var _this3 = this;
      if (topojson.Utils.updateDevicePixelRatio()) {
        topojson.WorkerBroker.postMessage(this.workers, 'self.updateDevicePixelRatio', topojson.Utils.device_pixel_ratio).then(function () {
          return _this3.rebuild();
        }).then(function () {
          return _this3.resizeMap(_this3.view.size.css.width, _this3.view.size.css.height);
        });
      }
    }
  }, {
    key: "resizeMap",
    value: function resizeMap(width, height) {
      if (width === 0 && height === 0) {
        return;
      }
      this.dirty = true;
      this.view.setViewportSize(width, height);
      if (this.gl) {
        Context$1.resize(this.gl, width, height, topojson.Utils.device_pixel_ratio);
      }
    }

    // Request scene be redrawn at next animation loop
  }, {
    key: "requestRedraw",
    value: function requestRedraw() {
      this.dirty = true;
    }

    // Redraw scene immediately - don't wait for animation loop
    // Use sparingly, but for cases where you need the closest possible sync with other UI elements,
    // such as other, non-WebGL map layers (e.g. Leaflet raster layers, markers, etc.)
  }, {
    key: "immediateRedraw",
    value: function immediateRedraw() {
      this.dirty = true;
      this.update();
    }
  }, {
    key: "renderLoop",
    value: function renderLoop() {
      this.render_loop_active = true; // only let the render loop instantiate once

      // Update and render the scene
      this.update();

      // Pending background tasks
      topojson.Task.setState({
        user_moving_view: this.view.user_input_active
      });
      topojson.Task.processAll();

      // Request the next frame if not scheduled to stop
      if (!this.render_loop_stop) {
        window.requestAnimationFrame(this.renderLoop.bind(this));
      } else {
        this.render_loop_stop = false;
        this.render_loop_active = false;
      }
    }

    // Setup the render loop
  }, {
    key: "setupRenderLoop",
    value: function setupRenderLoop() {
      var _this4 = this;
      if (!this.render_loop_active) {
        setTimeout(function () {
          _this4.renderLoop();
        }, 0); // delay start by one tick
      }
    }
  }, {
    key: "update",
    value: function update() {
      // Determine which passes (if any) to render
      var main = this.dirty;
      var selection = this.selection ? this.selection.hasPendingRequests() : false;
      var will_render = !(main === false && selection === false || this.initialized === false || this.updating > 0 || this.ready() === false);

      // Pre-render loop hook
      this.trigger('pre_update', will_render);

      // Update view (needs to update user input timer even if no render will occur)
      this.view.update();

      // Bail if no need to render
      if (!will_render) {
        return false;
      }
      this.dirty = false; // subclasses can set this back to true when animation is needed

      // Render the scene
      this.updateDevicePixelRatio();
      this.render({
        main: main,
        selection: selection
      });
      this.updateViewComplete(); // fires event when rendered tile set or style changes
      this.media_capture.completeScreenshot(); // completes screenshot capture if requested

      // Post-render loop hook
      this.trigger('post_update', will_render);

      // Redraw every frame if animating
      if (this.animated === true || this.view.isAnimating()) {
        this.dirty = true;
      }
      this.frame++;
      topojson.log('trace', 'Scene.render()');
      return true;
    }

    // Accepts flags indicating which render passes should be made
  }, {
    key: "render",
    value: function render(_ref2) {
      var _this5 = this;
      var main = _ref2.main,
        selection = _ref2.selection;
      var gl = this.gl;
      this.updateBackground();
      Object.keys(this.lights).forEach(function (i) {
        return _this5.lights[i].update();
      });

      // Render main pass
      this.render_count_changed = false;
      if (main) {
        this.render_count = this.renderPass();
        this.last_main_render = this.frame;

        // Update feature selection map if necessary
        if (this.render_count !== this.last_render_count) {
          this.render_count_changed = true;
          this.logFirstFrame();
          this.getFeatureSelectionMapSize().then(function (size) {
            _this5.selection_feature_count = size;
            topojson.log('info', "Scene: rendered ".concat(_this5.render_count, " primitives (").concat(size, " features in selection map)"));
          });
        }
        this.last_render_count = this.render_count;
      }

      // Render selection pass (if needed)
      if (selection) {
        if (this.view.panning || this.view.user_input_active) {
          this.selection.clearPendingRequests();
          return;
        }

        // Only re-render if selection buffer is out of date (relative to main render buffer)
        // and not locked (e.g. no tiles are actively building)
        if (!this.selection.locked && this.last_selection_render < this.last_main_render) {
          this.selection.bind(); // switch to FBO
          this.renderPass('selection_program',
          // render w/alternate program
          {
            allow_blend: false
          });

          // Reset to screen buffer
          gl.bindFramebuffer(gl.FRAMEBUFFER, null);
          gl.viewport(0, 0, this.canvas.width, this.canvas.height);
          gl.clearColor.apply(gl, topojson._toConsumableArray(this.background.computed_color)); // restore scene background color
          this.last_selection_render = this.frame;
        }
        this.selection.read(); // process any pending results from selection buffer
      }
      return true;
    }

    // Render all active styles, grouped by blend/depth type (opaque, overlay, etc.) and by program (style)
    // Called both for main render pass, and for secondary passes like selection buffer
  }, {
    key: "renderPass",
    value: function renderPass() {
      var _this6 = this;
      var program_key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';
      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        allow_blend = _ref3.allow_blend;
      // optionally force alpha off (e.g. for selection pass)
      allow_blend = allow_blend == null ? true : allow_blend;
      this.clearFrame();
      var count = 0; // how many primitives were rendered
      var last_blend; // blend mode active in last render pass

      // Get sorted list of current blend orders, with accompanying list of styles to render for each
      var blend_orders = this.style_manager.getActiveBlendOrders();
      var _iterator = _createForOfIteratorHelper(blend_orders),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _step.value,
            blend_order = _step$value.blend_order,
            styles = _step$value.styles;
          var _loop2 = function _loop2() {
            var style = _this6.styles[styles[s]];
            if (style == null) {
              return 1; // continue
            }

            // Only update render state when blend mode changes
            if (style.blend !== last_blend) {
              var state = Object.assign({}, topojson.Style.render_states[style.blend],
              // render state for blend mode
              {
                blend: allow_blend && style.blend
              } // enable/disable blending (e.g. no blend for selection)
              );
              _this6.setRenderState(state);
            }
            var blend = allow_blend && style.blend;
            if (blend === 'translucent') {
              // Depth pre-pass for translucency
              _this6.gl.colorMask(false, false, false, false);
              _this6.renderStyle(style.name, program_key, blend_order);
              _this6.gl.colorMask(true, true, true, true);
              _this6.gl.depthFunc(_this6.gl.EQUAL);

              // Stencil buffer mask prevents overlap/flicker from compounding alpha of overlapping polys
              _this6.gl.enable(_this6.gl.STENCIL_TEST);
              _this6.gl.clearStencil(0);
              _this6.gl.clear(_this6.gl.STENCIL_BUFFER_BIT);
              _this6.gl.stencilFunc(_this6.gl.EQUAL, _this6.gl.ZERO, 0xFF);
              _this6.gl.stencilOp(_this6.gl.KEEP, _this6.gl.KEEP, _this6.gl.INCR);

              // Main render pass
              count += _this6.renderStyle(style.name, program_key, blend_order);

              // Disable translucency-specific settings
              _this6.gl.disable(_this6.gl.STENCIL_TEST);
              _this6.gl.depthFunc(_this6.gl.LESS);
            } else if (blend !== 'opaque' && style.stencil_proxy_tiles === true) {
              // Mask proxy tiles to with stencil buffer to avoid overlap/flicker from compounding alpha
              // Find unique levels of proxy tiles to render for this style
              var proxy_levels = _this6.tile_manager.getRenderableTiles().filter(function (t) {
                return t.meshes[style.name];
              }) // must have meshes for this style
              .map(function (t) {
                return t.proxy_level;
              }) // get the proxy depth
              .reduce(function (levels, level) {
                // count unique proxy depths
                levels.indexOf(level) > -1 || levels.push(level);
                return levels;
              }, []).sort(); // sort by lower depth first

              if (proxy_levels.length > 1) {
                // When there are multiple "levels" of tiles to render (e.g. non-proxy and one or more proxy
                // tile levels, or multiple proxy tile levels but no non-proxy tiles, etc.):
                // Render each proxy tile level to stencil buffer, masking each level such that it will not
                // render over any pixel rendered by a previous proxy tile level.
                _this6.gl.enable(_this6.gl.STENCIL_TEST);
                _this6.gl.clearStencil(0);
                _this6.gl.clear(_this6.gl.STENCIL_BUFFER_BIT);
                _this6.gl.stencilOp(_this6.gl.KEEP, _this6.gl.KEEP, _this6.gl.REPLACE);
                for (var i = 0; i < proxy_levels.length; i++) {
                  // stencil test passes either for zero (not-yet-rendered),
                  // or for other pixels at this proxy level (but not previous proxy levels)
                  _this6.gl.stencilFunc(_this6.gl.GEQUAL, proxy_levels.length - i, 0xFF);
                  count += _this6.renderStyle(style.name, program_key, blend_order, proxy_levels[i]);
                }
                _this6.gl.disable(_this6.gl.STENCIL_TEST);
              } else {
                // No special render handling needed when there are no proxy tiles,
                // or if there is ONLY a single proxy tile level (e.g. with no non-proxy tiles)
                count += _this6.renderStyle(style.name, program_key, blend_order);
              }
            } else {
              // Regular render pass (no special blend handling, or selection buffer pass)
              count += _this6.renderStyle(style.name, program_key, blend_order);
            }
            last_blend = style.blend;
          };
          // Render each style
          for (var s = 0; s < styles.length; s++) {
            if (_loop2()) continue;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return count;
    }
  }, {
    key: "renderStyle",
    value: function renderStyle(style_name, program_key, blend_order) {
      var _this7 = this;
      var proxy_level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var style = this.styles[style_name];
      var first_for_style = true; // TODO: allow this state to be passed in (for multilpe blend orders, stencil tests, etc)
      var render_count = 0;
      var program;

      // Render tile GL geometries
      var renderable_tiles = this.tile_manager.getRenderableTiles();

      // For each tile, only include meshes for the blend order currently being rendered
      // Builds an array tiles and their associated meshes, each as a [tile, meshes] 2-element array
      var tile_meshes = renderable_tiles.filter(function (t) {
        return typeof proxy_level !== 'number' || t.proxy_level === proxy_level;
      }) // optional filter by proxy level
      .map(function (t) {
        if (t.meshes[style_name]) {
          return [t, t.meshes[style_name].filter(function (m) {
            return m.variant.blend_order === blend_order;
          })];
        }
      }).filter(function (x) {
        return x;
      }); // skip tiles with no meshes for this blend order

      // Mesh variants must be rendered in requested order across tiles, to prevent labels that cross
      // tile boundaries from rendering over adjacent tile features meant to be underneath
      var max_mesh_order = Math.max.apply(Math, topojson._toConsumableArray(tile_meshes.map(function (_ref4) {
        var _ref5 = topojson._slicedToArray(_ref4, 2),
          meshes = _ref5[1];
        return Math.max.apply(Math, topojson._toConsumableArray(meshes.map(function (m) {
          return m.variant.mesh_order;
        })));
      })));

      // One pass per mesh variant order (loop goes to max value +1 because 0 is a valid order value)
      var _loop3 = function _loop3(mo) {
          // Loop over tiles, with meshes pre-filtered by current blend order
          var _iterator2 = _createForOfIteratorHelper(tile_meshes),
            _step2;
          try {
            var _loop4 = function _loop4() {
                var _step2$value = topojson._slicedToArray(_step2.value, 2),
                  tile = _step2$value[0],
                  meshes = _step2$value[1];
                var first_for_tile = true;

                // Skip proxy tiles if new tiles have finished loading this style
                if (!tile.shouldProxyForStyle(style_name)) {
                  // log('trace', `Scene.renderStyle(): Skip proxy tile for style '${style_name}' `, tile, tile.proxy_for);
                  return 0; // continue
                }

                // Filter meshes further by current variant order
                var order_meshes = meshes.filter(function (m) {
                  return m.variant.mesh_order === mo;
                });
                if (order_meshes.length === 0) {
                  return 0; // continue
                }

                // Style-specific state
                // Only setup style if rendering for first time this frame
                // (lazy init, not all styles will be used in all screen views; some styles might be defined but never used)
                if (first_for_style === true) {
                  first_for_style = false;
                  program = _this7.setupStyle(style, program_key);
                  if (!program) {
                    // no program found, e.g. happens when rendering selection pass, but style doesn't support selection
                    return {
                      v: {
                        v: 0
                      }
                    };
                  }
                }

                // Render each mesh (for current variant order)
                order_meshes.forEach(function (mesh) {
                  // Tile-specific state
                  if (first_for_tile === true) {
                    first_for_tile = false;
                    _this7.view.setupTile(tile, program);
                  }

                  // Render this mesh variant
                  if (style.render(mesh)) {
                    _this7.requestRedraw();
                  }
                  render_count += mesh.geometry_count;
                });
              },
              _ret2;
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              _ret2 = _loop4();
              if (_ret2 === 0) continue;
              if (_ret2) return _ret2.v;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        },
        _ret;
      for (var mo = 0; mo < max_mesh_order + 1; mo++) {
        _ret = _loop3(mo);
        if (_ret) return _ret.v;
      }
      return render_count;
    }
  }, {
    key: "setupStyle",
    value: function setupStyle(style, program_key) {
      // Get shader program from style, lazily compiling if necessary
      var program;
      try {
        program = style.getProgram(program_key);
        if (!program) {
          return;
        }
      } catch (error) {
        this.trigger('warning', {
          type: 'styles',
          message: "Error compiling style ".concat(style.name),
          style: style,
          shader_errors: style.program && style.program.shader_errors
        });
        return;
      }
      program.use();
      style.setup();
      program.uniform('1f', 'u_time', this.animated ? (+new Date() - this.start_time) / 1000 : 0);
      this.view.setupProgram(program);
      for (var i in this.lights) {
        this.lights[i].setupProgram(program);
      }
      return program;
    }
  }, {
    key: "clearFrame",
    value: function clearFrame() {
      if (!this.initialized) {
        return;
      }
      this.render_states.depth_write.set({
        depth_write: true
      });
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT | this.gl.STENCIL_BUFFER_BIT);
    }
  }, {
    key: "setRenderState",
    value: function setRenderState() {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        depth_test = _ref6.depth_test,
        depth_write = _ref6.depth_write,
        cull_face = _ref6.cull_face,
        blend = _ref6.blend;
      if (!this.initialized) {
        return;
      }

      // Defaults
      // TODO: when we abstract out support for multiple render passes, these can be per-pass config options
      var render_states = this.render_states;
      depth_test = depth_test === false ? false : render_states.defaults.depth_test; // default true
      depth_write = depth_write === false ? false : render_states.defaults.depth_write; // default true
      cull_face = cull_face === false ? false : render_states.defaults.culling; // default true
      blend = blend != null ? blend : render_states.defaults.blending; // default false

      // Reset frame state
      var gl = this.gl;
      render_states.depth_test.set({
        depth_test: depth_test
      });
      render_states.depth_write.set({
        depth_write: depth_write
      });
      render_states.culling.set({
        cull: cull_face,
        face: render_states.defaults.culling_face
      });

      // Blending of alpha channel is modified to account for WebGL alpha behavior, see:
      // http://webglfundamentals.org/webgl/lessons/webgl-and-alpha.html
      // http://stackoverflow.com/a/11533416
      if (blend) {
        // Opaque: all source, no destination
        if (blend === 'opaque') {
          render_states.blending.set({
            blend: false
          });
        }
        // Traditional alpha blending
        else if (blend === 'overlay' || blend === 'inlay' || blend === 'translucent') {
          render_states.blending.set({
            blend: true,
            src: gl.SRC_ALPHA,
            dst: gl.ONE_MINUS_SRC_ALPHA,
            src_alpha: gl.ONE,
            dst_alpha: gl.ONE_MINUS_SRC_ALPHA
          });
        }
        // Additive blending
        else if (blend === 'add') {
          render_states.blending.set({
            blend: true,
            src: gl.ONE,
            dst: gl.ONE
          });
        }
        // Multiplicative blending
        else if (blend === 'multiply') {
          render_states.blending.set({
            blend: true,
            src: gl.ZERO,
            dst: gl.SRC_COLOR
          });
        }
      } else {
        render_states.blending.set({
          blend: false
        });
      }
    }

    // Request feature selection at given pixel. Runs async and returns results via a promise.
  }, {
    key: "getFeatureAt",
    value: function getFeatureAt(pixel) {
      var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        radius = _ref7.radius;
      if (!this.initialized) {
        topojson.log('debug', 'Scene.getFeatureAt() called before scene was initialized');
        return Promise.resolve();
      }

      // skip selection if no interactive features
      if (this.selection_feature_count === 0) {
        return Promise.resolve();
      }

      // only instantiate feature selection on-demand
      if (!this.selection) {
        this.resetFeatureSelection();
      }

      // Scale point and radius to [0..1] range
      var point = {
        x: pixel.x / this.view.size.css.width,
        y: pixel.y / this.view.size.css.height
      };
      if (radius > 0) {
        radius = {
          x: radius / this.view.size.css.width,
          y: radius / this.view.size.css.height
        };
      } else {
        radius = null;
      }
      return this.selection.getFeatureAt(point, {
        radius: radius
      }).then(function (selection) {
        return Object.assign(selection, {
          pixel: pixel
        });
      }).catch(function (error) {
        return Promise.resolve({
          error: error
        });
      });
    }

    // Query features within visible tiles, with optional filter conditions
  }, {
    key: "queryFeatures",
    value: function queryFeatures() {
      var $args = arguments;
      return new Promise(function ($return, $error) {
        var _ref8, filter, _ref8$unique, unique, _ref8$group_by, group_by, _ref8$visible, visible, _ref8$geometry, geometry, uniqueify_on_id, uniqueify, group, tile_keys, results, features, keys, groups;
        _ref8 = $args.length > 0 && $args[0] !== undefined ? $args[0] : {}, filter = _ref8.filter, _ref8$unique = _ref8.unique, unique = _ref8$unique === void 0 ? true : _ref8$unique, _ref8$group_by = _ref8.group_by, group_by = _ref8$group_by === void 0 ? null : _ref8$group_by, _ref8$visible = _ref8.visible, visible = _ref8$visible === void 0 ? null : _ref8$visible, _ref8$geometry = _ref8.geometry, geometry = _ref8$geometry === void 0 ? false : _ref8$geometry;
        if (!this.initialized) {
          return $return([]);
        }
        filter = topojson.Utils.serializeWithFunctions(filter);

        // Optional uniqueify criteria
        // Valid values: true, false/null, single property name, or array of property names
        unique = typeof unique === 'string' ? [unique] : unique;
        uniqueify_on_id = unique === true || Array.isArray(unique) && unique.indexOf('$id') > -1;
        uniqueify = unique && function (obj) {
          var properties = Array.isArray(unique) ? topojson.sliceObject(obj.properties, unique) : obj.properties;
          var id = uniqueify_on_id ? obj.id : null;
          if (geometry) {
            // when `geometry` flag is set, we need to uniqueify based on *both* feature properties and geometry
            return JSON.stringify({
              geometry: obj.geometry,
              properties: properties,
              id: id
            });
          }
          return JSON.stringify({
            properties: properties,
            id: id
          });
        };
        // Optional grouping criteria
        // Valid values: false/null, single property name, or array of property names
        group_by = (typeof group_by === 'string' || Array.isArray(group_by)) && group_by;
        group = group_by && function (obj) {
          return Array.isArray(group_by) ? JSON.stringify(topojson.sliceObject(obj, group_by)) : obj[group_by];
        };
        tile_keys = this.tile_manager.getRenderableTiles().map(function (t) {
          return t.key;
        });
        return Promise.resolve(topojson.WorkerBroker.postMessage(this.workers, 'self.queryFeatures', {
          filter: filter,
          visible: visible,
          geometry: geometry,
          tile_keys: tile_keys
        })).then(function ($await_10) {
          try {
            results = $await_10;
            features = [];
            keys = {};
            groups = {};
            results.forEach(function (r) {
              return r.forEach(function (feature) {
                if (uniqueify) {
                  var str = uniqueify(feature);
                  if (keys[str]) {
                    return;
                  }
                  keys[str] = true;
                }
                if (group) {
                  var _str = group(feature.properties);
                  groups[_str] = groups[_str] || [];
                  groups[_str].push(feature);
                } else {
                  features.push(feature);
                }
              });
            });
            return $return(group ? groups : features); // returned grouped results, or all results
          } catch ($boundEx) {
            return $error($boundEx);
          }
        }, $error);
      }.bind(this));
    }

    // Rebuild all tiles, without re-parsing the config or re-compiling styles
    // sync: boolean of whether to sync the config object to the worker
    // sources: optional array of data sources to selectively rebuild (by default all our rebuilt)
  }, {
    key: "rebuild",
    value: function rebuild() {
      var _this8 = this;
      var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref9$initial = _ref9.initial,
        initial = _ref9$initial === void 0 ? false : _ref9$initial,
        _ref9$new_generation = _ref9.new_generation,
        new_generation = _ref9$new_generation === void 0 ? true : _ref9$new_generation,
        _ref9$sources = _ref9.sources,
        sources = _ref9$sources === void 0 ? null : _ref9$sources,
        serialize_funcs = _ref9.serialize_funcs,
        _ref9$profile = _ref9.profile,
        profile = _ref9$profile === void 0 ? false : _ref9$profile,
        _ref9$fade_in = _ref9.fade_in,
        fade_in = _ref9$fade_in === void 0 ? false : _ref9$fade_in;
      return new Promise(function (resolve, reject) {
        // Skip rebuild if already in progress
        if (_this8.building) {
          // Queue up to one rebuild call at a time, only save last request
          if (_this8.building.queued && _this8.building.queued.reject) {
            // notify previous request that it did not complete
            topojson.log('debug', 'Scene.rebuild: request superceded by a newer call');
            _this8.building.queued.resolve(false); // false flag indicates rebuild request was superceded
          }

          // Save queued request
          var options = {
            initial: initial,
            new_generation: new_generation,
            sources: sources,
            serialize_funcs: serialize_funcs,
            profile: profile,
            fade_in: fade_in
          };
          _this8.building.queued = {
            resolve: resolve,
            reject: reject,
            options: options
          };
          topojson.log('trace', 'Scene.rebuild(): queuing request');
          return;
        }

        // Track tile build state
        _this8.building = {
          resolve: resolve,
          reject: reject,
          initial: initial
        };

        // Profiling
        if (profile) {
          _this8.debug.profile('Scene.rebuild');
        }

        // Increment generation to ensure style/tile building stay in sync
        // (skipped if calling function already incremented)
        if (new_generation) {
          _this8.generation = ++Scene.generation;
          for (var style in _this8.styles) {
            _this8.styles[style].setGeneration(_this8.generation);
          }
        }

        // Update config (in case JS objects were manipulated directly)
        _this8.syncConfigToWorker({
          serialize_funcs: serialize_funcs
        });
        _this8.resetWorkerFeatureSelection(sources);
        _this8.resetTime();

        // Rebuild visible tiles
        _this8.tile_manager.pruneToVisibleTiles();
        _this8.tile_manager.forEachTile(function (tile) {
          if (!sources || sources.indexOf(tile.source.name) > -1) {
            _this8.tile_manager.buildTile(tile, {
              fade_in: fade_in
            });
          }
        });
        _this8.tile_manager.updateTilesForView(); // picks up additional tiles for any new/changed data sources
        _this8.tile_manager.checkBuildQueue(); // resolve immediately if no tiles to build
      }).then(function () {
        // Profiling
        if (profile) {
          _this8.debug.profileEnd('Scene.rebuild');
        }
      });
    }

    // Tile manager finished building tiles
    // TODO move to tile manager
  }, {
    key: "tileManagerBuildDone",
    value: function tileManagerBuildDone() {
      topojson.TextCanvas.pruneTextCache();
      if (this.building) {
        topojson.log('info', 'Scene: build geometry finished');
        if (this.building.resolve) {
          this.logFirstBuild();
          this.building.resolve(true);
        }

        // Another rebuild queued?
        var queued = this.building.queued;
        this.building = null;
        if (queued) {
          topojson.log('debug', 'Scene: starting queued rebuild() request');
          this.rebuild(queued.options).then(queued.resolve, queued.reject);
        } else {
          this.tile_manager.updateLabels(); // refresh label if nothing to rebuild
        }
      }
    }

    /**
       Load (or reload) the scene config
       @return {Promise}
    */
  }, {
    key: "loadScene",
    value: function loadScene() {
      var $args = arguments;
      return new Promise(function ($return, $error) {
        var config_source, _ref10, base_path, file_type, _await$SceneLoader$lo, config, bundle, texture_nodes;
        config_source = $args.length > 0 && $args[0] !== undefined ? $args[0] : null;
        _ref10 = $args.length > 1 && $args[1] !== undefined ? $args[1] : {}, base_path = _ref10.base_path, file_type = _ref10.file_type;
        this.config_source = config_source || this.config_source;
        if (typeof this.config_source === 'string') {
          this.base_path = topojson.pathForURL(base_path || this.config_source);
        } else {
          this.base_path = topojson.pathForURL(base_path);
        }

        // backwards compatibility for accessing base path under previous name
        // TODO: schedule for deprecation
        this.config_path = this.base_path;
        return Promise.resolve(SceneLoader.loadScene(this.config_source, {
          path: this.base_path,
          type: file_type
        })).then(function ($await_11) {
          try {
            _await$SceneLoader$lo = $await_11, config = _await$SceneLoader$lo.config, bundle = _await$SceneLoader$lo.bundle, texture_nodes = _await$SceneLoader$lo.texture_nodes;
            this.config = config;
            this.config_bundle = bundle;
            return $return({
              texture_nodes: texture_nodes
            }); // pass along texture nodes for resolution after global property subtistution
          } catch ($boundEx) {
            return $error($boundEx);
          }
        }.bind(this), $error);
      }.bind(this));
    }

    // Add source to a scene, arguments `name` and `config` need to be provided:
    //  - If the name doesn't match a sources it will create it
    //  - the `config` obj follow the YAML scene spec, ex: ```{type: 'TopoJSON', url: "//tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson"]}```
    //    that looks like:
    //
    //      scene.setDataSource("osm", {type: 'TopoJSON', url: "//tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson" });
    //
    //  - also can be pass a ```data``` obj: ```{type: 'GeoJSON', data: JSObj ]}```
    //
    //      var geojson_data = {};
    //      ...
    //      scene.setDataSource("dynamic_data", {type: 'GeoJSON', data: geojson_data });
    //
  }, {
    key: "setDataSource",
    value: function setDataSource(name, config) {
      if (!name || !config || !config.type || !config.url && !config.data) {
        topojson.log('error', 'No name provided or not a valid config:', name, config);
        return;
      }
      var load = this.config.sources[name] == null;
      var source = this.config.sources[name] = Object.assign({}, config);

      // Convert raw data into blob URL
      if (source.data && topojson._typeof(source.data) === 'object') {
        source.url = topojson.createObjectURL(new Blob([JSON.stringify(source.data)], {
          type: 'application/json'
        }));
        delete source.data;
      }
      if (load) {
        return this.updateConfig({
          rebuild: {
            sources: [name]
          }
        });
      } else {
        return this.rebuild({
          sources: [name]
        });
      }
    }

    // (Re-)create all data sources. Re-layout view and rebuild tiles when either:
    // 1) all tiles if `rebuild_all` parameter is specified (used when loading a new scene)
    // 2) the data source has changed in a way that affects tile layout (e.g. tile size, max_zoom, etc.)
  }, {
    key: "createDataSources",
    value: function createDataSources() {
      var _this9 = this;
      var rebuild_all = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var reset = []; // sources to reset
      var prev_source_names = Object.keys(this.sources);
      var source_id = 0;
      for (var name in this.config.sources) {
        var source = this.config.sources[name];
        var prev_source = this.sources[name];
        try {
          var config = _objectSpread(_objectSpread({}, source), {}, {
            name: name,
            id: source_id++
          });
          this.sources[name] = topojson.DataSource.create(config, this.sources);
          if (!this.sources[name]) {
            throw {};
          }
        } catch (e) {
          delete this.sources[name];
          var message = "Could not create data source: ".concat(e.message);
          topojson.log('warn', "Scene: ".concat(message), source);
          this.trigger('warning', {
            type: 'sources',
            source: source,
            message: message
          });
        }

        // Data source changed in a way that affects tile layout?
        // If so, we'll re-calculate the tiles in view for this source and rebuild them
        if (rebuild_all || topojson.DataSource.tileLayoutChanged(this.sources[name], prev_source)) {
          reset.push(name);
        }
      }

      // Sources that were removed
      prev_source_names.forEach(function (s) {
        if (!_this9.config.sources[s]) {
          delete _this9.sources[s]; // TODO: remove from workers too?
          reset.push(s);
        }
      });

      // Remove tiles from sources that have changed
      if (reset.length > 0) {
        this.tile_manager.removeTiles(function (tile) {
          return reset.indexOf(tile.source.name) > -1;
        });
      }

      // Mark sources that will generate geometry tiles (any that are referenced in scene layers)
      for (var ln in this.config.layers) {
        var layer = this.config.layers[ln];
        if (layer.enabled !== false && layer.data && this.sources[layer.data.source]) {
          this.sources[layer.data.source].builds_geometry_tiles = true;
        }
      }
    }

    // Load all textures in the scene definition
  }, {
    key: "loadTextures",
    value: function loadTextures() {
      var _this10 = this;
      return topojson.Texture.createFromObject(this.gl, this.config.textures).then(function () {
        return topojson.Texture.createDefault(_this10.gl);
      }); // create a 'default' texture for placeholders
    }

    // Free textures from previously loaded scene
  }, {
    key: "freePreviousTextures",
    value: function freePreviousTextures() {
      var _this11 = this;
      if (!this.prev_textures) {
        return;
      }
      this.prev_textures.forEach(function (t) {
        // free textures that aren't in the new scene, but are still in the global texture set
        if (!_this11.config.textures[t] && topojson.Texture.textures[t]) {
          topojson.Texture.textures[t].destroy();
        }
      });
      this.prev_textures = null;
    }

    // Called (currently manually) after styles are updated in stylesheet
  }, {
    key: "updateStyles",
    value: function updateStyles() {
      if (!this.initialized && !this.initializing) {
        throw new Error('Scene.updateStyles() called before scene was initialized');
      }

      // (Re)build styles from config
      this.styles = this.style_manager.build(this.config.styles);
      this.style_manager.initStyles(this);

      // Optionally set GL context (used when initializing or re-initializing GL resources)
      for (var style in this.styles) {
        this.styles[style].setGL(this.gl);
      }
      this.dirty = true;
    }

    // Is scene currently animating?
  }, {
    key: "animated",
    get: function get() {
      var _this12 = this;
      // Disable animation is scene flag requests it, otherwise enable animation if any animated styles are in view
      return this.config.scene.animated === false ? false : this.style_manager.getActiveStyles().some(function (s) {
        return _this12.styles[s].animated;
      });
    }

    // Get active camera - for public API
  }, {
    key: "getActiveCamera",
    value: function getActiveCamera() {
      return this.view.getActiveCamera();
    }

    // Set active camera - for public API
  }, {
    key: "setActiveCamera",
    value: function setActiveCamera(name) {
      return this.view.setActiveCamera(name);
    }

    // Create lighting
  }, {
    key: "createLights",
    value: function createLights() {
      this.lights = {};
      if (topojson.debugSettings.wireframe) {
        topojson.Light.enabled = false; // disable lighting for wireframe mode
      }
      for (var i in this.config.lights) {
        if (!this.config.lights[i] || topojson._typeof(this.config.lights[i]) !== 'object') {
          continue;
        }
        var light = this.config.lights[i];
        light.name = i.replace('-', '_'); // light names are injected in shaders, can't have hyphens
        light.visible = light.visible === false ? false : true;
        if (light.visible) {
          this.lights[light.name] = topojson.Light.create(this.view, light);
        }
      }
      topojson.Light.inject(this.lights);
    }

    // Set background color from scene config
  }, {
    key: "setBackground",
    value: function setBackground() {
      var bg = this.config.scene.background;
      this.background = {};
      if (bg && bg.color) {
        this.background.color = topojson.StyleParser.createColorPropertyCache(bg.color);
      }
      if (!this.background.color) {
        this.background.color = topojson.StyleParser.createColorPropertyCache([0, 0, 0, 0]); // default background TODO: vary w/scene alpha
      }
    }

    // Update background color each frame as needed (e.g. may be zoom-interpolated)
  }, {
    key: "updateBackground",
    value: function updateBackground() {
      var last_color = this.background.computed_color;
      var color = this.background.computed_color = topojson.StyleParser.evalCachedColorProperty(this.background.color, {
        zoom: this.view.tile_zoom
      });

      // update GL/canvas if color has changed
      if (!last_color || color.some(function (v, i) {
        return last_color[i] !== v;
      })) {
        var _this$gl;
        // if background is fully opaque, set canvas background to match
        if (color[3] === 1) {
          this.canvas.style.backgroundColor = "rgba(".concat(color.map(function (c) {
            return Math.floor(c * 255);
          }).join(', '), ")");
        } else {
          this.canvas.style.backgroundColor = 'transparent';
        }
        (_this$gl = this.gl).clearColor.apply(_this$gl, topojson._toConsumableArray(color));
      }
    }

    // Turn introspection mode on/off
  }, {
    key: "setIntrospection",
    value: function setIntrospection(val) {
      var _this13 = this;
      if (val !== this.introspection) {
        this.introspection = val != null ? val : false;
        this.updating++;
        return this.updateConfig({
          normalize: false
        }).then(function () {
          return _this13.updating--;
        });
      }
      return Promise.resolve();
    }

    // Update scene config, and optionally rebuild geometry
    // rebuild can be boolean, or an object containing rebuild options to passthrough
  }, {
    key: "updateConfig",
    value: function updateConfig() {
      var _this14 = this;
      var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref11$loading = _ref11.loading,
        loading = _ref11$loading === void 0 ? false : _ref11$loading,
        _ref11$rebuild = _ref11.rebuild,
        rebuild = _ref11$rebuild === void 0 ? true : _ref11$rebuild,
        serialize_funcs = _ref11.serialize_funcs,
        _ref11$texture_nodes = _ref11.texture_nodes,
        texture_nodes = _ref11$texture_nodes === void 0 ? {} : _ref11$texture_nodes,
        _ref11$normalize = _ref11.normalize,
        normalize = _ref11$normalize === void 0 ? true : _ref11$normalize,
        _ref11$fade_in = _ref11.fade_in,
        fade_in = _ref11$fade_in === void 0 ? false : _ref11$fade_in;
      this.generation = ++Scene.generation;
      this.updating++;

      // Apply globals, finalize textures and other resource paths if needed
      this.config = SceneLoader.applyGlobalProperties(this.config);
      if (normalize) {
        // normalize whole scene if requested - usually when user is making run-time updates to scene
        SceneLoader.normalize(this.config, this.config_bundle, texture_nodes);
      }
      SceneLoader.hoistTextureNodes(this.config, this.config_bundle, texture_nodes);
      this.trigger(loading ? 'load' : 'update', {
        config: this.config
      });
      this.style_manager.init();
      this.view.reset();
      this.createLights();
      this.createDataSources(loading);
      this.loadTextures();
      this.setBackground();
      topojson.FontManager.loadFonts(this.config.fonts);

      // TODO: detect changes to styles? already (currently) need to recompile anyway when camera or lights change
      this.updateStyles();

      // Optionally rebuild geometry
      var done = rebuild ? this.rebuild(Object.assign({
        initial: loading,
        new_generation: false,
        serialize_funcs: serialize_funcs,
        fade_in: fade_in
      }, topojson._typeof(rebuild) === 'object' && rebuild)) : this.syncConfigToWorker({
        serialize_funcs: serialize_funcs
      }); // rebuild() also syncs config

      // Finish by updating bounds and re-rendering
      this.updating--;
      this.view.updateBounds();
      this.requestRedraw();
      return done.then(function () {
        _this14.last_render_count = 0; // force re-evaluation of selection map
        _this14.requestRedraw();
      });
    }

    // Serialize config and send to worker
  }, {
    key: "syncConfigToWorker",
    value: function syncConfigToWorker() {
      var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref12$serialize_func = _ref12.serialize_funcs,
        serialize_funcs = _ref12$serialize_func === void 0 ? true : _ref12$serialize_func;
      // Tell workers we're about to rebuild (so they can update styles, etc.)
      var config_serialized = serialize_funcs ? topojson.Utils.serializeWithFunctions(this.config) : JSON.stringify(this.config);
      return topojson.WorkerBroker.postMessage(this.workers, 'self.updateConfig', {
        config: config_serialized,
        generation: this.generation,
        introspection: this.introspection
      }, topojson.debugSettings);
    }

    // Listen to related objects
  }, {
    key: "createListeners",
    value: function createListeners() {
      var _this15 = this;
      this.listeners = {};
      this.listeners.view = {
        move: function move() {
          return _this15.trigger('move');
        }
      };
      this.view.subscribe(this.listeners.view);
      this.listeners.texture = {
        update: function update() {
          return _this15.dirty = true;
        },
        warning: function warning(data) {
          return _this15.trigger('warning', Object.assign({
            type: 'textures'
          }, data));
        }
      };
      topojson.Texture.subscribe(this.listeners.texture);
      this.listeners.scene_loader = {
        error: function error(data) {
          return _this15.trigger('error', Object.assign({
            type: 'scene'
          }, data));
        }
      };
      SceneLoader.subscribe(this.listeners.scene_loader);
    }
  }, {
    key: "destroyListeners",
    value: function destroyListeners() {
      this.unsubscribeAll();
      this.view.unsubscribe(this.listeners.view);
      topojson.Texture.unsubscribe(this.listeners.texture);
      SceneLoader.unsubscribe(this.listeners.scene_loader);
      this.listeners = null;
    }
  }, {
    key: "destroyFeatureSelection",
    value: function destroyFeatureSelection() {
      if (this.selection) {
        this.selection.destroy();
        this.selection = null;
      }
    }
  }, {
    key: "resetFeatureSelection",
    value: function resetFeatureSelection() {
      var _this16 = this;
      this.selection = new topojson.FeatureSelection(this.gl, this.workers, function () {
        return _this16.building;
      });
      this.last_render_count = 0; // force re-evaluation of selection map
    }
  }, {
    key: "resetWorkerFeatureSelection",
    value: function resetWorkerFeatureSelection() {
      var sources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (this.workers) {
        topojson.WorkerBroker.postMessage(this.workers, 'self.resetFeatureSelection', sources);
      }
    }

    // Gets the current feature selection map size across all workers. Returns a promise.
  }, {
    key: "getFeatureSelectionMapSize",
    value: function getFeatureSelectionMapSize() {
      var _this17 = this;
      // Only allow one fetch process to run at a time
      if (this.fetching_selection_map == null) {
        this.fetching_selection_map = topojson.WorkerBroker.postMessage(this.workers, 'self.getFeatureSelectionMapSize').then(function (sizes) {
          _this17.fetching_selection_map = null;
          return sizes.reduce(function (a, b) {
            return a + b;
          });
        });
      }
      return this.fetching_selection_map;
    }

    // Reset internal clock, mostly useful for consistent experience when changing styles/debugging
  }, {
    key: "resetTime",
    value: function resetTime() {
      this.start_time = +new Date();
    }

    // Fires event when rendered tile set or style changes
  }, {
    key: "updateViewComplete",
    value: function updateViewComplete() {
      if ((this.render_count_changed || this.generation !== this.last_complete_generation) && !this.building && !this.tile_manager.isLoadingVisibleTiles() && this.tile_manager.allVisibleTilesLabeled()) {
        this.tile_manager.updateLabels();
        this.last_complete_generation = this.generation;
        this.trigger('view_complete', {
          first: this.view_complete !== true
        });
        this.view_complete = true;
      }
    }
  }, {
    key: "resetViewComplete",
    value: function resetViewComplete() {
      this.last_complete_generation = null;
    }

    // Take a screenshot
    // Asynchronous because we have to wait for next render to capture buffer
    // Returns a promise
  }, {
    key: "screenshot",
    value: function screenshot() {
      var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref13$background = _ref13.background,
        background = _ref13$background === void 0 ? 'white' : _ref13$background;
      this.requestRedraw();
      return this.media_capture.screenshot({
        background: background
      });
    }
  }, {
    key: "startVideoCapture",
    value: function startVideoCapture() {
      this.requestRedraw();
      return this.media_capture.startVideoCapture();
    }
  }, {
    key: "stopVideoCapture",
    value: function stopVideoCapture() {
      return this.media_capture.stopVideoCapture();
    }

    // Log first frame rendered (with any geometry)
  }, {
    key: "logFirstFrame",
    value: function logFirstFrame() {
      if (this.last_render_count === 0 && !this.times.first_frame) {
        this.times.first_frame = +new Date() - this.start_time;
        topojson.log('debug', "Scene: initial frame time: ".concat(this.times.first_frame));
      }
    }

    // Log completion of first scene build
  }, {
    key: "logFirstBuild",
    value: function logFirstBuild() {
      if (this.times.first_build == null) {
        this.times.first_build = +new Date() - this.start_time;
        topojson.log('debug', "Scene: initial build time: ".concat(this.times.first_build));
      }
    }
  }], [{
    key: "create",
    value: function create(config) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return new Scene(config, options);
    }
  }]);
}();
Scene.id = 0; // unique id for a scene instance
Scene.generation = 0; // id that is incremented each time a scene config is re-parsed

// Debounce a function
// https://davidwalsh.name/javascript-debounce-function
function debounce(func, wait) {
  var timeout;
  return function () {
    var context = this,
      args = arguments;
    var later = function later() {
      timeout = null;
      func.apply(context, args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Exports must appear outside a function, but will only be defined in main thread (below)
var LeafletLayer;
function leafletLayer(options) {
  return extendLeaflet(options);
}

// save references to overloaded Leaflet methods
var originalHandlers = {
  map: {},
  scrollWheelZoom: {},
  doubleClickZoom: {}
};
function extendLeaflet(options) {
  // If LeafletLayer is already defined when this is called just return that immediately
  // e.g. if you call leafletLayer multiple times (which is valid)
  if (typeof LeafletLayer !== 'undefined') {
    return new LeafletLayer(options);
  }

  // Leaflet layer functionality is only defined in main thread
  if (topojson.Thread.is_main) {
    var L = options.leaflet || window.L;

    // Determine if we are extending the leaflet 0.7.x TileLayer class, or the newer
    // leaflet 1.x GridLayer class.
    var layerBaseClass = L.GridLayer ? L.GridLayer : L.TileLayer;
    var leafletVersion = layerBaseClass === L.GridLayer ? '1.x' : '0.7.x';
    var layerClassConfig = {};
    var setZoomAroundNoMoveEnd; // alternate zoom functions defined below

    // If extending leaflet 0.7.x TileLayer, additional modifications are needed
    if (layerBaseClass === L.TileLayer) {
      layerClassConfig._addTile = function () {};
      layerClassConfig._removeTile = function () {};
      layerClassConfig._reset = function () {
        layerBaseClass.prototype._reset.apply(this, arguments);
        // re-add the canvas since base class `viewreset` event can remove it
        if (this.scene && this.scene.container && this.scene.canvas) {
          this.scene.container.appendChild(this.scene.canvas);
        }
      };
    }

    // Define custom layer methods
    Object.assign(layerClassConfig, {
      initialize: function initialize(options) {
        // Defaults
        options.showDebug = !options.showDebug ? false : true;
        L.setOptions(this, options);
        this.updateTangramDebugSettings();
        this.createScene();
        this.hooks = {};
        this._updating_tangram = false;
      },
      createScene: function createScene() {
        this.scene = Scene.create(this.options.scene, {
          numWorkers: this.options.numWorkers,
          preUpdate: this.options.preUpdate,
          postUpdate: this.options.postUpdate,
          continuousZoom: LeafletLayer.leafletVersion === '1.x',
          wrapView: this.options.noWrap === true ? false : true,
          highDensityDisplay: this.options.highDensityDisplay,
          logLevel: this.options.logLevel,
          introspection: this.options.introspection,
          // turn scene introspection on/off
          webGLContextOptions: this.options.webGLContextOptions,
          // override/supplement WebGL context options
          disableRenderLoop: this.options.disableRenderLoop // app must call scene.update() per frame
        });
      },
      // Finish initializing scene and setup events when layer is added to map
      onAdd: function onAdd(map) {
        var _this = this;
        if (!this.scene) {
          this.createScene();
        }
        layerBaseClass.prototype.onAdd.apply(this, arguments);
        this.hooks.resize = function () {
          _this._updating_tangram = true;
          _this.updateSize();
          _this._updating_tangram = false;
        };
        map.on('resize', this.hooks.resize);
        this.hooks.move = function () {
          if (_this._updating_tangram) {
            return;
          }
          _this._updating_tangram = true;
          _this.scene.view.setPanning(true);
          var view = map.getCenter();
          view.zoom = Math.max(Math.min(map.getZoom(), map.getMaxZoom() || topojson.Geo.default_view_max_zoom), map.getMinZoom());
          _this.scene.view.setView(view);
          if (_this._mapLayerCount > 1) {
            // if there are other map pane layers active, redraw immediately to stay in better visual sync
            // otherwise, wait until next regular animation loop iteration
            _this.scene.immediateRedraw();
          }
          _this._updating_tangram = false;
        };
        map.on('move', this.hooks.move);
        this.hooks.moveend = function () {
          _this.scene.view.setPanning(false);
          _this.scene.requestRedraw();
        };
        map.on('moveend', this.hooks.moveend);
        this.hooks.drag = function () {
          _this.scene.view.markUserInput();
        };
        map.on('drag', this.hooks.drag);

        // keep Tangram layer in sync with view via mutation observer
        this._map_pane_observer = new MutationObserver(function (mutations) {
          mutations.forEach(function () {
            return _this.reverseTransform();
          });
        });
        this._map_pane_observer.observe(map.getPanes().mapPane, {
          attributes: true
        });

        // Modify default Leaflet behaviors
        this.modifyScrollWheelBehavior(map);
        this.modifyZoomBehavior(map);
        this.trackMapLayerCounts(map);

        // Setup feature selection
        this.setupSelectionEventHandlers(map);
        this.setSelectionEvents(this.options.events, {
          radius: this.options.selectionRadius
        });

        // Add GL canvas to layer container
        this.scene.container = this.getContainer();
        this.updateSize();

        // Initial view
        this.updateView();
        this.resizeOnFirstVisible();

        // Subscribe to tangram events
        this.scene.subscribe({
          move: this.onTangramViewUpdate.bind(this)
        });

        // Use leaflet's existing event system as the callback mechanism
        this.scene.load(this.options.scene, {
          base_path: this.options.sceneBasePath,
          file_type: this.options.sceneFileType,
          blocking: false
        }).then(function () {
          if (!_this.options.attribution) {
            for (var _i = 0, _Object$entries = Object.entries(_this.scene.config.sources); _i < _Object$entries.length; _i++) {
              var _Object$entries$_i = topojson._slicedToArray(_Object$entries[_i], 2),
                value = _Object$entries$_i[1];
              if (value.attribution) {
                map.attributionControl.addAttribution(value.attribution);
              }
            }
          }
          _this._updating_tangram = true;
          _this.updateSize();
          _this.updateView();
          _this.reverseTransform();
          _this._updating_tangram = false;
          _this.fire('init');
        }).catch(function (error) {
          _this.fire('error', error);
        });
      },
      onRemove: function onRemove(map) {
        layerBaseClass.prototype.onRemove.apply(this, arguments);
        map.off('layeradd layerremove overlayadd overlayremove', this._updateMapLayerCount);
        map.off('resize', this.hooks.resize);
        map.off('move', this.hooks.move);
        map.off('moveend', this.hooks.moveend);
        map.off('drag', this.hooks.drag);
        map.off('click', this.hooks.click);
        map.off('mousemove', this.hooks.mousemove);
        map.off('mouseout', this.hooks.mouseout);
        document.removeEventListener('visibilitychange', this.hooks.visibilitychange);
        this.hooks = {};
        this._map_pane_observer.disconnect();
        if (this.scene) {
          this.scene.destroy();
          this.scene = null;
        }
      },
      createTile: function createTile(coords) {
        var key = coords.x + '/' + coords.y + '/' + coords.z;
        var div = document.createElement('div');
        div.setAttribute('data-tile-key', key);
        div.style.width = '256px';
        div.style.height = '256px';
        if (this.options.showDebug) {
          var debug_overlay = document.createElement('div');
          debug_overlay.textContent = key;
          debug_overlay.style.position = 'absolute';
          debug_overlay.style.left = 0;
          debug_overlay.style.top = 0;
          debug_overlay.style.color = 'white';
          debug_overlay.style.fontSize = '16px';
          debug_overlay.style.textOutline = '1px #000000';
          debug_overlay.style.padding = '8px';
          div.appendChild(debug_overlay);
          div.style.borderStyle = 'solid';
          div.style.borderColor = 'white';
          div.style.borderWidth = '1px';
        }
        return div;
      },
      // Modify leaflet's default scroll wheel behavior to render frames more frequently
      // (should generally lead to smoother scroll with Tangram frame re-render)
      modifyScrollWheelBehavior: function modifyScrollWheelBehavior(map) {
        if (this.scene.view.continuous_zoom && map.scrollWheelZoom && this.options.modifyScrollWheel !== false) {
          map.options.zoomSnap = 0;
          var enabled = map.scrollWheelZoom.enabled();
          map.scrollWheelZoom.disable();

          // Chrome and Safari have smoother scroll-zoom without actively throttling the mouse wheel,
          // while FF and Edge/IE do better with throttling.
          // TODO: may be related to syncing differences with requestAnimationFrame loop, investigate further
          if (L.Browser.chrome || L.Browser.safari) {
            map.scrollWheelZoom._onWheelScroll = function (e) {
              var delta = L.DomEvent.getWheelDelta(e);
              this._delta += delta;
              this._lastMousePos = this._map.mouseEventToContainerPoint(e);
              this._performZoom();
              L.DomEvent.stop(e);
            };
          } else {
            map.options.wheelDebounceTime = 20; // better default for FF and Edge/IE
          }
          var debounceMoveEnd = debounce(function (map) {
            map._moveEnd(true);
            map.fire('viewreset'); // keep other leaflet layers in sync
          }, map.options.wheelDebounceTime * 2);

          // save reference to overloaded method
          if (!originalHandlers.scrollWheelZoom._performZoom) {
            originalHandlers.scrollWheelZoom._performZoom = map.scrollWheelZoom._performZoom;
          }
          var layer = this;
          map.scrollWheelZoom._performZoom = function () {
            if (this._map !== layer._map) {
              // only call overloaded method on a tangram layer
              originalHandlers.scrollWheelZoom._performZoom.call(this);
              return;
            }
            var map = this._map,
              zoom = map.getZoom();
            map._stop(); // stop panning and fly animations if any

            var delta = this._delta / (this._map.options.wheelPxPerZoomLevel * 4);
            this._delta = 0;
            if (zoom + delta >= this._map.getMaxZoom()) {
              delta = this._map.getMaxZoom() - zoom; // don't go past max zoom
            } else if (zoom + delta <= this._map.getMinZoom()) {
              delta = this._map.getMinZoom() - zoom; // don't go past min zoom
            }
            if (!delta) {
              return;
            }
            if (map.options.scrollWheelZoom === 'center') {
              setZoomAroundNoMoveEnd(layer, map.getCenter(), zoom + delta);
            } else {
              setZoomAroundNoMoveEnd(layer, this._lastMousePos, zoom + delta);
            }
            debounceMoveEnd(map);
          };
          if (enabled) {
            map.scrollWheelZoom.enable();
          }
        }
      },
      // Modify leaflet's default double-click and zoom in/out behavior, to better keep Tangram layer in sync with marker/SVG layers
      modifyZoomBehavior: function modifyZoomBehavior(map) {
        if (this.scene.view.continuous_zoom && this.options.modifyZoomBehavior !== false) {
          var layer = this;

          // Simplified version of Leaflet's flyTo, for short animations zooming around a point
          var flyAround = function flyAround(layer, targetCenter, targetZoom) {
            map._stop();
            var startZoom = map._zoom;
            targetCenter = L.latLng(targetCenter);
            targetZoom = targetZoom === undefined ? startZoom : targetZoom;
            targetZoom = Math.min(targetZoom, map.getMaxZoom()); // don't go past max zoom

            var start = Date.now(),
              duration = 75;
            function frame() {
              var t = (Date.now() - start) / duration;
              if (t <= 1) {
                // reuse internal flyTo frame to ensure these animations are canceled like others
                map._flyToFrame = L.Util.requestAnimFrame(frame, map);
                setZoomAroundNoMoveEnd(layer, targetCenter, startZoom + (targetZoom - startZoom) * t);
              } else {
                setZoomAroundNoMoveEnd(layer, targetCenter, targetZoom)._moveEnd(true);
              }
            }
            map._moveStart(true);
            frame.call(map);
            return map;
          };

          // Modify the double-click zoom handler to do a short zoom animation
          // See original: https://github.com/Leaflet/Leaflet/blob/cf518ff1a5e0e54a2f63faa144aeaa50888e0bc6/src/map/handler/Map.DoubleClickZoom.js#L29
          if (map.doubleClickZoom) {
            var enabled = map.doubleClickZoom.enabled();
            map.doubleClickZoom.disable();

            // save reference to overloaded method
            if (!originalHandlers.doubleClickZoom._onDoubleClick) {
              originalHandlers.doubleClickZoom._onDoubleClick = map.doubleClickZoom._onDoubleClick;
            }
            map.doubleClickZoom._onDoubleClick = function (e) {
              if (this._map !== layer._map) {
                // only call overloaded method on a tangram layer
                originalHandlers.doubleClickZoom._onDoubleClick.call(this, e);
                return;
              }
              var map = this._map,
                oldZoom = map.getZoom(),
                delta = map.options.zoomDelta,
                zoom = e.originalEvent.shiftKey ? oldZoom - delta : oldZoom + delta;
              if (map.options.doubleClickZoom === 'center') {
                flyAround(layer, map.getCenter(), zoom);
              } else {
                flyAround(layer, map.containerPointToLatLng(e.containerPoint), zoom);
              }
            };
            if (enabled) {
              map.doubleClickZoom.enable();
            }
          }

          // Modify the zoom in/out behavior
          // NOTE: this will NOT fire the 'zoomanim' event, so this modification should be disabled for apps that depend on it
          // See original: https://github.com/Leaflet/Leaflet/blob/cf518ff1a5e0e54a2f63faa144aeaa50888e0bc6/src/map/Map.js#L1610
          if (map._zoomAnimated) {
            // save reference to overloaded method
            if (!originalHandlers.map._animateZoom) {
              originalHandlers.map._animateZoom = map._animateZoom;
            }
            map._animateZoom = function (center, zoom, startAnim, noUpdate) {
              if (this !== layer._map) {
                // only call overloaded method on a tangram layer
                originalHandlers.map._animateZoom.call(this, center, zoom, startAnim, noUpdate);
                return;
              }
              if (startAnim) {
                this._animatingZoom = true;

                // remember what center/zoom to set after animation
                this._animateToCenter = center;
                this._animateToZoom = zoom;

                // replace leaflet CSS animation with Tangram animation to keep markers/SVG in sync
                // (this is a workaround from not being able to easily track/sync to on-going CSS animations in JS)
                flyAround(layer, center, zoom);
              }

              // Work around webkit not firing 'transitionend', see https://github.com/Leaflet/Leaflet/issues/3689, 2693
              setTimeout(L.Util.bind(this._onZoomTransitionEnd, this), 250);
            };
          }
        }
      },
      updateView: function updateView() {
        var view = this._map.getCenter();
        view.zoom = Math.max(Math.min(this._map.getZoom(), this._map.getMaxZoom() || topojson.Geo.default_view_max_zoom), this._map.getMinZoom());
        this.scene.view.setView(view);
      },
      updateSize: function updateSize() {
        var size = this._map.getSize();
        this.scene.resizeMap(size.x, size.y);
      },
      resizeOnFirstVisible: function resizeOnFirstVisible() {
        var _this2 = this;
        var first_visibility = true;
        this.hooks.visibilitychange = function () {
          if (first_visibility) {
            first_visibility = false;
            _this2.updateSize();
          }
        };
        document.addEventListener('visibilitychange', this.hooks.visibilitychange);
      },
      onTangramViewUpdate: function onTangramViewUpdate() {
        if (!this._map || this._updating_tangram) {
          return;
        }

        // View changed?
        var map_center = this._map.getCenter();
        var view_center = this.scene.view.center;
        if (map_center.lng === view_center.lng && map_center.lat === view_center.lat && this._map.getZoom() === this.scene.view.zoom) {
          return;
        }
        this._updating_tangram = true;
        this._map.setView([this.scene.view.center.lat, this.scene.view.center.lng], this.scene.view.zoom, {
          animate: false
        });
        this._updating_tangram = false;
      },
      render: function render() {
        if (!this.scene) {
          return;
        }
        this.scene.update();
      },
      // Reverse the CSS positioning Leaflet applies to the layer, since Tangram's WebGL canvas
      // is expected to be 'absolutely' positioned.
      reverseTransform: function reverseTransform() {
        if (!this._map || !this.scene || !this.scene.container) {
          return;
        }
        var top_left = this._map.containerPointToLayerPoint([0, 0]);
        L.DomUtil.setPosition(this.scene.container, top_left);
      },
      // Tie Leaflet event handlers to Tangram feature selection
      setupSelectionEventHandlers: function setupSelectionEventHandlers(map) {
        var _this3 = this;
        this._selection_events = {};
        this._selection_radius = null; // optional radius

        this.hooks.click = function (event) {
          if (typeof _this3._selection_events.click === 'function') {
            _this3.scene.getFeatureAt(event.containerPoint, {
              radius: _this3._selection_radius
            }).then(function (selection) {
              var results = Object.assign({}, selection, {
                leaflet_event: event
              });
              _this3._selection_events.click(results);
            });
          }
        };
        map.on('click', this.hooks.click);
        this.hooks.mousemove = function (event) {
          if (typeof _this3._selection_events.hover === 'function') {
            _this3.scene.getFeatureAt(event.containerPoint, {
              radius: _this3._selection_radius
            }).then(function (selection) {
              var results = Object.assign({}, selection, {
                leaflet_event: event
              });
              _this3._selection_events.hover(results);
            });
          }
        };
        map.on('mousemove', this.hooks.mousemove);
        this.hooks.mouseout = function (event) {
          // When mouse leaves map, send an additional selection event to indicate no feature is selected
          if (typeof _this3._selection_events.hover === 'function') {
            _this3._selection_events.hover({
              changed: true,
              leaflet_event: event
            });
          }
        };
        map.on('mouseout', this.hooks.mouseout);
      },
      // Set user-defined handlers for feature selection events
      // Currently only one handler can be defined for each event type
      // Event types are: `click`, `hover` (leaflet `mousemove`)
      setSelectionEvents: function setSelectionEvents(events) {
        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          radius = _ref.radius;
        this._selection_events = Object.assign(this._selection_events, events);
        this._selection_radius = radius !== undefined ? radius : this._selection_radius;
      },
      // Track the # of layers in the map pane
      // Used to optimize Tangram redraw sensitivity (redraw more frequently when needing to sync w/other layers)
      trackMapLayerCounts: function trackMapLayerCounts(map) {
        var _this4 = this;
        this._updateMapLayerCount = function () {
          var nodes = map.getPanes().mapPane.childNodes;
          _this4._mapLayerCount = 0;
          for (var i = 0; i < nodes.length; i++) {
            _this4._mapLayerCount += nodes[i].childNodes.length;
          }
        };
        map.on('layeradd layerremove overlayadd overlayremove', this._updateMapLayerCount);
        this._updateMapLayerCount();
      },
      updateTangramDebugSettings: function updateTangramDebugSettings() {
        topojson.mergeDebugSettings(this.options.debug || {});
      }
    });

    // Modified version of Leaflet's setZoomAround that doesn't trigger a moveEnd event
    setZoomAroundNoMoveEnd = function setZoomAroundNoMoveEnd(layer, latlng, zoom) {
      var map = layer._map,
        scene = layer.scene,
        scale = map.getZoomScale(zoom),
        viewHalf = map.getSize().divideBy(2),
        containerPoint = latlng instanceof L.Point ? latlng : map.latLngToContainerPoint(latlng),
        centerOffset = containerPoint.subtract(viewHalf).multiplyBy(1 - 1 / scale),
        newCenter = map.containerPointToLatLng(viewHalf.add(centerOffset));
      if (scene) {
        scene.view.markUserInput();
      }
      return map._move(newCenter, zoom, {
        flyTo: true
      });
    };

    // Create the layer class
    LeafletLayer = layerBaseClass.extend(layerClassConfig);

    // Polyfill some 1.0 methods
    if (typeof LeafletLayer.remove !== 'function') {
      LeafletLayer.prototype.remove = function () {
        if (this._map) {
          this._map.removeLayer(this);
        }
        this.fire('remove');
      };
    }
    LeafletLayer.layerBaseClass = layerBaseClass;
    LeafletLayer.leafletVersion = leafletVersion;
    return new LeafletLayer(options);
  }
}

/*jshint worker: true*/


// Make some modules accessible for debugging
var debug = {
  log: topojson.log,
  yaml: yaml,
  Utils: topojson.Utils,
  Geo: topojson.Geo,
  Vector: topojson.Vector,
  DataSource: topojson.DataSource,
  GLSL: topojson.GLSL,
  ShaderProgram: topojson.ShaderProgram,
  VertexData: topojson.VertexData,
  Texture: topojson.Texture,
  Material: topojson.Material,
  Light: topojson.Light,
  Scene: Scene,
  WorkerBroker: topojson.WorkerBroker,
  Task: topojson.Task,
  StyleManager: topojson.StyleManager,
  StyleParser: topojson.StyleParser,
  TileID: topojson.TileID,
  Collision: topojson.Collision,
  FeatureSelection: topojson.FeatureSelection,
  TextCanvas: topojson.TextCanvas,
  debugSettings: topojson.debugSettings
};
var index = {
  leafletLayer: leafletLayer,
  debug: debug,
  version: topojson.version
};

return index;

}));

// Loads each of the chunks produced by the first Rollup pass.
// The custom AMD define() in intro.js will combined the shared
// and worker chunks into a worker bundle that can be instantiated
// via blob URL.


// This allows the rollup ESM build to work within a <script type="module"> tag
// Script modules can't expose exports
try {
	Tangram.debug.ESM = false; // mark build as ES module
	Tangram.debug.SHA = 'd0b887d09a3645aad91a18bd3bd0362d74627da3';
	if (false === true && typeof window === 'object') {
	    window.Tangram = Tangram;
	}
} catch(e) {}

var Tangram$1 = Tangram;

return Tangram$1;

}));
//# sourceMappingURL=tangram.debug.js.map
