function Point(x,y){return{x:x,y:y}}function GLGeometry(gl,gl_program,vertex_data,attribs,options){options=options||{},this.gl=gl,this.gl_program=gl_program,this.attribs=attribs,this.vertex_data=vertex_data,this.buffer=this.gl.createBuffer(),this.draw_mode=options.draw_mode||this.gl.TRIANGLES,this.data_usage=options.data_usage||this.gl.STATIC_DRAW,this.vertex_stride=0;for(var a=0;a<this.attribs.length;a++){var attrib=this.attribs[a];switch(attrib.location=this.gl_program.attribute(attrib.name).location,attrib.byte_size=attrib.size,attrib.type){case this.gl.FLOAT:case this.gl.INT:case this.gl.UNSIGNED_INT:attrib.byte_size*=4;break;case this.gl.SHORT:case this.gl.UNSIGNED_SHORT:attrib.byte_size*=2}attrib.offset=this.vertex_stride,this.vertex_stride+=attrib.byte_size}this.vertex_count=this.vertex_data.byteLength/this.vertex_stride,this.vao=GL.VertexArrayObject.create(function(){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.setup()}.bind(this)),this.gl.bufferData(this.gl.ARRAY_BUFFER,this.vertex_data,this.data_usage)}function GLTriangles(gl,gl_program,vertex_data){GLGeometry.call(this,gl,gl_program,vertex_data,[{name:"position",size:3,type:gl.FLOAT,normalized:!1},{name:"normal",size:3,type:gl.FLOAT,normalized:!1},{name:"color",size:3,type:gl.FLOAT,normalized:!1},{name:"layer",size:1,type:gl.FLOAT,normalized:!1}]),this.geometry_count=this.vertex_count/3}function GLPolyPoints(gl,gl_program,vertex_data){GLGeometry.call(this,gl,gl_program,vertex_data,[{name:"position",size:3,type:gl.FLOAT,normalized:!1},{name:"texcoord",size:2,type:gl.FLOAT,normalized:!1},{name:"color",size:3,type:gl.FLOAT,normalized:!1},{name:"layer",size:1,type:gl.FLOAT,normalized:!1}]),this.geometry_count=this.vertex_count/3}function GLLines(gl,gl_program,vertex_data,options){options=options||{},GLTriangles.call(this,gl,program,vertex_data),this.draw_mode=this.gl.LINES,this.line_width=options.line_width||2,this.geometry_count=this.vertex_count/2}function TileSource(url_template,options){var options=options||{};this.url_template=url_template,this.max_zoom=options.max_zoom||Geo.max_zoom}function NetworkTileSource(url_template,options){TileSource.apply(this,arguments);this.response_type="",this.url_hosts=null;var host_match=this.url_template.match(/{s:\[([^}+]+)\]}/);null!=host_match&&host_match.length>1&&(this.url_hosts=host_match[1].split(","),this.next_host=0)}function GeoJSONTileSource(){NetworkTileSource.apply(this,arguments)}function MapboxTileSource(){NetworkTileSource.apply(this,arguments),this.response_type="arraybuffer",this.VectorTile=require("vectortile")}function VectorRenderer(type,tile_source,layers,styles,options){var options=options||{};this.type=type,this.tile_source=tile_source,this.tiles={},this.num_workers=options.num_workers||1,this.layer_source=VectorRenderer.urlForPath(layers),this.layers="string"==typeof layers?VectorRenderer.loadLayers(layers):layers,this.style_source=VectorRenderer.urlForPath(styles),this.styles="string"==typeof styles?VectorRenderer.loadStyles(styles):styles,this.zoom=null,this.center=null,this.device_pixel_ratio=window.devicePixelRatio||1,this.workers=[];for(var w=0;w<this.num_workers;w++)this.workers.push(new Worker(VectorRenderer.library_base_url+"vector-map-worker.min.js"));this.next_worker=0,this.dirty=!0,this.initialized=!1}function CanvasRenderer(tile_source,layers,styles,options){VectorRenderer.call(this,"CanvasRenderer",tile_source,layers,styles,options),this.selection_info=document.createElement("div"),this.selection_info.setAttribute("class","label"),this.selection_info.style.display="none",this.cutout_context=document.createElement("canvas").getContext("2d")}function GLRenderer(tile_source,layers,styles,options){var options=options||{};VectorRenderer.call(this,"GLRenderer",tile_source,layers,styles,options),GLBuilders.setTileScale(VectorRenderer.tile_scale),GL.Program.defines.TILE_SCALE=VectorRenderer.tile_scale+".0",this.container=options.container,this.continuous_animation=!1}var libtess=libtess||{};libtess.DEBUG=!1,libtess.assert=function(condition,opt_message){if(libtess.DEBUG&&!condition)throw new Error("Assertion failed"+(opt_message?": "+opt_message:""))},libtess.sweepDebugEvent=function(){},libtess.GLU_TESS_MAX_COORD=1e150,libtess.TRUE_PROJECT=!1,libtess.TESS_MAX_CACHE=100,libtess.GLU_TESS_DEFAULT_TOLERANCE=0,libtess.tessState={T_DORMANT:0,T_IN_POLYGON:1,T_IN_CONTOUR:2},libtess.windingRule={GLU_TESS_WINDING_ODD:100130,GLU_TESS_WINDING_NONZERO:100131,GLU_TESS_WINDING_POSITIVE:100132,GLU_TESS_WINDING_NEGATIVE:100133,GLU_TESS_WINDING_ABS_GEQ_TWO:100134},libtess.primitiveType={GL_LINE_LOOP:2,GL_TRIANGLES:4,GL_TRIANGLE_STRIP:5,GL_TRIANGLE_FAN:6},libtess.errorType={GLU_TESS_MISSING_BEGIN_POLYGON:100151,GLU_TESS_MISSING_END_POLYGON:100153,GLU_TESS_MISSING_BEGIN_CONTOUR:100152,GLU_TESS_MISSING_END_CONTOUR:100154,GLU_TESS_COORD_TOO_LARGE:100155,GLU_TESS_NEED_COMBINE_CALLBACK:100156},libtess.gluEnum={GLU_TESS_MESH:100112,GLU_TESS_TOLERANCE:100142,GLU_TESS_WINDING_RULE:100140,GLU_TESS_BOUNDARY_ONLY:100141,GLU_INVALID_ENUM:100900,GLU_INVALID_VALUE:100901,GLU_TESS_BEGIN:100100,GLU_TESS_VERTEX:100101,GLU_TESS_END:100102,GLU_TESS_ERROR:100103,GLU_TESS_EDGE_FLAG:100104,GLU_TESS_COMBINE:100105,GLU_TESS_BEGIN_DATA:100106,GLU_TESS_VERTEX_DATA:100107,GLU_TESS_END_DATA:100108,GLU_TESS_ERROR_DATA:100109,GLU_TESS_EDGE_FLAG_DATA:100110,GLU_TESS_COMBINE_DATA:100111},libtess.PQHandle,libtess.PQKey,libtess.CachedVertex=function(){this.coords=[0,0,0],this.data=null},libtess.GluTesselator=function(){this.state=libtess.tessState.T_DORMANT,this.lastEdge_=null,this.mesh=null,this.callError_=null,this.normal=[0,0,0],this.sUnit=[0,0,0],this.tUnit=[0,0,0],this.relTolerance=libtess.GLU_TESS_DEFAULT_TOLERANCE,this.windingRule=libtess.windingRule.GLU_TESS_WINDING_ODD,this.fatalError=!1,this.dict=null,this.pq=null,this.event=null,this.callCombine_=null,this.flagBoundary=!1,this.boundaryOnly=!1,this.lonelyTriList=null,this.callBegin_=null,this.callEdgeFlag_=null,this.callVertex_=null,this.callEnd_=null,this.callMesh_=null,this.callBeginData_=null,this.callEdgeFlagData_=null,this.callVertexData_=null,this.callEndData_=null,this.callErrorData_=null,this.callCombineData_=null,this.polygonData_=null,this.emptyCache=!1,this.cacheCount=0,this.cache=new Array(libtess.TESS_MAX_CACHE);for(var i=0;i<libtess.TESS_MAX_CACHE;i++)this.cache[i]=new libtess.CachedVertex},libtess.GluTesselator.prototype.gluDeleteTess=function(){this.requireState_(libtess.tessState.T_DORMANT)},libtess.GluTesselator.prototype.gluTessProperty=function(which,value){switch(which){case libtess.gluEnum.GLU_TESS_TOLERANCE:if(0>value||value>1)break;return void(this.relTolerance=value);case libtess.gluEnum.GLU_TESS_WINDING_RULE:var windingRule=value;switch(windingRule){case libtess.windingRule.GLU_TESS_WINDING_ODD:case libtess.windingRule.GLU_TESS_WINDING_NONZERO:case libtess.windingRule.GLU_TESS_WINDING_POSITIVE:case libtess.windingRule.GLU_TESS_WINDING_NEGATIVE:case libtess.windingRule.GLU_TESS_WINDING_ABS_GEQ_TWO:return void(this.windingRule=windingRule)}break;case libtess.gluEnum.GLU_TESS_BOUNDARY_ONLY:return void(this.boundaryOnly=!!value);default:return void this.callErrorOrErrorData(libtess.gluEnum.GLU_INVALID_ENUM)}this.callErrorOrErrorData(libtess.gluEnum.GLU_INVALID_VALUE)},libtess.GluTesselator.prototype.gluGetTessProperty=function(which){switch(which){case libtess.gluEnum.GLU_TESS_TOLERANCE:return libtess.assert(0<=this.relTolerance&&this.relTolerance<=1),this.relTolerance;case libtess.gluEnum.GLU_TESS_WINDING_RULE:var rule=this.windingRule;return libtess.assert(rule===libtess.windingRule.GLU_TESS_WINDING_ODD||rule===libtess.windingRule.GLU_TESS_WINDING_NONZERO||rule===libtess.windingRule.GLU_TESS_WINDING_POSITIVE||rule===libtess.windingRule.GLU_TESS_WINDING_NEGATIVE||rule===libtess.windingRule.GLU_TESS_WINDING_ABS_GEQ_TWO),rule;case libtess.gluEnum.GLU_TESS_BOUNDARY_ONLY:return libtess.assert(this.boundaryOnly===!0||this.boundaryOnly===!1),this.boundaryOnly;default:this.callErrorOrErrorData(libtess.gluEnum.GLU_INVALID_ENUM)}return!1},libtess.GluTesselator.prototype.gluTessNormal=function(x,y,z){this.normal[0]=x,this.normal[1]=y,this.normal[2]=z},libtess.GluTesselator.prototype.gluTessCallback=function(which,opt_fn){var fn=opt_fn?opt_fn:null;switch(which){case libtess.gluEnum.GLU_TESS_BEGIN:return void(this.callBegin_=fn);case libtess.gluEnum.GLU_TESS_BEGIN_DATA:return void(this.callBeginData_=fn);case libtess.gluEnum.GLU_TESS_EDGE_FLAG:return this.callEdgeFlag_=fn,void(this.flagBoundary=!!fn);case libtess.gluEnum.GLU_TESS_EDGE_FLAG_DATA:return this.callEdgeFlagData_=fn,void(this.flagBoundary=!!fn);case libtess.gluEnum.GLU_TESS_VERTEX:return void(this.callVertex_=fn);case libtess.gluEnum.GLU_TESS_VERTEX_DATA:return void(this.callVertexData_=fn);case libtess.gluEnum.GLU_TESS_END:return void(this.callEnd_=fn);case libtess.gluEnum.GLU_TESS_END_DATA:return void(this.callEndData_=fn);case libtess.gluEnum.GLU_TESS_ERROR:return void(this.callError_=fn);case libtess.gluEnum.GLU_TESS_ERROR_DATA:return void(this.callErrorData_=fn);case libtess.gluEnum.GLU_TESS_COMBINE:return void(this.callCombine_=fn);case libtess.gluEnum.GLU_TESS_COMBINE_DATA:return void(this.callCombineData_=fn);case libtess.gluEnum.GLU_TESS_MESH:return void(this.callMesh_=fn);default:return void this.callErrorOrErrorData(libtess.gluEnum.GLU_INVALID_ENUM)}},libtess.GluTesselator.prototype.gluTessVertex=function(coords,data){var tooLarge=!1,clamped=[0,0,0];this.requireState_(libtess.tessState.T_IN_CONTOUR),this.emptyCache&&(this.emptyCache_(),this.lastEdge_=null);for(var i=0;3>i;++i){var x=coords[i];x<-libtess.GLU_TESS_MAX_COORD&&(x=-libtess.GLU_TESS_MAX_COORD,tooLarge=!0),x>libtess.GLU_TESS_MAX_COORD&&(x=libtess.GLU_TESS_MAX_COORD,tooLarge=!0),clamped[i]=x}if(tooLarge&&this.callErrorOrErrorData(libtess.errorType.GLU_TESS_COORD_TOO_LARGE),null===this.mesh){if(this.cacheCount<libtess.TESS_MAX_CACHE)return void this.cacheVertex_(clamped,data);this.emptyCache_()}this.addVertex_(clamped,data)},libtess.GluTesselator.prototype.gluTessBeginPolygon=function(data){this.requireState_(libtess.tessState.T_DORMANT),this.state=libtess.tessState.T_IN_POLYGON,this.cacheCount=0,this.emptyCache=!1,this.mesh=null,this.polygonData_=data},libtess.GluTesselator.prototype.gluTessBeginContour=function(){this.requireState_(libtess.tessState.T_IN_POLYGON),this.state=libtess.tessState.T_IN_CONTOUR,this.lastEdge_=null,this.cacheCount>0&&(this.emptyCache=!0)},libtess.GluTesselator.prototype.gluTessEndContour=function(){this.requireState_(libtess.tessState.T_IN_CONTOUR),this.state=libtess.tessState.T_IN_POLYGON},libtess.GluTesselator.prototype.gluTessEndPolygon=function(){if(this.requireState_(libtess.tessState.T_IN_POLYGON),this.state=libtess.tessState.T_DORMANT,null===this.mesh){if(!this.flagBoundary&&!this.callMesh_&&libtess.render.renderCache(this))return void(this.polygonData_=null);this.emptyCache_()}return libtess.normal.projectPolygon(this),libtess.sweep.computeInterior(this),!this.fatalError&&(this.boundaryOnly?libtess.tessmono.setWindingNumber(this.mesh,1,!0):libtess.tessmono.tessellateInterior(this.mesh),this.mesh.checkMesh(),(this.callBegin_||this.callEnd_||this.callVertex_||this.callEdgeFlag_||this.callBeginData_||this.callEndData_||this.callVertexData_||this.callEdgeFlagData_)&&(this.boundaryOnly?libtess.render.renderBoundary(this,this.mesh):libtess.render.renderMesh(this,this.mesh)),this.callMesh_)?(libtess.tessmono.discardExterior(this.mesh),this.callMesh_(this.mesh),this.mesh=null,void(this.polygonData_=null)):(libtess.mesh.deleteMesh(this.mesh),this.polygonData_=null,void(this.mesh=null))},libtess.GluTesselator.prototype.makeDormant_=function(){this.mesh&&libtess.mesh.deleteMesh(this.mesh),this.state=libtess.tessState.T_DORMANT,this.lastEdge_=null,this.mesh=null},libtess.GluTesselator.prototype.requireState_=function(state){this.state!==state&&this.gotoState_(state)},libtess.GluTesselator.prototype.gotoState_=function(newState){for(;this.state!==newState;)if(this.state<newState)switch(this.state){case libtess.tessState.T_DORMANT:this.callErrorOrErrorData(libtess.errorType.GLU_TESS_MISSING_BEGIN_POLYGON),this.gluTessBeginPolygon(null);break;case libtess.tessState.T_IN_POLYGON:this.callErrorOrErrorData(libtess.errorType.GLU_TESS_MISSING_BEGIN_CONTOUR),this.gluTessBeginContour()}else switch(this.state){case libtess.tessState.T_IN_CONTOUR:this.callErrorOrErrorData(libtess.errorType.GLU_TESS_MISSING_END_CONTOUR),this.gluTessEndContour();break;case libtess.tessState.T_IN_POLYGON:this.callErrorOrErrorData(libtess.errorType.GLU_TESS_MISSING_END_POLYGON),this.makeDormant_()}},libtess.GluTesselator.prototype.addVertex_=function(coords,data){var e=this.lastEdge_;null===e?(e=libtess.mesh.makeEdge(this.mesh),libtess.mesh.meshSplice(e,e.sym)):(libtess.mesh.splitEdge(e),e=e.lNext),e.org.data=data,e.org.coords[0]=coords[0],e.org.coords[1]=coords[1],e.org.coords[2]=coords[2],e.winding=1,e.sym.winding=-1,this.lastEdge_=e},libtess.GluTesselator.prototype.cacheVertex_=function(coords,data){var v=this.cache[this.cacheCount];v.data=data,v.coords[0]=coords[0],v.coords[1]=coords[1],v.coords[2]=coords[2],++this.cacheCount},libtess.GluTesselator.prototype.emptyCache_=function(){this.mesh=new libtess.GluMesh;for(var i=0;i<this.cacheCount;i++){var v=this.cache[i];this.addVertex_(v.coords,v.data)}this.cacheCount=0,this.emptyCache=!1},libtess.GluTesselator.prototype.callBeginOrBeginData=function(type){this.callBeginData_?this.callBeginData_(type,this.polygonData_):this.callBegin_&&this.callBegin_(type)},libtess.GluTesselator.prototype.callVertexOrVertexData=function(data){this.callVertexData_?this.callVertexData_(data,this.polygonData_):this.callVertex_&&this.callVertex_(data)},libtess.GluTesselator.prototype.callEdgeFlagOrEdgeFlagData=function(flag){this.callEdgeFlagData_?this.callEdgeFlagData_(flag,this.polygonData_):this.callEdgeFlag_&&this.callEdgeFlag_(flag)},libtess.GluTesselator.prototype.callEndOrEndData=function(){this.callEndData_?this.callEndData_(this.polygonData_):this.callEnd_&&this.callEnd_()},libtess.GluTesselator.prototype.callCombineOrCombineData=function(coords,data,weight){var interpData;return this.callCombineData_?interpData=this.callCombineData_(coords,data,weight,this.polygonData_):this.callCombine_&&(interpData=this.callCombine_(coords,data,weight)),void 0===interpData&&(interpData=null),interpData},libtess.GluTesselator.prototype.callErrorOrErrorData=function(errno){this.callErrorData_?this.callErrorData_(errno,this.polygonData_):this.callError_&&this.callError_(errno)},libtess.DictNode=function(){this.key=null,this.next=null,this.prev=null},libtess.DictNode.prototype.getKey=function(){return this.key},libtess.DictNode.prototype.getSucc=function(){return this.next},libtess.DictNode.prototype.getPred=function(){return this.prev},libtess.dictKey,libtess.Dict=function(frame,leq){this.head=new libtess.DictNode,this.head.next=this.head,this.head.prev=this.head,this.frame=frame,this.leq_=leq},libtess.Dict.prototype.deleteDict=function(){},libtess.Dict.prototype.insertBefore=function(node,key){do node=node.prev;while(null!==node.key&&!this.leq_(this.frame,node.key,key));var newNode=new libtess.DictNode;return newNode.key=key,newNode.next=node.next,node.next.prev=newNode,newNode.prev=node,node.next=newNode,newNode},libtess.Dict.prototype.insert=function(key){return this.insertBefore(this.head,key)},libtess.Dict.prototype.deleteNode=function(node){node.next.prev=node.prev,node.prev.next=node.next},libtess.Dict.prototype.search=function(key){var node=this.head;do node=node.next;while(null!==node.key&&!this.leq_(this.frame,key,node.key));return node},libtess.Dict.prototype.getMin=function(){return this.head.next},libtess.Dict.prototype.getMax=function(){return this.head.prev},libtess.PQNode=function(){this.handle=0},libtess.PQNode.realloc=function(oldArray,size){var newArray=new Array(size),index=0;if(null!==oldArray)for(;index<oldArray.length;index++)newArray[index]=oldArray[index];for(;size>index;index++)newArray[index]=new libtess.PQNode;return newArray},libtess.PQHandleElem=function(){this.key=null,this.node=0},libtess.PQHandleElem.realloc=function(oldArray,size){var newArray=new Array(size),index=0;if(null!==oldArray)for(;index<oldArray.length;index++)newArray[index]=oldArray[index];for(;size>index;index++)newArray[index]=new libtess.PQHandleElem;return newArray},libtess.PriorityQHeap=function(leq){this.nodes_=libtess.PQNode.realloc(null,libtess.PriorityQHeap.INIT_SIZE_+1),this.handles_=libtess.PQHandleElem.realloc(null,libtess.PriorityQHeap.INIT_SIZE_+1),this.size_=0,this.max_=libtess.PriorityQHeap.INIT_SIZE_,this.freeList_=0,this.initialized_=!1,this.leq_=leq,this.nodes_[1].handle=1},libtess.PriorityQHeap.INIT_SIZE_=32,libtess.PriorityQHeap.prototype.deleteHeap=function(){this.handles_=null,this.nodes_=null},libtess.PriorityQHeap.prototype.init=function(){for(var i=this.size_;i>=1;--i)this.floatDown_(i);this.initialized_=!0},libtess.PriorityQHeap.prototype.insert=function(keyNew){var curr=++this.size_;2*curr>this.max_&&(this.max_*=2,this.nodes_=libtess.PQNode.realloc(this.nodes_,this.max_+1),this.handles_=libtess.PQHandleElem.realloc(this.handles_,this.max_+1));var free;return 0===this.freeList_?free=curr:(free=this.freeList_,this.freeList_=this.handles_[free].node),this.nodes_[curr].handle=free,this.handles_[free].node=curr,this.handles_[free].key=keyNew,this.initialized_&&this.floatUp_(curr),free},libtess.PriorityQHeap.prototype.isEmpty=function(){return 0===this.size_},libtess.PriorityQHeap.prototype.minimum=function(){return this.handles_[this.nodes_[1].handle].key},libtess.PriorityQHeap.prototype.extractMin=function(){var n=this.nodes_,h=this.handles_,hMin=n[1].handle,min=h[hMin].key;return this.size_>0&&(n[1].handle=n[this.size_].handle,h[n[1].handle].node=1,h[hMin].key=null,h[hMin].node=this.freeList_,this.freeList_=hMin,--this.size_>0&&this.floatDown_(1)),min},libtess.PriorityQHeap.prototype.remove=function(hCurr){var n=this.nodes_,h=this.handles_;libtess.assert(hCurr>=1&&hCurr<=this.max_&&null!==h[hCurr].key);var curr=h[hCurr].node;n[curr].handle=n[this.size_].handle,h[n[curr].handle].node=curr,curr<=--this.size_&&(1>=curr||this.leq_(h[n[curr>>1].handle].key,h[n[curr].handle].key)?this.floatDown_(curr):this.floatUp_(curr)),h[hCurr].key=null,h[hCurr].node=this.freeList_,this.freeList_=hCurr},libtess.PriorityQHeap.prototype.floatDown_=function(curr){for(var n=this.nodes_,h=this.handles_,hCurr=n[curr].handle;;){var child=curr<<1;child<this.size_&&this.leq_(h[n[child+1].handle].key,h[n[child].handle].key)&&++child,libtess.assert(child<=this.max_);var hChild=n[child].handle;if(child>this.size_||this.leq_(h[hCurr].key,h[hChild].key)){n[curr].handle=hCurr,h[hCurr].node=curr;break}n[curr].handle=hChild,h[hChild].node=curr,curr=child}},libtess.PriorityQHeap.prototype.floatUp_=function(curr){for(var n=this.nodes_,h=this.handles_,hCurr=n[curr].handle;;){var parent=curr>>1,hParent=n[parent].handle;if(0===parent||this.leq_(h[hParent].key,h[hCurr].key)){n[curr].handle=hCurr,h[hCurr].node=curr;break}n[curr].handle=hParent,h[hParent].node=curr,curr=parent}},libtess.PriorityQ=function(leq){this.keys_=libtess.PriorityQ.prototype.PQKeyRealloc_(null,libtess.PriorityQ.INIT_SIZE_),this.order_=null,this.size_=0,this.max_=libtess.PriorityQ.INIT_SIZE_,this.initialized_=!1,this.leq_=leq,this.heap_=new libtess.PriorityQHeap(this.leq_)},libtess.PriorityQ.INIT_SIZE_=32,libtess.PriorityQ.prototype.deleteQ=function(){this.heap_.deleteHeap(),this.heap_=null,this.order_=null,this.keys_=null},libtess.PriorityQ.prototype.init=function(){this.order_=[];for(var i=0;i<this.size_;i++)this.order_[i]=i;var comparator=function(keys,leq){return function(a,b){return leq(keys[a],keys[b])?1:-1}}(this.keys_,this.leq_);if(this.order_.sort(comparator),this.max_=this.size_,this.initialized_=!0,this.heap_.init(),libtess.DEBUG){var p=0,r=p+this.size_-1;for(i=p;r>i;++i)libtess.assert(this.leq_(this.keys_[this.order_[i+1]],this.keys_[this.order_[i]]))}},libtess.PriorityQ.prototype.insert=function(keyNew){if(this.initialized_)return this.heap_.insert(keyNew);var curr=this.size_;return++this.size_>=this.max_&&(this.max_*=2,this.keys_=libtess.PriorityQ.prototype.PQKeyRealloc_(this.keys_,this.max_)),this.keys_[curr]=keyNew,-(curr+1)},libtess.PriorityQ.prototype.PQKeyRealloc_=function(oldArray,size){var newArray=new Array(size),index=0;if(null!==oldArray)for(;index<oldArray.length;index++)newArray[index]=oldArray[index];for(;size>index;index++)newArray[index]=null;return newArray},libtess.PriorityQ.prototype.keyLessThan_=function(x,y){var keyX=this.keys_[x],keyY=this.keys_[y];return!this.leq_(keyY,keyX)},libtess.PriorityQ.prototype.keyGreaterThan_=function(x,y){var keyX=this.keys_[x],keyY=this.keys_[y];return!this.leq_(keyX,keyY)},libtess.PriorityQ.prototype.extractMin=function(){if(0===this.size_)return this.heap_.extractMin();var sortMin=this.keys_[this.order_[this.size_-1]];if(!this.heap_.isEmpty()){var heapMin=this.heap_.minimum();if(this.leq_(heapMin,sortMin))return this.heap_.extractMin()}do--this.size_;while(this.size_>0&&null===this.keys_[this.order_[this.size_-1]]);return sortMin},libtess.PriorityQ.prototype.minimum=function(){if(0===this.size_)return this.heap_.minimum();var sortMin=this.keys_[this.order_[this.size_-1]];if(!this.heap_.isEmpty()){var heapMin=this.heap_.minimum();if(this.leq_(heapMin,sortMin))return heapMin}return sortMin},libtess.PriorityQ.prototype.isEmpty=function(){return 0===this.size_&&this.heap_.isEmpty()},libtess.PriorityQ.prototype.remove=function(curr){if(curr>=0)return void this.heap_.remove(curr);for(curr=-(curr+1),libtess.assert(curr<this.max_&&null!==this.keys_[curr]),this.keys_[curr]=null;this.size_>0&&null===this.keys_[this.order_[this.size_-1]];)--this.size_},libtess.mesh=function(){},libtess.mesh.makeEdge=function(mesh){var e=libtess.mesh.makeEdgePair_(mesh.eHead);return libtess.mesh.makeVertex_(e,mesh.vHead),libtess.mesh.makeVertex_(e.sym,mesh.vHead),libtess.mesh.makeFace_(e,mesh.fHead),e},libtess.mesh.meshSplice=function(eOrg,eDst){var joiningLoops=!1,joiningVertices=!1;eOrg!==eDst&&(eDst.org!==eOrg.org&&(joiningVertices=!0,libtess.mesh.killVertex_(eDst.org,eOrg.org)),eDst.lFace!==eOrg.lFace&&(joiningLoops=!0,libtess.mesh.killFace_(eDst.lFace,eOrg.lFace)),libtess.mesh.splice_(eDst,eOrg),joiningVertices||(libtess.mesh.makeVertex_(eDst,eOrg.org),eOrg.org.anEdge=eOrg),joiningLoops||(libtess.mesh.makeFace_(eDst,eOrg.lFace),eOrg.lFace.anEdge=eOrg))},libtess.mesh.deleteEdge=function(eDel){var eDelSym=eDel.sym,joiningLoops=!1;eDel.lFace!==eDel.rFace()&&(joiningLoops=!0,libtess.mesh.killFace_(eDel.lFace,eDel.rFace())),eDel.oNext===eDel?libtess.mesh.killVertex_(eDel.org,null):(eDel.rFace().anEdge=eDel.oPrev(),eDel.org.anEdge=eDel.oNext,libtess.mesh.splice_(eDel,eDel.oPrev()),joiningLoops||libtess.mesh.makeFace_(eDel,eDel.lFace)),eDelSym.oNext===eDelSym?(libtess.mesh.killVertex_(eDelSym.org,null),libtess.mesh.killFace_(eDelSym.lFace,null)):(eDel.lFace.anEdge=eDelSym.oPrev(),eDelSym.org.anEdge=eDelSym.oNext,libtess.mesh.splice_(eDelSym,eDelSym.oPrev())),libtess.mesh.killEdge_(eDel)},libtess.mesh.addEdgeVertex=function(eOrg){var eNew=libtess.mesh.makeEdgePair_(eOrg),eNewSym=eNew.sym;return libtess.mesh.splice_(eNew,eOrg.lNext),eNew.org=eOrg.dst(),libtess.mesh.makeVertex_(eNewSym,eNew.org),eNew.lFace=eNewSym.lFace=eOrg.lFace,eNew},libtess.mesh.splitEdge=function(eOrg){var tempHalfEdge=libtess.mesh.addEdgeVertex(eOrg),eNew=tempHalfEdge.sym;return libtess.mesh.splice_(eOrg.sym,eOrg.sym.oPrev()),libtess.mesh.splice_(eOrg.sym,eNew),eOrg.sym.org=eNew.org,eNew.dst().anEdge=eNew.sym,eNew.sym.lFace=eOrg.rFace(),eNew.winding=eOrg.winding,eNew.sym.winding=eOrg.sym.winding,eNew},libtess.mesh.connect=function(eOrg,eDst){var joiningLoops=!1,eNew=libtess.mesh.makeEdgePair_(eOrg),eNewSym=eNew.sym;return eDst.lFace!==eOrg.lFace&&(joiningLoops=!0,libtess.mesh.killFace_(eDst.lFace,eOrg.lFace)),libtess.mesh.splice_(eNew,eOrg.lNext),libtess.mesh.splice_(eNewSym,eDst),eNew.org=eOrg.dst(),eNewSym.org=eDst.org,eNew.lFace=eNewSym.lFace=eOrg.lFace,eOrg.lFace.anEdge=eNewSym,joiningLoops||libtess.mesh.makeFace_(eNew,eOrg.lFace),eNew},libtess.mesh.zapFace=function(fZap){var e,eStart=fZap.anEdge,eNext=eStart.lNext;do if(e=eNext,eNext=e.lNext,e.lFace=null,null===e.rFace()){e.oNext===e?libtess.mesh.killVertex_(e.org,null):(e.org.anEdge=e.oNext,libtess.mesh.splice_(e,e.oPrev()));var eSym=e.sym;eSym.oNext===eSym?libtess.mesh.killVertex_(eSym.org,null):(eSym.org.anEdge=eSym.oNext,libtess.mesh.splice_(eSym,eSym.oPrev())),libtess.mesh.killEdge_(e)}while(e!==eStart);var fPrev=fZap.prev,fNext=fZap.next;fNext.prev=fPrev,fPrev.next=fNext},libtess.mesh.meshUnion=function(mesh1,mesh2){var f1=mesh1.fHead,v1=mesh1.vHead,e1=mesh1.eHead,f2=mesh2.fHead,v2=mesh2.vHead,e2=mesh2.eHead;return f2.next!==f2&&(f1.prev.next=f2.next,f2.next.prev=f1.prev,f2.prev.next=f1,f1.prev=f2.prev),v2.next!==v2&&(v1.prev.next=v2.next,v2.next.prev=v1.prev,v2.prev.next=v1,v1.prev=v2.prev),e2.next!==e2&&(e1.sym.next.sym.next=e2.next,e2.next.sym.next=e1.sym.next,e2.sym.next.sym.next=e1,e1.sym.next=e2.sym.next),mesh1},libtess.mesh.deleteMesh=function(){},libtess.mesh.makeEdgePair_=function(eNext){var e=new libtess.GluHalfEdge,eSym=new libtess.GluHalfEdge,ePrev=eNext.sym.next;return eSym.next=ePrev,ePrev.sym.next=e,e.next=eNext,eNext.sym.next=eSym,e.sym=eSym,e.oNext=e,e.lNext=eSym,eSym.sym=e,eSym.oNext=eSym,eSym.lNext=e,e},libtess.mesh.splice_=function(a,b){var aONext=a.oNext,bONext=b.oNext;aONext.sym.lNext=b,bONext.sym.lNext=a,a.oNext=bONext,b.oNext=aONext},libtess.mesh.makeVertex_=function(eOrig,vNext){var vPrev=vNext.prev,vNew=new libtess.GluVertex(vNext,vPrev);vPrev.next=vNew,vNext.prev=vNew,vNew.anEdge=eOrig;var e=eOrig;do e.org=vNew,e=e.oNext;while(e!==eOrig)},libtess.mesh.makeFace_=function(eOrig,fNext){var fPrev=fNext.prev,fNew=new libtess.GluFace(fNext,fPrev);fPrev.next=fNew,fNext.prev=fNew,fNew.anEdge=eOrig,fNew.inside=fNext.inside;var e=eOrig;do e.lFace=fNew,e=e.lNext;while(e!==eOrig)},libtess.mesh.killEdge_=function(eDel){var eNext=eDel.next,ePrev=eDel.sym.next;eNext.sym.next=ePrev,ePrev.sym.next=eNext},libtess.mesh.killVertex_=function(vDel,newOrg){var eStart=vDel.anEdge,e=eStart;do e.org=newOrg,e=e.oNext;while(e!==eStart);var vPrev=vDel.prev,vNext=vDel.next;vNext.prev=vPrev,vPrev.next=vNext},libtess.mesh.killFace_=function(fDel,newLFace){var eStart=fDel.anEdge,e=eStart;do e.lFace=newLFace,e=e.lNext;while(e!==eStart);var fPrev=fDel.prev,fNext=fDel.next;fNext.prev=fPrev,fPrev.next=fNext},libtess.GluFace=function(opt_nextFace,opt_prevFace){this.next=opt_nextFace||this,this.prev=opt_prevFace||this,this.anEdge=null,this.data=null,this.trail=null,this.marked=!1,this.inside=!1},libtess.GluHalfEdge=function(opt_nextEdge){this.next=opt_nextEdge||this,this.sym=null,this.oNext=null,this.lNext=null,this.org=null,this.lFace=null,this.activeRegion=null,this.winding=0},libtess.GluHalfEdge.prototype.rFace=function(){return this.sym.lFace},libtess.GluHalfEdge.prototype.dst=function(){return this.sym.org},libtess.GluHalfEdge.prototype.oPrev=function(){return this.sym.lNext},libtess.GluHalfEdge.prototype.lPrev=function(){return this.oNext.sym},libtess.GluHalfEdge.prototype.dPrev=function(){return this.lNext.sym},libtess.GluHalfEdge.prototype.rPrev=function(){return this.sym.oNext},libtess.GluHalfEdge.prototype.dNext=function(){return this.rPrev().sym},libtess.GluHalfEdge.prototype.rNext=function(){return this.oPrev().sym},libtess.GluVertex=function(opt_nextVertex,opt_prevVertex){this.next=opt_nextVertex||this,this.prev=opt_prevVertex||this,this.anEdge=null,this.data=null,this.coords=[0,0,0],this.s=0,this.t=0,this.pqHandle=null},libtess.GluMesh=function(){this.vHead=new libtess.GluVertex,this.fHead=new libtess.GluFace,this.eHead=new libtess.GluHalfEdge,this.eHeadSym=new libtess.GluHalfEdge,this.eHead.sym=this.eHeadSym,this.eHeadSym.sym=this.eHead},libtess.GluMesh.prototype.checkMesh=function(){if(libtess.DEBUG){var e,f,fHead=this.fHead,vHead=this.vHead,eHead=this.eHead,fPrev=fHead;for(fPrev=fHead;(f=fPrev.next)!==fHead;fPrev=f){libtess.assert(f.prev===fPrev),e=f.anEdge;do libtess.assert(e.sym!==e),libtess.assert(e.sym.sym===e),libtess.assert(e.lNext.oNext.sym===e),libtess.assert(e.oNext.sym.lNext===e),libtess.assert(e.lFace===f),e=e.lNext;while(e!==f.anEdge)}libtess.assert(f.prev===fPrev&&null===f.anEdge&&null===f.data);var v,vPrev=vHead;for(vPrev=vHead;(v=vPrev.next)!==vHead;vPrev=v){libtess.assert(v.prev===vPrev),e=v.anEdge;do libtess.assert(e.sym!==e),libtess.assert(e.sym.sym===e),libtess.assert(e.lNext.oNext.sym===e),libtess.assert(e.oNext.sym.lNext===e),libtess.assert(e.org===v),e=e.oNext;while(e!==v.anEdge)}libtess.assert(v.prev===vPrev&&null===v.anEdge&&null===v.data);var ePrev=eHead;for(ePrev=eHead;(e=ePrev.next)!==eHead;ePrev=e)libtess.assert(e.sym.next===ePrev.sym),libtess.assert(e.sym!==e),libtess.assert(e.sym.sym===e),libtess.assert(null!==e.org),libtess.assert(null!==e.dst()),libtess.assert(e.lNext.oNext.sym===e),libtess.assert(e.oNext.sym.lNext===e);libtess.assert(e.sym.next===ePrev.sym&&e.sym===this.eHeadSym&&e.sym.sym===e&&null===e.org&&null===e.dst()&&null===e.lFace&&null===e.rFace())}},libtess.sweep=function(){},libtess.sweep.SENTINEL_COORD_=4*libtess.GLU_TESS_MAX_COORD,libtess.sweep.TOLERANCE_NONZERO_=!1,libtess.sweep.computeInterior=function(tess){tess.fatalError=!1,libtess.sweep.removeDegenerateEdges_(tess),libtess.sweep.initPriorityQ_(tess),libtess.sweep.initEdgeDict_(tess);for(var v;null!==(v=tess.pq.extractMin());){for(;;){var vNext=tess.pq.minimum();if(null===vNext||!libtess.geom.vertEq(vNext,v))break;vNext=tess.pq.extractMin(),libtess.sweep.spliceMergeVertices_(tess,v.anEdge,vNext.anEdge)}libtess.sweep.sweepEvent_(tess,v)}var tmpReg=tess.dict.getMin().getKey();tess.event=tmpReg.eUp.org,libtess.sweepDebugEvent(tess),libtess.sweep.doneEdgeDict_(tess),libtess.sweep.donePriorityQ_(tess),libtess.sweep.removeDegenerateFaces_(tess.mesh),tess.mesh.checkMesh()},libtess.sweep.addWinding_=function(eDst,eSrc){eDst.winding+=eSrc.winding,eDst.sym.winding+=eSrc.sym.winding},libtess.sweep.edgeLeq_=function(tess,reg1,reg2){var event=tess.event,e1=reg1.eUp,e2=reg2.eUp;if(e1.dst()===event)return e2.dst()===event?libtess.geom.vertLeq(e1.org,e2.org)?libtess.geom.edgeSign(e2.dst(),e1.org,e2.org)<=0:libtess.geom.edgeSign(e1.dst(),e2.org,e1.org)>=0:libtess.geom.edgeSign(e2.dst(),event,e2.org)<=0;if(e2.dst()===event)return libtess.geom.edgeSign(e1.dst(),event,e1.org)>=0;var t1=libtess.geom.edgeEval(e1.dst(),event,e1.org),t2=libtess.geom.edgeEval(e2.dst(),event,e2.org);return t1>=t2},libtess.sweep.deleteRegion_=function(tess,reg){reg.fixUpperEdge&&libtess.assert(0===reg.eUp.winding),reg.eUp.activeRegion=null,tess.dict.deleteNode(reg.nodeUp),reg.nodeUp=null},libtess.sweep.fixUpperEdge_=function(reg,newEdge){libtess.assert(reg.fixUpperEdge),libtess.mesh.deleteEdge(reg.eUp),reg.fixUpperEdge=!1,reg.eUp=newEdge,newEdge.activeRegion=reg},libtess.sweep.topLeftRegion_=function(reg){var org=reg.eUp.org;do reg=reg.regionAbove();while(reg.eUp.org===org);if(reg.fixUpperEdge){var e=libtess.mesh.connect(reg.regionBelow().eUp.sym,reg.eUp.lNext);libtess.sweep.fixUpperEdge_(reg,e),reg=reg.regionAbove()}return reg},libtess.sweep.topRightRegion_=function(reg){var dst=reg.eUp.dst();do reg=reg.regionAbove();while(reg.eUp.dst()===dst);return reg},libtess.sweep.addRegionBelow_=function(tess,regAbove,eNewUp){var regNew=new libtess.ActiveRegion;return regNew.eUp=eNewUp,regNew.nodeUp=tess.dict.insertBefore(regAbove.nodeUp,regNew),eNewUp.activeRegion=regNew,regNew},libtess.sweep.isWindingInside_=function(tess,n){switch(tess.windingRule){case libtess.windingRule.GLU_TESS_WINDING_ODD:return 0!==(1&n);case libtess.windingRule.GLU_TESS_WINDING_NONZERO:return 0!==n;case libtess.windingRule.GLU_TESS_WINDING_POSITIVE:return n>0;case libtess.windingRule.GLU_TESS_WINDING_NEGATIVE:return 0>n;case libtess.windingRule.GLU_TESS_WINDING_ABS_GEQ_TWO:return n>=2||-2>=n}return libtess.assert(!1),!1},libtess.sweep.computeWinding_=function(tess,reg){reg.windingNumber=reg.regionAbove().windingNumber+reg.eUp.winding,reg.inside=libtess.sweep.isWindingInside_(tess,reg.windingNumber)
},libtess.sweep.finishRegion_=function(tess,reg){var e=reg.eUp,f=e.lFace;f.inside=reg.inside,f.anEdge=e,libtess.sweep.deleteRegion_(tess,reg)},libtess.sweep.finishLeftRegions_=function(tess,regFirst,regLast){for(var regPrev=regFirst,ePrev=regFirst.eUp;regPrev!==regLast;){regPrev.fixUpperEdge=!1;var reg=regPrev.regionBelow(),e=reg.eUp;if(e.org!==ePrev.org){if(!reg.fixUpperEdge){libtess.sweep.finishRegion_(tess,regPrev);break}e=libtess.mesh.connect(ePrev.lPrev(),e.sym),libtess.sweep.fixUpperEdge_(reg,e)}ePrev.oNext!==e&&(libtess.mesh.meshSplice(e.oPrev(),e),libtess.mesh.meshSplice(ePrev,e)),libtess.sweep.finishRegion_(tess,regPrev),ePrev=reg.eUp,regPrev=reg}return ePrev},libtess.sweep.addRightEdges_=function(tess,regUp,eFirst,eLast,eTopLeft,cleanUp){var firstTime=!0,e=eFirst;do libtess.assert(libtess.geom.vertLeq(e.org,e.dst())),libtess.sweep.addRegionBelow_(tess,regUp,e.sym),e=e.oNext;while(e!==eLast);null===eTopLeft&&(eTopLeft=regUp.regionBelow().eUp.rPrev());for(var reg,regPrev=regUp,ePrev=eTopLeft;reg=regPrev.regionBelow(),e=reg.eUp.sym,e.org===ePrev.org;)e.oNext!==ePrev&&(libtess.mesh.meshSplice(e.oPrev(),e),libtess.mesh.meshSplice(ePrev.oPrev(),e)),reg.windingNumber=regPrev.windingNumber-e.winding,reg.inside=libtess.sweep.isWindingInside_(tess,reg.windingNumber),regPrev.dirty=!0,!firstTime&&libtess.sweep.checkForRightSplice_(tess,regPrev)&&(libtess.sweep.addWinding_(e,ePrev),libtess.sweep.deleteRegion_(tess,regPrev),libtess.mesh.deleteEdge(ePrev)),firstTime=!1,regPrev=reg,ePrev=e;regPrev.dirty=!0,libtess.assert(regPrev.windingNumber-e.winding===reg.windingNumber),cleanUp&&libtess.sweep.walkDirtyRegions_(tess,regPrev)},libtess.sweep.callCombine_=function(tess,isect,data,weights,needed){var coords=[isect.coords[0],isect.coords[1],isect.coords[2]];isect.data=null,isect.data=tess.callCombineOrCombineData(coords,data,weights),null===isect.data&&(needed?tess.fatalError||(tess.callErrorOrErrorData(libtess.errorType.GLU_TESS_NEED_COMBINE_CALLBACK),tess.fatalError=!0):isect.data=data[0])},libtess.sweep.spliceMergeVertices_=function(tess,e1,e2){var data=[null,null,null,null],weights=[.5,.5,0,0];data[0]=e1.org.data,data[1]=e2.org.data,libtess.sweep.callCombine_(tess,e1.org,data,weights,!1),libtess.mesh.meshSplice(e1,e2)},libtess.sweep.vertexWeights_=function(isect,org,dst,weights,weightIndex){var t1=libtess.geom.vertL1dist(org,isect),t2=libtess.geom.vertL1dist(dst,isect),i0=weightIndex,i1=weightIndex+1;weights[i0]=.5*t2/(t1+t2),weights[i1]=.5*t1/(t1+t2),isect.coords[0]+=weights[i0]*org.coords[0]+weights[i1]*dst.coords[0],isect.coords[1]+=weights[i0]*org.coords[1]+weights[i1]*dst.coords[1],isect.coords[2]+=weights[i0]*org.coords[2]+weights[i1]*dst.coords[2]},libtess.sweep.getIntersectData_=function(tess,isect,orgUp,dstUp,orgLo,dstLo){var weights=[0,0,0,0],data=[orgUp.data,dstUp.data,orgLo.data,dstLo.data];isect.coords[0]=isect.coords[1]=isect.coords[2]=0,libtess.sweep.vertexWeights_(isect,orgUp,dstUp,weights,0),libtess.sweep.vertexWeights_(isect,orgLo,dstLo,weights,2),libtess.sweep.callCombine_(tess,isect,data,weights,!0)},libtess.sweep.checkForRightSplice_=function(tess,regUp){var regLo=regUp.regionBelow(),eUp=regUp.eUp,eLo=regLo.eUp;if(libtess.geom.vertLeq(eUp.org,eLo.org)){if(libtess.geom.edgeSign(eLo.dst(),eUp.org,eLo.org)>0)return!1;libtess.geom.vertEq(eUp.org,eLo.org)?eUp.org!==eLo.org&&(tess.pq.remove(eUp.org.pqHandle),libtess.sweep.spliceMergeVertices_(tess,eLo.oPrev(),eUp)):(libtess.mesh.splitEdge(eLo.sym),libtess.mesh.meshSplice(eUp,eLo.oPrev()),regUp.dirty=regLo.dirty=!0)}else{if(libtess.geom.edgeSign(eUp.dst(),eLo.org,eUp.org)<0)return!1;regUp.regionAbove().dirty=regUp.dirty=!0,libtess.mesh.splitEdge(eUp.sym),libtess.mesh.meshSplice(eLo.oPrev(),eUp)}return!0},libtess.sweep.checkForLeftSplice_=function(tess,regUp){var e,regLo=regUp.regionBelow(),eUp=regUp.eUp,eLo=regLo.eUp;if(libtess.assert(!libtess.geom.vertEq(eUp.dst(),eLo.dst())),libtess.geom.vertLeq(eUp.dst(),eLo.dst())){if(libtess.geom.edgeSign(eUp.dst(),eLo.dst(),eUp.org)<0)return!1;regUp.regionAbove().dirty=regUp.dirty=!0,e=libtess.mesh.splitEdge(eUp),libtess.mesh.meshSplice(eLo.sym,e),e.lFace.inside=regUp.inside}else{if(libtess.geom.edgeSign(eLo.dst(),eUp.dst(),eLo.org)>0)return!1;regUp.dirty=regLo.dirty=!0,e=libtess.mesh.splitEdge(eLo),libtess.mesh.meshSplice(eUp.lNext,eLo.sym),e.rFace().inside=regUp.inside}return!0},libtess.sweep.checkForIntersect_=function(tess,regUp){var regLo=regUp.regionBelow(),eUp=regUp.eUp,eLo=regLo.eUp,orgUp=eUp.org,orgLo=eLo.org,dstUp=eUp.dst(),dstLo=eLo.dst(),isect=new libtess.GluVertex;if(libtess.assert(!libtess.geom.vertEq(dstLo,dstUp)),libtess.assert(libtess.geom.edgeSign(dstUp,tess.event,orgUp)<=0),libtess.assert(libtess.geom.edgeSign(dstLo,tess.event,orgLo)>=0),libtess.assert(orgUp!==tess.event&&orgLo!==tess.event),libtess.assert(!regUp.fixUpperEdge&&!regLo.fixUpperEdge),orgUp===orgLo)return!1;var tMinUp=Math.min(orgUp.t,dstUp.t),tMaxLo=Math.max(orgLo.t,dstLo.t);if(tMinUp>tMaxLo)return!1;if(libtess.geom.vertLeq(orgUp,orgLo)){if(libtess.geom.edgeSign(dstLo,orgUp,orgLo)>0)return!1}else if(libtess.geom.edgeSign(dstUp,orgLo,orgUp)<0)return!1;libtess.sweepDebugEvent(tess),libtess.geom.edgeIntersect(dstUp,orgUp,dstLo,orgLo,isect),libtess.assert(Math.min(orgUp.t,dstUp.t)<=isect.t),libtess.assert(isect.t<=Math.max(orgLo.t,dstLo.t)),libtess.assert(Math.min(dstLo.s,dstUp.s)<=isect.s),libtess.assert(isect.s<=Math.max(orgLo.s,orgUp.s)),libtess.geom.vertLeq(isect,tess.event)&&(isect.s=tess.event.s,isect.t=tess.event.t);var orgMin=libtess.geom.vertLeq(orgUp,orgLo)?orgUp:orgLo;if(libtess.geom.vertLeq(orgMin,isect)&&(isect.s=orgMin.s,isect.t=orgMin.t),libtess.geom.vertEq(isect,orgUp)||libtess.geom.vertEq(isect,orgLo))return libtess.sweep.checkForRightSplice_(tess,regUp),!1;if(!libtess.geom.vertEq(dstUp,tess.event)&&libtess.geom.edgeSign(dstUp,tess.event,isect)>=0||!libtess.geom.vertEq(dstLo,tess.event)&&libtess.geom.edgeSign(dstLo,tess.event,isect)<=0){if(dstLo===tess.event)return libtess.mesh.splitEdge(eUp.sym),libtess.mesh.meshSplice(eLo.sym,eUp),regUp=libtess.sweep.topLeftRegion_(regUp),eUp=regUp.regionBelow().eUp,libtess.sweep.finishLeftRegions_(tess,regUp.regionBelow(),regLo),libtess.sweep.addRightEdges_(tess,regUp,eUp.oPrev(),eUp,eUp,!0),!0;if(dstUp===tess.event){libtess.mesh.splitEdge(eLo.sym),libtess.mesh.meshSplice(eUp.lNext,eLo.oPrev()),regLo=regUp,regUp=libtess.sweep.topRightRegion_(regUp);var e=regUp.regionBelow().eUp.rPrev();return regLo.eUp=eLo.oPrev(),eLo=libtess.sweep.finishLeftRegions_(tess,regLo,null),libtess.sweep.addRightEdges_(tess,regUp,eLo.oNext,eUp.rPrev(),e,!0),!0}return libtess.geom.edgeSign(dstUp,tess.event,isect)>=0&&(regUp.regionAbove().dirty=regUp.dirty=!0,libtess.mesh.splitEdge(eUp.sym),eUp.org.s=tess.event.s,eUp.org.t=tess.event.t),libtess.geom.edgeSign(dstLo,tess.event,isect)<=0&&(regUp.dirty=regLo.dirty=!0,libtess.mesh.splitEdge(eLo.sym),eLo.org.s=tess.event.s,eLo.org.t=tess.event.t),!1}return libtess.mesh.splitEdge(eUp.sym),libtess.mesh.splitEdge(eLo.sym),libtess.mesh.meshSplice(eLo.oPrev(),eUp),eUp.org.s=isect.s,eUp.org.t=isect.t,eUp.org.pqHandle=tess.pq.insert(eUp.org),libtess.sweep.getIntersectData_(tess,eUp.org,orgUp,dstUp,orgLo,dstLo),regUp.regionAbove().dirty=regUp.dirty=regLo.dirty=!0,!1},libtess.sweep.walkDirtyRegions_=function(tess,regUp){for(var regLo=regUp.regionBelow();;){for(;regLo.dirty;)regUp=regLo,regLo=regLo.regionBelow();if(!regUp.dirty&&(regLo=regUp,regUp=regUp.regionAbove(),null===regUp||!regUp.dirty))return;regUp.dirty=!1;var eUp=regUp.eUp,eLo=regLo.eUp;if(eUp.dst()!==eLo.dst()&&libtess.sweep.checkForLeftSplice_(tess,regUp)&&(regLo.fixUpperEdge?(libtess.sweep.deleteRegion_(tess,regLo),libtess.mesh.deleteEdge(eLo),regLo=regUp.regionBelow(),eLo=regLo.eUp):regUp.fixUpperEdge&&(libtess.sweep.deleteRegion_(tess,regUp),libtess.mesh.deleteEdge(eUp),regUp=regLo.regionAbove(),eUp=regUp.eUp)),eUp.org!==eLo.org)if(eUp.dst()===eLo.dst()||regUp.fixUpperEdge||regLo.fixUpperEdge||eUp.dst()!==tess.event&&eLo.dst()!==tess.event)libtess.sweep.checkForRightSplice_(tess,regUp);else if(libtess.sweep.checkForIntersect_(tess,regUp))return;eUp.org===eLo.org&&eUp.dst()===eLo.dst()&&(libtess.sweep.addWinding_(eLo,eUp),libtess.sweep.deleteRegion_(tess,regUp),libtess.mesh.deleteEdge(eUp),regUp=regLo.regionAbove())}},libtess.sweep.connectRightVertex_=function(tess,regUp,eBottomLeft){var eTopLeft=eBottomLeft.oNext,regLo=regUp.regionBelow(),eUp=regUp.eUp,eLo=regLo.eUp,degenerate=!1;if(eUp.dst()!==eLo.dst()&&libtess.sweep.checkForIntersect_(tess,regUp),libtess.geom.vertEq(eUp.org,tess.event)&&(libtess.mesh.meshSplice(eTopLeft.oPrev(),eUp),regUp=libtess.sweep.topLeftRegion_(regUp),eTopLeft=regUp.regionBelow().eUp,libtess.sweep.finishLeftRegions_(tess,regUp.regionBelow(),regLo),degenerate=!0),libtess.geom.vertEq(eLo.org,tess.event)&&(libtess.mesh.meshSplice(eBottomLeft,eLo.oPrev()),eBottomLeft=libtess.sweep.finishLeftRegions_(tess,regLo,null),degenerate=!0),degenerate)return void libtess.sweep.addRightEdges_(tess,regUp,eBottomLeft.oNext,eTopLeft,eTopLeft,!0);var eNew;eNew=libtess.geom.vertLeq(eLo.org,eUp.org)?eLo.oPrev():eUp,eNew=libtess.mesh.connect(eBottomLeft.lPrev(),eNew),libtess.sweep.addRightEdges_(tess,regUp,eNew,eNew.oNext,eNew.oNext,!1),eNew.sym.activeRegion.fixUpperEdge=!0,libtess.sweep.walkDirtyRegions_(tess,regUp)},libtess.sweep.connectLeftDegenerate_=function(tess,regUp,vEvent){var e=regUp.eUp;if(libtess.geom.vertEq(e.org,vEvent))return libtess.assert(libtess.sweep.TOLERANCE_NONZERO_),void libtess.sweep.spliceMergeVertices_(tess,e,vEvent.anEdge);if(!libtess.geom.vertEq(e.dst(),vEvent))return libtess.mesh.splitEdge(e.sym),regUp.fixUpperEdge&&(libtess.mesh.deleteEdge(e.oNext),regUp.fixUpperEdge=!1),libtess.mesh.meshSplice(vEvent.anEdge,e),void libtess.sweep.sweepEvent_(tess,vEvent);libtess.assert(libtess.sweep.TOLERANCE_NONZERO_),regUp=libtess.sweep.topRightRegion_(regUp);var reg=regUp.regionBelow(),eTopRight=reg.eUp.sym,eTopLeft=eTopRight.oNext,eLast=eTopLeft;reg.fixUpperEdge&&(libtess.assert(eTopLeft!==eTopRight),libtess.sweep.deleteRegion_(tess,reg),libtess.mesh.deleteEdge(eTopRight),eTopRight=eTopLeft.oPrev()),libtess.mesh.meshSplice(vEvent.anEdge,eTopRight),libtess.geom.edgeGoesLeft(eTopLeft)||(eTopLeft=null),libtess.sweep.addRightEdges_(tess,regUp,eTopRight.oNext,eLast,eTopLeft,!0)},libtess.sweep.connectLeftVertex_=function(tess,vEvent){var tmp=new libtess.ActiveRegion;tmp.eUp=vEvent.anEdge.sym;var regUp=tess.dict.search(tmp).getKey(),regLo=regUp.regionBelow(),eUp=regUp.eUp,eLo=regLo.eUp;if(0===libtess.geom.edgeSign(eUp.dst(),vEvent,eUp.org))return void libtess.sweep.connectLeftDegenerate_(tess,regUp,vEvent);var eNew,reg=libtess.geom.vertLeq(eLo.dst(),eUp.dst())?regUp:regLo;if(regUp.inside||reg.fixUpperEdge){if(reg===regUp)eNew=libtess.mesh.connect(vEvent.anEdge.sym,eUp.lNext);else{var tempHalfEdge=libtess.mesh.connect(eLo.dNext(),vEvent.anEdge);eNew=tempHalfEdge.sym}reg.fixUpperEdge?libtess.sweep.fixUpperEdge_(reg,eNew):libtess.sweep.computeWinding_(tess,libtess.sweep.addRegionBelow_(tess,regUp,eNew)),libtess.sweep.sweepEvent_(tess,vEvent)}else libtess.sweep.addRightEdges_(tess,regUp,vEvent.anEdge,vEvent.anEdge,null,!0)},libtess.sweep.sweepEvent_=function(tess,vEvent){tess.event=vEvent,libtess.sweepDebugEvent(tess);for(var e=vEvent.anEdge;null===e.activeRegion;)if(e=e.oNext,e===vEvent.anEdge)return void libtess.sweep.connectLeftVertex_(tess,vEvent);var regUp=libtess.sweep.topLeftRegion_(e.activeRegion),reg=regUp.regionBelow(),eTopLeft=reg.eUp,eBottomLeft=libtess.sweep.finishLeftRegions_(tess,reg,null);eBottomLeft.oNext===eTopLeft?libtess.sweep.connectRightVertex_(tess,regUp,eBottomLeft):libtess.sweep.addRightEdges_(tess,regUp,eBottomLeft.oNext,eTopLeft,eTopLeft,!0)},libtess.sweep.addSentinel_=function(tess,t){var reg=new libtess.ActiveRegion,e=libtess.mesh.makeEdge(tess.mesh);e.org.s=libtess.sweep.SENTINEL_COORD_,e.org.t=t,e.dst().s=-libtess.sweep.SENTINEL_COORD_,e.dst().t=t,tess.event=e.dst(),reg.eUp=e,reg.windingNumber=0,reg.inside=!1,reg.fixUpperEdge=!1,reg.sentinel=!0,reg.dirty=!1,reg.nodeUp=tess.dict.insert(reg)},libtess.sweep.initEdgeDict_=function(tess){tess.dict=new libtess.Dict(tess,libtess.sweep.edgeLeq_),libtess.sweep.addSentinel_(tess,-libtess.sweep.SENTINEL_COORD_),libtess.sweep.addSentinel_(tess,libtess.sweep.SENTINEL_COORD_)},libtess.sweep.doneEdgeDict_=function(tess){for(var reg,fixedEdges=0;null!==(reg=tess.dict.getMin().getKey());)reg.sentinel||(libtess.assert(reg.fixUpperEdge),libtess.assert(1===++fixedEdges)),libtess.assert(0===reg.windingNumber),libtess.sweep.deleteRegion_(tess,reg);tess.dict.deleteDict(),tess.dict=null},libtess.sweep.removeDegenerateEdges_=function(tess){for(var eNext,eHead=tess.mesh.eHead,e=eHead.next;e!==eHead;e=eNext){eNext=e.next;var eLNext=e.lNext;libtess.geom.vertEq(e.org,e.dst())&&e.lNext.lNext!==e&&(libtess.sweep.spliceMergeVertices_(tess,eLNext,e),libtess.mesh.deleteEdge(e),e=eLNext,eLNext=e.lNext),eLNext.lNext===e&&(eLNext!==e&&((eLNext===eNext||eLNext===eNext.sym)&&(eNext=eNext.next),libtess.mesh.deleteEdge(eLNext)),(e===eNext||e===eNext.sym)&&(eNext=eNext.next),libtess.mesh.deleteEdge(e))}},libtess.sweep.initPriorityQ_=function(tess){var pq=new libtess.PriorityQ(libtess.geom.vertLeq);tess.pq=pq;var v,vHead=tess.mesh.vHead;for(v=vHead.next;v!==vHead;v=v.next)v.pqHandle=pq.insert(v);pq.init()},libtess.sweep.donePriorityQ_=function(tess){tess.pq.deleteQ(),tess.pq=null},libtess.sweep.removeDegenerateFaces_=function(mesh){for(var fNext,f=mesh.fHead.next;f!==mesh.fHead;f=fNext){fNext=f.next;var e=f.anEdge;libtess.assert(e.lNext!==e),e.lNext.lNext===e&&(libtess.sweep.addWinding_(e.oNext,e),libtess.mesh.deleteEdge(e))}},libtess.ActiveRegion=function(){this.eUp=null,this.nodeUp=null,this.windingNumber=0,this.inside=!1,this.sentinel=!1,this.dirty=!1,this.fixUpperEdge=!1},libtess.ActiveRegion.prototype.regionBelow=function(){return this.nodeUp.getPred().getKey()},libtess.ActiveRegion.prototype.regionAbove=function(){return this.nodeUp.getSucc().getKey()},libtess.render=function(){},libtess.render.SIGN_INCONSISTENT_=2,libtess.render.renderMesh=function(tess,mesh){tess.lonelyTriList=null;var f;for(f=mesh.fHead.next;f!==mesh.fHead;f=f.next)f.marked=!1;for(f=mesh.fHead.next;f!==mesh.fHead;f=f.next)f.inside&&!f.marked&&(libtess.render.renderMaximumFaceGroup_(tess,f),libtess.assert(f.marked));null!==tess.lonelyTriList&&(libtess.render.renderLonelyTriangles_(tess,tess.lonelyTriList),tess.lonelyTriList=null)},libtess.render.renderBoundary=function(tess,mesh){for(var f=mesh.fHead.next;f!==mesh.fHead;f=f.next)if(f.inside){tess.callBeginOrBeginData(libtess.primitiveType.GL_LINE_LOOP);var e=f.anEdge;do tess.callVertexOrVertexData(e.org.data),e=e.lNext;while(e!==f.anEdge);tess.callEndOrEndData()}},libtess.render.renderCache=function(tess){if(tess.cacheCount<3)return!0;var norm=[0,0,0];norm[0]=tess.normal[0],norm[1]=tess.normal[1],norm[2]=tess.normal[2],0===norm[0]&&0===norm[1]&&0===norm[2]&&libtess.render.computeNormal_(tess,norm,!1);var sign=libtess.render.computeNormal_(tess,norm,!0);if(sign===libtess.render.SIGN_INCONSISTENT_)return!1;if(0===sign)return!0;switch(tess.windingRule){case libtess.windingRule.GLU_TESS_WINDING_ODD:case libtess.windingRule.GLU_TESS_WINDING_NONZERO:break;case libtess.windingRule.GLU_TESS_WINDING_POSITIVE:if(0>sign)return!0;break;case libtess.windingRule.GLU_TESS_WINDING_NEGATIVE:if(sign>0)return!0;break;case libtess.windingRule.GLU_TESS_WINDING_ABS_GEQ_TWO:return!0}tess.callBeginOrBeginData(tess.boundaryOnly?libtess.primitiveType.GL_LINE_LOOP:tess.cacheCount>3?libtess.primitiveType.GL_TRIANGLE_FAN:libtess.primitiveType.GL_TRIANGLES);var vc,v0=0,vn=v0+tess.cacheCount;if(tess.callVertexOrVertexData(tess.cache[v0].data),sign>0)for(vc=v0+1;vn>vc;++vc)tess.callVertexOrVertexData(tess.cache[vc].data);else for(vc=vn-1;vc>v0;--vc)tess.callVertexOrVertexData(tess.cache[vc].data);return tess.callEndOrEndData(),!0},libtess.render.marked_=function(f){return!f.inside||f.marked},libtess.render.freeTrail_=function(t){for(;null!==t;)t.marked=!1,t=t.trail},libtess.render.maximumFan_=function(eOrig){var e,newFace=new libtess.FaceCount(0,null,libtess.render.renderFan_),trail=null;for(e=eOrig;!libtess.render.marked_(e.lFace);e=e.oNext)e.lFace.trail=trail,trail=e.lFace,e.lFace.marked=!0,++newFace.size;for(e=eOrig;!libtess.render.marked_(e.rFace());e=e.oPrev())e.rFace().trail=trail,trail=e.rFace(),e.rFace().marked=!0,++newFace.size;return newFace.eStart=e,libtess.render.freeTrail_(trail),newFace},libtess.render.maximumStrip_=function(eOrig){var e,eTail,eHead,newFace=new libtess.FaceCount(0,null,libtess.render.renderStrip_),headSize=0,tailSize=0,trail=null;for(e=eOrig;!libtess.render.marked_(e.lFace)&&(e.lFace.trail=trail,trail=e.lFace,e.lFace.marked=!0,++tailSize,e=e.dPrev(),!libtess.render.marked_(e.lFace));++tailSize,e=e.oNext)e.lFace.trail=trail,trail=e.lFace,e.lFace.marked=!0;for(eTail=e,e=eOrig;!libtess.render.marked_(e.rFace())&&(e.rFace().trail=trail,trail=e.rFace(),e.rFace().marked=!0,++headSize,e=e.oPrev(),!libtess.render.marked_(e.rFace()));++headSize,e=e.dNext())e.rFace().trail=trail,trail=e.rFace(),e.rFace().marked=!0;return eHead=e,newFace.size=tailSize+headSize,0===(1&tailSize)?newFace.eStart=eTail.sym:0===(1&headSize)?newFace.eStart=eHead:(--newFace.size,newFace.eStart=eHead.oNext),libtess.render.freeTrail_(trail),newFace},libtess.render.renderFan_=function(tess,e,size){for(tess.callBeginOrBeginData(libtess.primitiveType.GL_TRIANGLE_FAN),tess.callVertexOrVertexData(e.org.data),tess.callVertexOrVertexData(e.dst().data);!libtess.render.marked_(e.lFace);)e.lFace.marked=!0,--size,e=e.oNext,tess.callVertexOrVertexData(e.dst().data);libtess.assert(0===size),tess.callEndOrEndData()},libtess.render.renderStrip_=function(tess,e,size){for(tess.callBeginOrBeginData(libtess.primitiveType.GL_TRIANGLE_STRIP),tess.callVertexOrVertexData(e.org.data),tess.callVertexOrVertexData(e.dst().data);!libtess.render.marked_(e.lFace)&&(e.lFace.marked=!0,--size,e=e.dPrev(),tess.callVertexOrVertexData(e.org.data),!libtess.render.marked_(e.lFace));)e.lFace.marked=!0,--size,e=e.oNext,tess.callVertexOrVertexData(e.dst().data);libtess.assert(0===size),tess.callEndOrEndData()},libtess.render.renderTriangle_=function(tess,e,size){libtess.assert(1===size),e.lFace.trail=tess.lonelyTriList,tess.lonelyTriList=e.lFace,e.lFace.marked=!0},libtess.render.renderMaximumFaceGroup_=function(tess,fOrig){var newFace,e=fOrig.anEdge,max=new libtess.FaceCount(1,e,libtess.render.renderTriangle_);tess.flagBoundary||(newFace=libtess.render.maximumFan_(e),newFace.size>max.size&&(max=newFace),newFace=libtess.render.maximumFan_(e.lNext),newFace.size>max.size&&(max=newFace),newFace=libtess.render.maximumFan_(e.lPrev()),newFace.size>max.size&&(max=newFace),newFace=libtess.render.maximumStrip_(e),newFace.size>max.size&&(max=newFace),newFace=libtess.render.maximumStrip_(e.lNext),newFace.size>max.size&&(max=newFace),newFace=libtess.render.maximumStrip_(e.lPrev()),newFace.size>max.size&&(max=newFace)),max.render(tess,max.eStart,max.size)},libtess.render.renderLonelyTriangles_=function(tess,head){var edgeState=-1,f=head;for(tess.callBeginOrBeginData(libtess.primitiveType.GL_TRIANGLES);null!==f;f=f.trail){var e=f.anEdge;do{if(tess.flagBoundary){var newState=e.rFace().inside?0:1;edgeState!==newState&&(edgeState=newState,tess.callEdgeFlagOrEdgeFlagData(!!edgeState))}tess.callVertexOrVertexData(e.org.data),e=e.lNext}while(e!==f.anEdge)}tess.callEndOrEndData()},libtess.render.computeNormal_=function(tess,norm,check){check||(norm[0]=norm[1]=norm[2]=0);for(var v0=0,vn=v0+tess.cacheCount,vc=v0+1,vert0=tess.cache[v0],vertc=tess.cache[vc],xc=vertc.coords[0]-vert0.coords[0],yc=vertc.coords[1]-vert0.coords[1],zc=vertc.coords[2]-vert0.coords[2],sign=0;++vc<vn;){vertc=tess.cache[vc];var xp=xc,yp=yc,zp=zc;xc=vertc.coords[0]-vert0.coords[0],yc=vertc.coords[1]-vert0.coords[1],zc=vertc.coords[2]-vert0.coords[2];var n=[0,0,0];n[0]=yp*zc-zp*yc,n[1]=zp*xc-xp*zc,n[2]=xp*yc-yp*xc;var dot=n[0]*norm[0]+n[1]*norm[1]+n[2]*norm[2];if(check){if(0!==dot)if(dot>0){if(0>sign)return libtess.render.SIGN_INCONSISTENT_;sign=1}else{if(sign>0)return libtess.render.SIGN_INCONSISTENT_;sign=-1}}else dot>=0?(norm[0]+=n[0],norm[1]+=n[1],norm[2]+=n[2]):(norm[0]-=n[0],norm[1]-=n[1],norm[2]-=n[2])}return sign},libtess.FaceCount=function(size,eStart,renderFunction){this.size=size,this.eStart=eStart,this.render=renderFunction},libtess.geom=function(){},libtess.geom.vertEq=function(u,v){return u.s===v.s&&u.t===v.t},libtess.geom.vertLeq=function(u,v){return u.s<v.s||u.s===v.s&&u.t<=v.t},libtess.geom.edgeEval=function(u,v,w){var gapL,gapR;return libtess.assert(libtess.geom.vertLeq(u,v)&&libtess.geom.vertLeq(v,w)),gapL=v.s-u.s,gapR=w.s-v.s,gapL+gapR>0?gapR>gapL?v.t-u.t+(u.t-w.t)*(gapL/(gapL+gapR)):v.t-w.t+(w.t-u.t)*(gapR/(gapL+gapR)):0},libtess.geom.edgeSign=function(u,v,w){var gapL,gapR;return libtess.assert(libtess.geom.vertLeq(u,v)&&libtess.geom.vertLeq(v,w)),gapL=v.s-u.s,gapR=w.s-v.s,gapL+gapR>0?(v.t-w.t)*gapL+(v.t-u.t)*gapR:0},libtess.geom.transLeq=function(u,v){return u.t<v.t||u.t===v.t&&u.s<=v.s},libtess.geom.transEval=function(u,v,w){var gapL,gapR;return libtess.assert(libtess.geom.transLeq(u,v)&&libtess.geom.transLeq(v,w)),gapL=v.t-u.t,gapR=w.t-v.t,gapL+gapR>0?gapR>gapL?v.s-u.s+(u.s-w.s)*(gapL/(gapL+gapR)):v.s-w.s+(w.s-u.s)*(gapR/(gapL+gapR)):0},libtess.geom.transSign=function(u,v,w){var gapL,gapR;return libtess.assert(libtess.geom.transLeq(u,v)&&libtess.geom.transLeq(v,w)),gapL=v.t-u.t,gapR=w.t-v.t,gapL+gapR>0?(v.s-w.s)*gapL+(v.s-u.s)*gapR:0},libtess.geom.edgeGoesLeft=function(e){return libtess.geom.vertLeq(e.dst(),e.org)},libtess.geom.edgeGoesRight=function(e){return libtess.geom.vertLeq(e.org,e.dst())},libtess.geom.vertL1dist=function(u,v){return Math.abs(u.s-v.s)+Math.abs(u.t-v.t)},libtess.geom.vertCCW=function(u,v,w){return u.s*(v.t-w.t)+v.s*(w.t-u.t)+w.s*(u.t-v.t)>=0},libtess.geom.interpolate_=function(a,x,b,y){return a=0>a?0:a,b=0>b?0:b,b>=a?0===b?(x+y)/2:x+(y-x)*(a/(a+b)):y+(x-y)*(b/(a+b))},libtess.geom.edgeIntersect=function(o1,d1,o2,d2,v){var z1,z2,tmp;libtess.geom.vertLeq(o1,d1)||(tmp=o1,o1=d1,d1=tmp),libtess.geom.vertLeq(o2,d2)||(tmp=o2,o2=d2,d2=tmp),libtess.geom.vertLeq(o1,o2)||(tmp=o1,o1=o2,o2=tmp,tmp=d1,d1=d2,d2=tmp),libtess.geom.vertLeq(o2,d1)?libtess.geom.vertLeq(d1,d2)?(z1=libtess.geom.edgeEval(o1,o2,d1),z2=libtess.geom.edgeEval(o2,d1,d2),0>z1+z2&&(z1=-z1,z2=-z2),v.s=libtess.geom.interpolate_(z1,o2.s,z2,d1.s)):(z1=libtess.geom.edgeSign(o1,o2,d1),z2=-libtess.geom.edgeSign(o1,d2,d1),0>z1+z2&&(z1=-z1,z2=-z2),v.s=libtess.geom.interpolate_(z1,o2.s,z2,d2.s)):v.s=(o2.s+d1.s)/2,libtess.geom.transLeq(o1,d1)||(tmp=o1,o1=d1,d1=tmp),libtess.geom.transLeq(o2,d2)||(tmp=o2,o2=d2,d2=tmp),libtess.geom.transLeq(o1,o2)||(tmp=o1,o1=o2,o2=tmp,tmp=d1,d1=d2,d2=tmp),libtess.geom.transLeq(o2,d1)?libtess.geom.transLeq(d1,d2)?(z1=libtess.geom.transEval(o1,o2,d1),z2=libtess.geom.transEval(o2,d1,d2),0>z1+z2&&(z1=-z1,z2=-z2),v.t=libtess.geom.interpolate_(z1,o2.t,z2,d1.t)):(z1=libtess.geom.transSign(o1,o2,d1),z2=-libtess.geom.transSign(o1,d2,d1),0>z1+z2&&(z1=-z1,z2=-z2),v.t=libtess.geom.interpolate_(z1,o2.t,z2,d2.t)):v.t=(o2.t+d1.t)/2},libtess.normal=function(){},libtess.normal.S_UNIT_X_=1,libtess.normal.S_UNIT_Y_=0,libtess.normal.projectPolygon=function(tess){var computedNormal=!1,norm=[0,0,0];norm[0]=tess.normal[0],norm[1]=tess.normal[1],norm[2]=tess.normal[2],0===norm[0]&&0===norm[1]&&0===norm[2]&&(libtess.normal.computeNormal_(tess,norm),computedNormal=!0);var sUnit=tess.sUnit,tUnit=tess.tUnit,i=libtess.normal.longAxis_(norm);if(libtess.TRUE_PROJECT){libtess.normal.normalize_(norm),sUnit[i]=0,sUnit[(i+1)%3]=libtess.normal.S_UNIT_X_,sUnit[(i+2)%3]=libtess.normal.S_UNIT_Y_;var w=libtess.normal.dot_(sUnit,norm);sUnit[0]-=w*norm[0],sUnit[1]-=w*norm[1],sUnit[2]-=w*norm[2],libtess.normal.normalize_(sUnit),tUnit[0]=norm[1]*sUnit[2]-norm[2]*sUnit[1],tUnit[1]=norm[2]*sUnit[0]-norm[0]*sUnit[2],tUnit[2]=norm[0]*sUnit[1]-norm[1]*sUnit[0],libtess.normal.normalize_(tUnit)}else sUnit[i]=0,sUnit[(i+1)%3]=libtess.normal.S_UNIT_X_,sUnit[(i+2)%3]=libtess.normal.S_UNIT_Y_,tUnit[i]=0,tUnit[(i+1)%3]=norm[i]>0?-libtess.normal.S_UNIT_Y_:libtess.normal.S_UNIT_Y_,tUnit[(i+2)%3]=norm[i]>0?libtess.normal.S_UNIT_X_:-libtess.normal.S_UNIT_X_;for(var vHead=tess.mesh.vHead,v=vHead.next;v!==vHead;v=v.next)v.s=libtess.normal.dot_(v.coords,sUnit),v.t=libtess.normal.dot_(v.coords,tUnit);computedNormal&&libtess.normal.checkOrientation_(tess)},libtess.normal.dot_=function(u,v){return u[0]*v[0]+u[1]*v[1]+u[2]*v[2]},libtess.normal.normalize_=function(v){var len=v[0]*v[0]+v[1]*v[1]+v[2]*v[2];libtess.assert(len>0),len=Math.sqrt(len),v[0]/=len,v[1]/=len,v[2]/=len},libtess.normal.longAxis_=function(v){var i=0;return Math.abs(v[1])>Math.abs(v[0])&&(i=1),Math.abs(v[2])>Math.abs(v[i])&&(i=2),i},libtess.normal.computeNormal_=function(tess,norm){var maxVal=[0,0,0],minVal=[0,0,0],d1=[0,0,0],d2=[0,0,0],tNorm=[0,0,0];maxVal[0]=maxVal[1]=maxVal[2]=-2*libtess.GLU_TESS_MAX_COORD,minVal[0]=minVal[1]=minVal[2]=2*libtess.GLU_TESS_MAX_COORD;var i,v,maxVert=new Array(3),minVert=new Array(3),vHead=tess.mesh.vHead;for(v=vHead.next;v!==vHead;v=v.next)for(i=0;3>i;++i){var c=v.coords[i];c<minVal[i]&&(minVal[i]=c,minVert[i]=v),c>maxVal[i]&&(maxVal[i]=c,maxVert[i]=v)}if(i=0,maxVal[1]-minVal[1]>maxVal[0]-minVal[0]&&(i=1),maxVal[2]-minVal[2]>maxVal[i]-minVal[i]&&(i=2),minVal[i]>=maxVal[i])return norm[0]=0,norm[1]=0,void(norm[2]=1);var maxLen2=0,v1=minVert[i],v2=maxVert[i];for(d1[0]=v1.coords[0]-v2.coords[0],d1[1]=v1.coords[1]-v2.coords[1],d1[2]=v1.coords[2]-v2.coords[2],v=vHead.next;v!==vHead;v=v.next){d2[0]=v.coords[0]-v2.coords[0],d2[1]=v.coords[1]-v2.coords[1],d2[2]=v.coords[2]-v2.coords[2],tNorm[0]=d1[1]*d2[2]-d1[2]*d2[1],tNorm[1]=d1[2]*d2[0]-d1[0]*d2[2],tNorm[2]=d1[0]*d2[1]-d1[1]*d2[0];var tLen2=tNorm[0]*tNorm[0]+tNorm[1]*tNorm[1]+tNorm[2]*tNorm[2];tLen2>maxLen2&&(maxLen2=tLen2,norm[0]=tNorm[0],norm[1]=tNorm[1],norm[2]=tNorm[2])}0>=maxLen2&&(norm[0]=norm[1]=norm[2]=0,norm[libtess.normal.longAxis_(d1)]=1)},libtess.normal.checkOrientation_=function(tess){for(var area=0,fHead=tess.mesh.fHead,f=fHead.next;f!==fHead;f=f.next){var e=f.anEdge;if(!(e.winding<=0))do area+=(e.org.s-e.dst().s)*(e.org.t+e.dst().t),e=e.lNext;while(e!==f.anEdge)}if(0>area){for(var vHead=tess.mesh.vHead,v=vHead.next;v!==vHead;v=v.next)v.t=-v.t;tess.tUnit[0]=-tess.tUnit[0],tess.tUnit[1]=-tess.tUnit[1],tess.tUnit[2]=-tess.tUnit[2]}},libtess.tessmono=function(){},libtess.tessmono.tessellateMonoRegion_=function(face){var up=face.anEdge;for(libtess.assert(up.lNext!==up&&up.lNext.lNext!==up);libtess.geom.vertLeq(up.dst(),up.org);up=up.lPrev());for(;libtess.geom.vertLeq(up.org,up.dst());up=up.lNext);for(var tempHalfEdge,lo=up.lPrev();up.lNext!==lo;)if(libtess.geom.vertLeq(up.dst(),lo.org)){for(;lo.lNext!==up&&(libtess.geom.edgeGoesLeft(lo.lNext)||libtess.geom.edgeSign(lo.org,lo.dst(),lo.lNext.dst())<=0);)tempHalfEdge=libtess.mesh.connect(lo.lNext,lo),lo=tempHalfEdge.sym;lo=lo.lPrev()}else{for(;lo.lNext!==up&&(libtess.geom.edgeGoesRight(up.lPrev())||libtess.geom.edgeSign(up.dst(),up.org,up.lPrev().org)>=0);)tempHalfEdge=libtess.mesh.connect(up,up.lPrev()),up=tempHalfEdge.sym;up=up.lNext}for(libtess.assert(lo.lNext!==up);lo.lNext.lNext!==up;)tempHalfEdge=libtess.mesh.connect(lo.lNext,lo),lo=tempHalfEdge.sym},libtess.tessmono.tessellateInterior=function(mesh){for(var next,f=mesh.fHead.next;f!==mesh.fHead;f=next)next=f.next,f.inside&&libtess.tessmono.tessellateMonoRegion_(f)},libtess.tessmono.discardExterior=function(mesh){for(var next,f=mesh.fHead.next;f!==mesh.fHead;f=next)next=f.next,f.inside||libtess.mesh.zapFace(f)},libtess.tessmono.setWindingNumber=function(mesh,value,keepOnlyBoundary){for(var eNext,e=mesh.eHead.next;e!==mesh.eHead;e=eNext)eNext=e.next,e.rFace().inside!==e.lFace.inside?e.winding=e.lFace.inside?value:-value:keepOnlyBoundary?libtess.mesh.deleteEdge(e):e.winding=0},Point.copy=function(p){return null==p?null:{x:p.x,y:p.y}};var Geo={};!function(){Geo.tile_size=256,Geo.half_circumference_meters=20037508.342789244,Geo.map_origin_meters=Point(-Geo.half_circumference_meters,Geo.half_circumference_meters),Geo.min_zoom_meters_per_pixel=2*Geo.half_circumference_meters/Geo.tile_size,Geo.meters_per_pixel=[],Geo.max_zoom=20;for(var z=0;z<=Geo.max_zoom;z++)Geo.meters_per_pixel[z]=Geo.min_zoom_meters_per_pixel/Math.pow(2,z);Geo.metersForTile=function(tile){return Point(tile.x*Geo.tile_size*Geo.meters_per_pixel[tile.z]+Geo.map_origin_meters.x,tile.y*Geo.tile_size*Geo.meters_per_pixel[tile.z]*-1+Geo.map_origin_meters.y)},Geo.metersToLatLng=function(meters){var c=Point.copy(meters);return c.x/=Geo.half_circumference_meters,c.y/=Geo.half_circumference_meters,c.y=(2*Math.atan(Math.exp(c.y*Math.PI))-Math.PI/2)/Math.PI,c.x*=180,c.y*=180,c},Geo.latLngToMeters=function(latlng){var c=Point.copy(latlng);return c.y=Math.log(Math.tan((c.y+90)*Math.PI/360))/(Math.PI/180),c.y=c.y*Geo.half_circumference_meters/180,c.x=c.x*Geo.half_circumference_meters/180,c},Geo.transformGeometry=function(geometry,transform){return"Point"==geometry.type?transform(geometry.coordinates):"LineString"==geometry.type||"MultiPoint"==geometry.type?geometry.coordinates.map(transform):"Polygon"==geometry.type||"MultiLineString"==geometry.type?geometry.coordinates.map(function(coordinates){return coordinates.map(transform)}):"MultiPolygon"==geometry.type?geometry.coordinates.map(function(polygon){return polygon.map(function(coordinates){return coordinates.map(transform)})}):{}},Geo.boxIntersect=function(b1,b2){return!(b2.sw.x>b1.ne.x||b2.ne.x<b1.sw.x||b2.sw.y>b1.ne.y||b2.ne.y<b1.sw.y)},Geo.splitFeatureLines=function(feature,tolerance){var lines,tolerance=tolerance||.001,tolerance_sq=tolerance*tolerance,geom=feature.geometry;if("MultiLineString"==geom.type)lines=geom.coordinates;else{if("LineString"!=geom.type)return feature;lines=[geom.coordinates]}for(var split_lines=[],s=0;s<lines.length;s++){for(var keep,seg=lines[s],split_seg=[],last_coord=null,c=0;c<seg.length;c++){var coord=seg[c];if(keep=!0,null!=last_coord){var dist=(coord[0]-last_coord[0])*(coord[0]-last_coord[0])+(coord[1]-last_coord[1])*(coord[1]-last_coord[1]);dist>tolerance_sq&&(keep=!1)}0==keep&&(split_lines.push(split_seg),split_seg=[]),split_seg.push(coord),last_coord=coord}split_lines.push(split_seg),split_seg=[]}return 1==split_lines.length?(geom.type="LineString",geom.coordinates=split_lines[0]):(geom.type="MultiLineString",geom.coordinates=split_lines),feature}}();var GL={};GL.getContext=function(canvas){var canvas=canvas,fullscreen=!1;if(null==canvas&&(canvas=document.createElement("canvas"),canvas.style.position="absolute",canvas.style.top=0,canvas.style.left=0,canvas.style.zIndex=-1,document.body.appendChild(canvas),fullscreen=!0),gl=canvas.getContext("experimental-webgl",{}),!gl)throw alert("Couldn't create WebGL context. Your browser probably doesn't support WebGL or it's turned off?"),"Couldn't create WebGL context";return GL.resizeCanvas(gl,window.innerWidth,window.innerHeight),1==fullscreen&&window.addEventListener("resize",function(){GL.resizeCanvas(gl,window.innerWidth,window.innerHeight)}),GL.VertexArrayObject.init(gl),gl},GL.resizeCanvas=function(gl,width,height){var device_pixel_ratio=window.devicePixelRatio||1;gl.canvas.style.width=width+"px",gl.canvas.style.height=height+"px",gl.canvas.width=Math.round(gl.canvas.style.width*device_pixel_ratio),gl.canvas.height=Math.round(gl.canvas.style.width*device_pixel_ratio),gl.viewport(0,0,gl.canvas.width,gl.canvas.height)},GL.createProgramFromElements=function(gl,vertex_shader_id,fragment_shader_id){var vertex_shader_source=document.getElementById(vertex_shader_id).textContent,fragment_shader_source=document.getElementById(fragment_shader_id).textContent,program=gl.createProgram();return GL.updateProgram(gl,program,vertex_shader_source,fragment_shader_source)},GL.createProgramFromURLs=function(gl,vertex_shader_url,fragment_shader_url){var program=gl.createProgram();return GL.updateProgramFromURLs(gl,program,vertex_shader_url,fragment_shader_url)},GL.updateProgramFromURLs=function(gl,program,vertex_shader_url,fragment_shader_url){var vertex_shader_source,fragment_shader_source,req=new XMLHttpRequest;
return req.onload=function(){vertex_shader_source=req.response},req.open("GET",vertex_shader_url+"?"+ +new Date,!1),req.send(),req.onload=function(){fragment_shader_source=req.response},req.open("GET",fragment_shader_url+"?"+ +new Date,!1),req.send(),GL.updateProgram(gl,program,vertex_shader_source,fragment_shader_source)},GL.updateProgram=function(gl,program,vertex_shader_source,fragment_shader_source){try{var vertex_shader=GL.createShader(gl,vertex_shader_source,gl.VERTEX_SHADER),fragment_shader=GL.createShader(gl,"#ifdef GL_ES\nprecision highp float;\n#endif\n\n"+fragment_shader_source,gl.FRAGMENT_SHADER)}catch(err){return alert(err),program}if(gl.useProgram(null),null!=program)for(var old_shaders=gl.getAttachedShaders(program),i=0;i<old_shaders.length;i++)gl.detachShader(program,old_shaders[i]);else program=gl.createProgram();if(null==vertex_shader||null==fragment_shader)return program;if(gl.attachShader(program,vertex_shader),gl.attachShader(program,fragment_shader),gl.deleteShader(vertex_shader),gl.deleteShader(fragment_shader),gl.linkProgram(program),!gl.getProgramParameter(program,gl.LINK_STATUS)){var program_error="WebGL program error:\nVALIDATE_STATUS: "+gl.getProgramParameter(program,gl.VALIDATE_STATUS)+"\nERROR: "+gl.getError()+"\n\n--- Vertex Shader ---\n"+vertex_shader_source+"\n\n--- Fragment Shader ---\n"+fragment_shader_source;throw program_error}return program},GL.createShader=function(gl,source,type){var shader=gl.createShader(type);if(gl.shaderSource(shader,source),gl.compileShader(shader),!gl.getShaderParameter(shader,gl.COMPILE_STATUS)){var shader_error="WebGL shader error:\n"+(type==gl.VERTEX_SHADER?"VERTEX":"FRAGMENT")+" SHADER:\n"+gl.getShaderInfoLog(shader);throw shader_error}return shader},GL.Program=function(gl,vertex_shader_source,fragment_shader_source,options){options=options||{},this.gl=gl,this.program=null,this.defines=options.defines||{},this.uniforms={},this.attribs={},this.vertex_shader_source=vertex_shader_source,this.fragment_shader_source=fragment_shader_source,this.compile()},GL.Program.createProgramFromURLs=function(gl,vertex_shader_url,fragment_shader_url,options){var program=Object.create(GL.Program.prototype);return program.vertex_shader_url=vertex_shader_url,program.fragment_shader_url=fragment_shader_url,program.updateVertexShaderSource=function(){var source,req=new XMLHttpRequest;return req.onload=function(){source=req.response},req.open("GET",this.vertex_shader_url+"?"+ +new Date,!1),req.send(),source},program.updateFragmentShaderSource=function(){var source,req=new XMLHttpRequest;return req.onload=function(){source=req.response},req.open("GET",this.fragment_shader_url+"?"+ +new Date,!1),req.send(),source},GL.Program.call(program,gl,null,null,options),program},GL.Program.defines={},GL.Program.prototype.compile=function(){"function"==typeof this.updateVertexShaderSource&&(this.vertex_shader_source=this.updateVertexShaderSource()),"function"==typeof this.updateFragmentShaderSource&&(this.fragment_shader_source=this.updateFragmentShaderSource());var defines={};for(var d in GL.Program.defines)defines[d]=GL.Program.defines[d];for(var d in this.defines)defines[d]=this.defines[d];var define_str="";for(var d in defines)0!=defines[d]&&(define_str+="boolean"==typeof defines[d]&&1==defines[d]?"#define "+d+"\n":"#define "+d+" "+defines[d]+"\n");this.processed_vertex_shader_source=define_str+this.vertex_shader_source,this.processed_fragment_shader_source=define_str+this.fragment_shader_source,this.program=GL.updateProgram(this.gl,this.program,this.processed_vertex_shader_source,this.processed_fragment_shader_source),this.gl.useProgram(this.program),this.refreshUniforms(),this.refreshAttributes()},GL.Program.prototype.uniform=function(method,name){var uniform=this.uniforms[name]=this.uniforms[name]||{};uniform.name=name,uniform.location=uniform.location||this.gl.getUniformLocation(this.program,name),uniform.method="uniform"+method,uniform.values=Array.prototype.slice.call(arguments,2),this.updateUniform(name)},GL.Program.prototype.updateUniform=function(name){var uniform=this.uniforms[name];null!=uniform&&null!=uniform.location&&this.gl[uniform.method].apply(this.gl,[uniform.location].concat(uniform.values))},GL.Program.prototype.refreshUniforms=function(){for(var u in this.uniforms)this.uniforms[u].location=this.gl.getUniformLocation(this.program,u),this.updateUniform(u)},GL.Program.prototype.refreshAttributes=function(){this.attribs={}},GL.Program.prototype.attribute=function(name){var attrib=this.attribs[name]=this.attribs[name]||{};return null!=attrib.location?attrib:(attrib.name=name,attrib.location=this.gl.getAttribLocation(this.program,name),attrib)},GL.tesselator=function(){function vertexCallback(data,polyVertArray){polyVertArray[polyVertArray.length]=[data[0],data[1]]}function begincallback(type){type!==libtess.primitiveType.GL_TRIANGLES&&console.log("GL.tesselator: expected TRIANGLES but got type: "+type)}function errorcallback(errno){console.log("GL.tesselator: error callback"),console.log("GL.tesselator: error number: "+errno)}function combinecallback(coords){return[coords[0],coords[1],coords[2]]}function edgeCallback(){}var tesselator=new libtess.GluTesselator;return tesselator.gluTessCallback(libtess.gluEnum.GLU_TESS_VERTEX_DATA,vertexCallback),tesselator.gluTessCallback(libtess.gluEnum.GLU_TESS_BEGIN,begincallback),tesselator.gluTessCallback(libtess.gluEnum.GLU_TESS_ERROR,errorcallback),tesselator.gluTessCallback(libtess.gluEnum.GLU_TESS_COMBINE,combinecallback),tesselator.gluTessCallback(libtess.gluEnum.GLU_TESS_EDGE_FLAG,edgeCallback),tesselator}(),GL.triangulate=function(contours){GL.tesselator.gluTessNormal(0,0,1);var triangleVerts=[];GL.tesselator.gluTessBeginPolygon(triangleVerts);for(var i=0;i<contours.length;i++){GL.tesselator.gluTessBeginContour();for(var contour=contours[i],j=0;j<contour.length;j++){var coords=[contour[j][0],contour[j][1],0];GL.tesselator.gluTessVertex(coords,coords)}GL.tesselator.gluTessEndContour()}return GL.tesselator.gluTessEndPolygon(),triangleVerts},GL.addVertices=function(vertices,vertex_data,vertex_constants){if(null!=vertices&&vertices.length>0)if("object"==typeof vertices[0])for(var v=0;v<vertices.length;v++)vertex_data.push.apply(vertex_data,vertices[v]),vertex_constants&&vertex_data.push.apply(vertex_data,vertex_constants);else vertex_data.push.apply(vertex_data,vertices),vertex_constants&&vertex_data.push.apply(vertex_data,vertex_constants);return vertex_data},GL.VertexArrayObject={},GL.VertexArrayObject.disabled=!1,GL.VertexArrayObject.bound_vao=null,GL.VertexArrayObject.init=function(gl){null==GL.VertexArrayObject.ext&&(1!=GL.VertexArrayObject.disabled&&(GL.VertexArrayObject.ext=gl.getExtension("OES_vertex_array_object")),console.log(null!=GL.VertexArrayObject.ext?"Vertex Array Object extension available":1!=GL.VertexArrayObject.disabled?"Vertex Array Object extension NOT available":"Vertex Array Object extension force disabled"))},GL.VertexArrayObject.create=function(setup,teardown){var vao={};vao.setup=setup,vao.teardown=teardown;var ext=GL.VertexArrayObject.ext;return null!=ext?(vao._vao=ext.createVertexArrayOES(),ext.bindVertexArrayOES(vao._vao),vao.setup(),ext.bindVertexArrayOES(null),"function"==typeof vao.teardown&&vao.teardown()):vao.setup(),vao},GL.VertexArrayObject.bind=function(vao){var ext=GL.VertexArrayObject.ext;null!=vao?null!=ext&&null!=vao._vao?(ext.bindVertexArrayOES(vao._vao),GL.VertexArrayObject.bound_vao=vao):vao.setup():(null!=ext?ext.bindVertexArrayOES(null):null!=GL.VertexArrayObject.bound_vao&&"function"==typeof GL.VertexArrayObject.bound_vao.teardown&&GL.VertexArrayObject.bound_vao.teardown(),GL.VertexArrayObject.bound_vao=null)},GLGeometry.prototype.setup=function(){for(var a=0;a<this.attribs.length;a++){var attrib=this.attribs[a];this.gl.enableVertexAttribArray(attrib.location),this.gl.vertexAttribPointer(attrib.location,attrib.size,attrib.type,attrib.normalized,this.vertex_stride,attrib.offset)}},GLGeometry.prototype.render=function(){this.gl.useProgram(this.gl_program.program),GL.VertexArrayObject.bind(this.vao),"function"==typeof this._render&&this._render(),this.gl.drawArrays(this.draw_mode,0,this.vertex_count),GL.VertexArrayObject.bind(null)},GLGeometry.prototype.destroy=function(){console.log("GLGeometry.destroy: delete buffer of size "+this.vertex_data.byteLength),this.gl.deleteBuffer(this.buffer),delete this.vertex_data},GLTriangles.prototype=Object.create(GLGeometry.prototype),GLPolyPoints.prototype=Object.create(GLGeometry.prototype),GLLines.prototype=Object.create(GLTriangles.prototype),GLLines.prototype._render=function(){this.gl.lineWidth(this.line_width),"function"==typeof GLTriangles.prototype._render&&GLTriangles.prototype._render.call(this)};var Vector={};Vector.lengthSq=function(v){return 2==v.length?v[0]*v[0]+v[1]*v[1]:v[0]*v[0]+v[1]*v[1]+v[2]*v[2]},Vector.length=function(v){return Math.sqrt(Vector.lengthSq(v))},Vector.normalize=function(v){var d;if(2==v.length)return d=v[0]*v[0]+v[1]*v[1],d=Math.sqrt(d),0!=d?[v[0]/d,v[1]/d]:[0,0];var d=v[0]*v[0]+v[1]*v[1]+v[2]*v[2];return d=Math.sqrt(d),0!=d?[v[0]/d,v[1]/d,v[2]/d]:[0,0,0]},Vector.cross=function(v1,v2){return[v1[1]*v2[2]-v1[2]*v2[1],v1[2]*v2[0]-v1[0]*v2[2],v1[0]*v2[1]-v1[1]*v2[0]]},Vector.lineIntersection=function(p1,p2,p3,p4,parallel_tolerance){var parallel_tolerance=parallel_tolerance||.01,a1=p1[1]-p2[1],b1=p1[0]-p2[0],a2=p3[1]-p4[1],b2=p3[0]-p4[0],c1=p1[0]*p2[1]-p1[1]*p2[0],c2=p3[0]*p4[1]-p3[1]*p4[0],denom=b1*a2-a1*b2;return Math.abs(denom)>parallel_tolerance?[(c1*b2-b1*c2)/denom,(c1*a2-a1*c2)/denom]:null},TileSource.create=function(type,url_template,options){return new TileSource[type](url_template,options)},TileSource.projectTile=function(tile){var timer=+new Date;for(var t in tile.layers)for(var num_features=tile.layers[t].features.length,f=0;num_features>f;f++){var feature=tile.layers[t].features[f];feature.geometry.coordinates=Geo.transformGeometry(feature.geometry,function(coordinates){var m=Geo.latLngToMeters(Point(coordinates[0],coordinates[1]));return[m.x,m.y]})}return tile.debug.projection=+new Date-timer,tile},TileSource.scaleTile=function(tile){for(var t in tile.layers)for(var num_features=tile.layers[t].features.length,f=0;num_features>f;f++){var feature=tile.layers[t].features[f];feature.geometry.coordinates=Geo.transformGeometry(feature.geometry,function(coordinates){return coordinates[0]=(coordinates[0]-tile.min.x)*VectorRenderer.units_per_meter[tile.coords.z],coordinates[1]=(coordinates[1]-tile.min.y)*VectorRenderer.units_per_meter[tile.coords.z],coordinates})}return tile},NetworkTileSource.prototype=Object.create(TileSource.prototype),NetworkTileSource.prototype.loadTile=function(tile,renderer,callback){var tile_source=this,req=new XMLHttpRequest,url=this.url_template.replace("{x}",tile.coords.x).replace("{y}",tile.coords.y).replace("{z}",tile.coords.z);null!=this.url_hosts&&(url=url.replace(/{s:\[([^}+]+)\]}/,this.url_hosts[this.next_host]),this.next_host=(this.next_host+1)%this.url_hosts.length),tile.url=url,tile.xhr=req,tile.debug.network=+new Date,req.onload=function(){0!=tile.loading&&(tile.debug.response_size=tile.xhr.response.length||tile.xhr.response.byteLength,tile.debug.network=+new Date-tile.debug.network,tile_source._loadTile&&(tile.debug.parsing=+new Date,tile_source._loadTile(tile,renderer),tile.debug.parsing=+new Date-tile.debug.parsing),tile.xhr=null,tile.loading=!1,tile.loaded=!0,callback&&callback(tile))},req.responseType=this.response_type,req.open("GET",url,!0),req.send()},TileSource.GeoJSONTileSource=GeoJSONTileSource,GeoJSONTileSource.prototype=Object.create(NetworkTileSource.prototype),GeoJSONTileSource.prototype._loadTile=function(tile){tile.layers=JSON.parse(tile.xhr.response),TileSource.projectTile(tile),TileSource.scaleTile(tile)},TileSource.MapboxTileSource=MapboxTileSource,MapboxTileSource.prototype=Object.create(NetworkTileSource.prototype),MapboxTileSource.prototype._loadTile=function(tile){tile.data=new this.VectorTile(new Uint8Array(tile.xhr.response)),tile.layers=tile.data.toGeoJSON(),delete tile.data;for(var t in tile.layers)for(var num_features=tile.layers[t].features.length,f=0;num_features>f;f++){var feature=tile.layers[t].features[f];feature.properties.id=feature.properties.osm_id,feature.geometry.coordinates=Geo.transformGeometry(feature.geometry,function(coordinates){return coordinates[1]=-coordinates[1],coordinates})}},function(){try{VectorRenderer.library_base_url="";for(var scripts=document.querySelectorAll('script[src*=".js"]'),s=0;s<scripts.length;s++){var base_match=scripts[s].src.match(/(.*)vector-map.(debug|min).js/);if(null!=base_match&&base_match.length>1){VectorRenderer.library_base_url=base_match[1];break}}}catch(e){}}(),VectorRenderer.tile_scale=4096,VectorRenderer.units_per_meter=[],VectorRenderer.units_per_pixel=[],function(){for(var z=0;z<=Geo.max_zoom;z++)VectorRenderer.units_per_meter[z]=VectorRenderer.tile_scale/(Geo.tile_size*Geo.meters_per_pixel[z]),VectorRenderer.units_per_pixel[z]=VectorRenderer.tile_scale/Geo.tile_size}(),VectorRenderer.create=function(type,tile_source,layers,styles,options){return new VectorRenderer[type](tile_source,layers,styles,options)},VectorRenderer.prototype.init=function(){"function"==typeof this._init&&this._init.apply(this,arguments);var renderer=this;this.workers.forEach(function(worker){worker.addEventListener("message",renderer.tileWorkerCompleted.bind(renderer))}),this.initialized=!0},VectorRenderer.prototype.setCenter=function(lng,lat){this.center={lng:lng,lat:lat},this.dirty=!0},VectorRenderer.prototype.setZoom=function(zoom){this.map_last_zoom=this.zoom,this.zoom=zoom,this.map_zooming=!1,this.dirty=!0},VectorRenderer.prototype.startZoom=function(){this.map_last_zoom=this.zoom,this.map_zooming=!0},VectorRenderer.prototype.setBounds=function(sw,ne){this.bounds={sw:{lng:sw.lng,lat:sw.lat},ne:{lng:ne.lng,lat:ne.lat}};var buffer=200*Geo.meters_per_pixel[~~this.zoom];this.buffered_meter_bounds={sw:Geo.latLngToMeters(Point(this.bounds.sw.lng,this.bounds.sw.lat)),ne:Geo.latLngToMeters(Point(this.bounds.ne.lng,this.bounds.ne.lat))},this.buffered_meter_bounds.sw.x-=buffer,this.buffered_meter_bounds.sw.y-=buffer,this.buffered_meter_bounds.ne.x+=buffer,this.buffered_meter_bounds.ne.y+=buffer;for(var t in this.tiles)this.updateVisibilityForTile(this.tiles[t]);this.dirty=!0},VectorRenderer.prototype.updateVisibilityForTile=function(tile){return tile.visible=Geo.boxIntersect(tile.bounds,this.buffered_meter_bounds),tile.visible},VectorRenderer.prototype.resizeMap=function(){this.dirty=!0},VectorRenderer.prototype.requestRedraw=function(){this.dirty=!0},VectorRenderer.prototype.render=function(){return 0==this.dirty||0==this.initialized?!1:(this.dirty=!1,"function"==typeof this._render&&this._render.apply(this,arguments),!0)},VectorRenderer.prototype.loadTile=function(coords,div,callback){if(coords.z>this.tile_source.max_zoom){var zgap=coords.z-this.tile_source.max_zoom;coords.x=~~(coords.x/Math.pow(2,zgap)),coords.y=~~(coords.y/Math.pow(2,zgap)),coords.display_z=coords.z,coords.z-=zgap}null==this.tile_set_loading&&(this.tile_set_loading=+new Date,console.log("tile set load START"));var key=[coords.x,coords.y,coords.z].join("/");if(this.tiles[key])return void(callback&&callback(null,div));var tile=this.tiles[key]={};tile.key=key,tile.coords=coords,tile.min=Geo.metersForTile(tile.coords),tile.max=Geo.metersForTile({x:tile.coords.x+1,y:tile.coords.y+1,z:tile.coords.z}),tile.bounds={sw:{x:tile.min.x,y:tile.max.y},ne:{x:tile.max.x,y:tile.min.y}},tile.debug={},tile.loading=!0,tile.loaded=!1,this.updateVisibilityForTile(tile),this.workers[this.next_worker].postMessage({type:"loadTile",tile:tile,renderer_type:this.type,tile_source:this.tile_source,layer_source:this.layer_source,style_source:this.style_source}),tile.worker=this.workers[this.next_worker],this.next_worker=(this.next_worker+1)%this.workers.length,div.setAttribute("data-tile-key",tile.key),div.style.width="256px",div.style.height="256px",callback&&callback(null,div)},VectorRenderer.prototype.tileWorkerCompleted=function(event){if("loadTileCompleted"==event.data.type){var tile=event.data.tile;if(null==this.tiles[tile.key])return void console.log("discarded tile "+tile.key+" in VectorRenderer.tileWorkerCompleted because previously removed");if(this.tiles[tile.key]=tile,"function"==typeof this._tileWorkerCompleted&&this._tileWorkerCompleted(tile),delete tile.layers,null!=this.tile_set_loading){var end_tile_set=!0;for(var t in this.tiles)if(1==this.tiles[t].loading){end_tile_set=!1;break}1==end_tile_set&&(this.last_tile_set_load=+new Date-this.tile_set_loading,this.tile_set_loading=null,console.log("tile set load FINISHED in: "+this.last_tile_set_load))}this.dirty=!0,this.printDebugForTile(tile)}},VectorRenderer.prototype.removeTile=function(key){console.log("tile unload for "+key);var tile=this.tiles[key];null!=tile&&1==tile.loading&&(console.log("cancel tile load for "+key),null!=tile.worker&&tile.worker.postMessage({type:"removeTile",key:tile.key})),delete this.tiles[key],this.dirty=!0},VectorRenderer.prototype.printDebugForTile=function(tile){console.log("debug for "+tile.key+": [ "+Object.keys(tile.debug).map(function(t){return t+": "+tile.debug[t]}).join(", ")+" ]")},VectorRenderer.urlForPath=function(path){var protocol=path.toLowerCase().substr(0,4);return("http"!=protocol||"file"!=protocol)&&(path=window.location.origin+window.location.pathname+path),path},VectorRenderer.loadLayers=function(url){var layers,req=new XMLHttpRequest;return req.onload=function(){eval("layers = "+req.response)},req.open("GET",url,!1),req.send(),layers},VectorRenderer.loadStyles=function(url){var styles,req=new XMLHttpRequest;return req.onload=function(){eval("styles = "+req.response)},req.open("GET",url,!1),req.send(),styles},VectorRenderer.processLayersForTile=function(layers,tile){for(var tile_layers={},t=0;t<layers.length;t++)layers[t].number=t,null!=layers[t]&&(null==layers[t].data?tile_layers[layers[t].name]=tile.layers[layers[t].name]:"string"==typeof layers[t].data?tile_layers[layers[t].name]=tile.layers[layers[t].data]:"function"==typeof layers[t].data&&(tile_layers[layers[t].name]=layers[t].data(tile.layers))),tile_layers[layers[t].name]=tile_layers[layers[t].name]||{type:"FeatureCollection",features:[]};return tile.layers=tile_layers,tile_layers};var Style={};Style.color={pseudoRandomGrayscale:function(f){var c=Math.max(parseInt(f.id,16)%100/100,.4);return[.7*c,.7*c,.7*c]},pseudoRandomColor:function(f){return[.7*(parseInt(f.id,16)/100%1),.7*(parseInt(f.id,16)/1e4%1),.7*(parseInt(f.id,16)/1e6%1)]},randomColor:function(){return[.7*Math.random(),.7*Math.random(),.7*Math.random()]}},Style.width={pixels:function(p){return function(f,t){return("function"==typeof p?p(f,t):p)*VectorRenderer.units_per_pixel[t.coords.z]}},meters:function(p){return function(f,t){return("function"==typeof p?p(f,t):p)*VectorRenderer.units_per_meter[t.coords.z]}}},VectorRenderer.style_defaults={color:[1,0,0],width:Style.width.pixels(5),size:Style.width.pixels(5),extrude:!1,height:20,min_height:0,outline:{},render_mode:"polygons"},VectorRenderer.parseStyleForFeature=function(feature,layer_style,tile){var layer_style=layer_style||{},style={};return style.color=layer_style.color&&(layer_style.color[feature.properties.kind]||layer_style.color.default)||VectorRenderer.style_defaults.color,"function"==typeof style.color&&(style.color=style.color(feature,tile)),style.width=layer_style.width&&(layer_style.width[feature.properties.kind]||layer_style.width.default)||VectorRenderer.style_defaults.width,"function"==typeof style.width&&(style.width=style.width(feature,tile)),style.size=layer_style.size&&(layer_style.size[feature.properties.kind]||layer_style.size.default)||VectorRenderer.style_defaults.size,"function"==typeof style.size&&(style.size=style.size(feature,tile)),style.extrude=layer_style.extrude&&(layer_style.extrude[feature.properties.kind]||layer_style.extrude.default)||VectorRenderer.style_defaults.extrude,"function"==typeof style.extrude&&(style.extrude=style.extrude(feature,tile)),style.height=feature.properties&&feature.properties.height||VectorRenderer.style_defaults.height,style.min_height=feature.properties&&feature.properties.min_height||VectorRenderer.style_defaults.min_height,style.extrude&&("number"==typeof style.extrude?style.height=style.extrude:"object"==typeof style.extrude&&style.extrude.length>=2&&(style.min_height=style.extrude[0],style.height=style.extrude[1])),style.outline={},layer_style.outline=layer_style.outline||{},style.outline.color=layer_style.outline.color&&(layer_style.outline.color[feature.properties.kind]||layer_style.outline.color.default)||VectorRenderer.style_defaults.outline.color,"function"==typeof style.outline.color&&(style.outline.color=style.outline.color(feature,tile)),style.outline.width=layer_style.outline.width&&(layer_style.outline.width[feature.properties.kind]||layer_style.outline.width.default)||VectorRenderer.style_defaults.outline.width,"function"==typeof style.outline.width&&(style.outline.width=style.outline.width(feature,tile)),style.outline.dash=layer_style.outline.dash&&(layer_style.outline.dash[feature.properties.kind]||layer_style.outline.dash.default)||VectorRenderer.style_defaults.outline.dash,"function"==typeof style.outline.dash&&(style.outline.dash=style.outline.dash(feature,tile)),style.render_mode=layer_style.render_mode||VectorRenderer.style_defaults.render_mode,style},VectorRenderer.CanvasRenderer=CanvasRenderer,CanvasRenderer.prototype=Object.create(VectorRenderer.prototype),CanvasRenderer.prototype._tileWorkerCompleted=function(tile){var canvas=document.createElement("canvas"),context=canvas.getContext("2d");canvas.style.width=Geo.tile_size+"px",canvas.style.width=Geo.tile_size+"px",canvas.width=Math.round(Geo.tile_size*this.device_pixel_ratio),canvas.height=Math.round(Geo.tile_size*this.device_pixel_ratio),canvas.style.background=this.colorToString(this.styles.default),this.renderTile(tile,context);var tileDiv=document.querySelector("div[data-tile-key='"+tile.key+"']");tileDiv.appendChild(canvas)},CanvasRenderer.prototype.scaleGeometryToPixels=function(geometry){var renderer=this;return Geo.transformGeometry(geometry,function(coordinates){return Point(coordinates[0]*Geo.tile_size*renderer.device_pixel_ratio/VectorRenderer.tile_scale,coordinates[1]*Geo.tile_size*renderer.device_pixel_ratio/VectorRenderer.tile_scale*-1)})},CanvasRenderer.prototype.renderLine=function(line,style,context){var segments=line,color=style.color,width=style.width,dash=style.dash,c=context;c.beginPath(),c.strokeStyle=this.colorToString(color),c.lineCap="round",c.lineWidth=width,c.setLineDash&&c.setLineDash(dash?dash.map(function(d){return d*width}):[]);for(var r=0;r<segments.length-1;r++){var segment=[segments[r].x,segments[r].y,segments[r+1].x,segments[r+1].y];c.moveTo(segment[0],segment[1]),c.lineTo(segment[2],segment[3])}c.closePath(),c.stroke()},CanvasRenderer.prototype.renderPolygon=function(polygon,style,context){var segments=polygon,color=style.color,outline_color=(style.width,style.outline&&style.outline.color),outline_width=style.outline&&style.outline.width,outline_dash=style.outline&&style.outline.dash,c=context;c.beginPath(),c.fillStyle=this.colorToString(color),c.moveTo(segments[0].x,segments[0].y);for(var r=1;r<segments.length;r++)c.lineTo(segments[r].x,segments[r].y);c.closePath(),c.fill(),outline_color&&outline_width&&(c.strokeStyle=this.colorToString(outline_color),c.lineCap="round",c.lineWidth=outline_width,c.setLineDash&&c.setLineDash(outline_dash?outline_dash.map(function(d){return d*outline_width}):[]),c.stroke())},CanvasRenderer.prototype.renderPoint=function(point,style,context){var color=style.color,size=style.size,outline_color=style.outline&&style.outline.color,outline_width=style.outline&&style.outline.width,outline_dash=style.outline&&style.outline.dash,c=context;c.fillStyle=this.colorToString(color),c.beginPath(),c.arc(point.x,point.y,size,0,2*Math.PI),c.closePath(),c.fill(),outline_color&&outline_width&&(c.strokeStyle=this.colorToString(outline_color),c.lineWidth=outline_width,c.setLineDash&&c.setLineDash(outline_dash?outline_dash.map(function(d){return d*outline_width}):[]),c.stroke())},CanvasRenderer.prototype.renderFeature=function(feature,style,context){var g,h,polys,geometry=feature.geometry;if("LineString"==geometry.type)this.renderLine(geometry.pixels,style,context);else if("MultiLineString"==geometry.type)for(g=0;g<geometry.pixels.length;g++)this.renderLine(geometry.pixels[g],style,context);else if("Polygon"==geometry.type||"MultiPolygon"==geometry.type)for(polys="Polygon"==geometry.type?[geometry.pixels]:geometry.pixels,g=0;g<polys.length;g++)if(polys[g].length>1){for((this.cutout_context.canvas.width!=context.canvas.width||this.cutout_context.canvas.height!=context.canvas.height)&&(this.cutout_context.canvas.width=context.canvas.width,this.cutout_context.canvas.height=context.canvas.height),this.cutout_context.clearRect(0,0,this.cutout_context.canvas.width,this.cutout_context.canvas.height),this.cutout_context.globalCompositeOperation="source-over",this.renderPolygon(polys[g][0],style,this.cutout_context),this.cutout_context.globalCompositeOperation="destination-out",h=1;h<polys[g].length;h++)this.renderPolygon(polys[g][h],style,this.cutout_context);if(context.drawImage(this.cutout_context.canvas,0,0),style.outline&&style.outline.color)for(h=1;h<polys[g].length;h++)this.renderLine(polys[g][h],style.outline,context)}else this.renderPolygon(polys[g][0],style,context);else if("Point"==geometry.type)this.renderPoint(geometry.pixels,style,context);else if("MultiPoint"==geometry.type)for(g=0;g<geometry.pixels.length;g++)this.renderPoint(geometry.pixels[g],style,context)},CanvasRenderer.prototype.renderTile=function(tile,context){var style,renderer=this,selection={colors:{}},selection_canvas=document.createElement("canvas");selection_canvas.style.width=Geo.tile_size+"px",selection_canvas.style.width=Geo.tile_size+"px",selection_canvas.width=Math.round(Geo.tile_size*this.device_pixel_ratio),selection_canvas.height=Math.round(Geo.tile_size*this.device_pixel_ratio);var selection_color,selection_context=selection_canvas.getContext("2d"),selection_count=0;for(var t in renderer.layers){var layer=renderer.layers[t];tile.layers[layer.name].features.forEach(function(feature){feature.geometry.pixels=this.scaleGeometryToPixels(feature.geometry,renderer.tile_min,renderer.tile_max),style=VectorRenderer.parseStyleForFeature(feature,this.styles[layer.name],tile),0!=layer.visible&&this.renderFeature(feature,style,context),1==layer.selection&&null!=feature.properties.name&&""!=feature.properties.name?(selection_color=this.generateColor(selection.colors),selection_color.properties=feature.properties,selection_count++,this.renderFeature(feature,{color:selection_color.color,width:style.width,size:style.size},selection_context)):this.renderFeature(feature,{color:[0,0,0],width:style.width,size:style.size},selection_context)},this)}var selection_info=this.selection_info;selection_count>0?(this.tiles[tile.key].selection=selection,selection.pixels=new Uint32Array(selection_context.getImageData(0,0,selection_canvas.width,selection_canvas.height).data.buffer),context.canvas.onmousemove=function(event){var hit={x:event.offsetX,y:event.offsetY},off=hit.y*renderer.device_pixel_ratio*Geo.tile_size*renderer.device_pixel_ratio+hit.x*renderer.device_pixel_ratio,color=selection.pixels[off],feature=selection.colors[color];null!=feature?(context.canvas.style.cursor="crosshair",selection_info.style.left=hit.x+5+"px",selection_info.style.top=hit.y+5+"px",selection_info.innerHTML='<span class="labelInner">'+feature.properties.name+"</span>",selection_info.style.display="block",context.canvas.parentNode.appendChild(selection_info)):(context.canvas.style.cursor=null,selection_info.style.display="none",selection_info.parentNode==context.canvas.parentNode&&context.canvas.parentNode.removeChild(selection_info))}):context.canvas.onmousemove=function(){context.canvas.style.cursor=null,selection_info.style.display="none",selection_info.parentNode==context.canvas.parentNode&&context.canvas.parentNode.removeChild(selection_info)}},CanvasRenderer.prototype.colorToString=function(color){return"rgb("+color.map(function(c){return~~(256*c)}).join(",")+")"},CanvasRenderer.prototype.generateColor=function(color_map){var r,g,b,ir,ig,ib,key;for(color_map=color_map||{};;)if(r=Math.random(),g=Math.random(),b=Math.random(),ir=~~(256*r),ig=~~(256*g),ib=~~(256*b),key=ir+(ig<<8)+(ib<<16)+(255<<24)>>>0,void 0===color_map[key]){color_map[key]={color:[r,g,b]};break}return color_map[key]},VectorRenderer.GLRenderer=GLRenderer,GLRenderer.prototype=Object.create(VectorRenderer.prototype),GLRenderer.debug=!1,GLRenderer.prototype._init=function(){this.container=this.container||document.body,this.canvas=document.createElement("canvas"),this.canvas.style.position="absolute",this.canvas.style.top=0,this.canvas.style.left=0,this.canvas.style.zIndex=-1,this.container.appendChild(this.canvas),this.gl=GL.getContext(this.canvas);var renderer=this;this.render_modes={polygons:{gl_program:new GL.Program(this.gl,GLRenderer.vertex_shader_source,GLRenderer.fragment_shader_source),makeGLGeometry:function(vertex_data){return new GLTriangles(renderer.gl,this.gl_program,vertex_data)}},polygons_noise:{gl_program:new GL.Program(this.gl,GLRenderer.vertex_shader_source,GLRenderer.fragment_shader_source,{defines:{EFFECT_NOISE_TEXTURE:!0}}),makeGLGeometry:function(vertex_data){return new GLTriangles(renderer.gl,this.gl_program,vertex_data)}},points:{gl_program:new GL.Program.createProgramFromURLs(this.gl,VectorRenderer.library_base_url+"../shaders/point_vertex.glsl",VectorRenderer.library_base_url+"../shaders/point_fragment.glsl",{defines:{EFFECT_SCREEN_COLOR:!0}}),makeGLGeometry:function(vertex_data){return new GLPolyPoints(renderer.gl,this.gl_program,vertex_data)}}},this.resizeMap(this.container.clientWidth,this.container.clientHeight),this.start_time=+new Date,this.last_render_count=null,this.initInputHandlers()},GLRenderer.calculateZ=function(){var z=0;return z},GLRenderer.addTile=function(tile,layers,styles){var layer,style,feature,z,mode,vertex_data={};tile.debug.features=0;for(var ln=0;ln<layers.length;ln++)if(layer=layers[ln],null!=styles[layer.name]&&null!=tile.layers[layer.name])for(var num_features=tile.layers[layer.name].features.length,f=num_features-1;f>=0;f--){feature=tile.layers[layer.name].features[f],style=VectorRenderer.parseStyleForFeature(feature,styles[layer.name],tile),z=GLRenderer.calculateZ(layer,tile),mode=style.render_mode,null==vertex_data[mode]&&(vertex_data[mode]=[]);var vertex_constants=[style.color[0],style.color[1],style.color[2],ln];if(style.outline.color)var outline_vertex_constants=[style.outline.color[0],style.outline.color[1],style.outline.color[2],ln-.5];var points=null,lines=null,polygons=null;if("Polygon"==feature.geometry.type?polygons=[feature.geometry.coordinates]:"MultiPolygon"==feature.geometry.type?polygons=feature.geometry.coordinates:"LineString"==feature.geometry.type?lines=[feature.geometry.coordinates]:"MultiLineString"==feature.geometry.type?lines=feature.geometry.coordinates:"Point"==feature.geometry.type?points=[feature.geometry.coordinates]:"MultiPoint"==feature.geometry.type&&(points=feature.geometry.coordinates),null!=polygons&&(style.extrude&&style.height?GLBuilders.buildExtrudedPolygons(polygons,z,style.height,style.min_height,vertex_data[mode],{vertex_constants:vertex_constants}):GLBuilders.buildPolygons(polygons,z,vertex_data[mode],{vertex_constants:vertex_constants}),style.outline.color&&style.outline.width))for(var mpc=0;mpc<polygons.length;mpc++)GLBuilders.buildPolylines(polygons[mpc],GLRenderer.calculateZ(layer,tile,-.5),style.outline.width,vertex_data[mode],{closed_polygon:!0,remove_tile_edges:!0,vertex_constants:outline_vertex_constants});if(null!=lines&&(GLBuilders.buildPolylines(lines,z,style.width,vertex_data[mode],{vertex_constants:vertex_constants}),style.outline.color&&style.outline.width&&GLBuilders.buildPolylines(lines,GLRenderer.calculateZ(layer,tile,-.5),style.width+2*style.outline.width,vertex_data[mode],{vertex_constants:outline_vertex_constants})),null!=points){var point_vertex_constants=[z+1,0,0,1].concat(vertex_constants);
GLBuilders.buildQuads(points,2*style.size,2*style.size,function(vertices){var vs=vertices.positions;if("points"==mode){point_vertex_constants=vertex_constants;for(var v in vertices.positions)vs[v]=vertices.positions[v].concat(z+1,vertices.texcoords[v])}GL.addVertices(vs,vertex_data[mode],point_vertex_constants)},{texcoords:"points"==mode})}tile.debug.features++}tile.vertex_data={};for(var s in vertex_data)tile.vertex_data[s]=new Float32Array(vertex_data[s]);return tile},GLRenderer.prototype._tileWorkerCompleted=function(tile){var vertex_data=tile.vertex_data;tile.gl_geometry={};for(var s in vertex_data)tile.gl_geometry[s]=this.render_modes[s].makeGLGeometry(vertex_data[s]);tile.debug.geometries=0,tile.debug.buffer_size=0;for(var p in tile.gl_geometry)tile.debug.geometries+=tile.gl_geometry[p].geometry_count,tile.debug.buffer_size+=tile.gl_geometry[p].vertex_data.byteLength;tile.debug.geom_ratio=(tile.debug.geometries/tile.debug.features).toFixed(1),delete tile.vertex_data},GLRenderer.prototype.removeTile=function(key){if(1!=this.map_zooming){var tile=this.tiles[key];if(null!=tile&&null!=tile.gl_geometry){for(var p in tile.gl_geometry)tile.gl_geometry[p].destroy();tile.gl_geometry=null}VectorRenderer.prototype.removeTile.apply(this,arguments)}},GLRenderer.prototype.preserve_tiles_within_zoom=2,GLRenderer.prototype.setZoom=function(zoom){console.log("renderer.map_last_zoom: "+this.map_last_zoom),this.map_zooming=!1,this.zoom=zoom;var below=this.zoom,above=this.zoom;Math.abs(this.zoom-this.map_last_zoom)<=this.preserve_tiles_within_zoom&&(this.zoom>this.map_last_zoom?below=this.zoom-this.preserve_tiles_within_zoom:above=this.zoom+this.preserve_tiles_within_zoom),this.removeTilesOutsideZoomRange(below,above),this.map_last_zoom=this.zoom,this.dirty=!0},GLRenderer.prototype.removeTilesOutsideZoomRange=function(below,above){below=Math.min(below,this.tile_source.max_zoom||below),above=Math.min(above,this.tile_source.max_zoom||above),console.log("removeTilesOutsideZoomRange ["+below+", "+above+"])");var remove_tiles=[];for(var t in this.tiles){var tile=this.tiles[t];(tile.coords.z<below||tile.coords.z>above)&&remove_tiles.push(t)}for(var r=0;r<remove_tiles.length;r++){var key=remove_tiles[r];console.log("removed "+key+" (outside range ["+below+", "+above+"])"),this.removeTile(key)}},GLRenderer.prototype.resizeMap=function(width,height){VectorRenderer.prototype.resizeMap.apply(this,arguments),this.css_size={width:width,height:height},this.device_size={width:Math.round(this.css_size.width*this.device_pixel_ratio),height:Math.round(this.css_size.height*this.device_pixel_ratio)},this.canvas.style.width=this.css_size.width+"px",this.canvas.style.height=this.css_size.height+"px",this.canvas.width=this.device_size.width,this.canvas.height=this.device_size.height,this.gl.viewport(0,0,this.canvas.width,this.canvas.height)},GLRenderer.prototype._render=function(){var gl=this.gl;this.input(),gl.clearColor(0,0,0,1),gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT),gl.enable(gl.DEPTH_TEST),gl.depthFunc(gl.LESS),gl.enable(gl.CULL_FACE),gl.cullFace(gl.BACK);var render_count=0;for(var mode in this.render_modes){var gl_program=this.render_modes[mode].gl_program;gl.useProgram(gl_program.program),gl_program.uniform("2f","resolution",this.css_size.width,this.css_size.height),gl_program.uniform("1f","time",(+new Date-this.start_time)/1e3);var center=Geo.latLngToMeters(Point(this.center.lng,this.center.lat));gl_program.uniform("2f","map_center",center.x,center.y),gl_program.uniform("1f","map_zoom",this.zoom),gl_program.uniform("1f","num_layers",this.layers.length);var meters_per_pixel=Geo.min_zoom_meters_per_pixel/Math.pow(2,this.zoom),meter_zoom=Point(this.css_size.width/2*meters_per_pixel,this.css_size.height/2*meters_per_pixel);gl_program.uniform("2f","meter_zoom",meter_zoom.x,meter_zoom.y);var capped_zoom=Math.min(~~this.zoom,this.tile_source.max_zoom||~~this.zoom);for(var t in this.tiles){var tile=this.tiles[t];1==tile.loaded&&1==tile.visible&&Math.min(tile.coords.z,this.tile_source.max_zoom||tile.coords.z)==capped_zoom&&null!=tile.gl_geometry[mode]&&(gl_program.uniform("2f","tile_min",tile.min.x,tile.min.y),gl_program.uniform("2f","tile_max",tile.max.x,tile.max.y),tile.gl_geometry[mode].render(),render_count+=tile.gl_geometry[mode].geometry_count)}}return render_count!=this.last_render_count&&console.log("rendered "+render_count+" primitives"),this.last_render_count=render_count,1==this.continuous_animation&&(this.dirty=!0),!0},GLRenderer.prototype.getDebugSum=function(prop,filter){var sum=0;for(var t in this.tiles)null==this.tiles[t].debug[prop]||"function"==typeof filter&&1!=filter(this.tiles[t])||(sum+=this.tiles[t].debug[prop]);return sum},GLRenderer.prototype.getDebugAverage=function(prop,filter){return this.getDebugSum(prop,filter)/Object.keys(this.tiles).length},GLRenderer.prototype.initInputHandlers=function(){var gl_renderer=this;gl_renderer.key=null,document.addEventListener("keydown",function(event){if(37==event.keyCode)gl_renderer.key="left";else if(39==event.keyCode)gl_renderer.key="right";else if(38==event.keyCode)gl_renderer.key="up";else if(40==event.keyCode)gl_renderer.key="down";else if(83==event.keyCode){console.log("reloading shaders");for(var mode in this.render_modes)this.render_modes[mode].gl_program.compile();gl_renderer.dirty=!0}}),document.addEventListener("keyup",function(){gl_renderer.key=null})},GLRenderer.prototype.input=function(){},GLBuilders={},GLBuilders.buildPolygons=function(polygons,z,vertex_data,options){options=options||{};var vertex_constants=[z,0,0,1];options.vertex_constants&&vertex_constants.push.apply(vertex_constants,options.vertex_constants);for(var num_polygons=polygons.length,p=0;num_polygons>p;p++){var vertices=GL.triangulate(polygons[p]);GL.addVertices(vertices,vertex_data,vertex_constants)}return vertex_data},GLBuilders.buildExtrudedPolygons=function(polygons,z,height,min_height,vertex_data,options){options=options||{};var min_z=z+(min_height||0),max_z=z+height;GLBuilders.buildPolygons(polygons,max_z,vertex_data,{vertex_constants:options.vertex_constants});var wall_vertex_constants=[null,null,null];options.vertex_constants&&wall_vertex_constants.push.apply(wall_vertex_constants,options.vertex_constants);for(var num_polygons=polygons.length,p=0;num_polygons>p;p++)for(var polygon=polygons[p],q=0;q<polygon.length;q++)for(var contour=polygon[q],w=0;w<contour.length-1;w++){var wall_vertices=[];wall_vertices.push([contour[w+1][0],contour[w+1][1],max_z],[contour[w+1][0],contour[w+1][1],min_z],[contour[w][0],contour[w][1],min_z],[contour[w][0],contour[w][1],min_z],[contour[w][0],contour[w][1],max_z],[contour[w+1][0],contour[w+1][1],max_z]);var normal=Vector.cross([0,0,1],Vector.normalize([contour[w+1][0]-contour[w][0],contour[w+1][1]-contour[w][1],0]));wall_vertex_constants[0]=normal[0],wall_vertex_constants[1]=normal[1],wall_vertex_constants[2]=normal[2],GL.addVertices(wall_vertices,vertex_data,wall_vertex_constants)}return vertex_data},GLBuilders.buildPolylines=function(lines,z,width,vertex_data,options){function buildSegment(pa,pb){var slope=Vector.normalize([-1*(pb[1]-pa[1]),pb[0]-pa[0]]),pa_outer=[pa[0]+slope[0]*width/2,pa[1]+slope[1]*width/2],pa_inner=[pa[0]-slope[0]*width/2,pa[1]-slope[1]*width/2],pb_outer=[pb[0]+slope[0]*width/2,pb[1]+slope[1]*width/2],pb_inner=[pb[0]-slope[0]*width/2,pb[1]-slope[1]*width/2];vertices.push(pb_inner,pb_outer,pa_inner,pa_inner,pb_outer,pa_outer)}function buildAnchor(pa,joint,pb){var pa_slope=Vector.normalize([-1*(joint[1]-pa[1]),joint[0]-pa[0]]),pa_outer=[[pa[0]+pa_slope[0]*width/2,pa[1]+pa_slope[1]*width/2],[joint[0]+pa_slope[0]*width/2,joint[1]+pa_slope[1]*width/2]],pa_inner=[[pa[0]-pa_slope[0]*width/2,pa[1]-pa_slope[1]*width/2],[joint[0]-pa_slope[0]*width/2,joint[1]-pa_slope[1]*width/2]],pb_slope=Vector.normalize([-1*(pb[1]-joint[1]),pb[0]-joint[0]]),pb_outer=[[joint[0]+pb_slope[0]*width/2,joint[1]+pb_slope[1]*width/2],[pb[0]+pb_slope[0]*width/2,pb[1]+pb_slope[1]*width/2]],pb_inner=[[joint[0]-pb_slope[0]*width/2,joint[1]-pb_slope[1]*width/2],[pb[0]-pb_slope[0]*width/2,pb[1]-pb_slope[1]*width/2]],intersection=Vector.lineIntersection(pa_outer[0],pa_outer[1],pb_outer[0],pb_outer[1]),line_debug=null;if(null!=intersection){var intersect_outer=intersection,len_sq=Vector.lengthSq([intersect_outer[0]-joint[0],intersect_outer[1]-joint[1]]),miter_len_max=3;len_sq>width*width*miter_len_max*miter_len_max&&(line_debug="distance",intersect_outer=Vector.normalize([intersect_outer[0]-joint[0],intersect_outer[1]-joint[1]]),intersect_outer=[joint[0]+intersect_outer[0]*miter_len_max,joint[1]+intersect_outer[1]*miter_len_max]);var intersect_inner=[joint[0]-intersect_outer[0]+joint[0],joint[1]-intersect_outer[1]+joint[1]];vertices.push(intersect_inner,intersect_outer,pa_inner[0],pa_inner[0],intersect_outer,pa_outer[0],pb_inner[1],pb_outer[1],intersect_inner,intersect_inner,pb_outer[1],intersect_outer)}else line_debug="parallel",pa_inner[1]=pb_inner[0],pa_outer[1]=pb_outer[0],vertices.push(pa_inner[1],pa_outer[1],pa_inner[0],pa_inner[0],pa_outer[1],pa_outer[0],pb_inner[1],pb_outer[1],pb_inner[0],pb_inner[0],pb_outer[1],pb_outer[0]);if(GLRenderer.debug&&options.vertex_lines&&options.vertex_lines.push(pa_inner[0][0],pa_inner[0][1],z+.001,0,0,1,0,1,0,pa_inner[1][0],pa_inner[1][1],z+.001,0,0,1,0,1,0,pb_inner[0][0],pb_inner[0][1],z+.001,0,0,1,0,1,0,pb_inner[1][0],pb_inner[1][1],z+.001,0,0,1,0,1,0,pa_outer[0][0],pa_outer[0][1],z+.001,0,0,1,0,1,0,pa_outer[1][0],pa_outer[1][1],z+.001,0,0,1,0,1,0,pb_outer[0][0],pb_outer[0][1],z+.001,0,0,1,0,1,0,pb_outer[1][0],pb_outer[1][1],z+.001,0,0,1,0,1,0,pa_inner[0][0],pa_inner[0][1],z+.001,0,0,1,0,1,0,pa_outer[0][0],pa_outer[0][1],z+.001,0,0,1,0,1,0,pa_inner[1][0],pa_inner[1][1],z+.001,0,0,1,0,1,0,pa_outer[1][0],pa_outer[1][1],z+.001,0,0,1,0,1,0,pb_inner[0][0],pb_inner[0][1],z+.001,0,0,1,0,1,0,pb_outer[0][0],pb_outer[0][1],z+.001,0,0,1,0,1,0,pb_inner[1][0],pb_inner[1][1],z+.001,0,0,1,0,1,0,pb_outer[1][0],pb_outer[1][1],z+.001,0,0,1,0,1,0),GLRenderer.debug&&line_debug&&options.vertex_lines){var dcolor;"parallel"==line_debug?dcolor=[0,1,0]:"distance"==line_debug&&(dcolor=[1,0,0]),options.vertex_lines.push(pa[0],pa[1],z+.002,0,0,1,dcolor[0],dcolor[1],dcolor[2],joint[0],joint[1],z+.002,0,0,1,dcolor[0],dcolor[1],dcolor[2],joint[0],joint[1],z+.002,0,0,1,dcolor[0],dcolor[1],dcolor[2],pb[0],pb[1],z+.002,0,0,1,dcolor[0],dcolor[1],dcolor[2]);for(var num_lines=lines.length,ln=0;num_lines>ln;ln++)for(var line2=lines[ln],p=0;p<line2.length-1;p++){var pa=line2[p],pb=line2[p+1];options.vertex_lines.push(pa[0],pa[1],z+5e-4,0,0,1,0,0,1,pb[0],pb[1],z+5e-4,0,0,1,0,0,1)}}}options=options||{},options.closed_polygon=options.closed_polygon||!1,options.remove_tile_edges=options.remove_tile_edges||!1;var vertex_constants=[z,0,0,1];if(options.vertex_constants&&vertex_constants.push.apply(vertex_constants,options.vertex_constants),GLRenderer.debug&&options.vertex_lines)for(var num_lines=lines.length,ln=0;num_lines>ln;ln++)for(var line=lines[ln],p=0;p<line.length-1;p++){var pa=line[p],pb=line[p+1];options.vertex_lines.push(pa[0],pa[1],z+.001,0,0,1,1,0,0,pb[0],pb[1],z+.001,0,0,1,1,0,0)}for(var vertices=[],num_lines=lines.length,ln=0;num_lines>ln;ln++){var line=lines[ln];if(line.length>2){var anchors=[];if(line.length>3){var p,pmax,mid=[];for(1==options.closed_polygon?(p=0,pmax=line.length-1):(p=1,pmax=line.length-2,mid.push(line[0]));pmax>p;p++){var pa=line[p],pb=line[p+1];mid.push([(pa[0]+pb[0])/2,(pa[1]+pb[1])/2])}var mmax;for(1==options.closed_polygon?mmax=mid.length:(mid.push(line[line.length-1]),mmax=mid.length-1),p=0;mmax>p;p++)anchors.push([mid[p],line[(p+1)%line.length],mid[(p+1)%mid.length]])}else anchors=[[line[0],line[1],line[2]]];for(var p=0;p<anchors.length;p++)if(options.remove_tile_edges){var edge1=GLBuilders.isOnTileEdge(anchors[p][0],anchors[p][1]),edge2=GLBuilders.isOnTileEdge(anchors[p][1],anchors[p][2]);edge1||edge2?edge1?edge2||buildSegment(anchors[p][1],anchors[p][2]):buildSegment(anchors[p][0],anchors[p][1]):buildAnchor(anchors[p][0],anchors[p][1],anchors[p][2])}else buildAnchor(anchors[p][0],anchors[p][1],anchors[p][2])}else 2==line.length&&buildSegment(line[0],line[1])}return GL.addVertices(vertices,vertex_data,vertex_constants),vertex_data},GLBuilders.buildQuads=function(points,width,height,addGeometry,options){for(var options=options||{},num_points=points.length,p=0;num_points>p;p++){var point=points[p],positions=[[point[0]-width/2,point[1]-height/2],[point[0]+width/2,point[1]-height/2],[point[0]+width/2,point[1]+height/2],[point[0]-width/2,point[1]-height/2],[point[0]+width/2,point[1]+height/2],[point[0]-width/2,point[1]+height/2]];if(1==options.texcoords)var texcoords=[[-1,-1],[1,-1],[1,1],[-1,-1],[1,1],[-1,1]];var vertices={positions:positions,texcoords:options.texcoords&&texcoords};addGeometry(vertices)}},GLBuilders.buildLines=function(lines,feature,layer,style,tile,z,vertex_data,options){options=options||{};for(var color=style.color,num_lines=(style.width,lines.length),ln=0;num_lines>ln;ln++)for(var line=lines[ln],p=0;p<line.length-1;p++){var pa=line[p],pb=line[p+1];vertex_data.push(pa[0],pa[1],z,0,0,1,color[0],color[1],color[2],pb[0],pb[1],z,0,0,1,color[0],color[1],color[2])}return vertex_data},GLBuilders.isOnTileEdge=function(pa,pb,options){options=options||{};var tolerance_function=options.tolerance_function||GLBuilders.valuesWithinTolerance,tolerance=options.tolerance||1,tile_min=GLBuilders.tile_bounds[0],tile_max=GLBuilders.tile_bounds[1],edge=null;return tolerance_function(pa[0],tile_min.x,tolerance)&&tolerance_function(pb[0],tile_min.x,tolerance)?edge="left":tolerance_function(pa[0],tile_max.x,tolerance)&&tolerance_function(pb[0],tile_max.x,tolerance)?edge="right":tolerance_function(pa[1],tile_min.y,tolerance)&&tolerance_function(pb[1],tile_min.y,tolerance)?edge="top":tolerance_function(pa[1],tile_max.y,tolerance)&&tolerance_function(pb[1],tile_max.y,tolerance)&&(edge="bottom"),edge},GLBuilders.setTileScale=function(scale){GLBuilders.tile_bounds=[Point(0,0),Point(scale,-scale)]},GLBuilders.valuesWithinTolerance=function(a,b,tolerance){return tolerance=tolerance||1,Math.abs(a-b)<tolerance},GLBuilders.buildZigzagLineTestPattern=function(){var min=Point(0,0),max=Point(4096,4096),g={id:123,geometry:{type:"LineString",coordinates:[[.75*min.x+.25*max.x,.75*min.y+.25*max.y],[.75*min.x+.25*max.x,.5*min.y+.5*max.y],[.25*min.x+.75*max.x,.75*min.y+.25*max.y],[.25*min.x+.75*max.x,.25*min.y+.75*max.y],[.4*min.x+.6*max.x,.5*min.y+.5*max.y],[.5*min.x+.5*max.x,.25*min.y+.75*max.y],[.75*min.x+.25*max.x,.25*min.y+.75*max.y],[.75*min.x+.25*max.x,.4*min.y+.6*max.y]]},properties:{kind:"debug"}};return g},L.VectorTileLayer=L.GridLayer.extend({options:{vectorRenderer:"canvas"},initialize:function(options){L.setOptions(this,options),this.options.vectorRenderer=this.options.vectorRenderer||"GLRenderer",this._renderer=VectorRenderer.create(this.options.vectorRenderer,this.options.vectorTileSource,this.options.vectorLayers,this.options.vectorStyles,{num_workers:this.options.numWorkers}),this._renderer.continuous_animation=!1},onAdd:function(){var layer=this;layer.on("tileunload",function(event){var tile=event.tile,key=tile.getAttribute("data-tile-key");layer._renderer.removeTile(key)}),layer._map.on("resize",function(){var size=layer._map.getSize();layer._renderer.resizeMap(size.x,size.y),layer.updateBounds()}),layer._map.on("move",function(){var center=layer._map.getCenter();layer._renderer.setCenter(center.lng,center.lat),layer.updateBounds()}),layer._map.on("zoomstart",function(){console.log("map.zoomstart "+layer._map.getZoom()),layer._renderer.startZoom()}),layer._map.on("zoomend",function(){console.log("map.zoomend "+layer._map.getZoom()),layer._renderer.setZoom(layer._map.getZoom())}),layer._renderer.container=layer._map.getContainer();var center=layer._map.getCenter();layer._renderer.setCenter(center.lng,center.lat),layer._renderer.setZoom(layer._map.getZoom()),layer.updateBounds(),L.GridLayer.prototype.onAdd.apply(this,arguments),layer._renderer.init()},onRemove:function(){L.GridLayer.prototype.onRemove.apply(this,arguments)},createTile:function(coords,done){var div=document.createElement("div");return this._renderer.loadTile(coords,div,done),div},updateBounds:function(){var layer=this,bounds=layer._map.getBounds();layer._renderer.setBounds(bounds.getSouthWest(),bounds.getNorthEast())},render:function(){this._renderer.render()}}),L.vectorTileLayer=function(options){return new L.VectorTileLayer(options)},GLRenderer.vertex_shader_source="// #define PROJECTION_PERSPECTIVE\n// #define PROJECTION_ISOMETRIC\n// #define PROJECTION_POPUP\n\n// #define LIGHTING_POINT\n// #define LIGHTING_DIRECTION\n\n// #define ANIMATION_ELEVATOR\n// #define ANIMATION_WAVE\n\nuniform vec2 resolution;\nuniform vec2 map_center;\nuniform float map_zoom;\nuniform vec2 meter_zoom;\nuniform vec2 tile_min;\nuniform vec2 tile_max;\nuniform float num_layers;\nuniform float time;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nattribute float layer;\n\nvarying vec3 fcolor;\n\n#if defined(EFFECT_NOISE_TEXTURE)\n    varying vec3 fposition;\n#endif\n\nvec3 light = normalize(vec3(0.2, 0.7, -0.5)); // vec3(0.1, 0.2, -0.4)\nconst float ambient = 0.45;\n\n// Project lat-lng to mercator\n// vec2 latLngToMeters (vec2 coordinate) {\n//     const float pi = 3.1415926;\n//     const float half_circumference_meters = 20037508.342789244;\n//     vec2 projected;\n\n//     // Latitude\n//     projected.y = log(tan((coordinate.y + 90.0) * pi / 360.0)) / (pi / 180.0);\n//     projected.y = projected.y * half_circumference_meters / 180.0;\n\n//     // Longitude\n//     projected.x = coordinate.x * half_circumference_meters / 180.0;\n\n//     return projected;\n// }\n\nvoid main() {\n    vec3 vposition = position;\n    vec3 vnormal = normal;\n\n    // Calc position of vertex in meters, relative to center of screen\n    vposition.y *= -1.0; // adjust for flipped y-coords\n    // vposition.y += TILE_SCALE; // alternate, to also adjust for force-positive y coords in tile\n    vposition.xy *= (tile_max - tile_min) / TILE_SCALE; // adjust for vertex location within tile (scaled from local coords to meters)\n\n    // Vertex displacement + procedural effects\n    #if defined(ANIMATION_ELEVATOR) || defined(ANIMATION_WAVE) || defined(EFFECT_NOISE_TEXTURE)\n        vec3 vposition_world = vposition + vec3(tile_min, 0.); // need vertex in world coords (before map center transform), hack to get around precision issues (see below)\n\n        #if defined(EFFECT_NOISE_TEXTURE)\n            fposition = vposition_world;\n        #endif\n\n        if (vposition_world.z > 1.0) {\n            // vposition.x += sin(vposition_world.z + time) * 10.0 * sin(position.x); // swaying buildings\n            // vposition.y += cos(vposition_world.z + time) * 10.0;\n\n            #if defined(ANIMATION_ELEVATOR)\n                // vposition.z *= (sin(vposition_world.z / 25.0 * time) + 1.0) / 2.0 + 0.1; // evelator buildings\n                vposition.z *= max((sin(vposition_world.z + time) + 1.0) / 2.0, 0.05); // evelator buildings\n            #elif defined(ANIMATION_WAVE)\n                vposition.z *= max((sin(vposition_world.x / 100.0 + time) + 1.0) / 2.0, 0.05); // wave\n            #endif\n        }\n    #endif\n\n    // NOTE: due to unresolved floating point precision issues, tile and map center adjustment need to happen in ONE operation, or artifcats are introduced\n    vposition.xy += tile_min.xy - map_center; // adjust for corner of tile relative to map center\n    vposition.xy /= meter_zoom; // adjust for zoom in meters to get clip space coords\n\n    // Shading\n    fcolor = color;\n    // fcolor += vec3(sin(position.z + time), 0.0, 0.0); // color change on height + time\n\n    #if defined(LIGHTING_POINT)\n        // Gouraud shading\n        light = vec3(-0.25, -0.25, 0.50); // vec3(0.1, 0.1, 0.35); // point light location\n        light = normalize(vec3(vposition.x, vposition.y, -vposition.z) - light); // light angle from light point to vertex\n        fcolor *= dot(vnormal, light * -1.0) + ambient + clamp(vposition.z * 2.0 / meter_zoom.x, 0.0, 0.25);\n    #elif defined(LIGHTING_DIRECTION)\n        // Flat shading\n        light = normalize(vec3(0.2, 0.7, -0.5));\n        // light = normalize(vec3(-1., 0.7, -.0));\n        // light = normalize(vec3(-1., 0.7, -.75));\n        // fcolor *= max(dot(vnormal, light * -1.0), 0.1) + ambient;\n        fcolor *= dot(vnormal, light * -1.0) + ambient;\n    #endif\n\n    #if defined(PROJECTION_PERSPECTIVE)\n        // Perspective-style projection\n        vec2 perspective_offset = vec2(-0.25, -0.25);\n        vec2 perspective_factor = vec2(0.8, 0.8); // vec2(-0.25, 0.75);\n        vposition.xy += vposition.z * perspective_factor * (vposition.xy - perspective_offset) / meter_zoom.xy; // perspective from offset center screen\n    #elif defined(PROJECTION_ISOMETRIC) || defined(PROJECTION_POPUP)\n        // Pop-up effect - 3d in center of viewport, fading to 2d at edges\n        #if defined(PROJECTION_POPUP)\n            if (vposition.z > 1.0) {\n                float cd = distance(vposition.xy * (resolution.xy / resolution.yy), vec2(0.0, 0.0));\n                const float popup_fade_inner = 0.5;\n                const float popup_fade_outer = 0.75;\n                if (cd > popup_fade_inner) {\n                    vposition.z *= 1.0 - smoothstep(popup_fade_inner, popup_fade_outer, cd);\n                }\n                const float zoom_boost_start = 15.0;\n                const float zoom_boost_end = 17.0;\n                const float zoom_boost_magnitude = 0.75;\n                vposition.z *= 1.0 + (1.0 - smoothstep(zoom_boost_start, zoom_boost_end, map_zoom)) * zoom_boost_magnitude;\n            }\n        #endif\n\n        // Isometric-style projection\n        vposition.y += vposition.z / meter_zoom.y; // z coordinate is a simple translation up along y axis, ala isometric\n        // vposition.y += vposition.z * 0.5; // closer to Ultima 7-style axonometric\n        // vposition.x -= vposition.z * 0.5;\n    #endif\n\n    // Rotation test\n    // float theta = 0;\n    // const float pi = 3.1415926;\n    // vec2 pr;\n    // pr.x = vposition.x * cos(theta * pi / 180.0) + vposition.y * -sin(theta * pi / 180.0);\n    // pr.y = vposition.x * sin(theta * pi / 180.0) + vposition.y * cos(theta * pi / 180.0);\n    // vposition.xy = pr;\n\n    // vposition.y *= max(abs(sin(vposition.x)), 0.1); // hourglass effect\n    // vposition.y *= abs(max(sin(vposition.x), 0.1)); // funnel effect\n\n    // Reverse and scale to 0-1 for GL depth buffer\n    // Layers are force-ordered (higher layers guaranteed to render on top of lower), then by height/depth\n    float z_layer_scale = 4096.;\n    float z_layer_range = (num_layers + 1.) * z_layer_scale;\n    float z_layer = (layer + 1.) * z_layer_scale;\n\n    vposition.z = z_layer + clamp(vposition.z, 1., z_layer_scale);\n    vposition.z = (z_layer_range - vposition.z) / z_layer_range;\n\n    gl_Position = vec4(vposition, 1.0);\n}\n",GLRenderer.fragment_shader_source="uniform vec2 resolution;\nuniform float time;\n\nvarying vec3 fcolor;\n\n#if defined(EFFECT_NOISE_TEXTURE)\n    varying vec3 fposition;\n\n    // http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n    // float rand (vec2 co) {\n    //    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    // }\n\n    // Noise functions from: https://github.com/ashima/webgl-noise\n    vec3 mod289(vec3 x) {\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 mod289(vec4 x) {\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 permute(vec4 x) {\n        return mod289(((x*34.0)+1.0)*x);\n    }\n\n    vec4 taylorInvSqrt(vec4 r) {\n        return 1.79284291400159 - 0.85373472095314 * r;\n    }\n\n    vec3 fade(vec3 t) {\n        return t*t*t*(t*(t*6.0-15.0)+10.0);\n    }\n\n    float snoise(vec3 v) {\n        const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n        const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n        // First corner\n        vec3 i  = floor(v + dot(v, C.yyy) );\n        vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n        // Other corners\n        vec3 g = step(x0.yzx, x0.xyz);\n        vec3 l = 1.0 - g;\n        vec3 i1 = min( g.xyz, l.zxy );\n        vec3 i2 = max( g.xyz, l.zxy );\n\n        //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n        //   x1 = x0 - i1  + 1.0 * C.xxx;\n        //   x2 = x0 - i2  + 2.0 * C.xxx;\n        //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n        vec3 x1 = x0 - i1 + C.xxx;\n        vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n        vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n        // Permutations\n        i = mod289(i);\n        vec4 p = permute( permute( permute(\n        i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n        + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n        + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n        // Gradients: 7x7 points over a square, mapped onto an octahedron.\n        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n        float n_ = 0.142857142857; // 1.0/7.0\n        vec3  ns = n_ * D.wyz - D.xzx;\n\n        vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n        vec4 x_ = floor(j * ns.z);\n        vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n        vec4 x = x_ *ns.x + ns.yyyy;\n        vec4 y = y_ *ns.x + ns.yyyy;\n        vec4 h = 1.0 - abs(x) - abs(y);\n\n        vec4 b0 = vec4( x.xy, y.xy );\n        vec4 b1 = vec4( x.zw, y.zw );\n\n        //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n        //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n        vec4 s0 = floor(b0)*2.0 + 1.0;\n        vec4 s1 = floor(b1)*2.0 + 1.0;\n        vec4 sh = -step(h, vec4(0.0));\n\n        vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n        vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n        vec3 p0 = vec3(a0.xy,h.x);\n        vec3 p1 = vec3(a0.zw,h.y);\n        vec3 p2 = vec3(a1.xy,h.z);\n        vec3 p3 = vec3(a1.zw,h.w);\n\n        //Normalise gradients\n        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n        p0 *= norm.x;\n        p1 *= norm.y;\n        p2 *= norm.z;\n        p3 *= norm.w;\n\n        // Mix final noise value\n        vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n        m = m * m;\n        return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n    }\n\n    // Classic Perlin noise\n    float cnoise(vec3 P) {\n        vec3 Pi0 = floor(P); // Integer part for indexing\n        vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n        Pi0 = mod289(Pi0);\n        Pi1 = mod289(Pi1);\n        vec3 Pf0 = fract(P); // Fractional part for interpolation\n        vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n        vec4 iy = vec4(Pi0.yy, Pi1.yy);\n        vec4 iz0 = Pi0.zzzz;\n        vec4 iz1 = Pi1.zzzz;\n\n        vec4 ixy = permute(permute(ix) + iy);\n        vec4 ixy0 = permute(ixy + iz0);\n        vec4 ixy1 = permute(ixy + iz1);\n\n        vec4 gx0 = ixy0 * (1.0 / 7.0);\n        vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n        gx0 = fract(gx0);\n        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n        vec4 sz0 = step(gz0, vec4(0.0));\n        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n        vec4 gx1 = ixy1 * (1.0 / 7.0);\n        vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n        gx1 = fract(gx1);\n        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n        vec4 sz1 = step(gz1, vec4(0.0));\n        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n        vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n        vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n        vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n        vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n        vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n        vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n        vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n        vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n        g000 *= norm0.x;\n        g010 *= norm0.y;\n        g100 *= norm0.z;\n        g110 *= norm0.w;\n        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n        g001 *= norm1.x;\n        g011 *= norm1.y;\n        g101 *= norm1.z;\n        g111 *= norm1.w;\n\n        float n000 = dot(g000, Pf0);\n        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n        float n111 = dot(g111, Pf1);\n\n        vec3 fade_xyz = fade(Pf0);\n        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n        return 2.2 * n_xyz;\n    }\n\n    // Classic Perlin noise, periodic variant\n    float pnoise(vec3 P, vec3 rep) {\n        vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n        vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n        Pi0 = mod289(Pi0);\n        Pi1 = mod289(Pi1);\n        vec3 Pf0 = fract(P); // Fractional part for interpolation\n        vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n        vec4 iy = vec4(Pi0.yy, Pi1.yy);\n        vec4 iz0 = Pi0.zzzz;\n        vec4 iz1 = Pi1.zzzz;\n\n        vec4 ixy = permute(permute(ix) + iy);\n        vec4 ixy0 = permute(ixy + iz0);\n        vec4 ixy1 = permute(ixy + iz1);\n\n        vec4 gx0 = ixy0 * (1.0 / 7.0);\n        vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n        gx0 = fract(gx0);\n        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n        vec4 sz0 = step(gz0, vec4(0.0));\n        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n        vec4 gx1 = ixy1 * (1.0 / 7.0);\n        vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n        gx1 = fract(gx1);\n        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n        vec4 sz1 = step(gz1, vec4(0.0));\n        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n        vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n        vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n        vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n        vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n        vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n        vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n        vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n        vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n        g000 *= norm0.x;\n        g010 *= norm0.y;\n        g100 *= norm0.z;\n        g110 *= norm0.w;\n        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n        g001 *= norm1.x;\n        g011 *= norm1.y;\n        g101 *= norm1.z;\n        g111 *= norm1.w;\n\n        float n000 = dot(g000, Pf0);\n        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n        float n111 = dot(g111, Pf1);\n\n        vec3 fade_xyz = fade(Pf0);\n        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n        return 2.2 * n_xyz;\n    }\n#endif\n\nvoid main (void) {\n    // vec2 position = gl_FragCoord.xy / resolution.xy;    // scale coords to [0.0, 1.0]\n    // position = position * 2.0 - 1.0;                    // scale coords to [-1.0, 1.0]\n    // position.y *= resolution.y / resolution.x;          // correct aspect ratio\n\n    vec3 color = fcolor;\n    // vec3 color = fcolor * max(1.0 - distance(position, vec2(0.0, 0.0)), 0.15);\n    // vec3 color = fcolor * (1.0 - dot(normalize(vec3(rand(gl_FragCoord.xy * 0.01) * 10.0, 0.0, -1.0)), vec3(0, 0, 1.0)));\n\n    // Mutate colors by screen position or time\n    // color += vec3(gl_FragCoord.x / resolution.x, 0.0, gl_FragCoord.y / resolution.y);\n    // color.r += sin(time);\n\n    #if defined(EFFECT_NOISE_TEXTURE)\n        // Mutate color by 3d noise\n        color *= (abs(cnoise(fposition / 10.0)) / 4.0) + 0.75;\n        // color *= (abs(pnoise(fposition / 10.0, vec3(500.0))) / 4.0) + 0.75;\n    #endif\n\n    gl_FragColor = vec4(color, 1.0);\n    // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n";

//# sourceMappingURL=vector-map.debug.js.map