!function e(t,n,o){function r(s,a){if(!n[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(i)return i(s,!0);throw new Error("Cannot find module '"+s+"'")}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return r(n?n:e)},c,c.exports,e,t,n,o)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<o.length;s++)r(o[s]);return r}({1:[function(e,t){function n(e,t,n,o){i.call(this,"CanvasRenderer",e,t,n,o),this.selection_info=document.createElement("div"),this.selection_info.setAttribute("class","label"),this.selection_info.style.display="none",this.cutout_context=document.createElement("canvas").getContext("2d")}var o=e("./point.js"),r=e("./geo.js"),i=e("./vector_renderer.js");i.CanvasRenderer=n,n.prototype=Object.create(i.prototype),n.prototype._tileWorkerCompleted=function(e){var t=document.createElement("canvas"),n=t.getContext("2d");t.style.width=r.tile_size+"px",t.style.width=r.tile_size+"px",t.width=Math.round(r.tile_size*this.device_pixel_ratio),t.height=Math.round(r.tile_size*this.device_pixel_ratio),t.style.background=this.colorToString(this.styles.default),this.renderTile(e,n);var o=document.querySelector("div[data-tile-key='"+e.key+"']");o.appendChild(t)},n.prototype.scaleGeometryToPixels=function(e){var t=this;return r.transformGeometry(e,function(e){return o(e[0]*r.tile_size*t.device_pixel_ratio/i.tile_scale,e[1]*r.tile_size*t.device_pixel_ratio/i.tile_scale*-1)})},n.prototype.renderLine=function(e,t,n){var o=e,r=t.color,i=t.width,s=t.dash,a=n;a.beginPath(),a.strokeStyle=this.colorToString(r),a.lineCap="round",a.lineWidth=i,a.setLineDash&&a.setLineDash(s?s.map(function(e){return e*i}):[]);for(var l=0;l<o.length-1;l++){var c=[o[l].x,o[l].y,o[l+1].x,o[l+1].y];a.moveTo(c[0],c[1]),a.lineTo(c[2],c[3])}a.closePath(),a.stroke()},n.prototype.renderPolygon=function(e,t,n){var o=e,r=t.color,i=(t.width,t.outline&&t.outline.color),s=t.outline&&t.outline.width,a=t.outline&&t.outline.dash,l=n;l.beginPath(),l.fillStyle=this.colorToString(r),l.moveTo(o[0].x,o[0].y);for(var c=1;c<o.length;c++)l.lineTo(o[c].x,o[c].y);l.closePath(),l.fill(),i&&s&&(l.strokeStyle=this.colorToString(i),l.lineCap="round",l.lineWidth=s,l.setLineDash&&l.setLineDash(a?a.map(function(e){return e*s}):[]),l.stroke())},n.prototype.renderPoint=function(e,t,n){var o=t.color,r=t.size,i=t.outline&&t.outline.color,s=t.outline&&t.outline.width,a=t.outline&&t.outline.dash,l=n;l.fillStyle=this.colorToString(o),l.beginPath(),l.arc(e.x,e.y,r,0,2*Math.PI),l.closePath(),l.fill(),i&&s&&(l.strokeStyle=this.colorToString(i),l.lineWidth=s,l.setLineDash&&l.setLineDash(a?a.map(function(e){return e*s}):[]),l.stroke())},n.prototype.renderFeature=function(e,t,n){var o,r,i,s=e.geometry;if("LineString"==s.type)this.renderLine(s.pixels,t,n);else if("MultiLineString"==s.type)for(o=0;o<s.pixels.length;o++)this.renderLine(s.pixels[o],t,n);else if("Polygon"==s.type||"MultiPolygon"==s.type)for(i="Polygon"==s.type?[s.pixels]:s.pixels,o=0;o<i.length;o++)if(i[o].length>1){for((this.cutout_context.canvas.width!=n.canvas.width||this.cutout_context.canvas.height!=n.canvas.height)&&(this.cutout_context.canvas.width=n.canvas.width,this.cutout_context.canvas.height=n.canvas.height),this.cutout_context.clearRect(0,0,this.cutout_context.canvas.width,this.cutout_context.canvas.height),this.cutout_context.globalCompositeOperation="source-over",this.renderPolygon(i[o][0],t,this.cutout_context),this.cutout_context.globalCompositeOperation="destination-out",r=1;r<i[o].length;r++)this.renderPolygon(i[o][r],t,this.cutout_context);if(n.drawImage(this.cutout_context.canvas,0,0),t.outline&&t.outline.color)for(r=1;r<i[o].length;r++)this.renderLine(i[o][r],t.outline,n)}else this.renderPolygon(i[o][0],t,n);else if("Point"==s.type)this.renderPoint(s.pixels,t,n);else if("MultiPoint"==s.type)for(o=0;o<s.pixels.length;o++)this.renderPoint(s.pixels[o],t,n)},n.prototype.renderTile=function(e,t){var n,o=this,s={colors:{}},a=document.createElement("canvas");a.style.width=r.tile_size+"px",a.style.width=r.tile_size+"px",a.width=Math.round(r.tile_size*this.device_pixel_ratio),a.height=Math.round(r.tile_size*this.device_pixel_ratio);var l,c=a.getContext("2d"),d=0;for(var u in o.layers){var p=o.layers[u];e.layers[p.name].features.forEach(function(r){r.geometry.pixels=this.scaleGeometryToPixels(r.geometry,o.tile_min,o.tile_max),n=i.parseStyleForFeature(r,this.styles[p.name],e),0!=p.visible&&this.renderFeature(r,n,t),1==p.selection&&null!=r.properties.name&&""!=r.properties.name?(l=this.generateColor(s.colors),l.properties=r.properties,d++,this.renderFeature(r,{color:l.color,width:n.width,size:n.size},c)):this.renderFeature(r,{color:[0,0,0],width:n.width,size:n.size},c)},this)}var f=this.selection_info;d>0?(this.tiles[e.key].selection=s,s.pixels=new Uint32Array(c.getImageData(0,0,a.width,a.height).data.buffer),t.canvas.onmousemove=function(e){var n={x:e.offsetX,y:e.offsetY},i=n.y*o.device_pixel_ratio*r.tile_size*o.device_pixel_ratio+n.x*o.device_pixel_ratio,a=s.pixels[i],l=s.colors[a];null!=l?(t.canvas.style.cursor="crosshair",f.style.left=n.x+5+"px",f.style.top=n.y+5+"px",f.innerHTML='<span class="labelInner">'+l.properties.name+"</span>",f.style.display="block",t.canvas.parentNode.appendChild(f)):(t.canvas.style.cursor=null,f.style.display="none",f.parentNode==t.canvas.parentNode&&t.canvas.parentNode.removeChild(f))}):t.canvas.onmousemove=function(){t.canvas.style.cursor=null,f.style.display="none",f.parentNode==t.canvas.parentNode&&t.canvas.parentNode.removeChild(f)}},n.prototype.colorToString=function(e){return"rgb("+e.map(function(e){return~~(256*e)}).join(",")+")"},n.prototype.generateColor=function(e){var t,n,o,r,i,s,a;for(e=e||{};;)if(t=Math.random(),n=Math.random(),o=Math.random(),r=~~(256*t),i=~~(256*n),s=~~(256*o),a=r+(i<<8)+(s<<16)+(255<<24)>>>0,void 0===e[a]){e[a]={color:[t,n,o]};break}return e[a]},void 0!==t&&(t.exports=n)},{"./geo.js":2,"./point.js":8,"./vector_renderer.js":12}],2:[function(e,t){var n=e("./point.js"),o={};o.tile_size=256,o.half_circumference_meters=20037508.342789244,o.map_origin_meters=n(-o.half_circumference_meters,o.half_circumference_meters),o.min_zoom_meters_per_pixel=2*o.half_circumference_meters/o.tile_size,o.meters_per_pixel=[],o.max_zoom=20;for(var r=0;r<=o.max_zoom;r++)o.meters_per_pixel[r]=o.min_zoom_meters_per_pixel/Math.pow(2,r);o.metersForTile=function(e){return n(e.x*o.tile_size*o.meters_per_pixel[e.z]+o.map_origin_meters.x,e.y*o.tile_size*o.meters_per_pixel[e.z]*-1+o.map_origin_meters.y)},o.metersToLatLng=function(e){var t=n.copy(e);return t.x/=o.half_circumference_meters,t.y/=o.half_circumference_meters,t.y=(2*Math.atan(Math.exp(t.y*Math.PI))-Math.PI/2)/Math.PI,t.x*=180,t.y*=180,t},o.latLngToMeters=function(e){var t=n.copy(e);return t.y=Math.log(Math.tan((t.y+90)*Math.PI/360))/(Math.PI/180),t.y=t.y*o.half_circumference_meters/180,t.x=t.x*o.half_circumference_meters/180,t},o.transformGeometry=function(e,t){return"Point"==e.type?t(e.coordinates):"LineString"==e.type||"MultiPoint"==e.type?e.coordinates.map(t):"Polygon"==e.type||"MultiLineString"==e.type?e.coordinates.map(function(e){return e.map(t)}):"MultiPolygon"==e.type?e.coordinates.map(function(e){return e.map(function(e){return e.map(t)})}):{}},o.boxIntersect=function(e,t){return!(t.sw.x>e.ne.x||t.ne.x<e.sw.x||t.sw.y>e.ne.y||t.ne.y<e.sw.y)},o.splitFeatureLines=function(e,t){var n,t=t||.001,o=t*t,r=e.geometry;if("MultiLineString"==r.type)n=r.coordinates;else{if("LineString"!=r.type)return e;n=[r.coordinates]}for(var i=[],s=0;s<n.length;s++){for(var a,l=n[s],c=[],d=null,u=0;u<l.length;u++){var p=l[u];if(a=!0,null!=d){var f=(p[0]-d[0])*(p[0]-d[0])+(p[1]-d[1])*(p[1]-d[1]);f>o&&(a=!1)}0==a&&(i.push(c),c=[]),c.push(p),d=p}i.push(c),c=[]}return 1==i.length?(r.type="LineString",r.coordinates=i[0]):(r.type="MultiLineString",r.coordinates=i),e},void 0!==t&&(t.exports=o)},{"./point.js":8}],3:[function(e,t){var n={};n.getContext=function(e){var e=e,t=!1;if(null==e&&(e=document.createElement("canvas"),e.style.position="absolute",e.style.top=0,e.style.left=0,e.style.zIndex=-1,document.body.appendChild(e),t=!0),gl=e.getContext("experimental-webgl",{}),!gl)throw alert("Couldn't create WebGL context. Your browser probably doesn't support WebGL or it's turned off?"),"Couldn't create WebGL context";return n.resizeCanvas(gl,window.innerWidth,window.innerHeight),1==t&&window.addEventListener("resize",function(){n.resizeCanvas(gl,window.innerWidth,window.innerHeight)}),n.VertexArrayObject.init(gl),gl},n.resizeCanvas=function(e,t,n){var o=window.devicePixelRatio||1;e.canvas.style.width=t+"px",e.canvas.style.height=n+"px",e.canvas.width=Math.round(e.canvas.style.width*o),e.canvas.height=Math.round(e.canvas.style.width*o),e.viewport(0,0,e.canvas.width,e.canvas.height)},n.createProgramFromElements=function(e,t,o){var r=document.getElementById(t).textContent,i=document.getElementById(o).textContent,s=e.createProgram();return n.updateProgram(e,s,r,i)},n.createProgramFromURLs=function(e,t,o){var r=e.createProgram();return n.updateProgramFromURLs(e,r,t,o)},n.updateProgramFromURLs=function(e,t,o,r){var i,s,a=new XMLHttpRequest;return a.onload=function(){i=a.response},a.open("GET",o+"?"+ +new Date,!1),a.send(),a.onload=function(){s=a.response},a.open("GET",r+"?"+ +new Date,!1),a.send(),n.updateProgram(e,t,i,s)},n.updateProgram=function(e,t,o,r){try{var i=n.createShader(e,o,e.VERTEX_SHADER),s=n.createShader(e,"#ifdef GL_ES\nprecision highp float;\n#endif\n\n"+r,e.FRAGMENT_SHADER)}catch(a){return alert(a),t}if(e.useProgram(null),null!=t)for(var l=e.getAttachedShaders(t),c=0;c<l.length;c++)e.detachShader(t,l[c]);else t=e.createProgram();if(null==i||null==s)return t;if(e.attachShader(t,i),e.attachShader(t,s),e.deleteShader(i),e.deleteShader(s),e.linkProgram(t),!e.getProgramParameter(t,e.LINK_STATUS)){var d="WebGL program error:\nVALIDATE_STATUS: "+e.getProgramParameter(t,e.VALIDATE_STATUS)+"\nERROR: "+e.getError()+"\n\n--- Vertex Shader ---\n"+o+"\n\n--- Fragment Shader ---\n"+r;throw d}return t},n.createShader=function(e,t,n){var o=e.createShader(n);if(e.shaderSource(o,t),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS)){var r="WebGL shader error:\n"+(n==e.VERTEX_SHADER?"VERTEX":"FRAGMENT")+" SHADER:\n"+e.getShaderInfoLog(o);throw r}return o},n.Program=function(e,t,n,o){o=o||{},this.gl=e,this.program=null,this.defines=o.defines||{},this.uniforms={},this.attribs={},this.vertex_shader_source=t,this.fragment_shader_source=n,this.compile()},n.Program.createProgramFromURLs=function(e,t,o,r){var i=Object.create(n.Program.prototype);return i.vertex_shader_url=t,i.fragment_shader_url=o,i.updateVertexShaderSource=function(){var e,t=new XMLHttpRequest;return t.onload=function(){e=t.response},t.open("GET",this.vertex_shader_url+"?"+ +new Date,!1),t.send(),e},i.updateFragmentShaderSource=function(){var e,t=new XMLHttpRequest;return t.onload=function(){e=t.response},t.open("GET",this.fragment_shader_url+"?"+ +new Date,!1),t.send(),e},n.Program.call(i,e,null,null,r),i},n.Program.defines={},n.Program.prototype.compile=function(){"function"==typeof this.updateVertexShaderSource&&(this.vertex_shader_source=this.updateVertexShaderSource()),"function"==typeof this.updateFragmentShaderSource&&(this.fragment_shader_source=this.updateFragmentShaderSource());var e={};for(var t in n.Program.defines)e[t]=n.Program.defines[t];for(var t in this.defines)e[t]=this.defines[t];var o="";for(var t in e)0!=e[t]&&(o+="boolean"==typeof e[t]&&1==e[t]?"#define "+t+"\n":"#define "+t+" "+e[t]+"\n");this.processed_vertex_shader_source=o+this.vertex_shader_source,this.processed_fragment_shader_source=o+this.fragment_shader_source,this.program=n.updateProgram(this.gl,this.program,this.processed_vertex_shader_source,this.processed_fragment_shader_source),this.gl.useProgram(this.program),this.refreshUniforms(),this.refreshAttributes()},n.Program.prototype.uniform=function(e,t){var n=this.uniforms[t]=this.uniforms[t]||{};n.name=t,n.location=n.location||this.gl.getUniformLocation(this.program,t),n.method="uniform"+e,n.values=Array.prototype.slice.call(arguments,2),this.updateUniform(t)},n.Program.prototype.updateUniform=function(e){var t=this.uniforms[e];null!=t&&null!=t.location&&this.gl[t.method].apply(this.gl,[t.location].concat(t.values))},n.Program.prototype.refreshUniforms=function(){for(var e in this.uniforms)this.uniforms[e].location=this.gl.getUniformLocation(this.program,e),this.updateUniform(e)},n.Program.prototype.refreshAttributes=function(){this.attribs={}},n.Program.prototype.attribute=function(e){var t=this.attribs[e]=this.attribs[e]||{};return null!=t.location?t:(t.name=e,t.location=this.gl.getAttribLocation(this.program,e),t)};try{n.tesselator=function(){function e(e,t){t.push([e[0],e[1]])}function t(e){return e}function n(){}var o=new libtess.GluTesselator;return o.gluTessCallback(libtess.gluEnum.GLU_TESS_VERTEX_DATA,e),o.gluTessCallback(libtess.gluEnum.GLU_TESS_COMBINE,t),o.gluTessCallback(libtess.gluEnum.GLU_TESS_EDGE_FLAG,n),o.gluTessNormal(0,0,1),o}(),n.triangulatePolygon=function(e){var t=[];n.tesselator.gluTessBeginPolygon(t);for(var o=0;o<e.length;o++){n.tesselator.gluTessBeginContour();for(var r=e[o],i=0;i<r.length;i++){var s=[r[i][0],r[i][1],0];n.tesselator.gluTessVertex(s,s)}n.tesselator.gluTessEndContour()}return n.tesselator.gluTessEndPolygon(),t}}catch(o){}n.addVertices=function(e,t,n){if(null!=e&&e.length>0)if("object"==typeof e[0])for(var o=0;o<e.length;o++)t.push.apply(t,e[o]),n&&t.push.apply(t,n);else t.push.apply(t,e),n&&t.push.apply(t,n);return t},n.VertexArrayObject={},n.VertexArrayObject.disabled=!1,n.VertexArrayObject.bound_vao=null,n.VertexArrayObject.init=function(e){null==n.VertexArrayObject.ext&&(1!=n.VertexArrayObject.disabled&&(n.VertexArrayObject.ext=e.getExtension("OES_vertex_array_object")),console.log(null!=n.VertexArrayObject.ext?"Vertex Array Object extension available":1!=n.VertexArrayObject.disabled?"Vertex Array Object extension NOT available":"Vertex Array Object extension force disabled"))},n.VertexArrayObject.create=function(e,t){var o={};o.setup=e,o.teardown=t;var r=n.VertexArrayObject.ext;return null!=r?(o._vao=r.createVertexArrayOES(),r.bindVertexArrayOES(o._vao),o.setup(),r.bindVertexArrayOES(null),"function"==typeof o.teardown&&o.teardown()):o.setup(),o},n.VertexArrayObject.bind=function(e){var t=n.VertexArrayObject.ext;null!=e?null!=t&&null!=e._vao?(t.bindVertexArrayOES(e._vao),n.VertexArrayObject.bound_vao=e):e.setup():(null!=t?t.bindVertexArrayOES(null):null!=n.VertexArrayObject.bound_vao&&"function"==typeof n.VertexArrayObject.bound_vao.teardown&&n.VertexArrayObject.bound_vao.teardown(),n.VertexArrayObject.bound_vao=null)},void 0!==t&&(t.exports=n)},{}],4:[function(e,t){var n=e("./vector.js"),o=e("./point.js"),r=e("./gl.js"),i={};i.debug=!1,i.buildPolygons=function(e,t,n,o){o=o||{};var i=[t,0,0,1];o.vertex_constants&&i.push.apply(i,o.vertex_constants);for(var s=e.length,a=0;s>a;a++){var l=r.triangulatePolygon(e[a]);r.addVertices(l,n,i)}return n},i.buildExtrudedPolygons=function(e,t,o,s,a,l){l=l||{};var c=t+(s||0),d=t+o;i.buildPolygons(e,d,a,{vertex_constants:l.vertex_constants});var u=[null,null,null];l.vertex_constants&&u.push.apply(u,l.vertex_constants);for(var p=e.length,f=0;p>f;f++)for(var h=e[f],g=0;g<h.length;g++)for(var v=h[g],m=0;m<v.length-1;m++){var y=[];y.push([v[m+1][0],v[m+1][1],d],[v[m+1][0],v[m+1][1],c],[v[m][0],v[m][1],c],[v[m][0],v[m][1],c],[v[m][0],v[m][1],d],[v[m+1][0],v[m+1][1],d]);var _=n.cross([0,0,1],n.normalize([v[m+1][0]-v[m][0],v[m+1][1]-v[m][1],0]));u[0]=_[0],u[1]=_[1],u[2]=_[2],r.addVertices(y,a,u)}return a},i.buildPolylines=function(e,t,o,s,a){function l(e,t){var r=n.normalize([-1*(t[1]-e[1]),t[0]-e[0]]),i=[e[0]+r[0]*o/2,e[1]+r[1]*o/2],s=[e[0]-r[0]*o/2,e[1]-r[1]*o/2],a=[t[0]+r[0]*o/2,t[1]+r[1]*o/2],l=[t[0]-r[0]*o/2,t[1]-r[1]*o/2];m.push(l,a,s,s,a,i)}function c(r,s,l){var c=n.normalize([-1*(s[1]-r[1]),s[0]-r[0]]),d=[[r[0]+c[0]*o/2,r[1]+c[1]*o/2],[s[0]+c[0]*o/2,s[1]+c[1]*o/2]],u=[[r[0]-c[0]*o/2,r[1]-c[1]*o/2],[s[0]-c[0]*o/2,s[1]-c[1]*o/2]],p=n.normalize([-1*(l[1]-s[1]),l[0]-s[0]]),f=[[s[0]+p[0]*o/2,s[1]+p[1]*o/2],[l[0]+p[0]*o/2,l[1]+p[1]*o/2]],h=[[s[0]-p[0]*o/2,s[1]-p[1]*o/2],[l[0]-p[0]*o/2,l[1]-p[1]*o/2]],g=n.lineIntersection(d[0],d[1],f[0],f[1]),v=null;if(null!=g){var y=g,_=n.lengthSq([y[0]-s[0],y[1]-s[1]]),x=3;_>o*o*x*x&&(v="distance",y=n.normalize([y[0]-s[0],y[1]-s[1]]),y=[s[0]+y[0]*x,s[1]+y[1]*x]);var z=[s[0]-y[0]+s[0],s[1]-y[1]+s[1]];m.push(z,y,u[0],u[0],y,d[0],h[1],f[1],z,z,f[1],y)}else v="parallel",u[1]=h[0],d[1]=f[0],m.push(u[1],d[1],u[0],u[0],d[1],d[0],h[1],f[1],h[0],h[0],f[1],f[0]);if(i.debug&&a.vertex_lines&&a.vertex_lines.push(u[0][0],u[0][1],t+.001,0,0,1,0,1,0,u[1][0],u[1][1],t+.001,0,0,1,0,1,0,h[0][0],h[0][1],t+.001,0,0,1,0,1,0,h[1][0],h[1][1],t+.001,0,0,1,0,1,0,d[0][0],d[0][1],t+.001,0,0,1,0,1,0,d[1][0],d[1][1],t+.001,0,0,1,0,1,0,f[0][0],f[0][1],t+.001,0,0,1,0,1,0,f[1][0],f[1][1],t+.001,0,0,1,0,1,0,u[0][0],u[0][1],t+.001,0,0,1,0,1,0,d[0][0],d[0][1],t+.001,0,0,1,0,1,0,u[1][0],u[1][1],t+.001,0,0,1,0,1,0,d[1][0],d[1][1],t+.001,0,0,1,0,1,0,h[0][0],h[0][1],t+.001,0,0,1,0,1,0,f[0][0],f[0][1],t+.001,0,0,1,0,1,0,h[1][0],h[1][1],t+.001,0,0,1,0,1,0,f[1][0],f[1][1],t+.001,0,0,1,0,1,0),i.debug&&v&&a.vertex_lines){var b;"parallel"==v?b=[0,1,0]:"distance"==v&&(b=[1,0,0]),a.vertex_lines.push(r[0],r[1],t+.002,0,0,1,b[0],b[1],b[2],s[0],s[1],t+.002,0,0,1,b[0],b[1],b[2],s[0],s[1],t+.002,0,0,1,b[0],b[1],b[2],l[0],l[1],t+.002,0,0,1,b[0],b[1],b[2]);for(var w=e.length,P=0;w>P;P++)for(var T=e[P],E=0;E<T.length-1;E++){var r=T[E],l=T[E+1];a.vertex_lines.push(r[0],r[1],t+5e-4,0,0,1,0,0,1,l[0],l[1],t+5e-4,0,0,1,0,0,1)}}}a=a||{},a.closed_polygon=a.closed_polygon||!1,a.remove_tile_edges=a.remove_tile_edges||!1;var d=[t,0,0,1];if(a.vertex_constants&&d.push.apply(d,a.vertex_constants),i.debug&&a.vertex_lines)for(var u=e.length,p=0;u>p;p++)for(var f=e[p],h=0;h<f.length-1;h++){var g=f[h],v=f[h+1];a.vertex_lines.push(g[0],g[1],t+.001,0,0,1,1,0,0,v[0],v[1],t+.001,0,0,1,1,0,0)}for(var m=[],u=e.length,p=0;u>p;p++){var f=e[p];if(f.length>2){var y=[];if(f.length>3){var h,_,x=[];for(1==a.closed_polygon?(h=0,_=f.length-1):(h=1,_=f.length-2,x.push(f[0]));_>h;h++){var g=f[h],v=f[h+1];x.push([(g[0]+v[0])/2,(g[1]+v[1])/2])}var z;for(1==a.closed_polygon?z=x.length:(x.push(f[f.length-1]),z=x.length-1),h=0;z>h;h++)y.push([x[h],f[(h+1)%f.length],x[(h+1)%x.length]])}else y=[[f[0],f[1],f[2]]];for(var h=0;h<y.length;h++)if(a.remove_tile_edges){var b=i.isOnTileEdge(y[h][0],y[h][1]),w=i.isOnTileEdge(y[h][1],y[h][2]);b||w?b?w||l(y[h][1],y[h][2]):l(y[h][0],y[h][1]):c(y[h][0],y[h][1],y[h][2])}else c(y[h][0],y[h][1],y[h][2])}else 2==f.length&&l(f[0],f[1])}return r.addVertices(m,s,d),s},i.buildQuads=function(e,t,n,o,r){for(var r=r||{},i=e.length,s=0;i>s;s++){var a=e[s],l=[[a[0]-t/2,a[1]-n/2],[a[0]+t/2,a[1]-n/2],[a[0]+t/2,a[1]+n/2],[a[0]-t/2,a[1]-n/2],[a[0]+t/2,a[1]+n/2],[a[0]-t/2,a[1]+n/2]];if(1==r.texcoords)var c=[[-1,-1],[1,-1],[1,1],[-1,-1],[1,1],[-1,1]];var d={positions:l,texcoords:r.texcoords&&c};o(d)}},i.buildLines=function(e,t,n,o,r,i,s,a){a=a||{};for(var l=o.color,c=(o.width,e.length),d=0;c>d;d++)for(var u=e[d],p=0;p<u.length-1;p++){var f=u[p],h=u[p+1];s.push(f[0],f[1],i,0,0,1,l[0],l[1],l[2],h[0],h[1],i,0,0,1,l[0],l[1],l[2])}return s},i.isOnTileEdge=function(e,t,n){n=n||{};var o=n.tolerance_function||i.valuesWithinTolerance,r=n.tolerance||1,s=i.tile_bounds[0],a=i.tile_bounds[1],l=null;return o(e[0],s.x,r)&&o(t[0],s.x,r)?l="left":o(e[0],a.x,r)&&o(t[0],a.x,r)?l="right":o(e[1],s.y,r)&&o(t[1],s.y,r)?l="top":o(e[1],a.y,r)&&o(t[1],a.y,r)&&(l="bottom"),l},i.setTileScale=function(e){i.tile_bounds=[o(0,0),o(e,-e)]},i.valuesWithinTolerance=function(e,t,n){return n=n||1,Math.abs(e-t)<n},i.buildZigzagLineTestPattern=function(){var e=o(0,0),t=o(4096,4096),n={id:123,geometry:{type:"LineString",coordinates:[[.75*e.x+.25*t.x,.75*e.y+.25*t.y],[.75*e.x+.25*t.x,.5*e.y+.5*t.y],[.25*e.x+.75*t.x,.75*e.y+.25*t.y],[.25*e.x+.75*t.x,.25*e.y+.75*t.y],[.4*e.x+.6*t.x,.5*e.y+.5*t.y],[.5*e.x+.5*t.x,.25*e.y+.75*t.y],[.75*e.x+.25*t.x,.25*e.y+.75*t.y],[.75*e.x+.25*t.x,.4*e.y+.6*t.y]]},properties:{kind:"debug"}};return n},void 0!==t&&(t.exports=i)},{"./gl.js":3,"./point.js":8,"./vector.js":11}],5:[function(e,t){function n(e,t,n,o,r){r=r||{},this.gl=e,this.gl_program=t,this.attribs=o,this.vertex_data=n,this.buffer=this.gl.createBuffer(),this.draw_mode=r.draw_mode||this.gl.TRIANGLES,this.data_usage=r.data_usage||this.gl.STATIC_DRAW,this.vertex_stride=0;for(var i=0;i<this.attribs.length;i++){var a=this.attribs[i];switch(a.location=this.gl_program.attribute(a.name).location,a.byte_size=a.size,a.type){case this.gl.FLOAT:case this.gl.INT:case this.gl.UNSIGNED_INT:a.byte_size*=4;break;case this.gl.SHORT:case this.gl.UNSIGNED_SHORT:a.byte_size*=2}a.offset=this.vertex_stride,this.vertex_stride+=a.byte_size}this.vertex_count=this.vertex_data.byteLength/this.vertex_stride,this.vao=s.VertexArrayObject.create(function(){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.setup()}.bind(this)),this.gl.bufferData(this.gl.ARRAY_BUFFER,this.vertex_data,this.data_usage)}function o(e,t,o){n.call(this,e,t,o,[{name:"position",size:3,type:e.FLOAT,normalized:!1},{name:"normal",size:3,type:e.FLOAT,normalized:!1},{name:"color",size:3,type:e.FLOAT,normalized:!1},{name:"layer",size:1,type:e.FLOAT,normalized:!1}]),this.geometry_count=this.vertex_count/3}function r(e,t,o){n.call(this,e,t,o,[{name:"position",size:3,type:e.FLOAT,normalized:!1},{name:"texcoord",size:2,type:e.FLOAT,normalized:!1},{name:"color",size:3,type:e.FLOAT,normalized:!1},{name:"layer",size:1,type:e.FLOAT,normalized:!1}]),this.geometry_count=this.vertex_count/3}function i(e,t,n,r){r=r||{},o.call(this,e,program,n),this.draw_mode=this.gl.LINES,this.line_width=r.line_width||2,this.geometry_count=this.vertex_count/2}var s=e("./gl.js");n.prototype.setup=function(){for(var e=0;e<this.attribs.length;e++){var t=this.attribs[e];this.gl.enableVertexAttribArray(t.location),this.gl.vertexAttribPointer(t.location,t.size,t.type,t.normalized,this.vertex_stride,t.offset)}},n.prototype.render=function(){this.gl.useProgram(this.gl_program.program),s.VertexArrayObject.bind(this.vao),"function"==typeof this._render&&this._render(),this.gl.drawArrays(this.draw_mode,0,this.vertex_count),s.VertexArrayObject.bind(null)},n.prototype.destroy=function(){console.log("GLGeometry.destroy: delete buffer of size "+this.vertex_data.byteLength),this.gl.deleteBuffer(this.buffer),delete this.vertex_data},o.prototype=Object.create(n.prototype),r.prototype=Object.create(n.prototype),i.prototype=Object.create(o.prototype),i.prototype._render=function(){this.gl.lineWidth(this.line_width),"function"==typeof o.prototype._render&&o.prototype._render.call(this)},void 0!==t&&(t.exports={GLGeometry:n,GLTriangles:o,GLPolyPoints:r,GLLines:i})},{"./gl.js":3}],6:[function(e,t){function n(e,t,n,o){var o=o||{};i.call(this,"GLRenderer",e,t,n,o),a.setTileScale(i.tile_scale),s.Program.defines.TILE_SCALE=i.tile_scale+".0",this.container=o.container,this.continuous_animation=!1}{var o=e("./point.js"),r=e("./geo.js"),i=e("./vector_renderer.js"),s=e("./gl.js"),a=e("./gl_builders.js"),l=(e("./gl_geom.js").GLGeometry,e("./gl_geom.js").GLTriangles),c=e("./gl_geom.js").GLPolyPoints;e("./gl_geom.js").GLLines}i.GLRenderer=n,n.prototype=Object.create(i.prototype),n.debug=!1,n.shader_sources=e("./shaders/gl_shaders.js"),n.prototype._init=function(){this.container=this.container||document.body,this.canvas=document.createElement("canvas"),this.canvas.style.position="absolute",this.canvas.style.top=0,this.canvas.style.left=0,this.canvas.style.zIndex=-1,this.container.appendChild(this.canvas),this.gl=s.getContext(this.canvas);var e=this;this.render_modes={polygons:{gl_program:new s.Program(this.gl,n.shader_sources.polygon_vertex,n.shader_sources.polygon_fragment),makeGLGeometry:function(t){return new l(e.gl,this.gl_program,t)}},polygons_noise:{gl_program:new s.Program(this.gl,n.shader_sources.polygon_vertex,n.shader_sources.polygon_fragment,{defines:{EFFECT_NOISE_TEXTURE:!0,EFFECT_NOISE_ANIMATABLE:!0}}),makeGLGeometry:function(t){return new l(e.gl,this.gl_program,t)}},points:{gl_program:new s.Program(this.gl,n.shader_sources.point_vertex,n.shader_sources.point_fragment,{defines:{EFFECT_SCREEN_COLOR:!0}}),makeGLGeometry:function(t){return new c(e.gl,this.gl_program,t)}}},this.resizeMap(this.container.clientWidth,this.container.clientHeight),this.start_time=+new Date,this.last_render_count=null,this.initInputHandlers()},n.calculateZ=function(){var e=0;return e},n.addTile=function(e,t,o){var r,l,c,d,u,p={};e.debug.features=0;for(var f=0;f<t.length;f++)if(r=t[f],null!=o[r.name]&&null!=e.layers[r.name])for(var h=e.layers[r.name].features.length,g=h-1;g>=0;g--)if(c=e.layers[r.name].features[g],d=n.calculateZ(r,e),l=i.parseStyleForFeature(c,o[r.name],e),null!=l){u=l.render_mode,null==p[u]&&(p[u]=[]);var v=[l.color[0],l.color[1],l.color[2],f];if(l.outline.color)var m=[l.outline.color[0],l.outline.color[1],l.outline.color[2],f-.5];var y=null,_=null,x=null;if("Polygon"==c.geometry.type?x=[c.geometry.coordinates]:"MultiPolygon"==c.geometry.type?x=c.geometry.coordinates:"LineString"==c.geometry.type?_=[c.geometry.coordinates]:"MultiLineString"==c.geometry.type?_=c.geometry.coordinates:"Point"==c.geometry.type?y=[c.geometry.coordinates]:"MultiPoint"==c.geometry.type&&(y=c.geometry.coordinates),null!=x&&(l.extrude&&l.height?a.buildExtrudedPolygons(x,d,l.height,l.min_height,p[u],{vertex_constants:v}):a.buildPolygons(x,d,p[u],{vertex_constants:v}),l.outline.color&&l.outline.width))for(var z=0;z<x.length;z++)a.buildPolylines(x[z],n.calculateZ(r,e,-.5),l.outline.width,p[u],{closed_polygon:!0,remove_tile_edges:!0,vertex_constants:m});if(null!=_&&(a.buildPolylines(_,d,l.width,p[u],{vertex_constants:v}),l.outline.color&&l.outline.width&&a.buildPolylines(_,n.calculateZ(r,e,-.5),l.width+2*l.outline.width,p[u],{vertex_constants:m})),null!=y){var b=[d+1,0,0,1].concat(v);a.buildQuads(y,2*l.size,2*l.size,function(e){var t=e.positions;if("points"==u){b=v;for(var n in e.positions)t[n]=e.positions[n].concat(d+1,e.texcoords[n])}s.addVertices(t,p[u],b)},{texcoords:"points"==u})}e.debug.features++}e.vertex_data={};for(var w in p)e.vertex_data[w]=new Float32Array(p[w]);return e},n.prototype._tileWorkerCompleted=function(e){var t=e.vertex_data;e.gl_geometry={};for(var n in t)e.gl_geometry[n]=this.render_modes[n].makeGLGeometry(t[n]);e.debug.geometries=0,e.debug.buffer_size=0;for(var o in e.gl_geometry)e.debug.geometries+=e.gl_geometry[o].geometry_count,e.debug.buffer_size+=e.gl_geometry[o].vertex_data.byteLength;e.debug.geom_ratio=(e.debug.geometries/e.debug.features).toFixed(1),delete e.vertex_data},n.prototype.removeTile=function(e){if(1!=this.map_zooming){var t=this.tiles[e];if(null!=t&&null!=t.gl_geometry){for(var n in t.gl_geometry)t.gl_geometry[n].destroy();t.gl_geometry=null}i.prototype.removeTile.apply(this,arguments)}},n.prototype.preserve_tiles_within_zoom=2,n.prototype.setZoom=function(e){console.log("renderer.map_last_zoom: "+this.map_last_zoom),this.map_zooming=!1,this.zoom=e;var t=this.zoom,n=this.zoom;Math.abs(this.zoom-this.map_last_zoom)<=this.preserve_tiles_within_zoom&&(this.zoom>this.map_last_zoom?t=this.zoom-this.preserve_tiles_within_zoom:n=this.zoom+this.preserve_tiles_within_zoom),this.removeTilesOutsideZoomRange(t,n),this.map_last_zoom=this.zoom,this.dirty=!0},n.prototype.removeTilesOutsideZoomRange=function(e,t){e=Math.min(e,this.tile_source.max_zoom||e),t=Math.min(t,this.tile_source.max_zoom||t),console.log("removeTilesOutsideZoomRange ["+e+", "+t+"])");var n=[];for(var o in this.tiles){var r=this.tiles[o];(r.coords.z<e||r.coords.z>t)&&n.push(o)}for(var i=0;i<n.length;i++){var s=n[i];console.log("removed "+s+" (outside range ["+e+", "+t+"])"),this.removeTile(s)}},n.prototype.resizeMap=function(e,t){i.prototype.resizeMap.apply(this,arguments),this.css_size={width:e,height:t},this.device_size={width:Math.round(this.css_size.width*this.device_pixel_ratio),height:Math.round(this.css_size.height*this.device_pixel_ratio)},this.canvas.style.width=this.css_size.width+"px",this.canvas.style.height=this.css_size.height+"px",this.canvas.width=this.device_size.width,this.canvas.height=this.device_size.height,this.gl.viewport(0,0,this.canvas.width,this.canvas.height)},n.prototype._render=function(){var e=this.gl;this.input(),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),e.enable(e.DEPTH_TEST),e.depthFunc(e.LESS),e.enable(e.CULL_FACE),e.cullFace(e.BACK);var t=0;for(var n in this.render_modes){var i=this.render_modes[n].gl_program;e.useProgram(i.program),i.uniform("2f","resolution",this.css_size.width,this.css_size.height),i.uniform("1f","time",(+new Date-this.start_time)/1e3);var s=r.latLngToMeters(o(this.center.lng,this.center.lat));i.uniform("2f","map_center",s.x,s.y),i.uniform("1f","map_zoom",this.zoom),i.uniform("1f","num_layers",this.layers.length);var a=r.min_zoom_meters_per_pixel/Math.pow(2,this.zoom),l=o(this.css_size.width/2*a,this.css_size.height/2*a);i.uniform("2f","meter_zoom",l.x,l.y);var c=Math.min(~~this.zoom,this.tile_source.max_zoom||~~this.zoom);for(var d in this.tiles){var u=this.tiles[d];1==u.loaded&&1==u.visible&&Math.min(u.coords.z,this.tile_source.max_zoom||u.coords.z)==c&&null!=u.gl_geometry[n]&&(i.uniform("2f","tile_min",u.min.x,u.min.y),i.uniform("2f","tile_max",u.max.x,u.max.y),u.gl_geometry[n].render(),t+=u.gl_geometry[n].geometry_count)}}return t!=this.last_render_count&&console.log("rendered "+t+" primitives"),this.last_render_count=t,1==this.continuous_animation&&(this.dirty=!0),!0},n.prototype.getDebugSum=function(e,t){var n=0;for(var o in this.tiles)null==this.tiles[o].debug[e]||"function"==typeof t&&1!=t(this.tiles[o])||(n+=this.tiles[o].debug[e]);return n},n.prototype.getDebugAverage=function(e,t){return this.getDebugSum(e,t)/Object.keys(this.tiles).length},n.prototype.initInputHandlers=function(){var e=this;e.key=null,document.addEventListener("keydown",function(t){if(37==t.keyCode)e.key="left";else if(39==t.keyCode)e.key="right";else if(38==t.keyCode)e.key="up";else if(40==t.keyCode)e.key="down";else if(83==t.keyCode){console.log("reloading shaders");for(var n in this.render_modes)this.render_modes[n].gl_program.compile();e.dirty=!0}}),document.addEventListener("keyup",function(){e.key=null})},n.prototype.input=function(){},void 0!==t&&(t.exports=n)},{"./geo.js":2,"./gl.js":3,"./gl_builders.js":4,"./gl_geom.js":5,"./point.js":8,"./shaders/gl_shaders.js":9,"./vector_renderer.js":12}],7:[function(e){{var t=e("./vector_renderer.js");e("./gl_renderer.js"),e("./canvas_renderer.js")}L.VectorTileLayer=L.GridLayer.extend({options:{vectorRenderer:"canvas"},initialize:function(n){L.setOptions(this,n),this.options.vectorRenderer=this.options.vectorRenderer||"GLRenderer",this._renderer=t.create(this.options.vectorRenderer,this.options.vectorTileSource,this.options.vectorLayers,this.options.vectorStyles,{num_workers:this.options.numWorkers}),this._renderer.continuous_animation=!1,this.GL=e("./gl.js")},onAdd:function(){var e=this;e.on("tileunload",function(t){var n=t.tile,o=n.getAttribute("data-tile-key");e._renderer.removeTile(o)}),e._map.on("resize",function(){var t=e._map.getSize();e._renderer.resizeMap(t.x,t.y),e.updateBounds()}),e._map.on("move",function(){var t=e._map.getCenter();e._renderer.setCenter(t.lng,t.lat),e.updateBounds()}),e._map.on("zoomstart",function(){console.log("map.zoomstart "+e._map.getZoom()),e._renderer.startZoom()}),e._map.on("zoomend",function(){console.log("map.zoomend "+e._map.getZoom()),e._renderer.setZoom(e._map.getZoom())}),e._renderer.container=e._map.getContainer();var t=e._map.getCenter();e._renderer.setCenter(t.lng,t.lat),e._renderer.setZoom(e._map.getZoom()),e.updateBounds(),L.GridLayer.prototype.onAdd.apply(this,arguments),e._renderer.init()},onRemove:function(){L.GridLayer.prototype.onRemove.apply(this,arguments)},createTile:function(e,t){var n=document.createElement("div");return this._renderer.loadTile(e,n,t),n},updateBounds:function(){var e=this,t=e._map.getBounds();
e._renderer.setBounds(t.getSouthWest(),t.getNorthEast())},render:function(){this._renderer.render()}}),L.vectorTileLayer=function(e){return new L.VectorTileLayer(e)}},{"./canvas_renderer.js":1,"./gl.js":3,"./gl_renderer.js":6,"./vector_renderer.js":12}],8:[function(e,t){function n(e,t){return{x:e,y:t}}n.copy=function(e){return null==e?null:{x:e.x,y:e.y}},void 0!==t&&(t.exports=n)},{}],9:[function(e,t){var n={};n.point_fragment="uniform vec2 resolution;\n\nvarying vec3 fcolor;\nvarying vec2 ftexcoord;\n\nvoid main (void) {\n    vec4 color = vec4(fcolor, 1.);\n\n    // if (length(ftexcoord.xy) > 10.) {\n    //     // color = vec4(0., 0., 0., 0.);\n    //     discard;\n    // }\n\n    float len = length(ftexcoord);\n    if (len > 1.) {\n        discard;\n    }\n    color.rgb *= (1. - smoothstep(.25, 1., len)) + 0.5;\n    // color.a = (1. - smoothstep(2.5, 10., len)) + 0.25;\n\n    #if defined(EFFECT_SCREEN_COLOR)\n        // Mutate colors by screen position\n        color.rgb += vec3(gl_FragCoord.x / resolution.x, 0.0, gl_FragCoord.y / resolution.y);\n    #endif\n\n    gl_FragColor = color;\n}\n",n.point_vertex="uniform vec2 map_center;\nuniform float map_zoom;\nuniform vec2 meter_zoom;\nuniform vec2 tile_min;\nuniform vec2 tile_max;\nuniform float num_layers;\n// uniform float time;\n\nattribute vec3 position;\n// attribute vec3 normal;\nattribute vec2 texcoord;\nattribute vec3 color;\nattribute float layer;\n\nvarying vec3 fcolor;\nvarying vec2 ftexcoord;\n\n// vec3 light = normalize(vec3(0.2, 0.7, -0.5)); // vec3(0.1, 0.2, -0.4)\n// const float ambient = 0.45;\n\nvoid main() {\n    vec3 vposition = position;\n    // vec3 vnormal = normal;\n    // vec2 vtexcoord = texcoord;\n\n    // Calc position of vertex in meters, relative to center of screen\n    vposition.y *= -1.0; // adjust for flipped y-coords\n    vposition.xy *= (tile_max - tile_min) / TILE_SCALE; // adjust for vertex location within tile (scaled from local coords to meters)\n    vposition.xy += tile_min.xy - map_center; // adjust for corner of tile relative to map center\n    vposition.xy /= meter_zoom; // adjust for zoom in meters to get clip space coords\n\n    // Shading & texture\n    fcolor = color;\n    ftexcoord = texcoord;\n\n    // #if defined(PROJECTION_PERSPECTIVE)\n    //     // Perspective-style projection\n    //     vec2 perspective_offset = vec2(-0.25, -0.25);\n    //     vec2 perspective_factor = vec2(0.8, 0.8); // vec2(-0.25, 0.75);\n    //     vposition.xy += vposition.z * perspective_factor * (vposition.xy - perspective_offset) / meter_zoom.xy; // perspective from offset center screen\n    // #elif defined(PROJECTION_ISOMETRIC) || defined(PROJECTION_POPUP)\n    //     // Pop-up effect - 3d in center of viewport, fading to 2d at edges\n    //     #if defined(PROJECTION_POPUP)\n    //         if (vposition.z > 1.0) {\n    //             float cd = distance(vposition.xy * (resolution.xy / resolution.yy), vec2(0.0, 0.0));\n    //             const float popup_fade_inner = 0.5;\n    //             const float popup_fade_outer = 0.75;\n    //             if (cd > popup_fade_inner) {\n    //                 vposition.z *= 1.0 - smoothstep(popup_fade_inner, popup_fade_outer, cd);\n    //             }\n    //             const float zoom_boost_start = 15.0;\n    //             const float zoom_boost_end = 17.0;\n    //             const float zoom_boost_magnitude = 0.75;\n    //             vposition.z *= 1.0 + (1.0 - smoothstep(zoom_boost_start, zoom_boost_end, map_zoom)) * zoom_boost_magnitude;\n    //         }\n    //     #endif\n\n    //     // Isometric-style projection\n    //     vposition.y += vposition.z / meter_zoom.y; // z coordinate is a simple translation up along y axis, ala isometric\n    //     // vposition.y += vposition.z * 0.5; // closer to Ultima 7-style axonometric\n    //     // vposition.x -= vposition.z * 0.5;\n    // #endif\n\n    // Reverse and scale to 0-1 for GL depth buffer\n    // Layers are force-ordered (higher layers guaranteed to render on top of lower), then by height/depth\n    float z_layer_scale = 4096.;\n    float z_layer_range = (num_layers + 1.) * z_layer_scale;\n    float z_layer = (layer + 1.) * z_layer_scale;\n    // float z_layer = (layer + 1.);\n\n    vposition.z = z_layer + clamp(vposition.z, 1., z_layer_scale);\n    vposition.z = (z_layer_range - vposition.z) / z_layer_range;\n\n    gl_Position = vec4(vposition, 1.0);\n}\n",n.polygon_fragment="uniform vec2 resolution;\nuniform float time;\n\nvarying vec3 fcolor;\n\n#if defined(EFFECT_NOISE_TEXTURE)\n    varying vec3 fposition;\n\n    // http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n    // float rand (vec2 co) {\n    //    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    // }\n\n    // Noise functions from: https://github.com/ashima/webgl-noise\n    vec3 mod289(vec3 x) {\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 mod289(vec4 x) {\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 permute(vec4 x) {\n        return mod289(((x*34.0)+1.0)*x);\n    }\n\n    vec4 taylorInvSqrt(vec4 r) {\n        return 1.79284291400159 - 0.85373472095314 * r;\n    }\n\n    vec3 fade(vec3 t) {\n        return t*t*t*(t*(t*6.0-15.0)+10.0);\n    }\n\n    float snoise(vec3 v) {\n        const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n        const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n        // First corner\n        vec3 i  = floor(v + dot(v, C.yyy) );\n        vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n        // Other corners\n        vec3 g = step(x0.yzx, x0.xyz);\n        vec3 l = 1.0 - g;\n        vec3 i1 = min( g.xyz, l.zxy );\n        vec3 i2 = max( g.xyz, l.zxy );\n\n        //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n        //   x1 = x0 - i1  + 1.0 * C.xxx;\n        //   x2 = x0 - i2  + 2.0 * C.xxx;\n        //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n        vec3 x1 = x0 - i1 + C.xxx;\n        vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n        vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n        // Permutations\n        i = mod289(i);\n        vec4 p = permute( permute( permute(\n        i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n        + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n        + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n        // Gradients: 7x7 points over a square, mapped onto an octahedron.\n        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n        float n_ = 0.142857142857; // 1.0/7.0\n        vec3  ns = n_ * D.wyz - D.xzx;\n\n        vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n        vec4 x_ = floor(j * ns.z);\n        vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n        vec4 x = x_ *ns.x + ns.yyyy;\n        vec4 y = y_ *ns.x + ns.yyyy;\n        vec4 h = 1.0 - abs(x) - abs(y);\n\n        vec4 b0 = vec4( x.xy, y.xy );\n        vec4 b1 = vec4( x.zw, y.zw );\n\n        //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n        //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n        vec4 s0 = floor(b0)*2.0 + 1.0;\n        vec4 s1 = floor(b1)*2.0 + 1.0;\n        vec4 sh = -step(h, vec4(0.0));\n\n        vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n        vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n        vec3 p0 = vec3(a0.xy,h.x);\n        vec3 p1 = vec3(a0.zw,h.y);\n        vec3 p2 = vec3(a1.xy,h.z);\n        vec3 p3 = vec3(a1.zw,h.w);\n\n        //Normalise gradients\n        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n        p0 *= norm.x;\n        p1 *= norm.y;\n        p2 *= norm.z;\n        p3 *= norm.w;\n\n        // Mix final noise value\n        vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n        m = m * m;\n        return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n    }\n\n    // Classic Perlin noise\n    float cnoise(vec3 P) {\n        vec3 Pi0 = floor(P); // Integer part for indexing\n        vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n        Pi0 = mod289(Pi0);\n        Pi1 = mod289(Pi1);\n        vec3 Pf0 = fract(P); // Fractional part for interpolation\n        vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n        vec4 iy = vec4(Pi0.yy, Pi1.yy);\n        vec4 iz0 = Pi0.zzzz;\n        vec4 iz1 = Pi1.zzzz;\n\n        vec4 ixy = permute(permute(ix) + iy);\n        vec4 ixy0 = permute(ixy + iz0);\n        vec4 ixy1 = permute(ixy + iz1);\n\n        vec4 gx0 = ixy0 * (1.0 / 7.0);\n        vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n        gx0 = fract(gx0);\n        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n        vec4 sz0 = step(gz0, vec4(0.0));\n        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n        vec4 gx1 = ixy1 * (1.0 / 7.0);\n        vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n        gx1 = fract(gx1);\n        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n        vec4 sz1 = step(gz1, vec4(0.0));\n        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n        vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n        vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n        vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n        vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n        vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n        vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n        vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n        vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n        g000 *= norm0.x;\n        g010 *= norm0.y;\n        g100 *= norm0.z;\n        g110 *= norm0.w;\n        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n        g001 *= norm1.x;\n        g011 *= norm1.y;\n        g101 *= norm1.z;\n        g111 *= norm1.w;\n\n        float n000 = dot(g000, Pf0);\n        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n        float n111 = dot(g111, Pf1);\n\n        vec3 fade_xyz = fade(Pf0);\n        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n        return 2.2 * n_xyz;\n    }\n\n    // Classic Perlin noise, periodic variant\n    float pnoise(vec3 P, vec3 rep) {\n        vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n        vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n        Pi0 = mod289(Pi0);\n        Pi1 = mod289(Pi1);\n        vec3 Pf0 = fract(P); // Fractional part for interpolation\n        vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n        vec4 iy = vec4(Pi0.yy, Pi1.yy);\n        vec4 iz0 = Pi0.zzzz;\n        vec4 iz1 = Pi1.zzzz;\n\n        vec4 ixy = permute(permute(ix) + iy);\n        vec4 ixy0 = permute(ixy + iz0);\n        vec4 ixy1 = permute(ixy + iz1);\n\n        vec4 gx0 = ixy0 * (1.0 / 7.0);\n        vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n        gx0 = fract(gx0);\n        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n        vec4 sz0 = step(gz0, vec4(0.0));\n        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n        vec4 gx1 = ixy1 * (1.0 / 7.0);\n        vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n        gx1 = fract(gx1);\n        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n        vec4 sz1 = step(gz1, vec4(0.0));\n        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n        vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n        vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n        vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n        vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n        vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n        vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n        vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n        vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n        g000 *= norm0.x;\n        g010 *= norm0.y;\n        g100 *= norm0.z;\n        g110 *= norm0.w;\n        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n        g001 *= norm1.x;\n        g011 *= norm1.y;\n        g101 *= norm1.z;\n        g111 *= norm1.w;\n\n        float n000 = dot(g000, Pf0);\n        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n        float n111 = dot(g111, Pf1);\n\n        vec3 fade_xyz = fade(Pf0);\n        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n        return 2.2 * n_xyz;\n    }\n#endif\n\nvoid main (void) {\n\n    #if defined(EFFECT_SPOTLIGHT)\n    // Spotlight effect\n        vec2 position = gl_FragCoord.xy / resolution.xy;    // scale coords to [0.0, 1.0]\n        position = position * 2.0 - 1.0;                    // scale coords to [-1.0, 1.0]\n        position.y *= resolution.y / resolution.x;          // correct aspect ratio\n\n        vec3 color = fcolor * max(1.0 - distance(position, vec2(0.0, 0.0)), 0.2);\n        // vec3 color = fcolor * (1.0 - dot(normalize(vec3(rand(gl_FragCoord.xy * 0.01) * 10.0, 0.0, -1.0)), vec3(0, 0, 1.0)));\n    #else\n        vec3 color = fcolor;\n    #endif\n\n    #if defined(EFFECT_COLOR_BLEED)\n        // Mutate colors by screen position or time\n        color += vec3(gl_FragCoord.x / resolution.x, 0.0, gl_FragCoord.y / resolution.y);\n        color.r += sin(time / 3.0);\n    #endif\n\n    // Mutate color by 3d noise\n    #if defined (EFFECT_NOISE_TEXTURE)\n        #if defined(EFFECT_NOISE_ANIMATABLE) && defined(EFFECT_NOISE_ANIMATED)\n            color *= (abs(cnoise((fposition + vec3(time * 5., time * 7.5, time * 10.)) / 10.0)) / 4.0) + 0.75;\n        #endif\n        #ifndef EFFECT_NOISE_ANIMATABLE\n            color *= (abs(cnoise(fposition / 10.0)) / 4.0) + 0.75;\n        #endif\n    #endif\n\n    gl_FragColor = vec4(color, 1.0);\n    // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n",n.polygon_vertex='// #define PROJECTION_PERSPECTIVE\n// #define PROJECTION_ISOMETRIC\n// #define PROJECTION_POPUP\n\n// #define LIGHTING_POINT\n// #define LIGHTING_DIRECTION\n\n// #define ANIMATION_ELEVATOR\n// #define ANIMATION_WAVE\n\nuniform vec2 resolution;\nuniform vec2 map_center;\nuniform float map_zoom;\nuniform vec2 meter_zoom;\nuniform vec2 tile_min;\nuniform vec2 tile_max;\nuniform float num_layers;\nuniform float time;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nattribute float layer;\n\nvarying vec3 fcolor;\n\n#if defined(EFFECT_NOISE_TEXTURE)\n    varying vec3 fposition;\n#endif\n\nvec3 light = normalize(vec3(0.2, 0.7, -0.5)); // vec3(0.1, 0.2, -0.4)\nconst float ambient = 0.45;\n\n// Project lat-lng to mercator\n// vec2 latLngToMeters (vec2 coordinate) {\n//     const float pi = 3.1415926;\n//     const float half_circumference_meters = 20037508.342789244;\n//     vec2 projected;\n\n//     // Latitude\n//     projected.y = log(tan((coordinate.y + 90.0) * pi / 360.0)) / (pi / 180.0);\n//     projected.y = projected.y * half_circumference_meters / 180.0;\n\n//     // Longitude\n//     projected.x = coordinate.x * half_circumference_meters / 180.0;\n\n//     return projected;\n// }\n\nvoid main() {\n    vec3 vposition = position;\n    vec3 vnormal = normal;\n\n    // Calc position of vertex in meters, relative to center of screen\n    vposition.y *= -1.0; // adjust for flipped y-coords\n    // vposition.y += TILE_SCALE; // alternate, to also adjust for force-positive y coords in tile\n    vposition.xy *= (tile_max - tile_min) / TILE_SCALE; // adjust for vertex location within tile (scaled from local coords to meters)\n\n    // Vertex displacement + procedural effects\n    #if defined(ANIMATION_ELEVATOR) || defined(ANIMATION_WAVE) || defined(EFFECT_NOISE_TEXTURE)\n        vec3 vposition_world = vposition + vec3(tile_min, 0.); // need vertex in world coords (before map center transform), hack to get around precision issues (see below)\n\n        #if defined(EFFECT_NOISE_TEXTURE)\n            fposition = vposition_world;\n        #endif\n\n        if (vposition_world.z > 1.0) {\n            // vposition.x += sin(vposition_world.z + time) * 10.0 * sin(position.x); // swaying buildings\n            // vposition.y += cos(vposition_world.z + time) * 10.0;\n\n            #if defined(ANIMATION_ELEVATOR)\n                // vposition.z *= (sin(vposition_world.z / 25.0 * time) + 1.0) / 2.0 + 0.1; // evelator buildings\n                vposition.z *= max((sin(vposition_world.z + time) + 1.0) / 2.0, 0.05); // evelator buildings\n            #elif defined(ANIMATION_WAVE)\n                vposition.z *= max((sin(vposition_world.x / 100.0 + time) + 1.0) / 2.0, 0.05); // wave\n            #endif\n        }\n    #endif\n\n    // NOTE: due to unresolved floating point precision issues, tile and map center adjustment need to happen in ONE operation, or artifcats are introduced\n    vposition.xy += tile_min.xy - map_center; // adjust for corner of tile relative to map center\n    vposition.xy /= meter_zoom; // adjust for zoom in meters to get clip space coords\n\n    // Shading\n    fcolor = color;\n    // fcolor += vec3(sin(position.z + time), 0.0, 0.0); // color change on height + time\n\n    #if defined(LIGHTING_POINT) || defined(LIGHTING_NIGHT)\n        // Gouraud shading\n        light = vec3(-0.25, -0.25, 0.50); // vec3(0.1, 0.1, 0.35); // point light location\n\n        #if defined(LIGHTING_NIGHT)\n            // "Night" effect by flipping vertex z\n            light = normalize(vec3(vposition.x, vposition.y, vposition.z) - light); // light angle from light point to vertex\n            fcolor *= dot(vnormal, light * -1.0); // + ambient + clamp(vposition.z * 2.0 / meter_zoom.x, 0.0, 0.25);\n        #else\n            // Point light-based gradient\n            light = normalize(vec3(vposition.x, vposition.y, -vposition.z) - light); // light angle from light point to vertex\n            fcolor *= dot(vnormal, light * -1.0) + ambient + clamp(vposition.z * 2.0 / meter_zoom.x, 0.0, 0.25);\n        #endif\n\n    #elif defined(LIGHTING_DIRECTION)\n        // Flat shading\n        light = normalize(vec3(0.2, 0.7, -0.5));\n        // light = normalize(vec3(-1., 0.7, -.0));\n        // light = normalize(vec3(-1., 0.7, -.75));\n        // fcolor *= max(dot(vnormal, light * -1.0), 0.1) + ambient;\n        fcolor *= dot(vnormal, light * -1.0) + ambient;\n    #endif\n\n    #if defined(PROJECTION_PERSPECTIVE)\n        // Perspective-style projection\n        vec2 perspective_offset = vec2(-0.25, -0.25);\n        vec2 perspective_factor = vec2(0.8, 0.8); // vec2(-0.25, 0.75);\n        vposition.xy += vposition.z * perspective_factor * (vposition.xy - perspective_offset) / meter_zoom.xy; // perspective from offset center screen\n    #elif defined(PROJECTION_ISOMETRIC) || defined(PROJECTION_POPUP)\n        // Pop-up effect - 3d in center of viewport, fading to 2d at edges\n        #if defined(PROJECTION_POPUP)\n            if (vposition.z > 1.0) {\n                float cd = distance(vposition.xy * (resolution.xy / resolution.yy), vec2(0.0, 0.0));\n                const float popup_fade_inner = 0.5;\n                const float popup_fade_outer = 0.75;\n                if (cd > popup_fade_inner) {\n                    vposition.z *= 1.0 - smoothstep(popup_fade_inner, popup_fade_outer, cd);\n                }\n                const float zoom_boost_start = 15.0;\n                const float zoom_boost_end = 17.0;\n                const float zoom_boost_magnitude = 0.75;\n                vposition.z *= 1.0 + (1.0 - smoothstep(zoom_boost_start, zoom_boost_end, map_zoom)) * zoom_boost_magnitude;\n            }\n        #endif\n\n        // Isometric-style projection\n        vposition.y += vposition.z / meter_zoom.y; // z coordinate is a simple translation up along y axis, ala isometric\n        // vposition.y += vposition.z * 0.5; // closer to Ultima 7-style axonometric\n        // vposition.x -= vposition.z * 0.5;\n    #endif\n\n    // Rotation test\n    // float theta = 0;\n    // const float pi = 3.1415926;\n    // vec2 pr;\n    // pr.x = vposition.x * cos(theta * pi / 180.0) + vposition.y * -sin(theta * pi / 180.0);\n    // pr.y = vposition.x * sin(theta * pi / 180.0) + vposition.y * cos(theta * pi / 180.0);\n    // vposition.xy = pr;\n\n    // vposition.y *= max(abs(sin(vposition.x)), 0.1); // hourglass effect\n    // vposition.y *= abs(max(sin(vposition.x), 0.1)); // funnel effect\n\n    // Reverse and scale to 0-1 for GL depth buffer\n    // Layers are force-ordered (higher layers guaranteed to render on top of lower), then by height/depth\n    float z_layer_scale = 4096.;\n    float z_layer_range = (num_layers + 1.) * z_layer_scale;\n    float z_layer = (layer + 1.) * z_layer_scale;\n\n    vposition.z = z_layer + clamp(vposition.z, 1., z_layer_scale);\n    vposition.z = (z_layer_range - vposition.z) / z_layer_range;\n\n    gl_Position = vec4(vposition, 1.0);\n}\n',void 0!==t.exports&&(t.exports=n)},{}],10:[function(e,t){var n={};n.color={pseudoRandomGrayscale:function(e){var t=Math.max(parseInt(e.id,16)%100/100,.4);return[.7*t,.7*t,.7*t]},pseudoRandomColor:function(e){return[.7*(parseInt(e.id,16)/100%1),.7*(parseInt(e.id,16)/1e4%1),.7*(parseInt(e.id,16)/1e6%1)]},randomColor:function(){return[.7*Math.random(),.7*Math.random(),.7*Math.random()]}},n.width={pixels:function(e){return function(t,n){return("function"==typeof e?e(t,n):e)*n.units_per_pixel}},meters:function(e){return function(t,n){return("function"==typeof e?e(t,n):e)*n.units_per_meter}}},void 0!==t&&(t.exports=n)},{}],11:[function(e,t){var n={};n.lengthSq=function(e){return 2==e.length?e[0]*e[0]+e[1]*e[1]:e[0]*e[0]+e[1]*e[1]+e[2]*e[2]},n.length=function(e){return Math.sqrt(n.lengthSq(e))},n.normalize=function(e){var t;if(2==e.length)return t=e[0]*e[0]+e[1]*e[1],t=Math.sqrt(t),0!=t?[e[0]/t,e[1]/t]:[0,0];var t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2];return t=Math.sqrt(t),0!=t?[e[0]/t,e[1]/t,e[2]/t]:[0,0,0]},n.cross=function(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]},n.lineIntersection=function(e,t,n,o,r){var r=r||.01,i=e[1]-t[1],s=e[0]-t[0],a=n[1]-o[1],l=n[0]-o[0],c=e[0]*t[1]-e[1]*t[0],d=n[0]*o[1]-n[1]*o[0],u=s*a-i*l;return Math.abs(u)>r?[(c*l-s*d)/u,(c*a-i*d)/u]:null},void 0!==t&&(t.exports=n)},{}],12:[function(require,module,exports){function VectorRenderer(e,t,n,o,r){var r=r||{};this.type=e,this.tile_source=t,this.tiles={},this.num_workers=r.num_workers||1,this.layer_source=VectorRenderer.urlForPath(n),this.layers="string"==typeof n?VectorRenderer.loadLayers(n):n,this.style_source=VectorRenderer.urlForPath(o),this.styles="string"==typeof o?VectorRenderer.loadStyles(o):o,this.createWorkers(),this.zoom=null,this.center=null,this.device_pixel_ratio=window.devicePixelRatio||1,this.dirty=!0,this.initialized=!1}var Point=require("./point.js"),Geo=require("./geo.js"),Style=require("./style.js");!function(){try{VectorRenderer.library_base_url="";for(var e=document.getElementsByTagName("script"),t=0;t<e.length;t++){var n=e[t].src.indexOf("vector-map.debug.js");if(-1==n&&(n=e[t].src.indexOf("vector-map.min.js")),n>=0){VectorRenderer.library_base_url=e[t].src.substr(0,n);break}}}catch(o){}}(),VectorRenderer.tile_scale=4096,VectorRenderer.units_per_meter=[],VectorRenderer.units_per_pixel=[],function(){for(var e=0;e<=Geo.max_zoom;e++)VectorRenderer.units_per_meter[e]=VectorRenderer.tile_scale/(Geo.tile_size*Geo.meters_per_pixel[e]),VectorRenderer.units_per_pixel[e]=VectorRenderer.tile_scale/Geo.tile_size}(),VectorRenderer.create=function(e,t,n,o,r){return new VectorRenderer[e](t,n,o,r)},VectorRenderer.prototype.init=function(){"function"==typeof this._init&&this._init.apply(this,arguments);var e=this;this.workers.forEach(function(t){t.addEventListener("message",e.tileWorkerCompleted.bind(e))}),this.initialized=!0},VectorRenderer.prototype.createWorkers=function(){var e=this,t=VectorRenderer.library_base_url+"vector-map-worker.min.js",n=new XMLHttpRequest;n.onload=function(){var t=window.URL.createObjectURL(new Blob([n.response],{type:"application/javascript"}));e.workers=[];for(var o=0;o<e.num_workers;o++)e.workers.push(new Worker(t))},n.open("GET",t,!1),n.send(),this.next_worker=0},VectorRenderer.prototype.setCenter=function(e,t){this.center={lng:e,lat:t},this.dirty=!0},VectorRenderer.prototype.setZoom=function(e){this.map_last_zoom=this.zoom,this.zoom=e,this.map_zooming=!1,this.dirty=!0},VectorRenderer.prototype.startZoom=function(){this.map_last_zoom=this.zoom,this.map_zooming=!0},VectorRenderer.prototype.setBounds=function(e,t){this.bounds={sw:{lng:e.lng,lat:e.lat},ne:{lng:t.lng,lat:t.lat}};var n=200*Geo.meters_per_pixel[~~this.zoom];this.buffered_meter_bounds={sw:Geo.latLngToMeters(Point(this.bounds.sw.lng,this.bounds.sw.lat)),ne:Geo.latLngToMeters(Point(this.bounds.ne.lng,this.bounds.ne.lat))},this.buffered_meter_bounds.sw.x-=n,this.buffered_meter_bounds.sw.y-=n,this.buffered_meter_bounds.ne.x+=n,this.buffered_meter_bounds.ne.y+=n;for(var o in this.tiles)this.updateVisibilityForTile(this.tiles[o]);this.dirty=!0},VectorRenderer.prototype.updateVisibilityForTile=function(e){return e.visible=Geo.boxIntersect(e.bounds,this.buffered_meter_bounds),e.visible},VectorRenderer.prototype.resizeMap=function(){this.dirty=!0},VectorRenderer.prototype.requestRedraw=function(){this.dirty=!0},VectorRenderer.prototype.render=function(){return 0==this.dirty||0==this.initialized?!1:(this.dirty=!1,"function"==typeof this._render&&this._render.apply(this,arguments),!0)},VectorRenderer.prototype.loadTile=function(e,t,n){if(e.z>this.tile_source.max_zoom){var o=e.z-this.tile_source.max_zoom;e.x=~~(e.x/Math.pow(2,o)),e.y=~~(e.y/Math.pow(2,o)),e.display_z=e.z,e.z-=o}null==this.tile_set_loading&&(this.tile_set_loading=+new Date,console.log("tile set load START"));var r=[e.x,e.y,e.z].join("/");if(this.tiles[r])return void(n&&n(null,t));var i=this.tiles[r]={};i.key=r,i.coords=e,i.min=Geo.metersForTile(i.coords),i.max=Geo.metersForTile({x:i.coords.x+1,y:i.coords.y+1,z:i.coords.z}),i.bounds={sw:{x:i.min.x,y:i.max.y},ne:{x:i.max.x,y:i.min.y}},i.units_per_meter=VectorRenderer.units_per_meter[i.coords.z],i.units_per_pixel=VectorRenderer.units_per_pixel[i.coords.z],i.debug={},i.loading=!0,i.loaded=!1,this.updateVisibilityForTile(i),this.workers[this.next_worker].postMessage({type:"loadTile",tile:i,renderer_type:this.type,tile_source:this.tile_source,layer_source:this.layer_source,style_source:this.style_source}),i.worker=this.workers[this.next_worker],this.next_worker=(this.next_worker+1)%this.workers.length,t.setAttribute("data-tile-key",i.key),t.style.width="256px",t.style.height="256px",n&&n(null,t)},VectorRenderer.prototype.tileWorkerCompleted=function(e){if("loadTileCompleted"==e.data.type){var t=e.data.tile;if(null==this.tiles[t.key])return void console.log("discarded tile "+t.key+" in VectorRenderer.tileWorkerCompleted because previously removed");if(this.tiles[t.key]=t,"function"==typeof this._tileWorkerCompleted&&this._tileWorkerCompleted(t),delete t.layers,null!=this.tile_set_loading){var n=!0;for(var o in this.tiles)if(1==this.tiles[o].loading){n=!1;break}1==n&&(this.last_tile_set_load=+new Date-this.tile_set_loading,this.tile_set_loading=null,console.log("tile set load FINISHED in: "+this.last_tile_set_load))}this.dirty=!0,this.printDebugForTile(t)}},VectorRenderer.prototype.removeTile=function(e){console.log("tile unload for "+e);var t=this.tiles[e];null!=t&&1==t.loading&&(console.log("cancel tile load for "+e),null!=t.worker&&t.worker.postMessage({type:"removeTile",key:t.key})),delete this.tiles[e],this.dirty=!0},VectorRenderer.prototype.printDebugForTile=function(e){console.log("debug for "+e.key+": [ "+Object.keys(e.debug).map(function(t){return t+": "+e.debug[t]}).join(", ")+" ]")},VectorRenderer.urlForPath=function(e){var t=e.toLowerCase().substr(0,4);return"http"!=t&&"file"!=t&&(e=window.location.origin+window.location.pathname+e),e},VectorRenderer.loadLayers=function(url){var layers,req=new XMLHttpRequest;return req.onload=function(){eval("layers = "+req.response)},req.open("GET",url,!1),req.send(),layers},VectorRenderer.loadStyles=function(url){var styles,req=new XMLHttpRequest;return req.onload=function(){eval("styles = "+req.response)},req.open("GET",url,!1),req.send(),styles},VectorRenderer.processLayersForTile=function(e,t){for(var n={},o=0;o<e.length;o++)e[o].number=o,null!=e[o]&&(null==e[o].data?n[e[o].name]=t.layers[e[o].name]:"string"==typeof e[o].data?n[e[o].name]=t.layers[e[o].data]:"function"==typeof e[o].data&&(n[e[o].name]=e[o].data(t.layers))),n[e[o].name]=n[e[o].name]||{type:"FeatureCollection",features:[]};return t.layers=n,n},VectorRenderer.style_defaults={color:[1,0,0],width:Style.width.pixels(5),size:Style.width.pixels(5),extrude:!1,height:20,min_height:0,outline:{},render_mode:"polygons"},VectorRenderer.parseStyleForFeature=function(e,t,n){var t=t||{},o={};return"function"==typeof t.filter&&0==t.filter(e,n)?null:(o.color=t.color&&(t.color[e.properties.kind]||t.color.default)||VectorRenderer.style_defaults.color,"function"==typeof o.color&&(o.color=o.color(e,n)),o.width=t.width&&(t.width[e.properties.kind]||t.width.default)||VectorRenderer.style_defaults.width,"function"==typeof o.width&&(o.width=o.width(e,n)),o.size=t.size&&(t.size[e.properties.kind]||t.size.default)||VectorRenderer.style_defaults.size,"function"==typeof o.size&&(o.size=o.size(e,n)),o.extrude=t.extrude&&(t.extrude[e.properties.kind]||t.extrude.default)||VectorRenderer.style_defaults.extrude,"function"==typeof o.extrude&&(o.extrude=o.extrude(e,n)),o.height=e.properties&&e.properties.height||VectorRenderer.style_defaults.height,o.min_height=e.properties&&e.properties.min_height||VectorRenderer.style_defaults.min_height,o.extrude&&("number"==typeof o.extrude?o.height=o.extrude:"object"==typeof o.extrude&&o.extrude.length>=2&&(o.min_height=o.extrude[0],o.height=o.extrude[1])),o.outline={},t.outline=t.outline||{},o.outline.color=t.outline.color&&(t.outline.color[e.properties.kind]||t.outline.color.default)||VectorRenderer.style_defaults.outline.color,"function"==typeof o.outline.color&&(o.outline.color=o.outline.color(e,n)),o.outline.width=t.outline.width&&(t.outline.width[e.properties.kind]||t.outline.width.default)||VectorRenderer.style_defaults.outline.width,"function"==typeof o.outline.width&&(o.outline.width=o.outline.width(e,n)),o.outline.dash=t.outline.dash&&(t.outline.dash[e.properties.kind]||t.outline.dash.default)||VectorRenderer.style_defaults.outline.dash,"function"==typeof o.outline.dash&&(o.outline.dash=o.outline.dash(e,n)),o.render_mode=t.render_mode||VectorRenderer.style_defaults.render_mode,o)},void 0!==module&&(module.exports=VectorRenderer)},{"./geo.js":2,"./point.js":8,"./style.js":10}]},{},[7]);