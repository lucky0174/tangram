function Point(e,t){return{x:e,y:t}}function GLGeometry(e,t,r,o,n){n=n||{},this.gl=e,this.gl_program=t,this.attribs=o,this.vertex_data=r,this.buffer=this.gl.createBuffer(),this.draw_mode=n.draw_mode||this.gl.TRIANGLES,this.data_usage=n.data_usage||this.gl.STATIC_DRAW,this.vertex_stride=0;for(var i=0;i<this.attribs.length;i++){var s=this.attribs[i];switch(s.location=this.gl_program.attribute(s.name).location,s.byte_size=s.size,s.type){case this.gl.FLOAT:case this.gl.INT:case this.gl.UNSIGNED_INT:s.byte_size*=4;break;case this.gl.SHORT:case this.gl.UNSIGNED_SHORT:s.byte_size*=2}s.offset=this.vertex_stride,this.vertex_stride+=s.byte_size}this.vertex_count=this.vertex_data.byteLength/this.vertex_stride,this.vao=GL.VertexArrayObject.create(function(){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.setup()}.bind(this)),this.gl.bufferData(this.gl.ARRAY_BUFFER,this.vertex_data,this.data_usage)}function GLTriangles(e,t,r){GLGeometry.call(this,e,t,r,[{name:"position",size:3,type:e.FLOAT,normalized:!1},{name:"normal",size:3,type:e.FLOAT,normalized:!1},{name:"color",size:3,type:e.FLOAT,normalized:!1},{name:"layer",size:1,type:e.FLOAT,normalized:!1}]),this.geometry_count=this.vertex_count/3}function GLPolyPoints(e,t,r){GLGeometry.call(this,e,t,r,[{name:"position",size:3,type:e.FLOAT,normalized:!1},{name:"texcoord",size:2,type:e.FLOAT,normalized:!1},{name:"color",size:3,type:e.FLOAT,normalized:!1},{name:"layer",size:1,type:e.FLOAT,normalized:!1}]),this.geometry_count=this.vertex_count/3}function GLLines(e,t,r,o){o=o||{},GLTriangles.call(this,e,program,r),this.draw_mode=this.gl.LINES,this.line_width=o.line_width||2,this.geometry_count=this.vertex_count/2}function TileSource(e,t){var t=t||{};this.url_template=e,this.max_zoom=t.max_zoom||Geo.max_zoom}function NetworkTileSource(e,t){TileSource.apply(this,arguments);this.response_type="",this.url_hosts=null;var r=this.url_template.match(/{s:\[([^}+]+)\]}/);null!=r&&r.length>1&&(this.url_hosts=r[1].split(","),this.next_host=0)}function GeoJSONTileSource(){NetworkTileSource.apply(this,arguments)}function MapboxTileSource(){NetworkTileSource.apply(this,arguments),this.response_type="arraybuffer",this.VectorTile=require("vectortile")}function VectorRenderer(e,t,r,o,n){var n=n||{};this.type=e,this.tile_source=t,this.tiles={},this.num_workers=n.num_workers||1,this.layer_source=VectorRenderer.urlForPath(r),this.layers="string"==typeof r?VectorRenderer.loadLayers(r):r,this.style_source=VectorRenderer.urlForPath(o),this.styles="string"==typeof o?VectorRenderer.loadStyles(o):o,this.zoom=null,this.center=null,this.device_pixel_ratio=window.devicePixelRatio||1,this.workers=[];for(var i=0;i<this.num_workers;i++)this.workers.push(new Worker(VectorRenderer.library_base_url+"vector-map-worker.min.js"));this.next_worker=0,this.dirty=!0,this.initialized=!1}function CanvasRenderer(e,t,r,o){VectorRenderer.call(this,"CanvasRenderer",e,t,r,o),this.selection_info=document.createElement("div"),this.selection_info.setAttribute("class","label"),this.selection_info.style.display="none",this.cutout_context=document.createElement("canvas").getContext("2d")}function GLRenderer(e,t,r,o){var o=o||{};VectorRenderer.call(this,"GLRenderer",e,t,r,o),GLBuilders.setTileScale(VectorRenderer.tile_scale),GL.Program.defines.TILE_SCALE=VectorRenderer.tile_scale+".0",this.container=o.container,this.continuous_animation=!1}Point.copy=function(e){return null==e?null:{x:e.x,y:e.y}};var Geo={};!function(){Geo.tile_size=256,Geo.half_circumference_meters=20037508.342789244,Geo.map_origin_meters=Point(-Geo.half_circumference_meters,Geo.half_circumference_meters),Geo.min_zoom_meters_per_pixel=2*Geo.half_circumference_meters/Geo.tile_size,Geo.meters_per_pixel=[],Geo.max_zoom=20;for(var e=0;e<=Geo.max_zoom;e++)Geo.meters_per_pixel[e]=Geo.min_zoom_meters_per_pixel/Math.pow(2,e);Geo.metersForTile=function(e){return Point(e.x*Geo.tile_size*Geo.meters_per_pixel[e.z]+Geo.map_origin_meters.x,e.y*Geo.tile_size*Geo.meters_per_pixel[e.z]*-1+Geo.map_origin_meters.y)},Geo.metersToLatLng=function(e){var t=Point.copy(e);return t.x/=Geo.half_circumference_meters,t.y/=Geo.half_circumference_meters,t.y=(2*Math.atan(Math.exp(t.y*Math.PI))-Math.PI/2)/Math.PI,t.x*=180,t.y*=180,t},Geo.latLngToMeters=function(e){var t=Point.copy(e);return t.y=Math.log(Math.tan((t.y+90)*Math.PI/360))/(Math.PI/180),t.y=t.y*Geo.half_circumference_meters/180,t.x=t.x*Geo.half_circumference_meters/180,t},Geo.transformGeometry=function(e,t){return"Point"==e.type?t(e.coordinates):"LineString"==e.type||"MultiPoint"==e.type?e.coordinates.map(t):"Polygon"==e.type||"MultiLineString"==e.type?e.coordinates.map(function(e){return e.map(t)}):"MultiPolygon"==e.type?e.coordinates.map(function(e){return e.map(function(e){return e.map(t)})}):{}},Geo.boxIntersect=function(e,t){return!(t.sw.x>e.ne.x||t.ne.x<e.sw.x||t.sw.y>e.ne.y||t.ne.y<e.sw.y)},Geo.splitFeatureLines=function(e,t){var r,t=t||.001,o=t*t,n=e.geometry;if("MultiLineString"==n.type)r=n.coordinates;else{if("LineString"!=n.type)return e;r=[n.coordinates]}for(var i=[],s=0;s<r.length;s++){for(var a,l=r[s],c=[],d=null,u=0;u<l.length;u++){var h=l[u];if(a=!0,null!=d){var p=(h[0]-d[0])*(h[0]-d[0])+(h[1]-d[1])*(h[1]-d[1]);p>o&&(a=!1)}0==a&&(i.push(c),c=[]),c.push(h),d=h}i.push(c),c=[]}return 1==i.length?(n.type="LineString",n.coordinates=i[0]):(n.type="MultiLineString",n.coordinates=i),e}}();var GL={};GL.getContext=function(e){var e=e,t=!1;if(null==e&&(e=document.createElement("canvas"),e.style.position="absolute",e.style.top=0,e.style.left=0,e.style.zIndex=-1,document.body.appendChild(e),t=!0),gl=e.getContext("experimental-webgl",{}),!gl)throw alert("Couldn't create WebGL context. Your browser probably doesn't support WebGL or it's turned off?"),"Couldn't create WebGL context";return GL.resizeCanvas(gl,window.innerWidth,window.innerHeight),1==t&&window.addEventListener("resize",function(){GL.resizeCanvas(gl,window.innerWidth,window.innerHeight)}),GL.VertexArrayObject.init(gl),gl},GL.resizeCanvas=function(e,t,r){var o=window.devicePixelRatio||1;e.canvas.style.width=t+"px",e.canvas.style.height=r+"px",e.canvas.width=Math.round(e.canvas.style.width*o),e.canvas.height=Math.round(e.canvas.style.width*o),e.viewport(0,0,e.canvas.width,e.canvas.height)},GL.createProgramFromElements=function(e,t,r){var o=document.getElementById(t).textContent,n=document.getElementById(r).textContent,i=e.createProgram();return GL.updateProgram(e,i,o,n)},GL.createProgramFromURLs=function(e,t,r){var o=e.createProgram();return GL.updateProgramFromURLs(e,o,t,r)},GL.updateProgramFromURLs=function(e,t,r,o){var n,i,s=new XMLHttpRequest;return s.onload=function(){n=s.response},s.open("GET",r+"?"+ +new Date,!1),s.send(),s.onload=function(){i=s.response},s.open("GET",o+"?"+ +new Date,!1),s.send(),GL.updateProgram(e,t,n,i)},GL.updateProgram=function(e,t,r,o){try{var n=GL.createShader(e,r,e.VERTEX_SHADER),i=GL.createShader(e,"#ifdef GL_ES\nprecision highp float;\n#endif\n\n"+o,e.FRAGMENT_SHADER)}catch(s){return alert(s),t}if(e.useProgram(null),null!=t)for(var a=e.getAttachedShaders(t),l=0;l<a.length;l++)e.detachShader(t,a[l]);else t=e.createProgram();if(null==n||null==i)return t;if(e.attachShader(t,n),e.attachShader(t,i),e.deleteShader(n),e.deleteShader(i),e.linkProgram(t),!e.getProgramParameter(t,e.LINK_STATUS)){var c="WebGL program error:\nVALIDATE_STATUS: "+e.getProgramParameter(t,e.VALIDATE_STATUS)+"\nERROR: "+e.getError()+"\n\n--- Vertex Shader ---\n"+r+"\n\n--- Fragment Shader ---\n"+o;throw c}return t},GL.createShader=function(e,t,r){var o=e.createShader(r);if(e.shaderSource(o,t),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS)){var n="WebGL shader error:\n"+(r==e.VERTEX_SHADER?"VERTEX":"FRAGMENT")+" SHADER:\n"+e.getShaderInfoLog(o);throw n}return o},GL.Program=function(e,t,r,o){o=o||{},this.gl=e,this.program=null,this.defines=o.defines||{},this.uniforms={},this.attribs={},this.vertex_shader_source=t,this.fragment_shader_source=r,this.compile()},GL.Program.createProgramFromURLs=function(e,t,r,o){var n=Object.create(GL.Program.prototype);return n.vertex_shader_url=t,n.fragment_shader_url=r,n.updateVertexShaderSource=function(){var e,t=new XMLHttpRequest;return t.onload=function(){e=t.response},t.open("GET",this.vertex_shader_url+"?"+ +new Date,!1),t.send(),e},n.updateFragmentShaderSource=function(){var e,t=new XMLHttpRequest;return t.onload=function(){e=t.response},t.open("GET",this.fragment_shader_url+"?"+ +new Date,!1),t.send(),e},GL.Program.call(n,e,null,null,o),n},GL.Program.defines={},GL.Program.prototype.compile=function(){"function"==typeof this.updateVertexShaderSource&&(this.vertex_shader_source=this.updateVertexShaderSource()),"function"==typeof this.updateFragmentShaderSource&&(this.fragment_shader_source=this.updateFragmentShaderSource());var e={};for(var t in GL.Program.defines)e[t]=GL.Program.defines[t];for(var t in this.defines)e[t]=this.defines[t];var r="";for(var t in e)0!=e[t]&&(r+="boolean"==typeof e[t]&&1==e[t]?"#define "+t+"\n":"#define "+t+" "+e[t]+"\n");this.processed_vertex_shader_source=r+this.vertex_shader_source,this.processed_fragment_shader_source=r+this.fragment_shader_source,this.program=GL.updateProgram(this.gl,this.program,this.processed_vertex_shader_source,this.processed_fragment_shader_source),this.gl.useProgram(this.program),this.refreshUniforms(),this.refreshAttributes()},GL.Program.prototype.uniform=function(e,t){var r=this.uniforms[t]=this.uniforms[t]||{};r.name=t,r.location=r.location||this.gl.getUniformLocation(this.program,t),r.method="uniform"+e,r.values=Array.prototype.slice.call(arguments,2),this.updateUniform(t)},GL.Program.prototype.updateUniform=function(e){var t=this.uniforms[e];null!=t&&null!=t.location&&this.gl[t.method].apply(this.gl,[t.location].concat(t.values))},GL.Program.prototype.refreshUniforms=function(){for(var e in this.uniforms)this.uniforms[e].location=this.gl.getUniformLocation(this.program,e),this.updateUniform(e)},GL.Program.prototype.refreshAttributes=function(){this.attribs={}},GL.Program.prototype.attribute=function(e){var t=this.attribs[e]=this.attribs[e]||{};return null!=t.location?t:(t.name=e,t.location=this.gl.getAttribLocation(this.program,e),t)};try{GL.tesselator=function(){function e(e,t){t.push([e[0],e[1]])}function t(e){return e}function r(){}var o=new libtess.GluTesselator;return o.gluTessCallback(libtess.gluEnum.GLU_TESS_VERTEX_DATA,e),o.gluTessCallback(libtess.gluEnum.GLU_TESS_COMBINE,t),o.gluTessCallback(libtess.gluEnum.GLU_TESS_EDGE_FLAG,r),o.gluTessNormal(0,0,1),o}(),GL.triangulatePolygon=function(e){var t=[];GL.tesselator.gluTessBeginPolygon(t);for(var r=0;r<e.length;r++){GL.tesselator.gluTessBeginContour();for(var o=e[r],n=0;n<o.length;n++){var i=[o[n][0],o[n][1],0];GL.tesselator.gluTessVertex(i,i)}GL.tesselator.gluTessEndContour()}return GL.tesselator.gluTessEndPolygon(),t}}catch(e){}GL.addVertices=function(e,t,r){if(null!=e&&e.length>0)if("object"==typeof e[0])for(var o=0;o<e.length;o++)t.push.apply(t,e[o]),r&&t.push.apply(t,r);else t.push.apply(t,e),r&&t.push.apply(t,r);return t},GL.VertexArrayObject={},GL.VertexArrayObject.disabled=!1,GL.VertexArrayObject.bound_vao=null,GL.VertexArrayObject.init=function(e){null==GL.VertexArrayObject.ext&&(1!=GL.VertexArrayObject.disabled&&(GL.VertexArrayObject.ext=e.getExtension("OES_vertex_array_object")),console.log(null!=GL.VertexArrayObject.ext?"Vertex Array Object extension available":1!=GL.VertexArrayObject.disabled?"Vertex Array Object extension NOT available":"Vertex Array Object extension force disabled"))},GL.VertexArrayObject.create=function(e,t){var r={};r.setup=e,r.teardown=t;var o=GL.VertexArrayObject.ext;return null!=o?(r._vao=o.createVertexArrayOES(),o.bindVertexArrayOES(r._vao),r.setup(),o.bindVertexArrayOES(null),"function"==typeof r.teardown&&r.teardown()):r.setup(),r},GL.VertexArrayObject.bind=function(e){var t=GL.VertexArrayObject.ext;null!=e?null!=t&&null!=e._vao?(t.bindVertexArrayOES(e._vao),GL.VertexArrayObject.bound_vao=e):e.setup():(null!=t?t.bindVertexArrayOES(null):null!=GL.VertexArrayObject.bound_vao&&"function"==typeof GL.VertexArrayObject.bound_vao.teardown&&GL.VertexArrayObject.bound_vao.teardown(),GL.VertexArrayObject.bound_vao=null)},GLGeometry.prototype.setup=function(){for(var e=0;e<this.attribs.length;e++){var t=this.attribs[e];this.gl.enableVertexAttribArray(t.location),this.gl.vertexAttribPointer(t.location,t.size,t.type,t.normalized,this.vertex_stride,t.offset)}},GLGeometry.prototype.render=function(){this.gl.useProgram(this.gl_program.program),GL.VertexArrayObject.bind(this.vao),"function"==typeof this._render&&this._render(),this.gl.drawArrays(this.draw_mode,0,this.vertex_count),GL.VertexArrayObject.bind(null)},GLGeometry.prototype.destroy=function(){console.log("GLGeometry.destroy: delete buffer of size "+this.vertex_data.byteLength),this.gl.deleteBuffer(this.buffer),delete this.vertex_data},GLTriangles.prototype=Object.create(GLGeometry.prototype),GLPolyPoints.prototype=Object.create(GLGeometry.prototype),GLLines.prototype=Object.create(GLTriangles.prototype),GLLines.prototype._render=function(){this.gl.lineWidth(this.line_width),"function"==typeof GLTriangles.prototype._render&&GLTriangles.prototype._render.call(this)};var Vector={};Vector.lengthSq=function(e){return 2==e.length?e[0]*e[0]+e[1]*e[1]:e[0]*e[0]+e[1]*e[1]+e[2]*e[2]},Vector.length=function(e){return Math.sqrt(Vector.lengthSq(e))},Vector.normalize=function(e){var t;if(2==e.length)return t=e[0]*e[0]+e[1]*e[1],t=Math.sqrt(t),0!=t?[e[0]/t,e[1]/t]:[0,0];var t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2];return t=Math.sqrt(t),0!=t?[e[0]/t,e[1]/t,e[2]/t]:[0,0,0]},Vector.cross=function(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]},Vector.lineIntersection=function(e,t,r,o,n){var n=n||.01,i=e[1]-t[1],s=e[0]-t[0],a=r[1]-o[1],l=r[0]-o[0],c=e[0]*t[1]-e[1]*t[0],d=r[0]*o[1]-r[1]*o[0],u=s*a-i*l;return Math.abs(u)>n?[(c*l-s*d)/u,(c*a-i*d)/u]:null},TileSource.create=function(e,t,r){return new TileSource[e](t,r)},TileSource.projectTile=function(e){var t=+new Date;for(var r in e.layers)for(var o=e.layers[r].features.length,n=0;o>n;n++){var i=e.layers[r].features[n];i.geometry.coordinates=Geo.transformGeometry(i.geometry,function(e){var t=Geo.latLngToMeters(Point(e[0],e[1]));return[t.x,t.y]})}return e.debug.projection=+new Date-t,e},TileSource.scaleTile=function(e){for(var t in e.layers)for(var r=e.layers[t].features.length,o=0;r>o;o++){var n=e.layers[t].features[o];n.geometry.coordinates=Geo.transformGeometry(n.geometry,function(t){return t[0]=(t[0]-e.min.x)*VectorRenderer.units_per_meter[e.coords.z],t[1]=(t[1]-e.min.y)*VectorRenderer.units_per_meter[e.coords.z],t})}return e},NetworkTileSource.prototype=Object.create(TileSource.prototype),NetworkTileSource.prototype.loadTile=function(e,t,r){var o=this,n=new XMLHttpRequest,i=this.url_template.replace("{x}",e.coords.x).replace("{y}",e.coords.y).replace("{z}",e.coords.z);null!=this.url_hosts&&(i=i.replace(/{s:\[([^}+]+)\]}/,this.url_hosts[this.next_host]),this.next_host=(this.next_host+1)%this.url_hosts.length),e.url=i,e.xhr=n,e.debug.network=+new Date,n.onload=function(){0!=e.loading&&(e.debug.response_size=e.xhr.response.length||e.xhr.response.byteLength,e.debug.network=+new Date-e.debug.network,o._loadTile&&(e.debug.parsing=+new Date,o._loadTile(e,t),e.debug.parsing=+new Date-e.debug.parsing),e.xhr=null,e.loading=!1,e.loaded=!0,r&&r(e))},n.open("GET",i,!0),n.responseType=this.response_type,n.send()},TileSource.GeoJSONTileSource=GeoJSONTileSource,GeoJSONTileSource.prototype=Object.create(NetworkTileSource.prototype),GeoJSONTileSource.prototype._loadTile=function(e){e.layers=JSON.parse(e.xhr.response),TileSource.projectTile(e),TileSource.scaleTile(e)},TileSource.MapboxTileSource=MapboxTileSource,MapboxTileSource.prototype=Object.create(NetworkTileSource.prototype),MapboxTileSource.prototype._loadTile=function(e){e.data=new this.VectorTile(new Uint8Array(e.xhr.response)),e.layers=e.data.toGeoJSON(),delete e.data;for(var t in e.layers)for(var r=e.layers[t].features.length,o=0;r>o;o++){var n=e.layers[t].features[o];n.properties.id=n.properties.osm_id,n.geometry.coordinates=Geo.transformGeometry(n.geometry,function(e){return e[1]=-e[1],e})}},function(){try{VectorRenderer.library_base_url="";for(var e=document.querySelectorAll('script[src*=".js"]'),t=0;t<e.length;t++){var r=e[t].src.match(/(.*)vector-map.(debug|min).js/);if(null!=r&&r.length>1){VectorRenderer.library_base_url=r[1];break}}}catch(o){}}(),VectorRenderer.tile_scale=4096,VectorRenderer.units_per_meter=[],VectorRenderer.units_per_pixel=[],function(){for(var e=0;e<=Geo.max_zoom;e++)VectorRenderer.units_per_meter[e]=VectorRenderer.tile_scale/(Geo.tile_size*Geo.meters_per_pixel[e]),VectorRenderer.units_per_pixel[e]=VectorRenderer.tile_scale/Geo.tile_size}(),VectorRenderer.create=function(e,t,r,o,n){return new VectorRenderer[e](t,r,o,n)},VectorRenderer.prototype.init=function(){"function"==typeof this._init&&this._init.apply(this,arguments);var e=this;this.workers.forEach(function(t){t.addEventListener("message",e.tileWorkerCompleted.bind(e))}),this.initialized=!0},VectorRenderer.prototype.setCenter=function(e,t){this.center={lng:e,lat:t},this.dirty=!0},VectorRenderer.prototype.setZoom=function(e){this.map_last_zoom=this.zoom,this.zoom=e,this.map_zooming=!1,this.dirty=!0},VectorRenderer.prototype.startZoom=function(){this.map_last_zoom=this.zoom,this.map_zooming=!0},VectorRenderer.prototype.setBounds=function(e,t){this.bounds={sw:{lng:e.lng,lat:e.lat},ne:{lng:t.lng,lat:t.lat}};var r=200*Geo.meters_per_pixel[~~this.zoom];this.buffered_meter_bounds={sw:Geo.latLngToMeters(Point(this.bounds.sw.lng,this.bounds.sw.lat)),ne:Geo.latLngToMeters(Point(this.bounds.ne.lng,this.bounds.ne.lat))},this.buffered_meter_bounds.sw.x-=r,this.buffered_meter_bounds.sw.y-=r,this.buffered_meter_bounds.ne.x+=r,this.buffered_meter_bounds.ne.y+=r;for(var o in this.tiles)this.updateVisibilityForTile(this.tiles[o]);this.dirty=!0},VectorRenderer.prototype.updateVisibilityForTile=function(e){return e.visible=Geo.boxIntersect(e.bounds,this.buffered_meter_bounds),e.visible},VectorRenderer.prototype.resizeMap=function(){this.dirty=!0},VectorRenderer.prototype.requestRedraw=function(){this.dirty=!0},VectorRenderer.prototype.render=function(){return 0==this.dirty||0==this.initialized?!1:(this.dirty=!1,"function"==typeof this._render&&this._render.apply(this,arguments),!0)},VectorRenderer.prototype.loadTile=function(e,t,r){if(e.z>this.tile_source.max_zoom){var o=e.z-this.tile_source.max_zoom;e.x=~~(e.x/Math.pow(2,o)),e.y=~~(e.y/Math.pow(2,o)),e.display_z=e.z,e.z-=o}null==this.tile_set_loading&&(this.tile_set_loading=+new Date,console.log("tile set load START"));var n=[e.x,e.y,e.z].join("/");if(this.tiles[n])return void(r&&r(null,t));var i=this.tiles[n]={};i.key=n,i.coords=e,i.min=Geo.metersForTile(i.coords),i.max=Geo.metersForTile({x:i.coords.x+1,y:i.coords.y+1,z:i.coords.z}),i.bounds={sw:{x:i.min.x,y:i.max.y},ne:{x:i.max.x,y:i.min.y}},i.debug={},i.loading=!0,i.loaded=!1,this.updateVisibilityForTile(i),this.workers[this.next_worker].postMessage({type:"loadTile",tile:i,renderer_type:this.type,tile_source:this.tile_source,layer_source:this.layer_source,style_source:this.style_source}),i.worker=this.workers[this.next_worker],this.next_worker=(this.next_worker+1)%this.workers.length,t.setAttribute("data-tile-key",i.key),t.style.width="256px",t.style.height="256px",r&&r(null,t)},VectorRenderer.prototype.tileWorkerCompleted=function(e){if("loadTileCompleted"==e.data.type){var t=e.data.tile;if(null==this.tiles[t.key])return void console.log("discarded tile "+t.key+" in VectorRenderer.tileWorkerCompleted because previously removed");if(this.tiles[t.key]=t,"function"==typeof this._tileWorkerCompleted&&this._tileWorkerCompleted(t),delete t.layers,null!=this.tile_set_loading){var r=!0;for(var o in this.tiles)if(1==this.tiles[o].loading){r=!1;break}1==r&&(this.last_tile_set_load=+new Date-this.tile_set_loading,this.tile_set_loading=null,console.log("tile set load FINISHED in: "+this.last_tile_set_load))}this.dirty=!0,this.printDebugForTile(t)}},VectorRenderer.prototype.removeTile=function(e){console.log("tile unload for "+e);var t=this.tiles[e];null!=t&&1==t.loading&&(console.log("cancel tile load for "+e),null!=t.worker&&t.worker.postMessage({type:"removeTile",key:t.key})),delete this.tiles[e],this.dirty=!0},VectorRenderer.prototype.printDebugForTile=function(e){console.log("debug for "+e.key+": [ "+Object.keys(e.debug).map(function(t){return t+": "+e.debug[t]}).join(", ")+" ]")},VectorRenderer.urlForPath=function(e){var t=e.toLowerCase().substr(0,4);return("http"!=t||"file"!=t)&&(e=window.location.origin+window.location.pathname+e),e},VectorRenderer.loadLayers=function(url){var layers,req=new XMLHttpRequest;return req.onload=function(){eval("layers = "+req.response)},req.open("GET",url,!1),req.send(),layers},VectorRenderer.loadStyles=function(url){var styles,req=new XMLHttpRequest;return req.onload=function(){eval("styles = "+req.response)},req.open("GET",url,!1),req.send(),styles},VectorRenderer.processLayersForTile=function(e,t){for(var r={},o=0;o<e.length;o++)e[o].number=o,null!=e[o]&&(null==e[o].data?r[e[o].name]=t.layers[e[o].name]:"string"==typeof e[o].data?r[e[o].name]=t.layers[e[o].data]:"function"==typeof e[o].data&&(r[e[o].name]=e[o].data(t.layers))),r[e[o].name]=r[e[o].name]||{type:"FeatureCollection",features:[]};return t.layers=r,r};var Style={};Style.color={pseudoRandomGrayscale:function(e){var t=Math.max(parseInt(e.id,16)%100/100,.4);return[.7*t,.7*t,.7*t]},pseudoRandomColor:function(e){return[.7*(parseInt(e.id,16)/100%1),.7*(parseInt(e.id,16)/1e4%1),.7*(parseInt(e.id,16)/1e6%1)]},randomColor:function(){return[.7*Math.random(),.7*Math.random(),.7*Math.random()]}},Style.width={pixels:function(e){return function(t,r){return("function"==typeof e?e(t,r):e)*VectorRenderer.units_per_pixel[r.coords.z]}},meters:function(e){return function(t,r){return("function"==typeof e?e(t,r):e)*VectorRenderer.units_per_meter[r.coords.z]}}},VectorRenderer.style_defaults={color:[1,0,0],width:Style.width.pixels(5),size:Style.width.pixels(5),extrude:!1,height:20,min_height:0,outline:{},render_mode:"polygons"},VectorRenderer.parseStyleForFeature=function(e,t,r){var t=t||{},o={};return o.color=t.color&&(t.color[e.properties.kind]||t.color.default)||VectorRenderer.style_defaults.color,"function"==typeof o.color&&(o.color=o.color(e,r)),o.width=t.width&&(t.width[e.properties.kind]||t.width.default)||VectorRenderer.style_defaults.width,"function"==typeof o.width&&(o.width=o.width(e,r)),o.size=t.size&&(t.size[e.properties.kind]||t.size.default)||VectorRenderer.style_defaults.size,"function"==typeof o.size&&(o.size=o.size(e,r)),o.extrude=t.extrude&&(t.extrude[e.properties.kind]||t.extrude.default)||VectorRenderer.style_defaults.extrude,"function"==typeof o.extrude&&(o.extrude=o.extrude(e,r)),o.height=e.properties&&e.properties.height||VectorRenderer.style_defaults.height,o.min_height=e.properties&&e.properties.min_height||VectorRenderer.style_defaults.min_height,o.extrude&&("number"==typeof o.extrude?o.height=o.extrude:"object"==typeof o.extrude&&o.extrude.length>=2&&(o.min_height=o.extrude[0],o.height=o.extrude[1])),o.outline={},t.outline=t.outline||{},o.outline.color=t.outline.color&&(t.outline.color[e.properties.kind]||t.outline.color.default)||VectorRenderer.style_defaults.outline.color,"function"==typeof o.outline.color&&(o.outline.color=o.outline.color(e,r)),o.outline.width=t.outline.width&&(t.outline.width[e.properties.kind]||t.outline.width.default)||VectorRenderer.style_defaults.outline.width,"function"==typeof o.outline.width&&(o.outline.width=o.outline.width(e,r)),o.outline.dash=t.outline.dash&&(t.outline.dash[e.properties.kind]||t.outline.dash.default)||VectorRenderer.style_defaults.outline.dash,"function"==typeof o.outline.dash&&(o.outline.dash=o.outline.dash(e,r)),o.render_mode=t.render_mode||VectorRenderer.style_defaults.render_mode,o},VectorRenderer.CanvasRenderer=CanvasRenderer,CanvasRenderer.prototype=Object.create(VectorRenderer.prototype),CanvasRenderer.prototype._tileWorkerCompleted=function(e){var t=document.createElement("canvas"),r=t.getContext("2d");t.style.width=Geo.tile_size+"px",t.style.width=Geo.tile_size+"px",t.width=Math.round(Geo.tile_size*this.device_pixel_ratio),t.height=Math.round(Geo.tile_size*this.device_pixel_ratio),t.style.background=this.colorToString(this.styles.default),this.renderTile(e,r);var o=document.querySelector("div[data-tile-key='"+e.key+"']");o.appendChild(t)},CanvasRenderer.prototype.scaleGeometryToPixels=function(e){var t=this;return Geo.transformGeometry(e,function(e){return Point(e[0]*Geo.tile_size*t.device_pixel_ratio/VectorRenderer.tile_scale,e[1]*Geo.tile_size*t.device_pixel_ratio/VectorRenderer.tile_scale*-1)})},CanvasRenderer.prototype.renderLine=function(e,t,r){var o=e,n=t.color,i=t.width,s=t.dash,a=r;a.beginPath(),a.strokeStyle=this.colorToString(n),a.lineCap="round",a.lineWidth=i,a.setLineDash&&a.setLineDash(s?s.map(function(e){return e*i}):[]);for(var l=0;l<o.length-1;l++){var c=[o[l].x,o[l].y,o[l+1].x,o[l+1].y];a.moveTo(c[0],c[1]),a.lineTo(c[2],c[3])}a.closePath(),a.stroke()},CanvasRenderer.prototype.renderPolygon=function(e,t,r){var o=e,n=t.color,i=(t.width,t.outline&&t.outline.color),s=t.outline&&t.outline.width,a=t.outline&&t.outline.dash,l=r;l.beginPath(),l.fillStyle=this.colorToString(n),l.moveTo(o[0].x,o[0].y);for(var c=1;c<o.length;c++)l.lineTo(o[c].x,o[c].y);l.closePath(),l.fill(),i&&s&&(l.strokeStyle=this.colorToString(i),l.lineCap="round",l.lineWidth=s,l.setLineDash&&l.setLineDash(a?a.map(function(e){return e*s}):[]),l.stroke())},CanvasRenderer.prototype.renderPoint=function(e,t,r){var o=t.color,n=t.size,i=t.outline&&t.outline.color,s=t.outline&&t.outline.width,a=t.outline&&t.outline.dash,l=r;l.fillStyle=this.colorToString(o),l.beginPath(),l.arc(e.x,e.y,n,0,2*Math.PI),l.closePath(),l.fill(),i&&s&&(l.strokeStyle=this.colorToString(i),l.lineWidth=s,l.setLineDash&&l.setLineDash(a?a.map(function(e){return e*s}):[]),l.stroke())},CanvasRenderer.prototype.renderFeature=function(e,t,r){var o,n,i,s=e.geometry;if("LineString"==s.type)this.renderLine(s.pixels,t,r);else if("MultiLineString"==s.type)for(o=0;o<s.pixels.length;o++)this.renderLine(s.pixels[o],t,r);else if("Polygon"==s.type||"MultiPolygon"==s.type)for(i="Polygon"==s.type?[s.pixels]:s.pixels,o=0;o<i.length;o++)if(i[o].length>1){for((this.cutout_context.canvas.width!=r.canvas.width||this.cutout_context.canvas.height!=r.canvas.height)&&(this.cutout_context.canvas.width=r.canvas.width,this.cutout_context.canvas.height=r.canvas.height),this.cutout_context.clearRect(0,0,this.cutout_context.canvas.width,this.cutout_context.canvas.height),this.cutout_context.globalCompositeOperation="source-over",this.renderPolygon(i[o][0],t,this.cutout_context),this.cutout_context.globalCompositeOperation="destination-out",n=1;n<i[o].length;n++)this.renderPolygon(i[o][n],t,this.cutout_context);if(r.drawImage(this.cutout_context.canvas,0,0),t.outline&&t.outline.color)for(n=1;n<i[o].length;n++)this.renderLine(i[o][n],t.outline,r)}else this.renderPolygon(i[o][0],t,r);else if("Point"==s.type)this.renderPoint(s.pixels,t,r);else if("MultiPoint"==s.type)for(o=0;o<s.pixels.length;o++)this.renderPoint(s.pixels[o],t,r)},CanvasRenderer.prototype.renderTile=function(e,t){var r,o=this,n={colors:{}},i=document.createElement("canvas");i.style.width=Geo.tile_size+"px",i.style.width=Geo.tile_size+"px",i.width=Math.round(Geo.tile_size*this.device_pixel_ratio),i.height=Math.round(Geo.tile_size*this.device_pixel_ratio);var s,a=i.getContext("2d"),l=0;for(var c in o.layers){var d=o.layers[c];e.layers[d.name].features.forEach(function(i){i.geometry.pixels=this.scaleGeometryToPixels(i.geometry,o.tile_min,o.tile_max),r=VectorRenderer.parseStyleForFeature(i,this.styles[d.name],e),0!=d.visible&&this.renderFeature(i,r,t),1==d.selection&&null!=i.properties.name&&""!=i.properties.name?(s=this.generateColor(n.colors),s.properties=i.properties,l++,this.renderFeature(i,{color:s.color,width:r.width,size:r.size},a)):this.renderFeature(i,{color:[0,0,0],width:r.width,size:r.size},a)},this)}var u=this.selection_info;l>0?(this.tiles[e.key].selection=n,n.pixels=new Uint32Array(a.getImageData(0,0,i.width,i.height).data.buffer),t.canvas.onmousemove=function(e){var r={x:e.offsetX,y:e.offsetY},i=r.y*o.device_pixel_ratio*Geo.tile_size*o.device_pixel_ratio+r.x*o.device_pixel_ratio,s=n.pixels[i],a=n.colors[s];null!=a?(t.canvas.style.cursor="crosshair",u.style.left=r.x+5+"px",u.style.top=r.y+5+"px",u.innerHTML='<span class="labelInner">'+a.properties.name+"</span>",u.style.display="block",t.canvas.parentNode.appendChild(u)):(t.canvas.style.cursor=null,u.style.display="none",u.parentNode==t.canvas.parentNode&&t.canvas.parentNode.removeChild(u))}):t.canvas.onmousemove=function(){t.canvas.style.cursor=null,u.style.display="none",u.parentNode==t.canvas.parentNode&&t.canvas.parentNode.removeChild(u)}},CanvasRenderer.prototype.colorToString=function(e){return"rgb("+e.map(function(e){return~~(256*e)}).join(",")+")"},CanvasRenderer.prototype.generateColor=function(e){var t,r,o,n,i,s,a;for(e=e||{};;)if(t=Math.random(),r=Math.random(),o=Math.random(),n=~~(256*t),i=~~(256*r),s=~~(256*o),a=n+(i<<8)+(s<<16)+(255<<24)>>>0,void 0===e[a]){e[a]={color:[t,r,o]};break}return e[a]},VectorRenderer.GLRenderer=GLRenderer,GLRenderer.prototype=Object.create(VectorRenderer.prototype),GLRenderer.debug=!1,GLRenderer.prototype._init=function(){this.container=this.container||document.body,this.canvas=document.createElement("canvas"),this.canvas.style.position="absolute",this.canvas.style.top=0,this.canvas.style.left=0,this.canvas.style.zIndex=-1,this.container.appendChild(this.canvas),this.gl=GL.getContext(this.canvas);var e=this;this.render_modes={polygons:{gl_program:new GL.Program(this.gl,GLRenderer.vertex_shader_source,GLRenderer.fragment_shader_source),makeGLGeometry:function(t){return new GLTriangles(e.gl,this.gl_program,t)}},polygons_noise:{gl_program:new GL.Program(this.gl,GLRenderer.vertex_shader_source,GLRenderer.fragment_shader_source,{defines:{EFFECT_NOISE_TEXTURE:!0,EFFECT_NOISE_ANIMATABLE:!0}}),makeGLGeometry:function(t){return new GLTriangles(e.gl,this.gl_program,t)}},points:{gl_program:new GL.Program.createProgramFromURLs(this.gl,VectorRenderer.library_base_url+"../shaders/point_vertex.glsl",VectorRenderer.library_base_url+"../shaders/point_fragment.glsl",{defines:{EFFECT_SCREEN_COLOR:!0}}),makeGLGeometry:function(t){return new GLPolyPoints(e.gl,this.gl_program,t)}}},this.resizeMap(this.container.clientWidth,this.container.clientHeight),this.start_time=+new Date,this.last_render_count=null,this.initInputHandlers()},GLRenderer.calculateZ=function(){var e=0;return e},GLRenderer.addTile=function(e,t,r){var o,n,i,s,a,l={};e.debug.features=0;for(var c=0;c<t.length;c++)if(o=t[c],null!=r[o.name]&&null!=e.layers[o.name])for(var d=e.layers[o.name].features.length,u=d-1;u>=0;u--){i=e.layers[o.name].features[u],n=VectorRenderer.parseStyleForFeature(i,r[o.name],e),s=GLRenderer.calculateZ(o,e),a=n.render_mode,null==l[a]&&(l[a]=[]);var h=[n.color[0],n.color[1],n.color[2],c];if(n.outline.color)var p=[n.outline.color[0],n.outline.color[1],n.outline.color[2],c-.5];var g=null,y=null,f=null;if("Polygon"==i.geometry.type?f=[i.geometry.coordinates]:"MultiPolygon"==i.geometry.type?f=i.geometry.coordinates:"LineString"==i.geometry.type?y=[i.geometry.coordinates]:"MultiLineString"==i.geometry.type?y=i.geometry.coordinates:"Point"==i.geometry.type?g=[i.geometry.coordinates]:"MultiPoint"==i.geometry.type&&(g=i.geometry.coordinates),null!=f&&(n.extrude&&n.height?GLBuilders.buildExtrudedPolygons(f,s,n.height,n.min_height,l[a],{vertex_constants:h}):GLBuilders.buildPolygons(f,s,l[a],{vertex_constants:h}),n.outline.color&&n.outline.width))for(var m=0;m<f.length;m++)GLBuilders.buildPolylines(f[m],GLRenderer.calculateZ(o,e,-.5),n.outline.width,l[a],{closed_polygon:!0,remove_tile_edges:!0,vertex_constants:p});if(null!=y&&(GLBuilders.buildPolylines(y,s,n.width,l[a],{vertex_constants:h}),n.outline.color&&n.outline.width&&GLBuilders.buildPolylines(y,GLRenderer.calculateZ(o,e,-.5),n.width+2*n.outline.width,l[a],{vertex_constants:p})),null!=g){var v=[s+1,0,0,1].concat(h);
GLBuilders.buildQuads(g,2*n.size,2*n.size,function(e){var t=e.positions;if("points"==a){v=h;for(var r in e.positions)t[r]=e.positions[r].concat(s+1,e.texcoords[r])}GL.addVertices(t,l[a],v)},{texcoords:"points"==a})}e.debug.features++}e.vertex_data={};for(var _ in l)e.vertex_data[_]=new Float32Array(l[_]);return e},GLRenderer.prototype._tileWorkerCompleted=function(e){var t=e.vertex_data;e.gl_geometry={};for(var r in t)e.gl_geometry[r]=this.render_modes[r].makeGLGeometry(t[r]);e.debug.geometries=0,e.debug.buffer_size=0;for(var o in e.gl_geometry)e.debug.geometries+=e.gl_geometry[o].geometry_count,e.debug.buffer_size+=e.gl_geometry[o].vertex_data.byteLength;e.debug.geom_ratio=(e.debug.geometries/e.debug.features).toFixed(1),delete e.vertex_data},GLRenderer.prototype.removeTile=function(e){if(1!=this.map_zooming){var t=this.tiles[e];if(null!=t&&null!=t.gl_geometry){for(var r in t.gl_geometry)t.gl_geometry[r].destroy();t.gl_geometry=null}VectorRenderer.prototype.removeTile.apply(this,arguments)}},GLRenderer.prototype.preserve_tiles_within_zoom=2,GLRenderer.prototype.setZoom=function(e){console.log("renderer.map_last_zoom: "+this.map_last_zoom),this.map_zooming=!1,this.zoom=e;var t=this.zoom,r=this.zoom;Math.abs(this.zoom-this.map_last_zoom)<=this.preserve_tiles_within_zoom&&(this.zoom>this.map_last_zoom?t=this.zoom-this.preserve_tiles_within_zoom:r=this.zoom+this.preserve_tiles_within_zoom),this.removeTilesOutsideZoomRange(t,r),this.map_last_zoom=this.zoom,this.dirty=!0},GLRenderer.prototype.removeTilesOutsideZoomRange=function(e,t){e=Math.min(e,this.tile_source.max_zoom||e),t=Math.min(t,this.tile_source.max_zoom||t),console.log("removeTilesOutsideZoomRange ["+e+", "+t+"])");var r=[];for(var o in this.tiles){var n=this.tiles[o];(n.coords.z<e||n.coords.z>t)&&r.push(o)}for(var i=0;i<r.length;i++){var s=r[i];console.log("removed "+s+" (outside range ["+e+", "+t+"])"),this.removeTile(s)}},GLRenderer.prototype.resizeMap=function(e,t){VectorRenderer.prototype.resizeMap.apply(this,arguments),this.css_size={width:e,height:t},this.device_size={width:Math.round(this.css_size.width*this.device_pixel_ratio),height:Math.round(this.css_size.height*this.device_pixel_ratio)},this.canvas.style.width=this.css_size.width+"px",this.canvas.style.height=this.css_size.height+"px",this.canvas.width=this.device_size.width,this.canvas.height=this.device_size.height,this.gl.viewport(0,0,this.canvas.width,this.canvas.height)},GLRenderer.prototype._render=function(){var e=this.gl;this.input(),e.clearColor(0,0,0,1),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),e.enable(e.DEPTH_TEST),e.depthFunc(e.LESS),e.enable(e.CULL_FACE),e.cullFace(e.BACK);var t=0;for(var r in this.render_modes){var o=this.render_modes[r].gl_program;e.useProgram(o.program),o.uniform("2f","resolution",this.css_size.width,this.css_size.height),o.uniform("1f","time",(+new Date-this.start_time)/1e3);var n=Geo.latLngToMeters(Point(this.center.lng,this.center.lat));o.uniform("2f","map_center",n.x,n.y),o.uniform("1f","map_zoom",this.zoom),o.uniform("1f","num_layers",this.layers.length);var i=Geo.min_zoom_meters_per_pixel/Math.pow(2,this.zoom),s=Point(this.css_size.width/2*i,this.css_size.height/2*i);o.uniform("2f","meter_zoom",s.x,s.y);var a=Math.min(~~this.zoom,this.tile_source.max_zoom||~~this.zoom);for(var l in this.tiles){var c=this.tiles[l];1==c.loaded&&1==c.visible&&Math.min(c.coords.z,this.tile_source.max_zoom||c.coords.z)==a&&null!=c.gl_geometry[r]&&(o.uniform("2f","tile_min",c.min.x,c.min.y),o.uniform("2f","tile_max",c.max.x,c.max.y),c.gl_geometry[r].render(),t+=c.gl_geometry[r].geometry_count)}}return t!=this.last_render_count&&console.log("rendered "+t+" primitives"),this.last_render_count=t,1==this.continuous_animation&&(this.dirty=!0),!0},GLRenderer.prototype.getDebugSum=function(e,t){var r=0;for(var o in this.tiles)null==this.tiles[o].debug[e]||"function"==typeof t&&1!=t(this.tiles[o])||(r+=this.tiles[o].debug[e]);return r},GLRenderer.prototype.getDebugAverage=function(e,t){return this.getDebugSum(e,t)/Object.keys(this.tiles).length},GLRenderer.prototype.initInputHandlers=function(){var e=this;e.key=null,document.addEventListener("keydown",function(t){if(37==t.keyCode)e.key="left";else if(39==t.keyCode)e.key="right";else if(38==t.keyCode)e.key="up";else if(40==t.keyCode)e.key="down";else if(83==t.keyCode){console.log("reloading shaders");for(var r in this.render_modes)this.render_modes[r].gl_program.compile();e.dirty=!0}}),document.addEventListener("keyup",function(){e.key=null})},GLRenderer.prototype.input=function(){},GLBuilders={},GLBuilders.buildPolygons=function(e,t,r,o){o=o||{};var n=[t,0,0,1];o.vertex_constants&&n.push.apply(n,o.vertex_constants);for(var i=e.length,s=0;i>s;s++){var a=GL.triangulatePolygon(e[s]);GL.addVertices(a,r,n)}return r},GLBuilders.buildExtrudedPolygons=function(e,t,r,o,n,i){i=i||{};var s=t+(o||0),a=t+r;GLBuilders.buildPolygons(e,a,n,{vertex_constants:i.vertex_constants});var l=[null,null,null];i.vertex_constants&&l.push.apply(l,i.vertex_constants);for(var c=e.length,d=0;c>d;d++)for(var u=e[d],h=0;h<u.length;h++)for(var p=u[h],g=0;g<p.length-1;g++){var y=[];y.push([p[g+1][0],p[g+1][1],a],[p[g+1][0],p[g+1][1],s],[p[g][0],p[g][1],s],[p[g][0],p[g][1],s],[p[g][0],p[g][1],a],[p[g+1][0],p[g+1][1],a]);var f=Vector.cross([0,0,1],Vector.normalize([p[g+1][0]-p[g][0],p[g+1][1]-p[g][1],0]));l[0]=f[0],l[1]=f[1],l[2]=f[2],GL.addVertices(y,n,l)}return n},GLBuilders.buildPolylines=function(e,t,r,o,n){function i(e,t){var o=Vector.normalize([-1*(t[1]-e[1]),t[0]-e[0]]),n=[e[0]+o[0]*r/2,e[1]+o[1]*r/2],i=[e[0]-o[0]*r/2,e[1]-o[1]*r/2],s=[t[0]+o[0]*r/2,t[1]+o[1]*r/2],a=[t[0]-o[0]*r/2,t[1]-o[1]*r/2];g.push(a,s,i,i,s,n)}function s(o,i,s){var a=Vector.normalize([-1*(i[1]-o[1]),i[0]-o[0]]),l=[[o[0]+a[0]*r/2,o[1]+a[1]*r/2],[i[0]+a[0]*r/2,i[1]+a[1]*r/2]],c=[[o[0]-a[0]*r/2,o[1]-a[1]*r/2],[i[0]-a[0]*r/2,i[1]-a[1]*r/2]],d=Vector.normalize([-1*(s[1]-i[1]),s[0]-i[0]]),u=[[i[0]+d[0]*r/2,i[1]+d[1]*r/2],[s[0]+d[0]*r/2,s[1]+d[1]*r/2]],h=[[i[0]-d[0]*r/2,i[1]-d[1]*r/2],[s[0]-d[0]*r/2,s[1]-d[1]*r/2]],p=Vector.lineIntersection(l[0],l[1],u[0],u[1]),y=null;if(null!=p){var f=p,m=Vector.lengthSq([f[0]-i[0],f[1]-i[1]]),v=3;m>r*r*v*v&&(y="distance",f=Vector.normalize([f[0]-i[0],f[1]-i[1]]),f=[i[0]+f[0]*v,i[1]+f[1]*v]);var _=[i[0]-f[0]+i[0],i[1]-f[1]+i[1]];g.push(_,f,c[0],c[0],f,l[0],h[1],u[1],_,_,u[1],f)}else y="parallel",c[1]=h[0],l[1]=u[0],g.push(c[1],l[1],c[0],c[0],l[1],l[0],h[1],u[1],h[0],h[0],u[1],u[0]);if(GLRenderer.debug&&n.vertex_lines&&n.vertex_lines.push(c[0][0],c[0][1],t+.001,0,0,1,0,1,0,c[1][0],c[1][1],t+.001,0,0,1,0,1,0,h[0][0],h[0][1],t+.001,0,0,1,0,1,0,h[1][0],h[1][1],t+.001,0,0,1,0,1,0,l[0][0],l[0][1],t+.001,0,0,1,0,1,0,l[1][0],l[1][1],t+.001,0,0,1,0,1,0,u[0][0],u[0][1],t+.001,0,0,1,0,1,0,u[1][0],u[1][1],t+.001,0,0,1,0,1,0,c[0][0],c[0][1],t+.001,0,0,1,0,1,0,l[0][0],l[0][1],t+.001,0,0,1,0,1,0,c[1][0],c[1][1],t+.001,0,0,1,0,1,0,l[1][0],l[1][1],t+.001,0,0,1,0,1,0,h[0][0],h[0][1],t+.001,0,0,1,0,1,0,u[0][0],u[0][1],t+.001,0,0,1,0,1,0,h[1][0],h[1][1],t+.001,0,0,1,0,1,0,u[1][0],u[1][1],t+.001,0,0,1,0,1,0),GLRenderer.debug&&y&&n.vertex_lines){var x;"parallel"==y?x=[0,1,0]:"distance"==y&&(x=[1,0,0]),n.vertex_lines.push(o[0],o[1],t+.002,0,0,1,x[0],x[1],x[2],i[0],i[1],t+.002,0,0,1,x[0],x[1],x[2],i[0],i[1],t+.002,0,0,1,x[0],x[1],x[2],s[0],s[1],t+.002,0,0,1,x[0],x[1],x[2]);for(var z=e.length,b=0;z>b;b++)for(var L=e[b],G=0;G<L.length-1;G++){var o=L[G],s=L[G+1];n.vertex_lines.push(o[0],o[1],t+5e-4,0,0,1,0,0,1,s[0],s[1],t+5e-4,0,0,1,0,0,1)}}}n=n||{},n.closed_polygon=n.closed_polygon||!1,n.remove_tile_edges=n.remove_tile_edges||!1;var a=[t,0,0,1];if(n.vertex_constants&&a.push.apply(a,n.vertex_constants),GLRenderer.debug&&n.vertex_lines)for(var l=e.length,c=0;l>c;c++)for(var d=e[c],u=0;u<d.length-1;u++){var h=d[u],p=d[u+1];n.vertex_lines.push(h[0],h[1],t+.001,0,0,1,1,0,0,p[0],p[1],t+.001,0,0,1,1,0,0)}for(var g=[],l=e.length,c=0;l>c;c++){var d=e[c];if(d.length>2){var y=[];if(d.length>3){var u,f,m=[];for(1==n.closed_polygon?(u=0,f=d.length-1):(u=1,f=d.length-2,m.push(d[0]));f>u;u++){var h=d[u],p=d[u+1];m.push([(h[0]+p[0])/2,(h[1]+p[1])/2])}var v;for(1==n.closed_polygon?v=m.length:(m.push(d[d.length-1]),v=m.length-1),u=0;v>u;u++)y.push([m[u],d[(u+1)%d.length],m[(u+1)%m.length]])}else y=[[d[0],d[1],d[2]]];for(var u=0;u<y.length;u++)if(n.remove_tile_edges){var _=GLBuilders.isOnTileEdge(y[u][0],y[u][1]),x=GLBuilders.isOnTileEdge(y[u][1],y[u][2]);_||x?_?x||i(y[u][1],y[u][2]):i(y[u][0],y[u][1]):s(y[u][0],y[u][1],y[u][2])}else s(y[u][0],y[u][1],y[u][2])}else 2==d.length&&i(d[0],d[1])}return GL.addVertices(g,o,a),o},GLBuilders.buildQuads=function(e,t,r,o,n){for(var n=n||{},i=e.length,s=0;i>s;s++){var a=e[s],l=[[a[0]-t/2,a[1]-r/2],[a[0]+t/2,a[1]-r/2],[a[0]+t/2,a[1]+r/2],[a[0]-t/2,a[1]-r/2],[a[0]+t/2,a[1]+r/2],[a[0]-t/2,a[1]+r/2]];if(1==n.texcoords)var c=[[-1,-1],[1,-1],[1,1],[-1,-1],[1,1],[-1,1]];var d={positions:l,texcoords:n.texcoords&&c};o(d)}},GLBuilders.buildLines=function(e,t,r,o,n,i,s,a){a=a||{};for(var l=o.color,c=(o.width,e.length),d=0;c>d;d++)for(var u=e[d],h=0;h<u.length-1;h++){var p=u[h],g=u[h+1];s.push(p[0],p[1],i,0,0,1,l[0],l[1],l[2],g[0],g[1],i,0,0,1,l[0],l[1],l[2])}return s},GLBuilders.isOnTileEdge=function(e,t,r){r=r||{};var o=r.tolerance_function||GLBuilders.valuesWithinTolerance,n=r.tolerance||1,i=GLBuilders.tile_bounds[0],s=GLBuilders.tile_bounds[1],a=null;return o(e[0],i.x,n)&&o(t[0],i.x,n)?a="left":o(e[0],s.x,n)&&o(t[0],s.x,n)?a="right":o(e[1],i.y,n)&&o(t[1],i.y,n)?a="top":o(e[1],s.y,n)&&o(t[1],s.y,n)&&(a="bottom"),a},GLBuilders.setTileScale=function(e){GLBuilders.tile_bounds=[Point(0,0),Point(e,-e)]},GLBuilders.valuesWithinTolerance=function(e,t,r){return r=r||1,Math.abs(e-t)<r},GLBuilders.buildZigzagLineTestPattern=function(){var e=Point(0,0),t=Point(4096,4096),r={id:123,geometry:{type:"LineString",coordinates:[[.75*e.x+.25*t.x,.75*e.y+.25*t.y],[.75*e.x+.25*t.x,.5*e.y+.5*t.y],[.25*e.x+.75*t.x,.75*e.y+.25*t.y],[.25*e.x+.75*t.x,.25*e.y+.75*t.y],[.4*e.x+.6*t.x,.5*e.y+.5*t.y],[.5*e.x+.5*t.x,.25*e.y+.75*t.y],[.75*e.x+.25*t.x,.25*e.y+.75*t.y],[.75*e.x+.25*t.x,.4*e.y+.6*t.y]]},properties:{kind:"debug"}};return r},L.VectorTileLayer=L.GridLayer.extend({options:{vectorRenderer:"canvas"},initialize:function(e){L.setOptions(this,e),this.options.vectorRenderer=this.options.vectorRenderer||"GLRenderer",this._renderer=VectorRenderer.create(this.options.vectorRenderer,this.options.vectorTileSource,this.options.vectorLayers,this.options.vectorStyles,{num_workers:this.options.numWorkers}),this._renderer.continuous_animation=!1},onAdd:function(){var e=this;e.on("tileunload",function(t){var r=t.tile,o=r.getAttribute("data-tile-key");e._renderer.removeTile(o)}),e._map.on("resize",function(){var t=e._map.getSize();e._renderer.resizeMap(t.x,t.y),e.updateBounds()}),e._map.on("move",function(){var t=e._map.getCenter();e._renderer.setCenter(t.lng,t.lat),e.updateBounds()}),e._map.on("zoomstart",function(){console.log("map.zoomstart "+e._map.getZoom()),e._renderer.startZoom()}),e._map.on("zoomend",function(){console.log("map.zoomend "+e._map.getZoom()),e._renderer.setZoom(e._map.getZoom())}),e._renderer.container=e._map.getContainer();var t=e._map.getCenter();e._renderer.setCenter(t.lng,t.lat),e._renderer.setZoom(e._map.getZoom()),e.updateBounds(),L.GridLayer.prototype.onAdd.apply(this,arguments),e._renderer.init()},onRemove:function(){L.GridLayer.prototype.onRemove.apply(this,arguments)},createTile:function(e,t){var r=document.createElement("div");return this._renderer.loadTile(e,r,t),r},updateBounds:function(){var e=this,t=e._map.getBounds();e._renderer.setBounds(t.getSouthWest(),t.getNorthEast())},render:function(){this._renderer.render()}}),L.vectorTileLayer=function(e){return new L.VectorTileLayer(e)},GLRenderer.vertex_shader_source="// #define PROJECTION_PERSPECTIVE\n// #define PROJECTION_ISOMETRIC\n// #define PROJECTION_POPUP\n\n// #define LIGHTING_POINT\n// #define LIGHTING_DIRECTION\n\n// #define ANIMATION_ELEVATOR\n// #define ANIMATION_WAVE\n\nuniform vec2 resolution;\nuniform vec2 map_center;\nuniform float map_zoom;\nuniform vec2 meter_zoom;\nuniform vec2 tile_min;\nuniform vec2 tile_max;\nuniform float num_layers;\nuniform float time;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec3 color;\nattribute float layer;\n\nvarying vec3 fcolor;\n\n#if defined(EFFECT_NOISE_TEXTURE)\n    varying vec3 fposition;\n#endif\n\nvec3 light = normalize(vec3(0.2, 0.7, -0.5)); // vec3(0.1, 0.2, -0.4)\nconst float ambient = 0.45;\n\n// Project lat-lng to mercator\n// vec2 latLngToMeters (vec2 coordinate) {\n//     const float pi = 3.1415926;\n//     const float half_circumference_meters = 20037508.342789244;\n//     vec2 projected;\n\n//     // Latitude\n//     projected.y = log(tan((coordinate.y + 90.0) * pi / 360.0)) / (pi / 180.0);\n//     projected.y = projected.y * half_circumference_meters / 180.0;\n\n//     // Longitude\n//     projected.x = coordinate.x * half_circumference_meters / 180.0;\n\n//     return projected;\n// }\n\nvoid main() {\n    vec3 vposition = position;\n    vec3 vnormal = normal;\n\n    // Calc position of vertex in meters, relative to center of screen\n    vposition.y *= -1.0; // adjust for flipped y-coords\n    // vposition.y += TILE_SCALE; // alternate, to also adjust for force-positive y coords in tile\n    vposition.xy *= (tile_max - tile_min) / TILE_SCALE; // adjust for vertex location within tile (scaled from local coords to meters)\n\n    // Vertex displacement + procedural effects\n    #if defined(ANIMATION_ELEVATOR) || defined(ANIMATION_WAVE) || defined(EFFECT_NOISE_TEXTURE)\n        vec3 vposition_world = vposition + vec3(tile_min, 0.); // need vertex in world coords (before map center transform), hack to get around precision issues (see below)\n\n        #if defined(EFFECT_NOISE_TEXTURE)\n            fposition = vposition_world;\n        #endif\n\n        if (vposition_world.z > 1.0) {\n            // vposition.x += sin(vposition_world.z + time) * 10.0 * sin(position.x); // swaying buildings\n            // vposition.y += cos(vposition_world.z + time) * 10.0;\n\n            #if defined(ANIMATION_ELEVATOR)\n                // vposition.z *= (sin(vposition_world.z / 25.0 * time) + 1.0) / 2.0 + 0.1; // evelator buildings\n                vposition.z *= max((sin(vposition_world.z + time) + 1.0) / 2.0, 0.05); // evelator buildings\n            #elif defined(ANIMATION_WAVE)\n                vposition.z *= max((sin(vposition_world.x / 100.0 + time) + 1.0) / 2.0, 0.05); // wave\n            #endif\n        }\n    #endif\n\n    // NOTE: due to unresolved floating point precision issues, tile and map center adjustment need to happen in ONE operation, or artifcats are introduced\n    vposition.xy += tile_min.xy - map_center; // adjust for corner of tile relative to map center\n    vposition.xy /= meter_zoom; // adjust for zoom in meters to get clip space coords\n\n    // Shading\n    fcolor = color;\n    // fcolor += vec3(sin(position.z + time), 0.0, 0.0); // color change on height + time\n\n    #if defined(LIGHTING_POINT)\n        // Gouraud shading\n        light = vec3(-0.25, -0.25, 0.50); // vec3(0.1, 0.1, 0.35); // point light location\n        light = normalize(vec3(vposition.x, vposition.y, -vposition.z) - light); // light angle from light point to vertex\n        fcolor *= dot(vnormal, light * -1.0) + ambient + clamp(vposition.z * 2.0 / meter_zoom.x, 0.0, 0.25);\n    #elif defined(LIGHTING_DIRECTION)\n        // Flat shading\n        light = normalize(vec3(0.2, 0.7, -0.5));\n        // light = normalize(vec3(-1., 0.7, -.0));\n        // light = normalize(vec3(-1., 0.7, -.75));\n        // fcolor *= max(dot(vnormal, light * -1.0), 0.1) + ambient;\n        fcolor *= dot(vnormal, light * -1.0) + ambient;\n    #endif\n\n    #if defined(PROJECTION_PERSPECTIVE)\n        // Perspective-style projection\n        vec2 perspective_offset = vec2(-0.25, -0.25);\n        vec2 perspective_factor = vec2(0.8, 0.8); // vec2(-0.25, 0.75);\n        vposition.xy += vposition.z * perspective_factor * (vposition.xy - perspective_offset) / meter_zoom.xy; // perspective from offset center screen\n    #elif defined(PROJECTION_ISOMETRIC) || defined(PROJECTION_POPUP)\n        // Pop-up effect - 3d in center of viewport, fading to 2d at edges\n        #if defined(PROJECTION_POPUP)\n            if (vposition.z > 1.0) {\n                float cd = distance(vposition.xy * (resolution.xy / resolution.yy), vec2(0.0, 0.0));\n                const float popup_fade_inner = 0.5;\n                const float popup_fade_outer = 0.75;\n                if (cd > popup_fade_inner) {\n                    vposition.z *= 1.0 - smoothstep(popup_fade_inner, popup_fade_outer, cd);\n                }\n                const float zoom_boost_start = 15.0;\n                const float zoom_boost_end = 17.0;\n                const float zoom_boost_magnitude = 0.75;\n                vposition.z *= 1.0 + (1.0 - smoothstep(zoom_boost_start, zoom_boost_end, map_zoom)) * zoom_boost_magnitude;\n            }\n        #endif\n\n        // Isometric-style projection\n        vposition.y += vposition.z / meter_zoom.y; // z coordinate is a simple translation up along y axis, ala isometric\n        // vposition.y += vposition.z * 0.5; // closer to Ultima 7-style axonometric\n        // vposition.x -= vposition.z * 0.5;\n    #endif\n\n    // Rotation test\n    // float theta = 0;\n    // const float pi = 3.1415926;\n    // vec2 pr;\n    // pr.x = vposition.x * cos(theta * pi / 180.0) + vposition.y * -sin(theta * pi / 180.0);\n    // pr.y = vposition.x * sin(theta * pi / 180.0) + vposition.y * cos(theta * pi / 180.0);\n    // vposition.xy = pr;\n\n    // vposition.y *= max(abs(sin(vposition.x)), 0.1); // hourglass effect\n    // vposition.y *= abs(max(sin(vposition.x), 0.1)); // funnel effect\n\n    // Reverse and scale to 0-1 for GL depth buffer\n    // Layers are force-ordered (higher layers guaranteed to render on top of lower), then by height/depth\n    float z_layer_scale = 4096.;\n    float z_layer_range = (num_layers + 1.) * z_layer_scale;\n    float z_layer = (layer + 1.) * z_layer_scale;\n\n    vposition.z = z_layer + clamp(vposition.z, 1., z_layer_scale);\n    vposition.z = (z_layer_range - vposition.z) / z_layer_range;\n\n    gl_Position = vec4(vposition, 1.0);\n}\n",GLRenderer.fragment_shader_source="uniform vec2 resolution;\nuniform float time;\n\nvarying vec3 fcolor;\n\n#if defined(EFFECT_NOISE_TEXTURE)\n    varying vec3 fposition;\n\n    // http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n    // float rand (vec2 co) {\n    //    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    // }\n\n    // Noise functions from: https://github.com/ashima/webgl-noise\n    vec3 mod289(vec3 x) {\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 mod289(vec4 x) {\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 permute(vec4 x) {\n        return mod289(((x*34.0)+1.0)*x);\n    }\n\n    vec4 taylorInvSqrt(vec4 r) {\n        return 1.79284291400159 - 0.85373472095314 * r;\n    }\n\n    vec3 fade(vec3 t) {\n        return t*t*t*(t*(t*6.0-15.0)+10.0);\n    }\n\n    float snoise(vec3 v) {\n        const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n        const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n        // First corner\n        vec3 i  = floor(v + dot(v, C.yyy) );\n        vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n        // Other corners\n        vec3 g = step(x0.yzx, x0.xyz);\n        vec3 l = 1.0 - g;\n        vec3 i1 = min( g.xyz, l.zxy );\n        vec3 i2 = max( g.xyz, l.zxy );\n\n        //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n        //   x1 = x0 - i1  + 1.0 * C.xxx;\n        //   x2 = x0 - i2  + 2.0 * C.xxx;\n        //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n        vec3 x1 = x0 - i1 + C.xxx;\n        vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n        vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n        // Permutations\n        i = mod289(i);\n        vec4 p = permute( permute( permute(\n        i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n        + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n        + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n        // Gradients: 7x7 points over a square, mapped onto an octahedron.\n        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n        float n_ = 0.142857142857; // 1.0/7.0\n        vec3  ns = n_ * D.wyz - D.xzx;\n\n        vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n        vec4 x_ = floor(j * ns.z);\n        vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n        vec4 x = x_ *ns.x + ns.yyyy;\n        vec4 y = y_ *ns.x + ns.yyyy;\n        vec4 h = 1.0 - abs(x) - abs(y);\n\n        vec4 b0 = vec4( x.xy, y.xy );\n        vec4 b1 = vec4( x.zw, y.zw );\n\n        //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n        //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n        vec4 s0 = floor(b0)*2.0 + 1.0;\n        vec4 s1 = floor(b1)*2.0 + 1.0;\n        vec4 sh = -step(h, vec4(0.0));\n\n        vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n        vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n        vec3 p0 = vec3(a0.xy,h.x);\n        vec3 p1 = vec3(a0.zw,h.y);\n        vec3 p2 = vec3(a1.xy,h.z);\n        vec3 p3 = vec3(a1.zw,h.w);\n\n        //Normalise gradients\n        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n        p0 *= norm.x;\n        p1 *= norm.y;\n        p2 *= norm.z;\n        p3 *= norm.w;\n\n        // Mix final noise value\n        vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n        m = m * m;\n        return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n    }\n\n    // Classic Perlin noise\n    float cnoise(vec3 P) {\n        vec3 Pi0 = floor(P); // Integer part for indexing\n        vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n        Pi0 = mod289(Pi0);\n        Pi1 = mod289(Pi1);\n        vec3 Pf0 = fract(P); // Fractional part for interpolation\n        vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n        vec4 iy = vec4(Pi0.yy, Pi1.yy);\n        vec4 iz0 = Pi0.zzzz;\n        vec4 iz1 = Pi1.zzzz;\n\n        vec4 ixy = permute(permute(ix) + iy);\n        vec4 ixy0 = permute(ixy + iz0);\n        vec4 ixy1 = permute(ixy + iz1);\n\n        vec4 gx0 = ixy0 * (1.0 / 7.0);\n        vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n        gx0 = fract(gx0);\n        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n        vec4 sz0 = step(gz0, vec4(0.0));\n        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n        vec4 gx1 = ixy1 * (1.0 / 7.0);\n        vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n        gx1 = fract(gx1);\n        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n        vec4 sz1 = step(gz1, vec4(0.0));\n        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n        vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n        vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n        vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n        vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n        vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n        vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n        vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n        vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n        g000 *= norm0.x;\n        g010 *= norm0.y;\n        g100 *= norm0.z;\n        g110 *= norm0.w;\n        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n        g001 *= norm1.x;\n        g011 *= norm1.y;\n        g101 *= norm1.z;\n        g111 *= norm1.w;\n\n        float n000 = dot(g000, Pf0);\n        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n        float n111 = dot(g111, Pf1);\n\n        vec3 fade_xyz = fade(Pf0);\n        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n        return 2.2 * n_xyz;\n    }\n\n    // Classic Perlin noise, periodic variant\n    float pnoise(vec3 P, vec3 rep) {\n        vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n        vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n        Pi0 = mod289(Pi0);\n        Pi1 = mod289(Pi1);\n        vec3 Pf0 = fract(P); // Fractional part for interpolation\n        vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n        vec4 iy = vec4(Pi0.yy, Pi1.yy);\n        vec4 iz0 = Pi0.zzzz;\n        vec4 iz1 = Pi1.zzzz;\n\n        vec4 ixy = permute(permute(ix) + iy);\n        vec4 ixy0 = permute(ixy + iz0);\n        vec4 ixy1 = permute(ixy + iz1);\n\n        vec4 gx0 = ixy0 * (1.0 / 7.0);\n        vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n        gx0 = fract(gx0);\n        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n        vec4 sz0 = step(gz0, vec4(0.0));\n        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n        vec4 gx1 = ixy1 * (1.0 / 7.0);\n        vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n        gx1 = fract(gx1);\n        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n        vec4 sz1 = step(gz1, vec4(0.0));\n        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n        vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n        vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n        vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n        vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n        vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n        vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n        vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n        vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n        g000 *= norm0.x;\n        g010 *= norm0.y;\n        g100 *= norm0.z;\n        g110 *= norm0.w;\n        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n        g001 *= norm1.x;\n        g011 *= norm1.y;\n        g101 *= norm1.z;\n        g111 *= norm1.w;\n\n        float n000 = dot(g000, Pf0);\n        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n        float n111 = dot(g111, Pf1);\n\n        vec3 fade_xyz = fade(Pf0);\n        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n        return 2.2 * n_xyz;\n    }\n#endif\n\nvoid main (void) {\n    // vec2 position = gl_FragCoord.xy / resolution.xy;    // scale coords to [0.0, 1.0]\n    // position = position * 2.0 - 1.0;                    // scale coords to [-1.0, 1.0]\n    // position.y *= resolution.y / resolution.x;          // correct aspect ratio\n\n    vec3 color = fcolor;\n    // vec3 color = fcolor * max(1.0 - distance(position, vec2(0.0, 0.0)), 0.15);\n    // vec3 color = fcolor * (1.0 - dot(normalize(vec3(rand(gl_FragCoord.xy * 0.01) * 10.0, 0.0, -1.0)), vec3(0, 0, 1.0)));\n\n    // Mutate colors by screen position or time\n    // color += vec3(gl_FragCoord.x / resolution.x, 0.0, gl_FragCoord.y / resolution.y);\n    // color.r += sin(time);\n\n    // Mutate color by 3d noise\n    #if defined (EFFECT_NOISE_TEXTURE)\n        #if defined(EFFECT_NOISE_ANIMATABLE) && defined(EFFECT_NOISE_ANIMATED)\n            color *= (abs(cnoise((fposition + vec3(time * 5., time * 7.5, time * 10.)) / 10.0)) / 4.0) + 0.75;\n        // #else\n        //     color *= (abs(cnoise(fposition / 10.0)) / 4.0) + 0.75;\n        #endif\n    #endif\n\n    gl_FragColor = vec4(color, 1.0);\n    // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n";