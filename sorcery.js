/*
  When we include the traceur run time, we need to offset the source
  maps in order to account for the size of the runtime.
  This script is a hack but does the job. It we would be greate if we
  had a better tool for this.

  IW
 */

/*jshint node: true */
var sourceMap = require('source-map'),
    fs        = require('fs');

// TODO don't hard code the length of the tracue runtime
var lengthOfTraceur = 2435;


function loadFile(path) {
    var stuff = fs.readFileSync(path);
    return JSON.parse(stuff);
}

function main() {
    var newMapping = new sourceMap.SourceMapGenerator();
    var source = new sourceMap.SourceMapConsumer(loadFile('tangram.debug.js.map'));
    source.eachMapping(function (oldMapping) {
        var mapping = {
            // The path generated by browserify is in correct when
            // serving from a local server. Strip the leading absolute
            // path
            source: oldMapping.source.replace('/home/ivan/dev/mapzen/tangram', ''),
            generated: {
                line: oldMapping.generatedLine + lengthOfTraceur,
                column: oldMapping.generatedColumn
            },
            original: {
                line: oldMapping.originalLine,
                column: oldMapping.originalColumn
            }
        };
        newMapping.addMapping(mapping);

    }, this, sourceMap.SourceMapConsumer.ORIGINAL_ORDER);
    // pretty print the source map file
    fs.writeFileSync('dist/tangram.debug.js.map', JSON.stringify(newMapping, null, 4));
}


main();

/*
examples
map.addMapping({
  generated: {
    line: 10,
    column: 35
  },
  source: "foo.js",
  original: {
    line: 33,
    column: 2
  },
  name: "christopher"
});

{ source: '/home/ivan/dev/mapzen/tangram/node_modules/gl-matrix/dist/gl-matrix.js',
  generatedLine: 1896,
  generatedColumn: 0,
  originalLine: 1895,
  originalColumn: 0,
  name: undefined }


*/

