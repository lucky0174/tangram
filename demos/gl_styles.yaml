---
modes:
    # note: consider this syntax as a special case for global mode settings
    # all:
    #     shaders:
    #         transforms:
    #             fragment: { url: demos/shaders/spotlight.glsl }

    water:
        extends: polygons
        animated: true
        shaders:
            defines:
                EFFECT_NOISE_ANIMATED: true
            transforms:
                globals:
                    url: node_modules/glsl-noise/periodic/3d.glsl
                fragment:
                    url: demos/shaders/noise.glsl

    formica:
        extends: polygons
        shaders:
            defines:
                EFFECT_NOISE_TEXTURE: true
            transforms:
                globals:
                    url: node_modules/glsl-noise/periodic/3d.glsl
                fragment:
                    url: demos/shaders/noise.glsl

    rainbow:
        extends: polygons
        animated: true
        shaders:
            defines:
                EFFECT_COLOR_BLEED_ANIMATED: true
            transforms:
                fragment:
                    - url: demos/shaders/color_bleed.glsl
                    # - url: demos/shaders/spotlight.glsl
    rainbow2:
        extends: polygons
        animated: true
        shaders:
            transforms:
                globals: |
                    vec3 hsv2rgb(vec3 c) {
                        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
                    }
                fragment: |
                    vec3 c = vec3(v_world_position.z * .003 + u_time / 10., 1.0, 1.0);
                    color = hsv2rgb(c);

    popup:
        extends: polygons
        animated: true
        shaders:
            uniforms:
                u_popup_radius: 330 # 225
                u_popup_height: 5 # 1.1
            transforms:
                globals:
                    - url: src/gl/shaders/modules/popup.glsl
                    -
                        uniform float u_popup_radius;
                        uniform float u_popup_height;
                vertex: |
                    position.z *= u_popup_height; // boost height for exaggerated visual effect
                    position = popup(position, vec2(0., 0.), u_popup_radius * u_meters_per_pixel);
                # vertex: { url: demos/shaders/popup.glsl }
                # fragment: { url: demos/shaders/color_bleed.glsl }

    elevator:
        extends: polygons
        animated: true
        shaders:
            transforms:
                vertex: position.z *= max((sin(position.z + u_time) + 1.0) / 2.0, 0.05); // evelator buildings
                # vertex: { url: demos/shaders/elevator.glsl }

    breathe:
        extends: polygons
        animated: true
        shaders:
            # defines:
            #     BREATHE_SCALE: 10
            uniforms:
                u_breathe_scale: 10
                u_breathe_speed: 1
            transforms:
                globals:
                    uniform float u_breathe_scale;
                    uniform float u_breathe_speed;
                vertex:
                    position.xy += a_normal.xy * u_breathe_scale * smoothstep(0.25, 1., abs(sin(u_time * u_breathe_speed)));
                # vertex: { url: demos/shaders/breathe.glsl }

    dots:
        extends: polygons
        shaders:
            uniforms:
                u_dot_grid_scale: 0.02
                u_dot_scale: 0.07
                u_dot_background_color: [.5, .2, .2]
                u_dot_color: [1, 1, 1]
            transforms:
                globals: { url: demos/shaders/dots.glsl }
                fragment: color *= dots(v_world_position.xyz);
                # fragment: color *= dots(v_world_position.xyz + vec3(0., 0., u_time * 25.)); // animated dots
                # fragment: vec3 n = abs(v_normal); if (n.z > n.x && n.z > n.y) { color *= dots(v_world_position.xyz); } // apply only to up-facing surfaces

    wood:
        extends: polygons
        shaders:
            uniforms:
                u_wood_color1: [.9, .5, .5]
                u_wood_color2: [.5, .3, .1]
                u_wood_eccentricity: 0.9
                u_wood_twist: .0001
                u_wood_scale: 50
                u_wood_spacing: 1
            transforms:
                globals: { url: 'demos/shaders/wood.glsl' }
                fragment: color = lighting * wood(v_world_position.xyz);
        # buildPolygons: |
        #     function (polygons, style, vertex_data) {
        #         // Test overloading the geometry builder
        #         // var c = Geo.polygonCentroidSimple(polygons[0]);
        #         polygons = [ [ [ polygons[0][0][0], polygons[0][0][1], polygons[0][0][2], polygons[0][0][0] ] ] ];
        #         this.parent.buildPolygons(polygons, style, vertex_data);
        #     }

    # Halftone shader adapted from: http://webstaff.itn.liu.se/~stegu/webglshadertutorial/shadertutorial.html
    halftone:
        extends: polygons
        animated: true
        shaders:
            uniforms:
                halftone_colored: false # boolean to flip colored dots on and off
            transforms:
                globals: |
                    uniform bool halftone_colored;

                    const float dot_frequency = 100.4748637184972;

                    // Antialiasing
                    float aastep(float threshold, float value) {
                        const float scale = 2.;
                        const float y_rot = 0.;
                        float afwidth = dot_frequency * (1.0/200.0) / scale / cos(y_rot);
                        return smoothstep(threshold-afwidth, threshold+afwidth, value);
                    }

                fragment: |
                    // Distance to nearest point in a grid of
                    // (frequency x frequency) points over the unit square
                    // Scale dot size for a subset of zoom
                    const float max_scale_zoom = 19.;
                    const float min_scale_zoom = 17.;
                    const float scale_zoom_factor = .25;
                    float zoom_frequency = dot_frequency;
                    zoom_frequency *= 1. + ((max_scale_zoom - clamp(u_map_zoom, min_scale_zoom, max_scale_zoom)) * scale_zoom_factor);

                    // Sample based on screenspace
                    const float pixel_scale = 695.; // arbitrary pixel_scale based on playing w/values
                    vec2 st = gl_FragCoord.xy / pixel_scale;

                    // But peg to map center so dots on ground plane stay in place as we move
                    // (there's what looks like some floating point precision crawl, but it's not too bad)
                    const float dot_wrap = 1000.;
                    st += mod(u_map_center / u_meters_per_pixel, dot_wrap) / pixel_scale;

                    // Rotate dot & find nearest dot distance
                    vec2 st2 = mat2(0.707, -0.707, 0.707, 0.707) * st;
                    vec2 nearest = 2.0 * fract(zoom_frequency * st2) - 1.0;
                    float dist = length(nearest);

                    // Modulate the size of the dots
                    float radius = clamp(sqrt(1.0 - color.g), 0.001, 1.); // use green channel, clamp to avoid giant dot

                    // Color mix
                    const vec3 white = vec3(1.0, 1.0, 1.0);
                    const vec3 black = vec3(0.0, 0.0, 0.0);
                    color = mix(black + (color * float(halftone_colored)), white, aastep(radius, dist));

    points:
        shaders:
            transforms:
                # fragment: color += vec3(gl_FragCoord.x / u_resolution.x, 0.0, gl_FragCoord.y / u_resolution.y);
                fragment: { url: demos/shaders/color_bleed.glsl }

    # polygons:
    #     shaders:
    #         vertex_url: src/gl/shaders/compiled/simple_polygon_vertex.glsl
    #         fragment_url: src/gl/shaders/compiled/simple_polygon_fragment.glsl

layers:
    water_ocean:
        mode:
            name: water
        color:
            default: [0.5, 0.5, 0.875]

    earth:
        color:
            default: [0.175, 0.175, 0.175]

    landuse:
        interactive: true
        color:
            default: [0.5, 0.875, 0.5]
            pitch: [0.3, 0.675, 0.3]
        # outline:
        #     color:
        #         default: [1, 1, 1]
        #     width:
        #         default: 1

    water_areas:
        mode:
            name: water
        interactive: true
        color:
            default: [0.5, 0.5, 0.875]
        outline:
            color:
                default: [0.6, 0.6, 0.975]
            width:
                default:
                    function (f, t) {
                        return (
                            t.coords.z >= 16 &&
                            (f.properties.kind != 'ocean' && f.properties.kind != 'riverbank') &&
                            (2.5 * Math.log(t.coords.z))
                        );
                    }

    roads:
        interactive: function (f, t) { return (t.coords.z >= 18); }
        color:
            # default: Style.color.randomColor
            default: [0.4, 0.4, 0.4]
            highway: [1.0, 1.0, 1.0]
            major_road: [0.5, 0.5, 0.5]
            minor_road: [0.65, 0.65, 0.65]
            path: [0.8, 0.8, 0.8]
            rail: [0.5, 0.0, 0.0]
            debug: [1, 0, 0]
        width:
            # default: Style.pixels(5)
            default: function (f, t) { return 2 * Math.log(t.coords.z); }
            highway: function (f, t) { return 3 * Math.log(t.coords.z); }
            major_road: function (f, t) { return 2.5 * Math.log(t.coords.z); }
            minor_road: function (f, t) { return 2 * Math.log(t.coords.z); }
            path: function (f, t) { return 1 * Math.log(t.coords.z); }
            debug: function (f, t) { return 5; }
        # z:
        #     path: 25
        outline:
            color:
                default: [0.1, 0.7, 0.7]
            width:
                default:
                    function (f, t) { return (t.coords.z >= 18 && (2/8 * Math.log(t.coords.z))); }
                highway:
                    function (f, t) { return (t.coords.z >= 18 && (3/8 * Math.log(t.coords.z))); }
                major_road:
                    function (f, t) { return (t.coords.z >= 18 && (2.5/8 * Math.log(t.coords.z))); }
                minor_road:
                    function (f, t) { return (t.coords.z >= 18 && (2/8 * Math.log(t.coords.z))); }
                path:
                    function (f, t) { return (t.coords.z >= 18 && (2/8 * Math.log(t.coords.z))); }
                debug:
                    function (f, t) { return (t.coords.z >= 18 && (2/8 * Math.log(t.coords.z))); }

    buildings:
        mode:
            # name: popup
            # name: breathe
            # name: formica
            # name: dots
            # name: wood
            # name: rainbow2
        # filter: function (f) { return f.properties.name != null; }
        # filter: function (f) { return Math.random() < 0.25; }
        # filter: function (f) { return true; }
        interactive: true
        color:
            # default: function(f) { var h = f.properties.height || 20; h = Math.min((h + 50) / 250, 1.0); return [h, h, h]; } // shade based on height
            # default: Style.color.pseudoRandomColor
            # default: Style.color.pseudoRandomGrayscale
            # default: function (f) { if (f.properties.name || f.properties.kind) { return [(f.properties.name && 0.6) || 0.2, 0.2, (f.properties.kind && 0.6) || 0.2]; } else { return [0.6, 0.6, 0.6] }; }
            default:
                function (f) {
                    var c = [.6, .6, .6];
                    if (f.properties.name || f.properties.kind) {
                        c = [.2, .2, .2];
                        c[0] = (f.properties.name && .6) || c[0];
                        c[2] = (f.properties.kind && .6) || c[2];
                    }
                    return c;
                }
        extrude:
            default: function (f, t) { return ((t.coords.z >= 15 && f.properties.height > 20) || t.coords.z >= 16) }

    pois:
        mode:
            name: points
            # name: formica
        filter: function (f) { return f.properties.name != null; }
        # visible: false
        interactive: true
        color:
            default: [1, 1, 0]
        size:
            # default: 5
            default: Style.pixels(5)
            # default: Style.pixels(function(f, t, h) { return 2 * Math.pow(h.zoom, 0.5); })
            # default: function(f, t, h) { return 2 * h.zoom; }

    # places:
    #     filter: function(f, t) { return (t.coords.z >= 13); }
    #     color: {
    #         # default: [0.0, 1.0, 1.0]
    #         default: function(f) { return f.properties.kind == 'administrative' ? [1, 0, 1] : [1, 1, 0]; }
    #     size:
    #         default: Style.pixels(5)
