modes:
    # note: consider this syntax as a special case for global mode settings
    # all:
    #     shaders:
    #         transforms:
    #             fragment: { url: demos/shaders/spotlight.glsl }

    water:
        extends: polygons
        animated: true
        shaders:
            defines:
                EFFECT_NOISE_ANIMATED: true
            transforms:
                globals:
                    url: demos/shaders/glsl-noise-periodic-3d.glsl
                fragment:
                    url: demos/shaders/noise.glsl

    formica:
        extends: polygons
        shaders:
            defines:
                EFFECT_NOISE_TEXTURE: true
            transforms:
                globals:
                    url: demos/shaders/glsl-noise-periodic-3d.glsl
                fragment:
                    url: demos/shaders/noise.glsl

    colorbleed:
        extends: polygons
        animated: true
        shaders:
            defines:
                EFFECT_COLOR_BLEED_ANIMATED: true
            transforms:
                fragment:
                    - url: demos/shaders/color_bleed.glsl
                    # - url: demos/shaders/spotlight.glsl

    rainbow:
        extends: polygons
        animated: true
        shaders:
            transforms:
                globals: |
                    vec3 hsv2rgb(vec3 c) {
                        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
                    }
                fragment: |
                    vec3 c = vec3(v_world_position.z * .003 + u_time / 10., 1.0, 1.0);
                    color = hsv2rgb(c);

    popup:
        extends: polygons
        shaders:
            uniforms:
                u_popup_radius: 330 # 225
                u_popup_height: 5 # 1.1
            transforms:
                globals:
                    - url: src/gl/shaders/modules/popup.glsl
                    -
                        uniform float u_popup_radius;
                        uniform float u_popup_height;
                vertex: |
                    position.z *= u_popup_height; // boost height for exaggerated visual effect
                    position = popup(position, vec2(0., 0.), u_popup_radius * u_meters_per_pixel);
                # vertex: { url: demos/shaders/popup.glsl }
                # fragment: { url: demos/shaders/color_bleed.glsl }

    elevator:
        extends: polygons
        animated: true
        shaders:
            transforms:
                vertex: position.z *= (sin(position.z + u_time) + 1.0); // elevator buildings
                # vertex: { url: demos/shaders/elevator.glsl }

    breathe:
        extends: polygons
        animated: true
        shaders:
            # defines:
            #     BREATHE_SCALE: 10
            uniforms:
                u_breathe_scale: 10
                u_breathe_speed: 1
            transforms:
                globals:
                    uniform float u_breathe_scale;
                    uniform float u_breathe_speed;
                vertex:
                    position.xy += a_normal.xy * u_breathe_scale * smoothstep(0.25, 1., abs(sin(u_time * u_breathe_speed)));
                # vertex: { url: demos/shaders/breathe.glsl }

    dots:
        extends: polygons
        shaders:
            uniforms:
                u_dot_grid_scale: 0.02
                u_dot_scale: 0.07
                u_dot_background_color: [.5, .2, .2]
                u_dot_color: [1, 1, 1]
            transforms:
                globals: { url: demos/shaders/dots.glsl }
                fragment: color *= dots(v_world_position.xyz);
                # fragment: color *= dots(v_world_position.xyz + vec3(0., 0., u_time * 25.)); // animated dots
                # fragment: vec3 n = abs(v_normal); if (n.z > n.x && n.z > n.y) { color *= dots(v_world_position.xyz); } // apply only to up-facing surfaces

    wood:
        extends: polygons
        shaders:
            uniforms:
                u_wood_color1: [.9, .5, .5]
                u_wood_color2: [.5, .3, .1]
                u_wood_eccentricity: 0.9
                u_wood_twist: .0001
                u_wood_scale: 50
                u_wood_spacing: 1
            transforms:
                globals: { url: 'demos/shaders/wood.glsl' }
                fragment: color = lighting * wood(v_world_position.xyz);
        # buildPolygons: |
        #     function (polygons, style, vertex_data) {
        #         // Test overloading the geometry builder
        #         // var c = Geo.polygonCentroidSimple(polygons[0]);
        #         polygons = [ [ [ polygons[0][0][0], polygons[0][0][1], polygons[0][0][2], polygons[0][0][0] ] ] ];
        #         this.parent.buildPolygons(polygons, style, vertex_data);
        #     }

    envmap:
        extends: polygons
        shaders:
            defines:
                LIGHTING_ENVIRONMENT: true
            uniforms:
                u_env_map: demos/images/LitSphere_test_02.jpg
            transforms:
                # fragment: color = mix(color_prelight, color_prelight * lighting, sin(u_time) / 2. + .5); // fade lighting in and out

    # Halftone shader adapted from: http://webstaff.itn.liu.se/~stegu/webglshadertutorial/shadertutorial.html
    halftone:
        extends: polygons
        shaders:
            uniforms:
                # halftone_colored: false # boolean to flip colored dots on and off
            transforms:
                globals: |
                    // uniform bool halftone_colored;

                    const float dot_frequency = 100.4748637184972;

                    // Antialiasing
                    float aastep(float threshold, float value) {
                        const float scale = 2.;
                        const float y_rot = 0.;
                        float afwidth = dot_frequency * (1.0/200.0) / scale / cos(y_rot);
                        return smoothstep(threshold-afwidth, threshold+afwidth, value);
                    }

                fragment: |
                    // Distance to nearest point in a grid of
                    // (frequency x frequency) points over the unit square
                    // Scale dot size for a subset of zoom
                    const float max_scale_zoom = 19.;
                    const float min_scale_zoom = 17.;
                    const float scale_zoom_factor = .25;
                    float zoom_frequency = dot_frequency;
                    zoom_frequency *= 1. + ((max_scale_zoom - clamp(u_map_zoom, min_scale_zoom, max_scale_zoom)) * scale_zoom_factor);

                    // Sample based on screenspace
                    const float pixel_scale = 695.; // arbitrary pixel_scale based on playing w/values
                    vec2 st = gl_FragCoord.xy / pixel_scale;

                    // But peg to map center so dots on ground plane stay in place as we move
                    // (there's what looks like some floating point precision crawl, but it's not too bad)
                    const float dot_wrap = 1000.;
                    st += mod(u_map_center / u_meters_per_pixel, dot_wrap) / pixel_scale;

                    // Rotate dot & find nearest dot distance
                    vec2 st2 = mat2(0.707, -0.707, 0.707, 0.707) * st;
                    vec2 nearest = 2.0 * fract(zoom_frequency * st2) - 1.0;
                    float dist = length(nearest);

                    // Modulate the size of the dots
                    float radius = clamp(sqrt(1.0 - color.g), 0.001, 1.); // use green channel, clamp to avoid giant dot

                    // Color mix
                    const vec3 white = vec3(1.0, 1.0, 1.0);
                    const vec3 black = vec3(0.0, 0.0, 0.0);
                    // color = mix(black + (color * float(halftone_colored)), white, aastep(radius, dist));
                    color = mix(black, white, aastep(radius, dist));

    # Halftone shader adapted from: http://webstaff.itn.liu.se/~stegu/webglshadertutorial/shadertutorial.html
    colorhalftone:
        extends: polygons
        shaders:
            uniforms:
                dot_frequency: 100.
                dot_scale: 1.5
                true_color: false

            transforms:
                globals: |
                    uniform float dot_frequency;
                    uniform float dot_scale;
                    uniform bool true_color;

                    // Antialiasing
                    float aastep(float threshold, float value) {
                        const float scale = 2.;
                        const float y_rot = 0.;
                        float afwidth = dot_frequency * (1.0/200.0) / scale / cos(y_rot);
                        return smoothstep(threshold-afwidth, threshold+afwidth, value);
                    }

                fragment: |
                    // Distance to nearest point in a grid of
                    // (frequency x frequency) points over the unit square
                    // Scale dot size for a subset of zoom
                    const float max_scale_zoom = 19.;
                    const float min_scale_zoom = 17.;
                    const float scale_zoom_factor = .25;
                    float zoom_frequency = dot_frequency;
                    zoom_frequency *= 1. + ((max_scale_zoom - clamp(u_map_zoom, min_scale_zoom, max_scale_zoom)) * scale_zoom_factor);

                    // Sample based on screenspace
                    const float pixel_scale = 695.; // arbitrary pixel_scale based on playing w/values
                    vec2 st = gl_FragCoord.xy / pixel_scale;

                    // But peg to map center so dots on ground plane stay in place as we move
                    // (there's what looks like some floating point precision crawl, but it's not too bad)
                    const float dot_wrap = 1000.;
                    st += mod(u_map_center / u_meters_per_pixel, dot_wrap) / pixel_scale;

                    vec3 white = vec3(0.97);
                    vec3 black = vec3(0.1);

                    // Perform a rough RGB-to-CMYK conversion
                    vec4 cmyk;
                    cmyk.xyz = 1.0 - color;
                    cmyk.w = min(cmyk.x, min(cmyk.y, cmyk.z)); // Create K
                    if (!true_color) {cmyk.xyz -= cmyk.w;} // Subtract K equivalent from CMY

                    // Distance to nearest point in a grid of
                    // (frequency x frequency) points over the unit square
                    vec2 Kst = zoom_frequency*mat2(0.707, -0.707, 0.707, 0.707)*st;
                    vec2 Kuv = dot_scale*fract(Kst)-(dot_scale/2.);
                    float k = aastep(0.0, sqrt(cmyk.w)-length(Kuv));
                    vec2 Cst = zoom_frequency*mat2(0.966, -0.259, 0.259, 0.966)*st;
                    vec2 Cuv = dot_scale*fract(Cst)-(dot_scale/2.);
                    float c = aastep(0.0, sqrt(cmyk.x)-length(Cuv));
                    vec2 Mst = zoom_frequency*mat2(0.966, 0.259, -0.259, 0.966)*st;
                    vec2 Muv = dot_scale*fract(Mst)-(dot_scale/2.);
                    float m = aastep(0.0, sqrt(cmyk.y)-length(Muv));
                    vec2 Yst = zoom_frequency*st; // 0 deg
                    vec2 Yuv = dot_scale*fract(Yst)-(dot_scale/2.);
                    float y = aastep(0.0, sqrt(cmyk.z)-length(Yuv));

                    vec3 rgbscreen = 1.0 - 0.9*vec3(c,m,y); // most saturated color = .9
                    rgbscreen = mix(rgbscreen, black, 0.85*k); // darkest black = .85

                    // Modulate the size of the dots
                    //float luminance = (0.299 * color.r + 0.587 * color.g + 0.114 * color.b); // HSP color model
                    //float radius = clamp(sqrt(1.0 - luminance), 0.001, 1.); // use luminance, clamp to avoid giant dot

                    color = rgbscreen;

    windows:
        extends: polygons
        animated: true

        shaders:
            uniforms:
                u_frequency: 10.
                u_windowColor: [1., 1., .9]
                u_buildingColor: [.8, .8, .7]
                u_roofColor: [.5, .4, .5]
            transforms:
                globals: |
                    uniform float u_frequency;
                    uniform vec3 u_windowColor;
                    uniform vec3 u_buildingColor;
                    uniform vec3 u_roofColor;

                    // 3d noise
                    vec4 v_mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
                    vec4 perm(vec4 x){return v_mod289(((x * 34.0) + 1.0) * x);}
                    float noise(vec3 p){
                        vec3 a = floor(p);
                        vec3 d = p - a;
                        d = d * d * (3.0 - 2.0 * d);

                        vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
                        vec4 k1 = perm(b.xyxy);
                        vec4 k2 = perm(k1.xyxy + b.zzww);

                        vec4 c = k2 + a.zzzz;
                        vec4 k3 = perm(c);
                        vec4 k4 = perm(c + 1.0);

                        vec4 o1 = fract(k3 * (1.0 / 41.0));
                        vec4 o2 = fract(k4 * (1.0 / 41.0));

                        vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
                        vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

                        return o4.y * d.y + o4.x * (1.0 - d.y);
                    }
                fragment: |
                    vec3 vPos = v_world_position.xyz / u_frequency;
                    vec3 mask = mix(vec3(0.0), vec3(1.0), step(fract(mod(vPos, .9)), vec3(.4, .4, .6)));

                    if (mask.x + mask.y + mask.z > .5) {
                        color = u_buildingColor;
                        color -= vec3(vPos.z * .1); // height factor
                    } else {
                        float noiseColor = 2. * noise(v_world_position.xyz * 0.1 + (floor(u_time * 5.) / 10.));
                        color = u_windowColor * noiseColor;
                    }

                    if (v_normal.z > .6 || v_normal.z < -.6) {
                        color = u_roofColor;
                        color -= vec3(vPos.z * .01); // height factor
                    }

    # points:
    #     shaders:
    #         transforms:
    #             fragment: color += vec3(gl_FragCoord.x / u_resolution.x, 0.0, gl_FragCoord.y / u_resolution.y);
    #             # fragment: { url: demos/shaders/color_bleed.glsl }

    ghosts:
        extends: points
        shaders:
            uniforms:
                # u_texture: demos/images/LitSphere_test_02.jpg
                u_texture: demos/images/ghost.gif
            transforms:
                globals: |
                    uniform sampler2D u_texture;
                fragment: |
                    // offset texcoord to account for centered 0,0
                    color = texture2D(u_texture, (texcoord + vec2(1.))/2.).rgb;
                    


    # polygons:
    #     shaders:
    #         defines:
    #             LIGHTING_ENVIRONMENT: true

layers:
    water_ocean:
        color:
            default: [0, 0, 0]

    earth:
        color:
            default: [0, 0, 0]

    landuse:
        color:
            default: [0, 0, 0]
        outline:
            color:
                default: [0, 0, 1]
            width:
                default: 3

    water_areas:
        color:
            default: [0, 0, 0]

    roads:
        interactive: function (f, t) { return (t.coords.z >= 18); }
        color:
            # default: Style.color.randomColor
            default: [1, 1, 0]
        width:
            default: Style.pixels(5)


    buildings:
        color:
            default: [0, 0, 0]
        outline:
            color:
                default: [0, 0, 1]
            width:
                # default: function (f, t) { return (100/t.coords.z); }
                default: Style.pixels(8)


    pois:
        mode:
            # name: points
            # name: formica
            name: ghosts
        filter: function (f) { return f.properties.name != null; }
        # visible: false
        interactive: true
        # color:
            # default: [1, 1, 0]
        size:
            # default: 5
            default: Style.pixels(20)
            # default: Style.pixels(function(f, t, h) { return 2 * Math.pow(h.zoom, 0.5); })
            # default: function(f, t, h) { return 2 * h.zoom; }

    # places:
    #     filter: function(f, t) { return (t.coords.z >= 13); }
    #     color: {
    #         # default: [0.0, 1.0, 1.0]
    #         default: function(f) { return f.properties.kind == 'administrative' ? [1, 0, 1] : [1, 1, 0]; }
    #     size:
    #         default: Style.pixels(5)
