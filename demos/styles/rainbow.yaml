styles:
    rainbow:
        base: polygons
        animated: true
        lighting: false
        blend: translucent
        shaders:
            blocks:
                global: |
                    // hue-saturation-value to RBG color space converter
                    vec3 hsv2rgb(vec3 c) {
                        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
                    }
                filter: |
                    // modulate hue by z-position and time, then convert to RGB and set pixel color
                    vec3 c = vec3(worldPosition().z * .003 + u_time / 15., 1.0, 1.0);
                    color.rgb = hsv2rgb(c);
                    color.a = 0.7;