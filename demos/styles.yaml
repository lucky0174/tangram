cameras:
    perspective:
        type: perspective
        # focal_length: 1
        focal_length: [[16, 2], [17, 2.5], [18, 3], [19, 4], [20, 6]] # pairs of [zoom, focal len]
        # fov: 60
        # fov: [[16, 60], [20, 15]]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels
        active: true

    isometric:
        type: isometric
        # axis: [1, .5]
        # active: true

    flat:
        type: flat

    # testing camera with a location
    central_park:
        position: [-73.97297501564027, 40.76434821445407, 17]
        # zoom: 17

lights:
    ambient1:
        type: ambient
        ambient: .3

    directional1:
        type: directional
        direction: [.5, 0, -1] #[0.1, 0.1, -1]
        diffuse: .5
        specular: .2
        ambient: .2

    point1:
        type: point

        ambient: .2
        diffuse: red #.7
        specular: .2
        # diffuse: .3
        # attenuation: 1.5

        # radius: 700
        radius: [500, 700]
        # radius: [200px, 300px]

        position: [-73.97297501564027, 40.76434821445407, 100]

        # position: [0, 0, -300]
        # origin: camera

        # position: [0, 0, 300px]
        # origin: ground

    # spot1:
    #     type: spotlight
    #     position: [0, 0, 200]
    #     diffuse: 1
    #     # direction: [1, 0, 1]
    #     angle: 45
    #     exponent: 0.2
    #     radius: 1000.0
    #     cutoff: 0.0

# textures:
#     pois:
#         url: demos/images/poi_icons_32.png
#         filtering: mipmap
#         sprites:
#             # each sprite is defined as: [x origin, y origin, width, height]
#             plane: [0, 0, 32, 32]
#             tree: [0, 185, 32, 32]
#             sunburst: [0, 629, 32, 32]
#             restaurant: [0, 777, 32, 32]
#             cafe: [0, 814, 32, 32]
#             museum: [0, 518, 32, 32]

background:
    color: [0.475, 0.475, 0.8]

styles:

    water:
        base: polygons
        animated: true
        shaders:
            defines:
                EFFECT_NOISE_ANIMATED: true
            blocks:
                globals:
                    url: demos/shaders/glsl-noise-periodic-3d.glsl
                color: |
                    color.rgb *=
                        abs(pnoise(
                            (v_world_position.xyz + vec3(u_time * 5., u_time * 7.5, u_time * 10.)) / 10.0,
                            vec3(WORLD_POSITION_WRAP / 10.0))
                        ) / 4. + .75;

    colorbleed:
        base: polygons
        animated: true
        shaders:
            defines:
                EFFECT_COLOR_BLEED_ANIMATED: true
            blocks:
                # fragment: |
                color: |
                    //color .rgb += lighting * vec3(gl_FragCoord.x / u_resolution.x, 0.0, gl_FragCoord.y / u_resolution.y);
                    color .rgb += vec3(gl_FragCoord.x / u_resolution.x, 0.0, gl_FragCoord.y / u_resolution.y);
                    #if defined(EFFECT_COLOR_BLEED_ANIMATED)
                        //color.r += lighting.r * sin(u_time / 3.0);
                        color.r += sin(u_time / 3.0);
                    #endif

    rainbow:
        base: polygons
        animated: true
        lighting: false
        shaders:
            blocks:
                globals: |
                    vec3 hsv2rgb(vec3 c) {
                        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
                    }
                color: |
                    vec3 c = vec3(v_world_position.z * .003 + u_time / 10., 1.0, 1.0);
                    color.rgb = hsv2rgb(c);

    popup:
        url: demos/styles/popup.yaml

    elevator:
        base: polygons
        animated: true
        shaders:
            blocks:
                position: |
                    // Elevator buildings
                    if (position.z > 0.01) {
                        position.z *= (sin(position.z + u_time) + 1.0);
                    }

    breathe:
        url: demos/styles/breathe.yaml

    dots:
        url: demos/styles/dots.yaml

    wood:
        url: demos/styles/wood.yaml

    envmap:
        base: polygons
        animated: true
        # lighting: vertex
        material:
            ambient: 0
            diffuse: 0
            # normal:
            #     texture: demos/images/normal-0001.jpg
            #     mapping: planar
            #     scale: 0.01
            emission:
                texture: demos/images/sunset.jpg
                mapping: spheremap
            # specular: 1
            # shininess: 8

    halftone:
        url: demos/styles/halftone.yaml

    halftone_polygons:
        base: polygons
        mix: halftone

    halftone_lines:
        base: lines
        mix: halftone

    color_halftone:
        url: demos/styles/halftone.yaml

    color_halftone_polygons:
        base: polygons
        mix: color_halftone

    color_halftone_lines:
        base: lines
        mix: color_halftone

    windows:
        url: demos/styles/windows.yaml

    gradient_points:
        base: points
        shaders:
            defines:
                FADE_RANGE: .4
            blocks:
                color:
                    color.rgb *= (1. - smoothstep(.25, 1., dist)) + 0.5;
                    color.rgb += vec3(gl_FragCoord.x / u_resolution.x, 0.0, gl_FragCoord.y / u_resolution.y);

    icons:
        base: points
        # animated: true
        # blend: opaque
        # texture: pois
        # texture: demos/images/sunset.jpg
        texture:
            url: demos/images/poi_icons_32.png
            filtering: mipmap
            sprites:
                # each sprite is defined as: [x origin, y origin, width, height]
                plane: [0, 0, 32, 32]
                tree: [0, 185, 32, 32]
                sunburst: [0, 629, 32, 32]
                restaurant: [0, 777, 32, 32]
                cafe: [0, 814, 32, 32]
                museum: [0, 518, 32, 32]
        shaders:
            uniforms:
                rotate: false
            blocks:
                position: |
                    //shape.xy *= abs(sin(u_time * shape.x + shape.y) * cos(u_time + shape.y * 1.5));
                    //shape.z *= u_time;
                    //position.y += sin(position.y + u_time*3.) * 10.;
                    if (rotate == true) {
                        //shape.z += mod(position.y, 6.28) + u_time;
                        shape.z += u_time;
                    }
                color: |
                    //color.rgb = vec3(v_texcoord.xy, 0.);
                    //if (color.a < .5) {
                    //    color.rgb = vec3(1);
                    //}

    # transparent:
    #     base: polygons
    #     # animated: true
    #     blend: multiply
    #     # material:
    #     #     diffuse: 0 #0.3
    #     #     specular: [1, 0, 0]
    #     #     shininess: 8

    mixed:
        base: polygons
        mix: [popup, windows]
        # mix: [elevator, breathe, wood, dots]
        # material:
        #     specular: 1
        #     diffuse: 0

    # # depth view
    # depth:
    #     base: polygons
    #     shaders:
    #         blocks:
    #             color: |
    #                 color = vec4(vec3(v_position.z / 256.), 1.);
    #                 //color *= clamp(vec4(vec3(v_position.z / 256.), 1.), 0., 1.);

    #                 // http://stackoverflow.com/questions/6408851/draw-the-depth-value-in-opengl-using-shaders
    #                 /*float ndcDepth =
    #                     (2.0 * gl_FragCoord.z - gl_DepthRange.near - gl_DepthRange.far) /
    #                     (gl_DepthRange.far - gl_DepthRange.near);
    #                 float clipDepth = ndcDepth / gl_FragCoord.w;
    #                 color = vec4((clipDepth * 0.5) + 0.5);*/

sources:
    # When commented, demo main.js will set source based on URL - uncomment for testing
    # osm:
    #     type: GeoJSONTiles
    #     url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.json
    # schools:
    #     type: GeoJSON
    #     url: demos/data/school-districts-polygon.geojson

layers:

    earth:
        data: { source: osm }
        draw:
            polygons:
                order: 0
                color: [0.175, 0.175, 0.175]

    landuse:
        data: { source: osm }
        draw:
            polygons:
                order: 1
                interactive: true
                color: [0.5, 0.875, 0.5]

        pitch:
            filter:
                kind: [pitch, garden, playground]
            draw:
                polygons:
                    color: [0.3, 0.675, 0.3]
                    order: 1

        airports:
            filter: { kind: apron }
            draw:
                polygons:
                    color: lightyellow
                    order: 1

    water:
        data: { source: osm }
        draw:
            polygons:
                # style: water
                order: 3
                interactive: true
                color: [0.5, 0.5, 0.875]

        outlines:
            filter: { not: { kind: [ocean, river, riverbank, dock] }, $zoom: { min: 15 } }
            draw:
                lines:
                    order: 1
                    color: [0.6, 0.6, 0.975]
                    width: function() { return 2.5 * Math.log(zoom); }

    roads:
        data: { source: osm }
        draw:
            lines:
                order: |
                    function () {
                        function reduceSortKey(key) {
                            return 30 * Math.floor((key % 10000) / 1000) +
                                   10 * Math.floor((key % 1000) / 100) +
                                   1  * (key % 10);
                        }

                        var min = reduceSortKey(-3109);
                        var order = 5 + reduceSortKey(feature.sort_key) - min;
                        return order;
                    }
                # order: 5
                interactive: function () { return (zoom >= 18); }
                color: white

        outlines:
            filter: { aeroway: false }
            draw:
                outlines:
                    style: lines
                    order: 4 # road outlines underneath all roads

        airports:
            filter: { aeroway: true }
            taxiways:
                filter: { aeroway: taxiway }
                draw:
                    lines:
                        width: [[12, 1px], [13, 2px], [17, 10px]]
                        color: darkorange
                        cap: round
                    outlines:
                        cap: round

            runways:
                filter: { aeroway: runway }
                draw:
                    lines:
                        width: [[12, 5px], [13, 10px], [15, 30px], [17, 150px]]
                        color: orange
                        # order: 1

        not-airports:
            filter: { aeroway: false }

            rounded:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: round
                        join: round
                    outlines:
                        cap: round
                        join: round

            highway:
                filter: { kind: highway }
                draw:
                    lines:
                        color: [1.0, 1.0, 1.0]
                        width: function () { return 3 * Math.log(zoom); }
                    outlines:
                        color: [0.7, 0.7, 0.7]
                        width: function () { return (3 + 2 * 3/8) * Math.log(zoom); }

                tunnel:
                    filter: { is_tunnel: yes }
                    draw:
                        lines:
                            color: '#333'
                            width: function () { return 2 * Math.log(zoom); }
                        outlines:
                            color: white
                            width: function () { return (2 + 2) * Math.log(zoom); }

            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [0.5, 0.5, 0.5]
                        width: function () { return 2.5 * Math.log(zoom); }

                outlines:
                    filter: { $zoom: { min: 18 } }
                    draw:
                        outlines:
                            color: [0.7, 0.7, 0.7]
                            width: function () { return (2.5 + 2 * 3/8) * Math.log(zoom); }

            minor_road:
                filter: { kind: minor_road, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [0.65, 0.65, 0.65]
                        width: function () { return 2 * Math.log(zoom); }

                outlines:
                    filter: { $zoom: { min: 18 } }
                    draw:
                        outlines:
                            color: [0.7, 0.7, 0.7]
                            width: function () { return (2 + 2 * 2.5/8) * Math.log(zoom); }

            path:
                filter: { kind: path, $zoom: { min: 15 } }
                draw:
                    lines:
                        color: [0.8, 0.8, 0.8]
                        width: function () { return 1 * Math.log(zoom); }

                outlines:
                    filter: { $zoom: { min: 18 } }
                    draw:
                        outlines:
                            color: [0.7, 0.7, 0.7]
                            width: function () { return (1 + 2 * 2/8) * Math.log(zoom); }

            rail:
                filter: { kind: rail }
                draw:
                    lines:
                        color: [0.5, 0.0, 0.0]
                        width: function () { return 2 * Math.log(zoom); }

                outlines:
                    filter: { $zoom: { min: 18 } }
                    draw:
                        outlines:
                            color: [0.7, 0.7, 0.7]
                            width: function () { return (2 + 2 * 2/8) * Math.log(zoom); }

    buildings:
        data: { source: osm }

        # properties: { min_height: 150 }
        # filter: function () { return feature.height >= properties.min_height; }
        # filter: function () { return feature.name != null; }
        # filter: function () { return Math.random() < 0.25; }
        # filter: function () { return true; }

        draw:
            polygons:
                style: points
                size: 10px
                centroid: false
                order: 251
                interactive: true

                # color: function () { var h = feature.height || 20; h = Math.min((h + 50) / 250, 1.0); return [h, h, h]; } // shade based on height
                # color: Style.color.randomColor()
                # color: Style.color.pseudoRandomColor()
                # color: Style.color.pseudoRandomGrayscale()
                # color: [.6, .6, .6]
                # color: white
                color: lightgreen
                extrude: function () { return ((zoom >= 15 && feature.height > 20) || zoom >= 16) }
                # outline:
                #     color: white
                #     width: 2px
            lines:
                width: 2px
                color: white
                order: 250

        # blend:
        #     filter: { height: { min: 100 } }
        #     draw: { polygons: { style: transparent, color: yellow } }

        colors:
            name:
                filter: { name: true, kind: false }
                draw: { polygons: { color: [.6, .2, .2] } }

            kind:
                filter: { name: false, kind: true }
                draw: { polygons: { color: [.2, .2, .6] } }

            name-kind:
                filter: { name: true, kind: true }
                draw: { polygons: { color: [.6, .2, .6] } }

    building_outlines:
        data: { source: osm, layer: buildings }
        visible: false
        draw:
            lines:
                order: 251
                color: white
                width: 2px
                extrude: function () { return ((zoom >= 15 && feature.height > 20) || zoom >= 16) }

    road_labels:
        data: { source: osm, layer: roads }

        filter: { name: true, $zoom: { min: 14 } }
        draw:
            text:
                order: 5
                interactive: true

        major_road:
            filter: { kind: major_road, $zoom: { min: 14 } }
            draw:
                text:
                    font:
                        typeface: 12px Futura
                        fill: darkred
                        stroke: white
        minor_road:
            filter: { kind: minor_road, railway: false, $zoom: { min: 15 } }
            draw:
                text:
                    font:
                        typeface: 11px Futura
                        # fill: [0.8, 0.7, 0.7]
                        # stroke: [.31, .33, .31]
                        fill: [0.9, 0.9, 0.9]
                        stroke: [.31, .33, .31]

    pois:
        data: { source: osm }

        filter: { name: true, $zoom: { min: 17 } }

        draw:
            pois:
                # style: gradient_points
                # color: grey
                # order: 250

                style: text
                # text_source: kind
                # text_source: function() { return (Math.random() * 100).toFixed(); }
                font:
                    typeface: 11px Helvetica
                    fill: [.9, .9, .1]
                    stroke: black

                # style: icons
                # sprite: tree
                # size: [32px, 32px]
                size: [[13, 16px], [14, 24px], [15, 32px]]
                # size: function() { return (parseInt(feature.id, 16) % 100); }
                # color: white

                angle: 0
                # angle: function() { return (parseInt(feature.id, 16) % 360); }
                # scale: 1

                interactive: true

        z18:
            filter: { $zoom: { min: 18 } }
            draw:
                pois:
                    font:
                        typeface: 12px Helvetica

        # examples of different icons mapped to feature properties
        restaurant:
            filter: { kind: restaurant }
            draw:
                pois:
                    sprite: restaurant

        cafe:
            filter: { kind: cafe }
            draw:
                pois:
                    sprite: cafe

        culture:
            filter: { kind: [museum, library] }
            draw:
                pois:
                    style: icons
                    size: 32px
                    sprite: museum
                    color: white

    building_labels:
        data: { source: osm, layer: buildings }
        visible: false
        draw:
            text:
                order: 10
                # text_source: |
                    # function() { return feature.height > 100 ? 'high' : 'low';  }
                # text_source: height
                # text_source: |
                #     function() { return feature.height ? feature.height+'m' : ''; }
                font:
                    typeface: 12px Helvetica
                    fill: white
                    stroke: black

        filter:
            any:
                - { $zoom: { min: 18 } }
                # - { height: { min: 100 } }
                - function() { return feature.height > ((17 - zoom) * 100); }

        # high:
        #     filter: { height: { min: 100 } }
        #     draw:
        #         text:
        #             font:
        #                 fill: red
        #                 stroke: white

    places:
        data: { source: osm }
        filter: { name: true }

        # administrative:
            # filter: { kind: administrative }

        states:
            filter: { kind: state, $geometry: point }
            draw:
                text:
                    order: 6
                    # style: points
                    # interactive: true
                    font:
                        typeface: 14px Futura
                        fill: blue
                        stroke: white
