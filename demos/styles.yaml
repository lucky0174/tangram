cameras:
    perspective:
        type: perspective
        focal_length: [[16, 2], [17, 2.5], [18, 3], [19, 4], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [0, -500] # relative to center of screen, in pixels
        active: true

    isometric:
        type: isometric
        axis: [0, 1]
        active: false

    flat:
        type: flat
        active: false

lights:
    directional1:
        type: directional
        direction: [.5, 0, -1] #[0.1, 0.1, -1]
        diffuse: .4
        ambient: .8

    night:
        type: directional
        direction: [.5, 0, -1] #[0.1, 0.1, -1]
        diffuse: .4
        ambient: .8
        visible: false

background:
    color: [.62, .85, 1.0]

styles:

    water:
        base: polygons
        animated: true
        shaders:
            defines:
                EFFECT_NOISE_ANIMATED: true
            blocks:
                globals:
                    url: demos/shaders/glsl-noise-periodic-3d.glsl
                color: |
                    color.rgb *=
                        abs(pnoise(
                            (v_world_position.xyz + vec3(u_time * 5., u_time * 7.5, u_time * 10.)) / 10.0,
                            vec3(WORLD_POSITION_WRAP / 10.0))
                        ) / 4. + .75;

    rainbow:
        base: polygons
        animated: true
        lighting: false
        shaders:
            blocks:
                globals: |
                    vec3 hsv2rgb(vec3 c) {
                        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
                    }
                color: |
                    vec3 c = vec3(v_world_position.z * .003 + u_time / 10., 1.0, 1.0);
                    color.rgb = hsv2rgb(c);

    popup:
        url: demos/styles/popup.yaml

    elevator:
        base: polygons
        animated: true
        shaders:
            blocks:
                position: |
                    // Elevator buildings
                    if (position.z > 0.01) {
                        position.z *= (sin(position.z + u_time) + 1.0);
                    }

    envmap:
        base: polygons
        animated: true
        material:
            ambient: 0
            diffuse: 0
            emission:
                texture: demos/images/sunset.jpg
                mapping: spheremap

    halftone:
        url: demos/styles/halftone.yaml

    windows:
        url: demos/styles/windows.yaml

sources:
    # When commented, demo main.js will set source based on URL - uncomment for testing
    # osm:
    #     type: GeoJSONTiles
    #     url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.json
    # schools:
    #     type: GeoJSON
    #     url: demos/data/school-districts-polygon.geojson

layers:
    earth:
        data: { source: osm }
        style:
            order: 0
            color: '#ddd'

    landuse:
        data: { source: osm }
        filter: { kind: [park, graveyard] }
        style:
            order: 1
            color: '#A0DC99'
            interactive: true

    water:
        data: { source: osm }
        style:
            order: 2
            color: '#88bbee'

    roads:
        data: { source: osm }
        filter:
            not: { kind: ["path", "rail"] }
        style:
            # name: lines
            color: lightgrey
            order: |
                function () {
                    function reduceSortKey(key) {
                        return 30 * Math.floor((key % 10000) / 1000) +
                               10 * Math.floor((key % 1000) / 100) +
                               1  * (key % 10);
                    }

                    var min = reduceSortKey(-3109);
                    var order = 3 + reduceSortKey(feature.sort_key) - min;
                    return order;
                }
            interactive: function () { return (zoom >= 18); }
            width: 5

        highway:
            filter: { kind: highway }
            style:
                color: '#cc6666'
                width: 12
                outline:
                    color: grey
                    width: 3
            link:
                filter: { is_link: yes }
                style:
                    color: '#aaa'
                    outline:
                        width: 0
        major_road:
            filter:
                kind: major_road
            style:
                width: 8

        airports:
            filter: { aeroway: true }
            style:
                color: '#ccc'

            taxiways:
                filter: { aeroway: taxiway }
                style:
                    width: [[13, 0px], [14, 2px], [17, 10px]]
                    color: '#ddd'

            runways:
                filter: { aeroway: runway }
                style:
                    width: [[12, 5px], [13, 10px], [15, 75]]
                    order: 1


    buildings:
        data: { source: osm }
        style:
            order: 1000
            color: |
                function () {
                    var h = feature.height || 20;
                    h = Math.min((h + 50)/ 250, .8);
                    h = Math.max(h, .8);
                    return [h, h, h];
                }
            extrude: true

    road_labels:
        data: { source: osm, layer: roads }

        filter: { name: true, $zoom: { min: 13 }, aeroway: false, tunnel: false, railway: false }
        style:
            name: text
            # visible: false
            order: 6
            interactive: true
            font:
                typeface: 12px Lucida Grande
                fill: '#333'
                stroke: white

        major_road:
            filter: { kind: major_road, $zoom: { min: 14 } }
        minor_road:
            filter: { kind: minor_road, railway: false, $zoom: { min: 15 } }
            style:
                font:
                    typeface: 11px Lucida Grande

    pois:
        data: { source: osm }
        filter: { name: true, $zoom: { min: 17 } }
        style:
            name: text
            font:
                typeface: bold 11px Lucida Grande
                fill: dark red
                stroke: white
            interactive: true

        z18:
            filter: { $zoom: { min: 18 } }
            style:
                font:
                    typeface: 12px Lucida Grande

    places:
        data: { source: osm }
        filter: { name: true }
        style:
            name: text
            font:
                typeface: Italic 15pt Lucida Grande
                fill: black
                stroke: { color: white, width: 3 }