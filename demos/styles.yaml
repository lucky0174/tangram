cameras:
    perspective:
        type: perspective
        # focal_length: 1
        focal_length: [[16, 2], [17, 2.5], [18, 3], [19, 4], [20, 6]] # pairs of [zoom, focal len]
        # fov: 60
        # fov: [[16, 60], [20, 15]]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels
        active: true

    isometric:
        type: isometric
        # axis: [1, .5]
        # active: true

    flat:
        type: flat

    # testing camera with a location
    central_park:
        position: { lng: -73.97297501564027, lat: 40.76434821445407 }
        zoom: 17

        # position: { lng: -73.97297501564027, lat: 40.76434821445407, height: 500 }

        # position: [-73.97297501564027, 40.76434821445407, 500]

        # position: { lng: -73.97297501564027, lat: 40.76434821445407 }
        # height: 500

        # origin: camera

lights:
    ambient1:
        type: ambient
        ambient: .3

    directional1:
        type: directional
        direction: [.5, 0, -1] #[0.1, 0.1, -1]
        diffuse: .5
        specular: .2
        ambient: .2

    point1:
        type: point

        ambient: .2
        diffuse: red #.7
        specular: .2
        # diffuse: .3
        # attenuation: 1.5

        # radius: 700
        radius: [500, 700]
        # radius: [200px, 300px]

        position: [-73.97297501564027, 40.76434821445407, 100]

        # position: [0, 0, -300]
        # origin: camera

        # position: [0, 0, 300px]
        # origin: ground

    # spot1:
    #     type: spotlight
    #     position: [0, 0, 200]
    #     diffuse: 1
    #     # direction: [1, 0, 1]
    #     angle: 45
    #     exponent: 0.2
    #     radius: 1000.0
    #     cutoff: 0.0

# textures:
#     pois:
#         url: demos/images/poi_icons_32.png
#         filtering: mipmap
#         sprites:
#             # each sprite is defined as: [x origin, y origin, width, height]
#             plane: [0, 0, 32, 32]
#             tree: [0, 185, 32, 32]
#             sunburst: [0, 629, 32, 32]
#             restaurant: [0, 777, 32, 32]
#             cafe: [0, 814, 32, 32]
#             museum: [0, 518, 32, 32]

background:
    color: [0.475, 0.475, 0.8]

styles:

    transparent:
        extends: polygons
        # animated: true
        blend: multiply
        # material:
        #     diffuse: 0 #0.3
        #     specular: [1, 0, 0]
        #     shininess: 8

    water:
        extends: polygons
        animated: true
        shaders:
            defines:
                EFFECT_NOISE_ANIMATED: true
            blocks:
                globals:
                    url: demos/shaders/glsl-noise-periodic-3d.glsl
                color:
                    url: demos/shaders/noise.glsl

    colorbleed:
        extends: polygons
        animated: true
        shaders:
            defines:
                EFFECT_COLOR_BLEED_ANIMATED: true
            blocks:
                # fragment: |
                color: |
                    //color .rgb += lighting * vec3(gl_FragCoord.x / u_resolution.x, 0.0, gl_FragCoord.y / u_resolution.y);
                    color .rgb += vec3(gl_FragCoord.x / u_resolution.x, 0.0, gl_FragCoord.y / u_resolution.y);
                    #if defined(EFFECT_COLOR_BLEED_ANIMATED)
                        //color.r += lighting.r * sin(u_time / 3.0);
                        color.r += sin(u_time / 3.0);
                    #endif

    rainbow:
        extends: polygons
        animated: true
        lighting: false
        shaders:
            blocks:
                globals: |
                    vec3 hsv2rgb(vec3 c) {
                        vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
                    }
                color: |
                    vec3 c = vec3(v_world_position.z * .003 + u_time / 10., 1.0, 1.0);
                    color.rgb = hsv2rgb(c);

    popup:
        url: demos/styles/popup.yaml

    elevator:
        extends: polygons
        animated: true
        shaders:
            blocks:
                position: |
                    // Elevator buildings
                    if (position.z > 0.01) {
                        position.z *= (sin(position.z + u_time) + 1.0);
                    }

    breathe:
        url: demos/styles/breathe.yaml

    dots:
        url: demos/styles/dots.yaml

    wood:
        url: demos/styles/wood.yaml

    envmap:
        extends: polygons
        animated: true
        # lighting: vertex
        material:
            # normal:
            #     texture: demos/images/normal-0001.jpg
            #     mapping: planar
            #     scale: 0.01
            emission:
                texture: demos/images/sunset.jpg
                mapping: spheremap
            # specular: 1
            # shininess: 8

    halftone:
        url: demos/styles/halftone.yaml

    colorhalftone:
        url: demos/styles/halftone.yaml

    windows:
        url: demos/styles/windows.yaml

    points:
        shaders:
            blocks:
                color: color.rgb += vec3(gl_FragCoord.x / u_resolution.x, 0.0, gl_FragCoord.y / u_resolution.y);

    icons:
        extends: sprites
        animated: true
        # blend: multiply
        # texture: pois
        # texture: demos/images/sunset.jpg
        texture:
            url: demos/images/poi_icons_32.png
            filtering: mipmap
            sprites:
                # each sprite is defined as: [x origin, y origin, width, height]
                plane: [0, 0, 32, 32]
                tree: [0, 185, 32, 32]
                sunburst: [0, 629, 32, 32]
                restaurant: [0, 777, 32, 32]
                cafe: [0, 814, 32, 32]
                museum: [0, 518, 32, 32]

        shaders:
            uniforms:
                rotate: false
            blocks:
                position: |
                    //shape.xy *= abs(sin(u_time * shape.x + shape.y) * cos(u_time + shape.y * 1.5));
                    //shape.z *= u_time;
                    //position.y += sin(position.y + u_time*3.) * 10.;
                    if (rotate == true) {
                        //shape.z += mod(position.y, 6.28) + u_time;
                        shape.z += u_time;
                    }
                color: |
                    //color.rgb = vec3(v_texcoord.xy, 0.);
                    //if (color.a < .5) {
                    //    color.rgb = vec3(1);
                    //}

    # text:
    #     selection: true
    #     animated: true
    #     shaders:
    #         blocks:
    #             position: |
    #                 shape.z = (shape.z + 0.01) * u_time * .75;
    #             # color: |
    #             #     color.rgb = vec3(v_texcoord.xy, 0.);

    uv_test:
        extends: polygons
        texcoords: true
        shaders:
            blocks:
                color: |
                    color.rgb = vec3(v_texcoord.xy, 0.);
                    //color.rgb = vec3(v_texcoord.x, mod(v_texcoord.y + u_time/2., 1.), 0.);
                    //color.rgb = texture2D(u_texture, uv).rgb;

    # depth view
    depth:
        extends: polygons
        shaders:
            blocks:
                color: |
                    color = vec4(vec3(v_position.z / 256.), 1.);
                    //color *= clamp(vec4(vec3(v_position.z / 256.), 1.), 0., 1.);

                    // http://stackoverflow.com/questions/6408851/draw-the-depth-value-in-opengl-using-shaders
                    /*float ndcDepth =
                        (2.0 * gl_FragCoord.z - gl_DepthRange.near - gl_DepthRange.far) /
                        (gl_DepthRange.far - gl_DepthRange.near);
                    float clipDepth = ndcDepth / gl_FragCoord.w;
                    color = vec4((clipDepth * 0.5) + 0.5);*/


sources:
    # When commented, demo main.js will set source based on URL - uncomment for testing
    # osm:
    #     type: GeoJSONTileSource
    #     url:  http://vector.mapzen.com/osm/all/{z}/{x}/{y}.json
    # schools:
    #     type: GeoJSONSource
    #     url: demos/data/school-districts-polygon.geojson

layers:

    earth:
        data: { source: osm }
        style:
            order: 0
            color: [0.175, 0.175, 0.175]

    landuse:
        data: { source: osm }
        style:
            order: 1
            interactive: true
            color: [0.5, 0.875, 0.5]

        pitch:
            filter:
                kind: [pitch, garden, playground]
            style:
                color: [0.3, 0.675, 0.3]
                order: 1

        airports:
            filter: { kind: apron }
            style:
                color: lightyellow
                order: 1

    water:
        data: { source: osm }
        style:
            # name: water
            order: 3
            interactive: true
            color: [0.5, 0.5, 0.875]

        outlines:
            filter: { not: { kind: [ocean, riverbank, dock] }, $zoom: { min: 15 } }
            style:
                outline:
                    color: [0.6, 0.6, 0.975]
                    width: function() { return 2.5 * Math.log(zoom); }

    roads:
        data: { source: osm }

        style:
            order: |
                function () {
                    function reduceSortKey(key) {
                        return 30 * Math.floor((key % 10000) / 1000) +
                               10 * Math.floor((key % 1000) / 100) +
                               1  * (key % 10);
                    }

                    var min = reduceSortKey(-3109);
                    var order = 4 + reduceSortKey(feature.sort_key) - min;
                    return order;
                }
            # order: 5
            interactive: function () { return (zoom >= 18); }
            # color: Style.color.pseudoRandomColor()

        airports:
            filter: { aeroway: true }

            taxiways:
                filter: { aeroway: taxiway }
                style:
                    width: [[12, 1px], [13, 2px], [17, 10px]]
                    color: darkorange
                    cap: round

            runways:
                filter: { aeroway: runway }
                style:
                    width: [[12, 5px], [13, 10px], [15, 30px], [17, 150px]]
                    color: orange
                    order: 1

        not-airports:
            filter: { aeroway: false }

            rounded:
                filter: { $zoom: { min: 17 }, is_bridge: no }
                style:
                    cap: round
                    join: round

            # bridges:
            #     filter: { is_bridge: yes }
            #     style:
            #         orderReset: true
            #         order: 2

            highway:
                filter: { kind: highway }
                style:
                    color: [1.0, 1.0, 1.0]
                    # color: red
                    # color: [[13, [0, 0, 1.]], [17, [1, .5, .5]]]
                    # color: [[13, 'darkorchid'], [17, 'honeydew']]
                    # color: [[13, 'hsl(900, 40%, 60%)'], [17, 'hsl(700, 90%, 80%)']]
                    width: function () { return 3 * Math.log(zoom); }
                    # width: Style.zoomPow(3, 1)
                    # width: [[13, 3px], [15, 5px], [16, 20px]]
                    # width: [[10, 2px], [13, 3px], [15, 5px], [16, 8px], [18, 12px]]

                outline:
                    filter: { $zoom: { min: 15 } }
                    style:
                        outline:
                            color: [0.7, 0.7, 0.7]
                            width: function () { return 3/8 * Math.log(zoom); }

                    # bridge:
                    #     filter: { is_bridge: yes }
                    #     style:
                    #         outline:
                    #             # don't draw outline caps on bridges because they draw over connecting non-bridge roads
                    #             # see FDR Drive: 40.70278074491014,-74.00795169174671,20
                    #             cap: butt

                tunnel:
                    # filter: function() { return feature.is_link == 'yes' || feature.is_tunnel == 'yes'; }
                    filter: { is_tunnel: yes }
                    style:
                        color: '#333'
                        width: function () { return 2 * Math.log(zoom); }
                        # width: [[13, 0px], [15, 4px], [16, 6px], [18, 10px]]
                    outline:
                        filter: { $zoom: { min: 15 } }
                        style:
                            outline:
                                color: white
                                # width: [[15, 2px], [18, 6px]]
                                # width: 2px
                                width: function () { return 1 * Math.log(zoom); }

            major_road:
                filter: { kind: major_road }
                style:
                    color: [0.5, 0.5, 0.5]
                    width: function () { return 2.5 * Math.log(zoom); }
                outline:
                    filter: { $zoom: { min: 15 } }
                    style:
                        outline:
                            color: [0.7, 0.7, 0.7]
                            width: function () { return (zoom >= 18 && (3/8 * Math.log(zoom))); }

            minor_road:
                filter: { kind: minor_road, $zoom: { min: 13 } }
                style:
                    color: [0.65, 0.65, 0.65]
                    width: function () { return 2 * Math.log(zoom); }
                outline:
                    filter: { $zoom: { min: 15 } }
                    style:
                        outline:
                            color: [0.7, 0.7, 0.7]
                            width: function () { return (zoom >= 18 && (2.5/8 * Math.log(zoom))); }

            path:
                filter: { kind: path, $zoom: { min: 15 } }
                style:
                    color: [0.8, 0.8, 0.8]
                    # color: yellow
                    width: function () { return 1 * Math.log(zoom); }
                    outline:
                        color: [0.7, 0.7, 0.7]
                        width: function () { return (zoom >= 18 && (2/8 * Math.log(zoom))); }

            rail:
                filter: { kind: rail }
                style:
                    color: [0.5, 0.0, 0.0]
                    width: function () { return 2 * Math.log(zoom); }
                outline:
                    filter: { $zoom: { min: 15 } }
                    style:
                        outline:
                            color: [0.7, 0.7, 0.7]
                            width: function () { return (zoom >= 18 && (2/8 * Math.log(zoom))); }


    road_labels:
        data: { source: osm, layer: roads }

        filter: { name: true, $zoom: { min: 14 } }
        style:
            name: text
            # visible: false
            order: 5
            interactive: true
            # font:
            #     typeface: Helvetica
            #     size: 12px
            #     fill: white
            #     stroke: black

        major_road:
            filter: { kind: major_road, $zoom: { min: 14 } }
            style:
                font:
                    size: 14px
                    typeface: Futura
                    fill: darkred
                    stroke: white
        minor_road:
            filter: { kind: minor_road, railway: false, $zoom: { min: 15 } }
            style:
                font:
                    size: 12px
                    typeface: Futura
                    # fill: [0.8, 0.7, 0.7]
                    # stroke: [.31, .33, .31]
                    fill: [0.9, 0.9, 0.9]
                    stroke: [.31, .33, .31]

    buildings:
        data: { source: osm }

        # properties: { min_height: 150 }
        # filter: function () { return feature.height >= properties.min_height; }
        # filter: function () { return feature.name != null; }
        # filter: function () { return Math.random() < 0.25; }
        # filter: function () { return true; }

        style:
            order: 250
            interactive: true

            # color: function () { var h = feature.height || 20; h = Math.min((h + 50) / 250, 1.0); return [h, h, h]; } // shade based on height
            # color: Style.color.randomColor()
            # color: Style.color.pseudoRandomColor()
            # color: Style.color.pseudoRandomGrayscale()
            color: [.6, .6, .6]
            # color: white
            extrude: function () { return ((zoom >= 15 && feature.height > 20) || zoom >= 16) }

        # blend:
        #     filter: { height: { min: 100 } }
        #     style: { name: transparent, color: yellow }

        colors:
            name:
                filter: { name: true, kind: false }
                style: { color: [.6, .2, .2] }

            kind:
                filter: { name: false, kind: true }
                style: { color: [.2, .2, .6] }

            name-kind:
                filter: { name: true, kind: true }
                style: { color: [.6, .2, .6] }

    pois:
        data: { source: osm }

        filter: { name: true, $zoom: { min: 17 } }

        style:
            # name: points
            # size: [[12, 6px], [13, 10px]]
            # order: 3400

            # name: text
            font:
                size: 12px
                typeface: Helvetica
                fill: [.9, .9, .1]
                stroke: black

            # name: icons
            # sprite: tree
            # size: [32px, 32px]
            # size: [[13, 16px], [14, 24px], [15, 32px]]
            # size: function() { return (parseInt(feature.id, 16) % 100); }
            color: white

            angle: 0
            # angle: function() { return (parseInt(feature.id, 16) % 360); }
            # scale: 1

            interactive: true

        # z17:
        #     filter: { $zoom: { min: 17, max: 18 } }
        #     style:
        #         scale: 3

        # z18:
        #     filter: { $zoom: { min: 18 } }
        #     style:
        #         size: [64, 64] #px

        # examples of different icons mapped to feature properties
        restaurant:
            filter: { kind: restaurant }
            style:
                sprite: restaurant

        cafe:
            filter: { kind: cafe }
            style:
                sprite: cafe

        culture:
            filter: { kind: [museum, library] }
            style:
                name: icons
                size: 32px
                sprite: museum

    places:
        data: { source: osm }

        filter: { name: true }

        style:
            name: text
            visible: false
            # interactive: true
            font:
                size: 12px
                typeface: Courier
                fill: black
                stroke: white

